{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.14", "generated_at": "2024-05-13T02:13:22.248472Z", "invocation_id": "cbbe5a81-67d0-4459-9634-487e3a611dbc", "env": {}, "project_name": "promise_dwh", "project_id": "1f3018e0f7ea00de253f7f5ae04eeb6b", "user_id": "52dc1229-3518-4800-a0a8-ff0735ccf924", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.promise_dwh.customer": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "customer", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/customer.sql", "original_file_path": "models/promisepay/customer.sql", "unique_id": "model.promise_dwh.customer", "fqn": ["promise_dwh", "promisepay", "customer"], "alias": "customer", "checksum": {"name": "sha256", "checksum": "9edb4c818d5944c29b096d96d9fac6aa46ffd81dec328c2183749632f8cc9183"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay"}, "created_at": 1715379615.533112, "relation_name": "`analytics-prod-328313`.`promisepay`.`customer`", "raw_code": "{%- for project in get_all_project_ids() %}\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        {{ generate_cloud_table_name(project, this.name) }}\n    {% if not loop.last -%} UNION ALL {%- endif %}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/customer.sql", "compiled": true, "compiled_code": "\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `alexrenew-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `baltimore-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `buffalo-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `cal-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `centralarkansas-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `corona-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `gcww-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `hrsd-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `jackson-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `louisville-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `newark-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `newportnews-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `nola-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `richmond-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `sj-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `toledo-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `veoliany-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `wssc-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.customer`\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.customer_communication": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "customer_communication", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/customer_communication.sql", "original_file_path": "models/promisepay/customer_communication.sql", "unique_id": "model.promise_dwh.customer_communication", "fqn": ["promise_dwh", "promisepay", "customer_communication"], "alias": "customer_communication", "checksum": {"name": "sha256", "checksum": "2e99e7c011893c4e2bfcc8de3b7f01df27bf37cae62bf400c044b3bedc4756cc"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": ["test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["test"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay", "tags": ["test"]}, "created_at": 1715379615.548854, "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_communication`", "raw_code": "{{ config(\n    tags=\"test\"\n) }}\n\n{%- for project in get_all_project_ids() %}\n    SELECT *\n    FROM\n        {{ generate_cloud_table_name(project, this.name) }}\n    {% if not loop.last -%} UNION ALL {%- endif %}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/customer_communication.sql", "compiled": true, "compiled_code": "\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.customer_communication`\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.survey_wide": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "survey_wide", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/survey_wide.sql", "original_file_path": "models/promisepay/survey_wide.sql", "unique_id": "model.promise_dwh.survey_wide", "fqn": ["promise_dwh", "promisepay", "survey_wide"], "alias": "survey_wide", "checksum": {"name": "sha256", "checksum": "a879463cad7f12482607febbc306a63542ede8ed5cc08e465f7b1bd4fa18c62e"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay"}, "created_at": 1715379615.5692768, "relation_name": "`analytics-prod-328313`.`promisepay`.`survey_wide`", "raw_code": "{% if target.name=='dev' %}\n{{ config(enabled=false) }}\n{% endif %}\nSELECT\n    survey_response_id\n    , created_at\n    , client_id\n    , jurisdiction,\n    -- there is only one response per client per created_at\n    -- 'max' is getting max string from empty strings + response string\n    {{\n        dbt_utils.pivot(\n            \"question\",\n            dbt_utils.get_column_values(ref(\"stg__survey_long\"), \"question\"),\n            agg='max',\n            then_value='response',\n            else_value='\"\"'\n        )\n    }}\nFROM {{ ref(\"stg__survey_long\") }}\nGROUP BY 1, 2, 3, 4", "language": "sql", "refs": [{"name": "stg__survey_long", "package": null, "version": null}, {"name": "stg__survey_long", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.pivot", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": ["model.promise_dwh.stg__survey_long"]}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/survey_wide.sql", "compiled": true, "compiled_code": "\nSELECT\n    survey_response_id\n    , created_at\n    , client_id\n    , jurisdiction,\n    -- there is only one response per client per created_at\n    -- 'max' is getting max string from empty strings + response string\n    \n  \n    max(\n      \n      case\n      when question = 'pastDueBalance'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `pastDueBalance`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'totalBalance'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `totalBalance`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'numPeopleInHousehold'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `numPeopleInHousehold`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Ssi'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Ssi`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'householdMonthlyIncome'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `householdMonthlyIncome`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'waterBalance'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `waterBalance`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'waterPastDueBalance'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `waterPastDueBalance`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'sixtyFiveOrOlder'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `sixtyFiveOrOlder`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'federalPovertyLineRange'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `federalPovertyLineRange`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'disabled'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `disabled`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'veteran'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `veteran`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'accountHolder'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `accountHolder`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'homeowner'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `homeowner`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Snap'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Snap`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'benefits_none'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `benefits_none`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Ohep'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Ohep`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Tca'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Tca`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Tdap'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Tdap`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Erap'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Erap`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'paperlessBilling'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `paperlessBilling`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Liheap'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Liheap`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'SnapEbt'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `SnapEbt`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Tanf'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Tanf`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'VeteransBenefits'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `VeteransBenefits`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'VeteranBenefits'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `VeteranBenefits`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'residentOfAddress'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `residentOfAddress`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'TemporaryOrPublicAssistance'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `TemporaryOrPublicAssistance`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'accountHolderInHousehold'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `accountHolderInHousehold`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Heap'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Heap`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hasLeaseWithWaterResponsibility'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hasLeaseWithWaterResponsibility`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hasLeaseWithMonthlyAmountOrInvoice'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hasLeaseWithMonthlyAmountOrInvoice`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_socialMedia'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_socialMedia`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_dpwSite'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_dpwSite`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_sms'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_sms`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_friend'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_friend`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_community'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_community`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_billInsert'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_billInsert`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_dpwCallCenter'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_dpwCallCenter`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_none'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_none`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'cityResident'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `cityResident`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'groups_none'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `groups_none`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'oneMeter'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `oneMeter`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'ownerAgreement'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `ownerAgreement`\n      \n    \n    \n  \n\nFROM `analytics-prod-328313`.`promisepay`.`stg__survey_long`\nGROUP BY 1, 2, 3, 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.customer_version": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "customer_version", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/customer_version.sql", "original_file_path": "models/promisepay/customer_version.sql", "unique_id": "model.promise_dwh.customer_version", "fqn": ["promise_dwh", "promisepay", "customer_version"], "alias": "customer_version", "checksum": {"name": "sha256", "checksum": "d7e582995e8675e7b74f13fd9a6decaa0210b96639c4f51f6eb157b360597887"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay"}, "created_at": 1715379615.582311, "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_version`", "raw_code": "{%- for project in get_all_project_ids() %}\n    SELECT *\n    FROM\n        {{ generate_cloud_table_name(project, this.name) }}\n    {% if not loop.last -%} UNION ALL {%- endif %}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/customer_version.sql", "compiled": true, "compiled_code": "\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.customer_version`\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.stg__survey_paths": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "stg__survey_paths", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/stg__survey_paths.sql", "original_file_path": "models/promisepay/stg__survey_paths.sql", "unique_id": "model.promise_dwh.stg__survey_paths", "fqn": ["promise_dwh", "promisepay", "stg__survey_paths"], "alias": "stg__survey_paths", "checksum": {"name": "sha256", "checksum": "2ad76d4cfae77f4c0a43b646625168c7a8f7dddd061821a1fa0897805282bb0f"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "survey_json_path", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay", "unique_key": "survey_json_path"}, "created_at": 1715379615.587894, "relation_name": "`analytics-prod-328313`.`promisepay`.`stg__survey_paths`", "raw_code": "{{ config(\n      unique_key='survey_json_path')\n}}\n{% if target.name=='dev' %}\n{{ config(enabled=false) }}\n{% endif %}\n\nWITH\n-- join all jurx surveys then extract attributes\nall_surveys AS (\n    {%- for project in get_all_project_ids() %}\n        SELECT *\n        FROM\n            {{ generate_cloud_table_name(project, 'survey') }}\n        {% if not loop.last -%} UNION ALL {%- endif %}\n    {% endfor %}\n)\n\n-- use js functions to unpack JSONs\nSELECT DISTINCT survey_key AS survey_json_path\nFROM all_surveys,\n    UNNEST([STRUCT({{ this.schema }}.jsonNestedExtract(survey_response) AS leaves)]),\n    UNNEST({{ this.schema }}.jsonObjectKeys(leaves)) AS survey_key\nWHERE\n    -- there a few cases in Buffalo of duplicate fields [Heap, HEAP; Snap, SNAP; Ssi, SSI]\n    -- causes duplicate col names error\n    -- confirmed on 2024-03-01 all values are NULL or FALSE, so just exclude\n    NOT REGEXP_CONTAINS(survey_key, \"benefits.[A-Z]{3,4}$\")\n    -- don't need app-specific fields\n    AND NOT survey_key LIKE \"%doesGivePermissionToShareInformation\"\n    AND NOT survey_key LIKE \"%BREADCRUMBS%\"\n    AND NOT survey_key LIKE \"%COMPLETE%\"\n    AND NOT survey_key LIKE \"%FormQuestions%\"", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/stg__survey_paths.sql", "compiled": true, "compiled_code": "\n\n\nWITH\n-- join all jurx surveys then extract attributes\nall_surveys AS (\n        SELECT *\n        FROM\n            \n        `alexrenew-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `baltimore-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `buffalo-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `cal-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `centralarkansas-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `corona-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `gcww-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `hrsd-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `jackson-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `louisville-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newark-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newportnews-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `nola-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `richmond-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `sj-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `toledo-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `veoliany-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `wssc-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `florida-lihwap-pay.analytics_promisepay_prod.survey`\n        \n    \n)\n\n-- use js functions to unpack JSONs\nSELECT DISTINCT survey_key AS survey_json_path\nFROM all_surveys,\n    UNNEST([STRUCT(promisepay.jsonNestedExtract(survey_response) AS leaves)]),\n    UNNEST(promisepay.jsonObjectKeys(leaves)) AS survey_key\nWHERE\n    -- there a few cases in Buffalo of duplicate fields [Heap, HEAP; Snap, SNAP; Ssi, SSI]\n    -- causes duplicate col names error\n    -- confirmed on 2024-03-01 all values are NULL or FALSE, so just exclude\n    NOT REGEXP_CONTAINS(survey_key, \"benefits.[A-Z]{3,4}$\")\n    -- don't need app-specific fields\n    AND NOT survey_key LIKE \"%doesGivePermissionToShareInformation\"\n    AND NOT survey_key LIKE \"%BREADCRUMBS%\"\n    AND NOT survey_key LIKE \"%COMPLETE%\"\n    AND NOT survey_key LIKE \"%FormQuestions%\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.transaction_fee_configs": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "transaction_fee_configs", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/transaction_fee_configs.sql", "original_file_path": "models/promisepay/transaction_fee_configs.sql", "unique_id": "model.promise_dwh.transaction_fee_configs", "fqn": ["promise_dwh", "promisepay", "transaction_fee_configs"], "alias": "transaction_fee_configs", "checksum": {"name": "sha256", "checksum": "d17f4b3a9cb5b98348f54d090deb42cbc2e7d86cdc22536ab96ccbf031b56394"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": ["biz_rules"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["biz_rules"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay", "tags": ["biz_rules"]}, "created_at": 1715379615.643656, "relation_name": "`analytics-prod-328313`.`promisepay`.`transaction_fee_configs`", "raw_code": "{{\n   config(\n      tags = [\"biz_rules\"]\n   )\n}}\n{%- for project in get_all_project_ids() %}\n    SELECT *\n    FROM\n        {{ generate_cloud_table_name(project, this.name) }}\n    {% if not loop.last -%} UNION ALL {%- endif %}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/transaction_fee_configs.sql", "compiled": true, "compiled_code": "\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.transaction_fee_configs`\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.client_comms_recipient": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "client_comms_recipient", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/client_comms_recipient.sql", "original_file_path": "models/promisepay/client_comms_recipient.sql", "unique_id": "model.promise_dwh.client_comms_recipient", "fqn": ["promise_dwh", "promisepay", "client_comms_recipient"], "alias": "client_comms_recipient", "checksum": {"name": "sha256", "checksum": "ac3eacba77aa5ef65ed9b251130075adb2bc5560a44e97e6511c1e979375b005"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["template_type", "template_name"], "partition_by": {"field": "created_time", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay", "partition_by": {"field": "created_time", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["template_type", "template_name"]}, "created_at": 1715379615.6488771, "relation_name": "`analytics-prod-328313`.`promisepay`.`client_comms_recipient`", "raw_code": "{{\n   config(\n      materialized=\"table\",\n      partition_by={\n         \"field\": \"created_time\",\n         \"data_type\": \"timestamp\",\n         \"granularity\": \"day\"\n      },\n      cluster_by=[\"template_type\", \"template_name\"],\n   )\n}}\nSELECT\n    customer_id AS client_id,\n    REPLACE(jurisdiction, \"_\", \"\") AS jurisdiction,\n    CONCAT(REPLACE(jurisdiction, \"_\", \"\"), customer_id)\n        AS jurisdiction_x_client_id,\n    SAFE_CAST(created_at AS TIMESTAMP) AS created_time,\n    template_type,\n    template_name,\n    template_version_id\nFROM\n    {{ ref('customer_communication_combined') }}", "language": "sql", "refs": [{"name": "customer_communication_combined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": ["model.promise_dwh.customer_communication_combined"]}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/client_comms_recipient.sql", "compiled": true, "compiled_code": "\nSELECT\n    customer_id AS client_id,\n    REPLACE(jurisdiction, \"_\", \"\") AS jurisdiction,\n    CONCAT(REPLACE(jurisdiction, \"_\", \"\"), customer_id)\n        AS jurisdiction_x_client_id,\n    SAFE_CAST(created_at AS TIMESTAMP) AS created_time,\n    template_type,\n    template_name,\n    template_version_id\nFROM\n    `analytics-prod-328313`.`promisepay`.`customer_communication_combined`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.payment_plan_event_history": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "payment_plan_event_history", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/payment_plan_event_history.sql", "original_file_path": "models/promisepay/payment_plan_event_history.sql", "unique_id": "model.promise_dwh.payment_plan_event_history", "fqn": ["promise_dwh", "promisepay", "payment_plan_event_history"], "alias": "payment_plan_event_history", "checksum": {"name": "sha256", "checksum": "d7e582995e8675e7b74f13fd9a6decaa0210b96639c4f51f6eb157b360597887"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay"}, "created_at": 1715379615.6541922, "relation_name": "`analytics-prod-328313`.`promisepay`.`payment_plan_event_history`", "raw_code": "{%- for project in get_all_project_ids() %}\n    SELECT *\n    FROM\n        {{ generate_cloud_table_name(project, this.name) }}\n    {% if not loop.last -%} UNION ALL {%- endif %}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/payment_plan_event_history.sql", "compiled": true, "compiled_code": "\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.payment_plan_event_history`\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.customer_materialized": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "customer_materialized", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/customer_materialized.sql", "original_file_path": "models/promisepay/customer_materialized.sql", "unique_id": "model.promise_dwh.customer_materialized", "fqn": ["promise_dwh", "promisepay", "customer_materialized"], "alias": "customer_materialized", "checksum": {"name": "sha256", "checksum": "efd3d5db6e37451da936a7d7d700198a2f9e30d15fe68962dcb95b82817a88ed"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": "jurisdiction", "index": "client_id"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay", "cluster_by": "jurisdiction", "index": "client_id"}, "created_at": 1715379615.659165, "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_materialized`", "raw_code": "{{\n    config(\n        materialized='table',\n        cluster_by='jurisdiction',\n        index='client_id'\n    )\n}}\n\nSELECT * FROM {{ ref(\"customer\") }}", "language": "sql", "refs": [{"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": ["model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/customer_materialized.sql", "compiled": true, "compiled_code": "\n\nSELECT * FROM `analytics-prod-328313`.`promisepay`.`customer`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.stg__lw_sandbox_current_account_facts": {"database": "analytics-prod-328313", "schema": "stg_lw_sandbox", "name": "stg__lw_sandbox_current_account_facts", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/stg__lw_sandbox_current_account_facts.sql", "original_file_path": "models/promisepay/stg__lw_sandbox_current_account_facts.sql", "unique_id": "model.promise_dwh.stg__lw_sandbox_current_account_facts", "fqn": ["promise_dwh", "promisepay", "stg__lw_sandbox_current_account_facts"], "alias": "stg__lw_sandbox_current_account_facts", "checksum": {"name": "sha256", "checksum": "7b2d588b8cecf96f8cf0a8827025a6cdf6577bf0a5a5e10ee343c7d687f07a32"}, "config": {"enabled": true, "alias": null, "schema": "stg_lw_sandbox", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "stg_lw_sandbox"}, "created_at": 1715379615.662334, "relation_name": "`analytics-prod-328313`.`stg_lw_sandbox`.`stg__lw_sandbox_current_account_facts`", "raw_code": "{{\n    config(\n        schema='stg_lw_sandbox',\n        materialized='table'\n    )\n}}\n\n-- This materializes the content of this table into a dataset \n-- that is accessible to the louisville-water-pay cloudSQL service account\n\nSELECT * -- noqa\nFROM `analytics-prod-328313.looker_scratch.T4_promise_current_account_facts_lw_only`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/stg__lw_sandbox_current_account_facts.sql", "compiled": true, "compiled_code": "\n\n-- This materializes the content of this table into a dataset \n-- that is accessible to the louisville-water-pay cloudSQL service account\n\nSELECT * -- noqa\nFROM `analytics-prod-328313.looker_scratch.T4_promise_current_account_facts_lw_only`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.customer_config_wide": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "customer_config_wide", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/customer_config_wide.sql", "original_file_path": "models/promisepay/customer_config_wide.sql", "unique_id": "model.promise_dwh.customer_config_wide", "fqn": ["promise_dwh", "promisepay", "customer_config_wide"], "alias": "customer_config_wide", "checksum": {"name": "sha256", "checksum": "590f94ca724afe2287f48230a118655fe06ab89f7c5a2a1ee0213e5e8d62c9e4"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": ["biz_rules"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["biz_rules"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay", "tags": ["biz_rules"]}, "created_at": 1715379615.665442, "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_config_wide`", "raw_code": "{{\n  config(\n        tags = [\"biz_rules\"],\n        materialized = \"table\"\n    )\n}}\n-- get attributes that are extracted from customer_config_attributes jsons\n{% set config_json_paths = dbt_utils.get_column_values(\n        table=ref('customer_config_attributes'),\n        column='config_json_path'\n) %}\n\nWITH\nall_configs AS (\n    {%- for project in get_all_project_ids() %}\n        SELECT *\n        FROM\n            {{ generate_cloud_table_name(project, 'customer_config_values') }}\n        {% if not loop.last -%} UNION ALL {%- endif %}\n    {% endfor %}\n)\n\nSELECT\n    jurisdiction    \n    {%- for json_path in config_json_paths %} -- noqa\n       , JSON_QUERY(config_values, '$.{{json_path}}') as {{json_path | replace(\"paymentPlanConfig.\", \"\") | replace(\".\", \"_\") | replace(\",\", \"_\") }} -- noqa\n    {%- endfor %} -- noqa\n    , IF(\n        REGEXP_EXTRACT(JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions'), '^\\\\[([0-9]+)') != \"1\",\n        SAFE_CAST(REGEXP_EXTRACT(JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions'), '^\\\\[([0-9]+)') as INT64),\n        SAFE_CAST(REGEXP_EXTRACT(JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions'), '^\\\\[[0-9]{1},([0-9]+)') as INT64)\n        ) as min_plan_length\n    , SAFE_CAST(REGEXP_EXTRACT(JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions'), '([0-9]+)\\\\]$') as INT64)  as max_plan_length\nFROM\n    all_configs", "language": "sql", "refs": [{"name": "customer_config_attributes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": ["model.promise_dwh.customer_config_attributes"]}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/customer_config_wide.sql", "compiled": true, "compiled_code": "\n-- get attributes that are extracted from customer_config_attributes jsons\n\n\nWITH\nall_configs AS (\n        SELECT *\n        FROM\n            \n        `alexrenew-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `baltimore-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `buffalo-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `cal-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `centralarkansas-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `corona-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `gcww-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `hrsd-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `jackson-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `louisville-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newark-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newportnews-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `nola-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `richmond-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `sj-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `toledo-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `veoliany-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `wssc-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `florida-lihwap-pay.analytics_promisepay_prod.customer_config_values`\n        \n    \n)\n\nSELECT\n    jurisdiction -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.allowMultipleRollIns') as allowMultipleRollIns -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.rollInSupport') as rollInSupport -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.maxDaysToAvoidCancelation') as maxDaysToAvoidCancelation -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.allowVenmoPayments') as allowVenmoPayments -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.firstPaymentConfig.minDownPaymentAmountCents') as firstPaymentConfig_minDownPaymentAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.type') as type -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.maxInstallmentAmountCents') as maxInstallmentAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.allowsReenrollment') as allowsReenrollment -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.minTransactionAmountCents') as minTransactionAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions') as planLengthOptions -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.firstPaymentConfig.required') as firstPaymentConfig_required -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.minPlanBalanceAmountCents') as minPlanBalanceAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.conditionalPlanLengthOptions') as conditionalPlanLengthOptions -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig') as paymentPlanConfig -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.firstPaymentConfig.fractionOf') as firstPaymentConfig_fractionOf -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.firstPaymentConfig.type') as firstPaymentConfig_type -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.minPlanPaymentAmountCents') as minPlanPaymentAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.minInstallmentAmountCents') as minInstallmentAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.maxPlanBalanceAmountCents') as maxPlanBalanceAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.isPlanShorteningEnabled') as isPlanShorteningEnabled -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.firstPaymentConfig.fraction') as firstPaymentConfig_fraction -- noqa -- noqa\n    , IF(\n        REGEXP_EXTRACT(JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions'), '^\\\\[([0-9]+)') != \"1\",\n        SAFE_CAST(REGEXP_EXTRACT(JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions'), '^\\\\[([0-9]+)') as INT64),\n        SAFE_CAST(REGEXP_EXTRACT(JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions'), '^\\\\[[0-9]{1},([0-9]+)') as INT64)\n        ) as min_plan_length\n    , SAFE_CAST(REGEXP_EXTRACT(JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions'), '([0-9]+)\\\\]$') as INT64)  as max_plan_length\nFROM\n    all_configs", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.customer_config_long": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "customer_config_long", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/customer_config_long.sql", "original_file_path": "models/promisepay/customer_config_long.sql", "unique_id": "model.promise_dwh.customer_config_long", "fqn": ["promise_dwh", "promisepay", "customer_config_long"], "alias": "customer_config_long", "checksum": {"name": "sha256", "checksum": "5ecf2229c6fb2201b3635121e6b3a64fc74d45656c205b0218415b8f297f71e9"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": ["biz_rules"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["biz_rules"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay", "tags": ["biz_rules"]}, "created_at": 1715379615.6716218, "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_config_long`", "raw_code": "{{\n  config(\n        tags = [\"biz_rules\"],\n        materialized=\"table\"\n    )\n}}\n{% if target.name=='dev' %}\n{{ config(enabled=false) }}\n{% endif %}\n-- get attributes that are extracted from customer_config_attributes jsons\n{% set config_json_paths = dbt_utils.get_column_values(\n        table=ref('customer_config_attributes'),\n        column='config_json_path'\n) %}\n\nSELECT\n    *,\n    CONCAT(jurisdiction, \"_\", rule) AS rule_id\nFROM\n    {{ ref('customer_config_wide') }}\nUNPIVOT -- noqa\n    (value for rule IN (\n        {%- for json_path in config_json_paths %}\n        {{json_path | replace(\"paymentPlanConfig.\", \"\") | replace(\".\", \"_\") | replace(\",\", \"_\") }} {% if not loop.last %}, {% endif %}\n        {%- endfor %}\n    ))", "language": "sql", "refs": [{"name": "customer_config_attributes", "package": null, "version": null}, {"name": "customer_config_wide", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": ["model.promise_dwh.customer_config_attributes", "model.promise_dwh.customer_config_wide"]}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/customer_config_long.sql", "compiled": true, "compiled_code": "\n\n-- get attributes that are extracted from customer_config_attributes jsons\n\n\nSELECT\n    *,\n    CONCAT(jurisdiction, \"_\", rule) AS rule_id\nFROM\n    `analytics-prod-328313`.`promisepay`.`customer_config_wide`\nUNPIVOT -- noqa\n    (value for rule IN (\n        allowMultipleRollIns , \n        rollInSupport , \n        maxDaysToAvoidCancelation , \n        allowVenmoPayments , \n        firstPaymentConfig_minDownPaymentAmountCents , \n        type , \n        maxInstallmentAmountCents , \n        allowsReenrollment , \n        minTransactionAmountCents , \n        planLengthOptions , \n        firstPaymentConfig_required , \n        minPlanBalanceAmountCents , \n        conditionalPlanLengthOptions , \n        paymentPlanConfig , \n        firstPaymentConfig_fractionOf , \n        firstPaymentConfig_type , \n        minPlanPaymentAmountCents , \n        minInstallmentAmountCents , \n        maxPlanBalanceAmountCents , \n        isPlanShorteningEnabled , \n        firstPaymentConfig_fraction \n    ))", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.obligation": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "obligation", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/obligation.sql", "original_file_path": "models/promisepay/obligation.sql", "unique_id": "model.promise_dwh.obligation", "fqn": ["promise_dwh", "promisepay", "obligation"], "alias": "obligation", "checksum": {"name": "sha256", "checksum": "0c6909a11ae4f06d3344c154562fc0a8b84a119cccf62a0709cd01368baa2548"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay"}, "created_at": 1715379615.6768441, "relation_name": "`analytics-prod-328313`.`promisepay`.`obligation`", "raw_code": "{%- for project in get_all_project_ids() %}\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        {{ generate_cloud_table_name(project, this.name) }}\n    {% if not loop.last -%} UNION ALL {%- endif %}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/obligation.sql", "compiled": true, "compiled_code": "\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `alexrenew-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `baltimore-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `buffalo-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `cal-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `centralarkansas-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `corona-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `gcww-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `hrsd-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `jackson-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `louisville-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `newark-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `newportnews-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `nola-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `richmond-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `sj-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `toledo-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `veoliany-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `wssc-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.obligation`\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.customer_config_attributes": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "customer_config_attributes", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/customer_config_attributes.sql", "original_file_path": "models/promisepay/customer_config_attributes.sql", "unique_id": "model.promise_dwh.customer_config_attributes", "fqn": ["promise_dwh", "promisepay", "customer_config_attributes"], "alias": "customer_config_attributes", "checksum": {"name": "sha256", "checksum": "5e98e2479497a7985a27e61eed2bb98d408feca3707687b7ec2afb5d3c260e56"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": ["biz_rules"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "config_json_path", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["biz_rules"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay", "unique_key": "config_json_path", "tags": ["biz_rules"]}, "created_at": 1715379615.682581, "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_config_attributes`", "raw_code": "{{ config(\n      unique_key='config_json_path',\n      materialized=\"table\",\n      tags=[\"biz_rules\"])\n}}\n\nWITH\n-- join all jurx configs then extract attributes\nall_configs AS (\n    {%- for project in get_all_project_ids() %}\n        SELECT *\n        FROM\n            {{ generate_cloud_table_name(project, 'customer_config_values') }}\n        {% if not loop.last -%} UNION ALL {%- endif %}\n    {% endfor %}\n)\n\n-- use js functions to unpack JSONs\n-- planLengthOptions is an array, so the key followed by an index, regex drops index, want to access whole array\nSELECT DISTINCT REGEXP_REPLACE(config_key, '[\\\\.,0-9]+$', '') AS config_json_path\n\nFROM all_configs,\n    UNNEST([STRUCT({{ this.schema }}.jsonNestedExtract(config_values) AS leaves)]),\n    UNNEST({{ this.schema }}.jsonObjectKeys(leaves)) AS config_key", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/customer_config_attributes.sql", "compiled": true, "compiled_code": "\n\nWITH\n-- join all jurx configs then extract attributes\nall_configs AS (\n        SELECT *\n        FROM\n            \n        `alexrenew-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `baltimore-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `buffalo-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `cal-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `centralarkansas-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `corona-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `gcww-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `hrsd-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `jackson-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `louisville-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newark-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newportnews-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `nola-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `richmond-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `sj-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `toledo-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `veoliany-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `wssc-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `florida-lihwap-pay.analytics_promisepay_prod.customer_config_values`\n        \n    \n)\n\n-- use js functions to unpack JSONs\n-- planLengthOptions is an array, so the key followed by an index, regex drops index, want to access whole array\nSELECT DISTINCT REGEXP_REPLACE(config_key, '[\\\\.,0-9]+$', '') AS config_json_path\n\nFROM all_configs,\n    UNNEST([STRUCT(promisepay.jsonNestedExtract(config_values) AS leaves)]),\n    UNNEST(promisepay.jsonObjectKeys(leaves)) AS config_key", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.system_properties": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "system_properties", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/system_properties.sql", "original_file_path": "models/promisepay/system_properties.sql", "unique_id": "model.promise_dwh.system_properties", "fqn": ["promise_dwh", "promisepay", "system_properties"], "alias": "system_properties", "checksum": {"name": "sha256", "checksum": "d7e582995e8675e7b74f13fd9a6decaa0210b96639c4f51f6eb157b360597887"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay"}, "created_at": 1715379615.687745, "relation_name": "`analytics-prod-328313`.`promisepay`.`system_properties`", "raw_code": "{%- for project in get_all_project_ids() %}\n    SELECT *\n    FROM\n        {{ generate_cloud_table_name(project, this.name) }}\n    {% if not loop.last -%} UNION ALL {%- endif %}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/system_properties.sql", "compiled": true, "compiled_code": "\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.system_properties`\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.payment_record": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "payment_record", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/payment_record.sql", "original_file_path": "models/promisepay/payment_record.sql", "unique_id": "model.promise_dwh.payment_record", "fqn": ["promise_dwh", "promisepay", "payment_record"], "alias": "payment_record", "checksum": {"name": "sha256", "checksum": "5a539d092368d9565da69d7272f90b797d4777b9accd7d12416c887f39234f8f"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay"}, "created_at": 1715379615.692636, "relation_name": "`analytics-prod-328313`.`promisepay`.`payment_record`", "raw_code": "{%- for project in get_all_project_ids() %} -- noqa\n    SELECT *\n    FROM\n        {{ generate_cloud_table_name(project, this.name) }}\n{% if not loop.last -%} UNION ALL {%- endif %} -- noqa\n{% endfor %} -- noqa", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/payment_record.sql", "compiled": true, "compiled_code": " -- noqa\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.payment_record`\n -- noqa\n -- noqa", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.stg__lw_sandbox_plans": {"database": "analytics-prod-328313", "schema": "stg_lw_sandbox", "name": "stg__lw_sandbox_plans", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/stg__lw_sandbox_plans.sql", "original_file_path": "models/promisepay/stg__lw_sandbox_plans.sql", "unique_id": "model.promise_dwh.stg__lw_sandbox_plans", "fqn": ["promise_dwh", "promisepay", "stg__lw_sandbox_plans"], "alias": "stg__lw_sandbox_plans", "checksum": {"name": "sha256", "checksum": "7a1f59a2e6313f0875092a4c6625b9ad108bce3f27795e8e145cb9aa0d19577f"}, "config": {"enabled": true, "alias": null, "schema": "stg_lw_sandbox", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "stg_lw_sandbox"}, "created_at": 1715379615.6974359, "relation_name": "`analytics-prod-328313`.`stg_lw_sandbox`.`stg__lw_sandbox_plans`", "raw_code": "{{\n    config(\n        schema='stg_lw_sandbox',\n        materialized='table'\n    )\n}}\n\n-- This materializes the content of this table into a dataset \n-- that is accessible to the louisville-water-pay cloudSQL service account\n\nSELECT *  --noqa\nFROM `analytics-prod-328313.looker_scratch.T4_promise_plans_lw_only`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/stg__lw_sandbox_plans.sql", "compiled": true, "compiled_code": "\n\n-- This materializes the content of this table into a dataset \n-- that is accessible to the louisville-water-pay cloudSQL service account\n\nSELECT *  --noqa\nFROM `analytics-prod-328313.looker_scratch.T4_promise_plans_lw_only`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.customer_exception_history": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "customer_exception_history", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/customer_exception_history.sql", "original_file_path": "models/promisepay/customer_exception_history.sql", "unique_id": "model.promise_dwh.customer_exception_history", "fqn": ["promise_dwh", "promisepay", "customer_exception_history"], "alias": "customer_exception_history", "checksum": {"name": "sha256", "checksum": "d7e582995e8675e7b74f13fd9a6decaa0210b96639c4f51f6eb157b360597887"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay"}, "created_at": 1715379615.7005088, "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_exception_history`", "raw_code": "{%- for project in get_all_project_ids() %}\n    SELECT *\n    FROM\n        {{ generate_cloud_table_name(project, this.name) }}\n    {% if not loop.last -%} UNION ALL {%- endif %}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/customer_exception_history.sql", "compiled": true, "compiled_code": "\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.customer_exception_history`\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.stg__survey_long": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "stg__survey_long", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/stg__survey_long.sql", "original_file_path": "models/promisepay/stg__survey_long.sql", "unique_id": "model.promise_dwh.stg__survey_long", "fqn": ["promise_dwh", "promisepay", "stg__survey_long"], "alias": "stg__survey_long", "checksum": {"name": "sha256", "checksum": "3296f599d3414330fd7b5a71853a6be77c8ff12bb70a54ec43d202783044ff5a"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay"}, "created_at": 1715379615.705367, "relation_name": "`analytics-prod-328313`.`promisepay`.`stg__survey_long`", "raw_code": "-- Ignore long lines for linting in this file\n-- noqa: disable=LT05\n{% if target.name=='dev' %}\n{{ config(enabled=false) }}\n{% endif %}\n\n-- get attributes that are extracted from survey_attributes jsons\n{% set survey_json_paths = dbt_utils.get_column_values(\n        table=ref('stg__survey_paths'),\n        column='survey_json_path'\n) %}\n\nWITH all_surveys AS (\n    {%- for project in get_all_project_ids() %}\n        SELECT *\n        FROM\n            {{ generate_cloud_table_name(project, 'survey') }}\n        {% if not loop.last -%} UNION ALL {%- endif %}\n    {% endfor %}\n)\n\n, survey_wide_stg AS (\n    SELECT\n        id AS survey_response_id\n        , created_at\n        , customer_id AS client_id\n        , REPLACE(jurisdiction, \"_\", \"\") AS jurisdiction\n        {%- for json_path in survey_json_paths %} -- noqa\n          , JSON_VALUE(survey_response, \"$.{{json_path}}\") as {{json_path | replace(\"attestation.\", \"\") | replace(\"\u00e1\", \"a\") | replace(\".\", \"_\") | replace(\",\", \"_\") | replace(\" \", \"_\") }} -- noqa\n        {%- endfor %} -- noqa\n    FROM\n        all_surveys\n)\n\nSELECT DISTINCT\n    *\n    -- consolidate but also clarify json_paths that are versions of \"none of the above\"\n    , CASE\n        WHEN\n            question_full_path LIKE \"%benefits%\"\n            AND\n            (\n                LOWER(question_full_path) LIKE \"%none%\"\n                OR LOWER(question_full_path) LIKE \"%no_one%\"\n                OR LOWER(question_full_path) LIKE \"%nadie%\"\n            )\n            THEN \"benefits_none\"\n        WHEN\n            question_full_path LIKE \"%HearAboutUs%\"\n            AND\n            (\n                LOWER(question_full_path) LIKE \"%none%\"\n            )\n            THEN \"hearabout_none\"\n        WHEN\n            question_full_path LIKE \"%HearAboutUs%\"\n            THEN CONCAT(\"hearabout_\", REGEXP_EXTRACT(question_full_path, \"([A-Za-z]+)$\"))\n        WHEN\n            question_full_path LIKE \"%qualifying%\"\n            AND\n            (LOWER(question_full_path) LIKE \"%none%\")\n            THEN \"groups_none\"\n        ELSE REGEXP_EXTRACT(question_full_path, \"([A-Za-z]+)$\")\n    END AS question\nFROM\n    survey_wide_stg\nUNPIVOT -- noqa\n    (response for question_full_path IN (\n        {%- for json_path in survey_json_paths %}\n        {{json_path | replace(\"attestation.\", \"\") | replace(\"\u00e1\", \"a\") | replace(\".\", \"_\") | replace(\",\", \"_\") | replace(\" \", \"_\")  }} {% if not loop.last %}, {% endif %}\n        {%- endfor %}\n    ))", "language": "sql", "refs": [{"name": "stg__survey_paths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": ["model.promise_dwh.stg__survey_paths"]}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/stg__survey_long.sql", "compiled": true, "compiled_code": "-- Ignore long lines for linting in this file\n-- noqa: disable=LT05\n\n\n-- get attributes that are extracted from survey_attributes jsons\n\n\nWITH all_surveys AS (\n        SELECT *\n        FROM\n            \n        `alexrenew-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `baltimore-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `buffalo-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `cal-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `centralarkansas-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `corona-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `gcww-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `hrsd-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `jackson-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `louisville-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newark-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newportnews-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `nola-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `richmond-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `sj-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `toledo-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `veoliany-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `wssc-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `florida-lihwap-pay.analytics_promisepay_prod.survey`\n        \n    \n)\n\n, survey_wide_stg AS (\n    SELECT\n        id AS survey_response_id\n        , created_at\n        , customer_id AS client_id\n        , REPLACE(jurisdiction, \"_\", \"\") AS jurisdiction -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.residentOfAddress\") as step_1_qualifyingGroups_residentOfAddress -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.accountHolder\") as step_1_qualifyingGroups_accountHolder -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.accountHolderInHousehold\") as step_1_qualifyingGroups_accountHolderInHousehold -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.homeowner\") as step_1_qualifyingGroups_homeowner -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.sixtyFiveOrOlder\") as step_1_qualifyingGroups_sixtyFiveOrOlder -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.numPeopleInHousehold\") as step_2_numPeopleInHousehold -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.benefits.Heap\") as step_2_benefits_Heap -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.benefits.Snap\") as step_2_benefits_Snap -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.benefits.TemporaryOrPublicAssistance\") as step_2_benefits_TemporaryOrPublicAssistance -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.benefits.Ssi\") as step_2_benefits_Ssi -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.benefits.NONE_OF_THE_ABOVE_OPTION\") as step_2_benefits_NONE_OF_THE_ABOVE_OPTION -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.federalPovertyLineRange\") as step_3_federalPovertyLineRange -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.pastDueBalance\") as pastDueBalance -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.totalBalance\") as totalBalance -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.waterBalance\") as waterBalance -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.waterPastDueBalance\") as waterPastDueBalance -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.benefits.No one in my household is in any of the programs above\") as step_2_benefits_No_one_in_my_household_is_in_any_of_the_programs_above -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.NONE_OF_THE_ABOVE_OPTION\") as step_1_qualifyingGroups_NONE_OF_THE_ABOVE_OPTION -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.None of these statements apply to me\") as step_1_qualifyingGroups_None_of_these_statements_apply_to_me -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.Liheap\") as step_1_benefits_Liheap -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.SnapEbt\") as step_1_benefits_SnapEbt -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.Tanf\") as step_1_benefits_Tanf -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.Ssi\") as step_1_benefits_Ssi -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.VeteranBenefits\") as step_1_benefits_VeteranBenefits -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.householdMonthlyIncome\") as step_1_householdMonthlyIncome -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.VeteransBenefits\") as step_1_benefits_VeteransBenefits -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.NONE_OF_THE_ABOVE_OPTION\") as step_1_benefits_NONE_OF_THE_ABOVE_OPTION -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.No one in my household is in any of the programs above\") as step_1_benefits_No_one_in_my_household_is_in_any_of_the_programs_above -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.Nadie en mi hogar est\u00e1 en ninguno de los programas anteriores\") as step_1_benefits_Nadie_en_mi_hogar_esta_en_ninguno_de_los_programas_anteriores -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.numPeopleInHousehold\") as step_1_numPeopleInHousehold -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.disabled\") as step_1_qualifyingGroups_disabled -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.veteran\") as step_1_qualifyingGroups_veteran -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.federalPovertyLineRange\") as step_2_federalPovertyLineRange -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.cityResident\") as step_1_qualifyingGroups_cityResident -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.oneMeter\") as step_1_qualifyingGroups_oneMeter -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.ownerAgreement\") as step_1_qualifyingGroups_ownerAgreement -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.homeowner\") as step_1_homeowner -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.accountHolder\") as step_1_accountHolder -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.Ohep\") as step_3_benefits_Ohep -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.Tca\") as step_3_benefits_Tca -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.Tdap\") as step_3_benefits_Tdap -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.Snap\") as step_3_benefits_Snap -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.Ssi\") as step_3_benefits_Ssi -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.Erap\") as step_3_benefits_Erap -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.NONE_OF_THE_ABOVE_OPTION\") as step_3_benefits_NONE_OF_THE_ABOVE_OPTION -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.householdMonthlyIncome\") as step_3_householdMonthlyIncome -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.numPeopleInHousehold\") as step_3_numPeopleInHousehold -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_4.paperlessBilling\") as step_4_paperlessBilling -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.hasLeaseWithWaterResponsibility\") as step_2_hasLeaseWithWaterResponsibility -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.hasLeaseWithMonthlyAmountOrInvoice\") as step_2_hasLeaseWithMonthlyAmountOrInvoice -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.socialMedia\") as step_5_whereDidYouHearAboutUs_socialMedia -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.dpwSite\") as step_5_whereDidYouHearAboutUs_dpwSite -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.sms\") as step_5_whereDidYouHearAboutUs_sms -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.friend\") as step_5_whereDidYouHearAboutUs_friend -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.community\") as step_5_whereDidYouHearAboutUs_community -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.billInsert\") as step_5_whereDidYouHearAboutUs_billInsert -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.dpwCallCenter\") as step_5_whereDidYouHearAboutUs_dpwCallCenter -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.NONE_OF_THE_ABOVE_OPTION\") as step_5_whereDidYouHearAboutUs_NONE_OF_THE_ABOVE_OPTION -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.No one in my household is in any of the programs above\") as step_3_benefits_No_one_in_my_household_is_in_any_of_the_programs_above -- noqa -- noqa\n    FROM\n        all_surveys\n)\n\nSELECT DISTINCT\n    *\n    -- consolidate but also clarify json_paths that are versions of \"none of the above\"\n    , CASE\n        WHEN\n            question_full_path LIKE \"%benefits%\"\n            AND\n            (\n                LOWER(question_full_path) LIKE \"%none%\"\n                OR LOWER(question_full_path) LIKE \"%no_one%\"\n                OR LOWER(question_full_path) LIKE \"%nadie%\"\n            )\n            THEN \"benefits_none\"\n        WHEN\n            question_full_path LIKE \"%HearAboutUs%\"\n            AND\n            (\n                LOWER(question_full_path) LIKE \"%none%\"\n            )\n            THEN \"hearabout_none\"\n        WHEN\n            question_full_path LIKE \"%HearAboutUs%\"\n            THEN CONCAT(\"hearabout_\", REGEXP_EXTRACT(question_full_path, \"([A-Za-z]+)$\"))\n        WHEN\n            question_full_path LIKE \"%qualifying%\"\n            AND\n            (LOWER(question_full_path) LIKE \"%none%\")\n            THEN \"groups_none\"\n        ELSE REGEXP_EXTRACT(question_full_path, \"([A-Za-z]+)$\")\n    END AS question\nFROM\n    survey_wide_stg\nUNPIVOT -- noqa\n    (response for question_full_path IN (\n        step_1_qualifyingGroups_residentOfAddress , \n        step_1_qualifyingGroups_accountHolder , \n        step_1_qualifyingGroups_accountHolderInHousehold , \n        step_1_qualifyingGroups_homeowner , \n        step_1_qualifyingGroups_sixtyFiveOrOlder , \n        step_2_numPeopleInHousehold , \n        step_2_benefits_Heap , \n        step_2_benefits_Snap , \n        step_2_benefits_TemporaryOrPublicAssistance , \n        step_2_benefits_Ssi , \n        step_2_benefits_NONE_OF_THE_ABOVE_OPTION , \n        step_3_federalPovertyLineRange , \n        pastDueBalance , \n        totalBalance , \n        waterBalance , \n        waterPastDueBalance , \n        step_2_benefits_No_one_in_my_household_is_in_any_of_the_programs_above , \n        step_1_qualifyingGroups_NONE_OF_THE_ABOVE_OPTION , \n        step_1_qualifyingGroups_None_of_these_statements_apply_to_me , \n        step_1_benefits_Liheap , \n        step_1_benefits_SnapEbt , \n        step_1_benefits_Tanf , \n        step_1_benefits_Ssi , \n        step_1_benefits_VeteranBenefits , \n        step_1_householdMonthlyIncome , \n        step_1_benefits_VeteransBenefits , \n        step_1_benefits_NONE_OF_THE_ABOVE_OPTION , \n        step_1_benefits_No_one_in_my_household_is_in_any_of_the_programs_above , \n        step_1_benefits_Nadie_en_mi_hogar_esta_en_ninguno_de_los_programas_anteriores , \n        step_1_numPeopleInHousehold , \n        step_1_qualifyingGroups_disabled , \n        step_1_qualifyingGroups_veteran , \n        step_2_federalPovertyLineRange , \n        step_1_qualifyingGroups_cityResident , \n        step_1_qualifyingGroups_oneMeter , \n        step_1_qualifyingGroups_ownerAgreement , \n        step_1_homeowner , \n        step_1_accountHolder , \n        step_3_benefits_Ohep , \n        step_3_benefits_Tca , \n        step_3_benefits_Tdap , \n        step_3_benefits_Snap , \n        step_3_benefits_Ssi , \n        step_3_benefits_Erap , \n        step_3_benefits_NONE_OF_THE_ABOVE_OPTION , \n        step_3_householdMonthlyIncome , \n        step_3_numPeopleInHousehold , \n        step_4_paperlessBilling , \n        step_2_hasLeaseWithWaterResponsibility , \n        step_2_hasLeaseWithMonthlyAmountOrInvoice , \n        step_5_whereDidYouHearAboutUs_socialMedia , \n        step_5_whereDidYouHearAboutUs_dpwSite , \n        step_5_whereDidYouHearAboutUs_sms , \n        step_5_whereDidYouHearAboutUs_friend , \n        step_5_whereDidYouHearAboutUs_community , \n        step_5_whereDidYouHearAboutUs_billInsert , \n        step_5_whereDidYouHearAboutUs_dpwCallCenter , \n        step_5_whereDidYouHearAboutUs_NONE_OF_THE_ABOVE_OPTION , \n        step_3_benefits_No_one_in_my_household_is_in_any_of_the_programs_above \n    ))", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.pledge": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "pledge", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/pledge.sql", "original_file_path": "models/promisepay/pledge.sql", "unique_id": "model.promise_dwh.pledge", "fqn": ["promise_dwh", "promisepay", "pledge"], "alias": "pledge", "checksum": {"name": "sha256", "checksum": "5a539d092368d9565da69d7272f90b797d4777b9accd7d12416c887f39234f8f"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay"}, "created_at": 1715379615.713044, "relation_name": "`analytics-prod-328313`.`promisepay`.`pledge`", "raw_code": "{%- for project in get_all_project_ids() %} -- noqa\n    SELECT *\n    FROM\n        {{ generate_cloud_table_name(project, this.name) }}\n{% if not loop.last -%} UNION ALL {%- endif %} -- noqa\n{% endfor %} -- noqa", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_all_project_ids", "macro.promise_dwh.generate_cloud_table_name", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/pledge.sql", "compiled": true, "compiled_code": " -- noqa\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.pledge`\n -- noqa\n -- noqa", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.user_status_promisepay": {"database": "analytics-prod-328313", "schema": "talkdesk", "name": "user_status_promisepay", "resource_type": "model", "package_name": "promise_dwh", "path": "talkdesk/user_status_promisepay.sql", "original_file_path": "models/talkdesk/user_status_promisepay.sql", "unique_id": "model.promise_dwh.user_status_promisepay", "fqn": ["promise_dwh", "talkdesk", "user_status_promisepay"], "alias": "user_status_promisepay", "checksum": {"name": "sha256", "checksum": "6ee775deb1dc42e5f05e235940b887d1b1adc14fc7b7bdba5808338689a35677"}, "config": {"enabled": true, "alias": null, "schema": "talkdesk", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["user_id", "status_start_at"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["user_id", "status_label"], "partition_by": {"field": "status_end_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "talkdesk", "partition_by": {"field": "status_end_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["user_id", "status_label"], "unique_key": ["user_id", "status_start_at"], "incremental_strategy": "insert_overwrite"}, "created_at": 1715379615.718016, "relation_name": "`analytics-prod-328313`.`talkdesk`.`user_status_promisepay`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"status_end_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"user_id\",\"status_label\"],\n    materialized = 'incremental',\n    unique_key = [\"user_id\", \"status_start_at\"],\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\nSELECT\n    user_name,\n    user_email,\n    user_id,\n    status_label,\n    status_start_at,\n    status_end_at,\n    status_time,\n    is_user_active,\n    team_id,\n    team_name,\n    ring_groups,\n    \"general\" AS instance\nFROM\n    `analytics-dev-328216.talkdesk_api.td_user_status_report_data_promisepay`\n{% if is_incremental() %}\n\n    -- recalculate latest day's data + previous\n    WHERE status_end_at >= {{ window_back_full_days('_dbt_max_partition', 3) }}\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/talkdesk/user_status_promisepay.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    user_name,\n    user_email,\n    user_id,\n    status_label,\n    status_start_at,\n    status_end_at,\n    status_time,\n    is_user_active,\n    team_id,\n    team_name,\n    ring_groups,\n    \"general\" AS instance\nFROM\n    `analytics-dev-328216.talkdesk_api.td_user_status_report_data_promisepay`\n\n\n    -- recalculate latest day's data + previous\n    WHERE status_end_at >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.calls_valihwap": {"database": "analytics-prod-328313", "schema": "talkdesk", "name": "calls_valihwap", "resource_type": "model", "package_name": "promise_dwh", "path": "talkdesk/calls_valihwap.sql", "original_file_path": "models/talkdesk/calls_valihwap.sql", "unique_id": "model.promise_dwh.calls_valihwap", "fqn": ["promise_dwh", "talkdesk", "calls_valihwap"], "alias": "calls_valihwap", "checksum": {"name": "sha256", "checksum": "a22c2b79198c76b59300968c3ab114b8c7ed532b4cc1e109fe3e96f1ee295a56"}, "config": {"enabled": true, "alias": null, "schema": "talkdesk", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "call_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["talkdesk_phone_display_name", "type"], "partition_by": {"field": "end_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "talkdesk", "partition_by": {"field": "end_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["talkdesk_phone_display_name", "type"], "unique_key": "call_id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379615.7249432, "relation_name": "`analytics-prod-328313`.`talkdesk`.`calls_valihwap`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"end_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"talkdesk_phone_display_name\",\"type\"],\n    materialized = 'incremental',\n    unique_key = 'call_id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\nSELECT\n    call_id,\n    callsid,\n    `type`,\n    start_at,\n    end_at,\n    talkdesk_phone_number,\n    talkdesk_phone_display_name,\n    CASE\n        WHEN REGEXP_CONTAINS(contact_phone_number, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(contact_phone_number, r'[2-9][0-9]{9}$'))\n    END AS contact_phone_number_hashed,\n    user_id,\n    user_name,\n    user_email,\n    total_time,\n    talk_time,\n    wait_time,\n    hold_time,\n    abandon_time,\n    total_ringing_time,\n    disposition_code,\n    notes,\n    user_voice_rating,\n    ring_groups,\n    ivr_options,\n    is_in_business_hours,\n    is_callback_from_queue,\n    is_transfer,\n    handling_user_id,\n    handling_user_name,\n    handling_user_email,\n    recording_url,\n    is_external_transfer,\n    is_if_no_answer,\n    is_call_forwarding,\n    csat_score,\n    csat_survey_time,\n    team_id,\n    team_name,\n    rating_reason,\n    agent_disconnected,\n    data_status__valid___damaged_,\n    'valihwap' AS instance\nFROM\n    `virginia-lihwap-pay.analytics_talkdesk_staging.td_calls_report_data_valihwap`\n{% if is_incremental() %}\n\n    -- recalculate latest day's data + previous\n    WHERE end_at >= {{ window_back_full_days('_dbt_max_partition', 3) }}\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/talkdesk/calls_valihwap.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    call_id,\n    callsid,\n    `type`,\n    start_at,\n    end_at,\n    talkdesk_phone_number,\n    talkdesk_phone_display_name,\n    CASE\n        WHEN REGEXP_CONTAINS(contact_phone_number, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(contact_phone_number, r'[2-9][0-9]{9}$'))\n    END AS contact_phone_number_hashed,\n    user_id,\n    user_name,\n    user_email,\n    total_time,\n    talk_time,\n    wait_time,\n    hold_time,\n    abandon_time,\n    total_ringing_time,\n    disposition_code,\n    notes,\n    user_voice_rating,\n    ring_groups,\n    ivr_options,\n    is_in_business_hours,\n    is_callback_from_queue,\n    is_transfer,\n    handling_user_id,\n    handling_user_name,\n    handling_user_email,\n    recording_url,\n    is_external_transfer,\n    is_if_no_answer,\n    is_call_forwarding,\n    csat_score,\n    csat_survey_time,\n    team_id,\n    team_name,\n    rating_reason,\n    agent_disconnected,\n    data_status__valid___damaged_,\n    'valihwap' AS instance\nFROM\n    `virginia-lihwap-pay.analytics_talkdesk_staging.td_calls_report_data_valihwap`\n\n\n    -- recalculate latest day's data + previous\n    WHERE end_at >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.user_status_valihwap": {"database": "analytics-prod-328313", "schema": "talkdesk", "name": "user_status_valihwap", "resource_type": "model", "package_name": "promise_dwh", "path": "talkdesk/user_status_valihwap.sql", "original_file_path": "models/talkdesk/user_status_valihwap.sql", "unique_id": "model.promise_dwh.user_status_valihwap", "fqn": ["promise_dwh", "talkdesk", "user_status_valihwap"], "alias": "user_status_valihwap", "checksum": {"name": "sha256", "checksum": "de8f02561abb100d59cf96f15f00e266ffd1233acd5fb2fce9068b752256398e"}, "config": {"enabled": true, "alias": null, "schema": "talkdesk", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["user_id", "status_start_at"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["user_id", "status_label"], "partition_by": {"field": "status_end_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "talkdesk", "partition_by": {"field": "status_end_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["user_id", "status_label"], "unique_key": ["user_id", "status_start_at"], "incremental_strategy": "insert_overwrite"}, "created_at": 1715379615.7284842, "relation_name": "`analytics-prod-328313`.`talkdesk`.`user_status_valihwap`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"status_end_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"user_id\",\"status_label\"],\n    materialized = 'incremental',\n    unique_key = [\"user_id\", \"status_start_at\"],\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\nSELECT\n    user_name,\n    user_email,\n    user_id,\n    status_label,\n    status_start_at,\n    status_end_at,\n    status_time,\n    is_user_active,\n    team_id,\n    team_name,\n    ring_groups,\n    \"valihwap\" AS instance\nFROM\n    `virginia-lihwap-pay.analytics_talkdesk_staging.td_user_status_report_data_valihwap`\n{% if is_incremental() %}\n\n    -- recalculate latest day's data + previous\n    WHERE status_end_at >= {{ window_back_full_days('_dbt_max_partition', 3) }}\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/talkdesk/user_status_valihwap.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    user_name,\n    user_email,\n    user_id,\n    status_label,\n    status_start_at,\n    status_end_at,\n    status_time,\n    is_user_active,\n    team_id,\n    team_name,\n    ring_groups,\n    \"valihwap\" AS instance\nFROM\n    `virginia-lihwap-pay.analytics_talkdesk_staging.td_user_status_report_data_valihwap`\n\n\n    -- recalculate latest day's data + previous\n    WHERE status_end_at >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.calls_explore_valihwap": {"database": "analytics-prod-328313", "schema": "talkdesk", "name": "calls_explore_valihwap", "resource_type": "model", "package_name": "promise_dwh", "path": "talkdesk/calls_explore_valihwap.sql", "original_file_path": "models/talkdesk/calls_explore_valihwap.sql", "unique_id": "model.promise_dwh.calls_explore_valihwap", "fqn": ["promise_dwh", "talkdesk", "calls_explore_valihwap"], "alias": "calls_explore_valihwap", "checksum": {"name": "sha256", "checksum": "357a9d158d9b76e26966ea5839ae37bb1203f833bf6b2c86d9a925e31038b4e8"}, "config": {"enabled": true, "alias": null, "schema": "talkdesk", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "interaction_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["phone_display_name"], "partition_by": {"field": "end_time", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "talkdesk", "partition_by": {"field": "end_time", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["phone_display_name"], "unique_key": "interaction_id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379615.731869, "relation_name": "`analytics-prod-328313`.`talkdesk`.`calls_explore_valihwap`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"end_time\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"phone_display_name\"],\n    materialized = 'incremental',\n    unique_key = 'interaction_id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\nSELECT\n    interaction_id,\n    call_type,\n    start_time,\n    end_time,\n    talkdesk_phone_number,\n    IF( -- check is a phone number string\n        REGEXP_CONTAINS(CAST(customer_phone_number AS string), r'[2-9][0-9]{9}$'),\n        -- if so, hash and cast as string\n        TO_BASE64(SHA256(REGEXP_EXTRACT(CAST(customer_phone_number AS string), r'[2-9][0-9]{9}$'))),\n        NULL\n    ) AS customer_phone_number_hashed,\n    talk_time,\n    record,\n    hangup,\n    in_business_hours,\n    callback_from_queue,\n    IF(\n    -- if waiting time is in HH:MM:SS format \n        CONTAINS_SUBSTR(waiting_time, ':'),\n        -- then convert to fraction of a day to match format of other \n        -- extract hours and divide by hours in day\n        (SAFE_CAST(SUBSTR(waiting_time, 1, 2) AS float64) / 24)\n        -- extract minutes, then seconds and divide by minutes / hours in day\n        + (SAFE_CAST(SUBSTR(waiting_time, 4, 2) AS float64) / 1440)\n        + (SAFE_CAST(SUBSTR(waiting_time, 7, 2) AS float64) / 86400),\n        -- else, if already in decimal format, cast to float\n        SAFE_CAST(waiting_time AS float64)\n    ) AS waiting_time,\n    agent_speed_to_answer,\n    holding_time,\n    rating,\n    `description`,\n    agent_name,\n    phone_display_name,\n    disposition_code,\n    `transfer`,\n    handling_agent,\n    tags,\n    ivr_options,\n    csat_score,\n    csat_survey_time,\n    team,\n    rating_reason,\n    agent_disconnected,\n    calls_historical_base_data_status,\n    'valihwap' AS instance\nFROM\n    `virginia-lihwap-pay.analytics_talkdesk_staging.td_explore_calls_report_data_valihwap`\n{% if is_incremental() %}\n\n    -- recalculate latest day's data + previous\n    WHERE end_time >= {{ window_back_full_days('_dbt_max_partition', 3) }}\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/talkdesk/calls_explore_valihwap.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    interaction_id,\n    call_type,\n    start_time,\n    end_time,\n    talkdesk_phone_number,\n    IF( -- check is a phone number string\n        REGEXP_CONTAINS(CAST(customer_phone_number AS string), r'[2-9][0-9]{9}$'),\n        -- if so, hash and cast as string\n        TO_BASE64(SHA256(REGEXP_EXTRACT(CAST(customer_phone_number AS string), r'[2-9][0-9]{9}$'))),\n        NULL\n    ) AS customer_phone_number_hashed,\n    talk_time,\n    record,\n    hangup,\n    in_business_hours,\n    callback_from_queue,\n    IF(\n    -- if waiting time is in HH:MM:SS format \n        CONTAINS_SUBSTR(waiting_time, ':'),\n        -- then convert to fraction of a day to match format of other \n        -- extract hours and divide by hours in day\n        (SAFE_CAST(SUBSTR(waiting_time, 1, 2) AS float64) / 24)\n        -- extract minutes, then seconds and divide by minutes / hours in day\n        + (SAFE_CAST(SUBSTR(waiting_time, 4, 2) AS float64) / 1440)\n        + (SAFE_CAST(SUBSTR(waiting_time, 7, 2) AS float64) / 86400),\n        -- else, if already in decimal format, cast to float\n        SAFE_CAST(waiting_time AS float64)\n    ) AS waiting_time,\n    agent_speed_to_answer,\n    holding_time,\n    rating,\n    `description`,\n    agent_name,\n    phone_display_name,\n    disposition_code,\n    `transfer`,\n    handling_agent,\n    tags,\n    ivr_options,\n    csat_score,\n    csat_survey_time,\n    team,\n    rating_reason,\n    agent_disconnected,\n    calls_historical_base_data_status,\n    'valihwap' AS instance\nFROM\n    `virginia-lihwap-pay.analytics_talkdesk_staging.td_explore_calls_report_data_valihwap`\n\n\n    -- recalculate latest day's data + previous\n    WHERE end_time >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.studio_flow_execution_valihwap": {"database": "analytics-prod-328313", "schema": "talkdesk", "name": "studio_flow_execution_valihwap", "resource_type": "model", "package_name": "promise_dwh", "path": "talkdesk/studio_flow_execution_valihwap.sql", "original_file_path": "models/talkdesk/studio_flow_execution_valihwap.sql", "unique_id": "model.promise_dwh.studio_flow_execution_valihwap", "fqn": ["promise_dwh", "talkdesk", "studio_flow_execution_valihwap"], "alias": "studio_flow_execution_valihwap", "checksum": {"name": "sha256", "checksum": "695bc89e183c5a7f33618a04aed946fd3635398fa1dee483b19f6499eaf58743"}, "config": {"enabled": true, "alias": null, "schema": "talkdesk", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["call_sid", "destination_number"], "partition_by": {"field": "timestamp", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "talkdesk", "partition_by": {"field": "timestamp", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["call_sid", "destination_number"], "incremental_strategy": "insert_overwrite"}, "created_at": 1715379615.7356749, "relation_name": "`analytics-prod-328313`.`talkdesk`.`studio_flow_execution_valihwap`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"timestamp\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"call_sid\",\"destination_number\"],\n    materialized = 'incremental',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\nSELECT\n    call_sid,\n    interaction_id,\n    destination_number,\n    CASE\n        WHEN REGEXP_CONTAINS(origin_number, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(origin_number, r'[2-9][0-9]{9}$'))\n    END AS origin_number_hashed,\n    flow_name,\n    flow_id,\n    component_title,\n    step_name,\n    exit,\n    CAST(time_in_step AS FLOAT64) AS time_in_step,\n    `timestamp`,\n    finished_time,\n    step_execution_order,\n    'valihwap' AS instance\nFROM\n    `virginia-lihwap-pay.analytics_talkdesk_staging.td_studio_flow_report_data_valihwap`\n{% if is_incremental() %}\n\n    -- recalculate latest day's data + previous\n    WHERE `timestamp` >= {{ window_back_full_days('_dbt_max_partition', 3) }}\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/talkdesk/studio_flow_execution_valihwap.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    call_sid,\n    interaction_id,\n    destination_number,\n    CASE\n        WHEN REGEXP_CONTAINS(origin_number, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(origin_number, r'[2-9][0-9]{9}$'))\n    END AS origin_number_hashed,\n    flow_name,\n    flow_id,\n    component_title,\n    step_name,\n    exit,\n    CAST(time_in_step AS FLOAT64) AS time_in_step,\n    `timestamp`,\n    finished_time,\n    step_execution_order,\n    'valihwap' AS instance\nFROM\n    `virginia-lihwap-pay.analytics_talkdesk_staging.td_studio_flow_report_data_valihwap`\n\n\n    -- recalculate latest day's data + previous\n    WHERE `timestamp` >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.calls_promisepay": {"database": "analytics-prod-328313", "schema": "talkdesk", "name": "calls_promisepay", "resource_type": "model", "package_name": "promise_dwh", "path": "talkdesk/calls_promisepay.sql", "original_file_path": "models/talkdesk/calls_promisepay.sql", "unique_id": "model.promise_dwh.calls_promisepay", "fqn": ["promise_dwh", "talkdesk", "calls_promisepay"], "alias": "calls_promisepay", "checksum": {"name": "sha256", "checksum": "e359924fc455cd93841529c5a5823996a9f56f0e02bf1e8c20a53a1dfc1a6cec"}, "config": {"enabled": true, "alias": null, "schema": "talkdesk", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "call_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["talkdesk_phone_display_name", "type"], "partition_by": {"field": "end_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "talkdesk", "partition_by": {"field": "end_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["talkdesk_phone_display_name", "type"], "unique_key": "call_id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379615.739415, "relation_name": "`analytics-prod-328313`.`talkdesk`.`calls_promisepay`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"end_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"talkdesk_phone_display_name\",\"type\"],\n    materialized = 'incremental',\n    unique_key = 'call_id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\nwith phone_name_fix as (\n    select\n        talkdesk_phone_number\n        , MAX(talkdesk_phone_display_name) as phone_display_name\n    from `analytics-dev-328216.talkdesk_api.td_calls_report_data_promisepay`\n    group by 1\n)\n\nselect\n    call_id,\n    callsid,\n    `type`,\n    start_at,\n    end_at,\n    calls.talkdesk_phone_number,\n    phone_display_name as talkdesk_phone_display_name,\n    case\n        when REGEXP_CONTAINS(contact_phone_number, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            then SHA256(REGEXP_EXTRACT(contact_phone_number, r'[2-9][0-9]{9}$'))\n    end as contact_phone_number_hashed,\n    user_id,\n    user_name,\n    user_email,\n    total_time,\n    talk_time,\n    wait_time,\n    hold_time,\n    abandon_time,\n    total_ringing_time,\n    disposition_code,\n    notes,\n    user_voice_rating,\n    ring_groups,\n    ivr_options,\n    is_in_business_hours,\n    is_callback_from_queue,\n    is_transfer,\n    handling_user_id,\n    handling_user_name,\n    handling_user_email,\n    recording_url,\n    is_external_transfer,\n    is_if_no_answer,\n    is_call_forwarding,\n    csat_score,\n    csat_survey_time,\n    team_id,\n    team_name,\n    rating_reason,\n    agent_disconnected,\n    data_status__valid___damaged_,\n    'general' as instance\nfrom\n    `analytics-dev-328216.talkdesk_api.td_calls_report_data_promisepay` as calls\nleft join phone_name_fix as pnf\n    using (talkdesk_phone_number)\n{% if is_incremental() %}\n\n    -- recalculate latest day's data + previous\n    where end_at >= {{ window_back_full_days('_dbt_max_partition', 3) }}\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/talkdesk/calls_promisepay.sql", "compiled": true, "compiled_code": "\n\nwith phone_name_fix as (\n    select\n        talkdesk_phone_number\n        , MAX(talkdesk_phone_display_name) as phone_display_name\n    from `analytics-dev-328216.talkdesk_api.td_calls_report_data_promisepay`\n    group by 1\n)\n\nselect\n    call_id,\n    callsid,\n    `type`,\n    start_at,\n    end_at,\n    calls.talkdesk_phone_number,\n    phone_display_name as talkdesk_phone_display_name,\n    case\n        when REGEXP_CONTAINS(contact_phone_number, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            then SHA256(REGEXP_EXTRACT(contact_phone_number, r'[2-9][0-9]{9}$'))\n    end as contact_phone_number_hashed,\n    user_id,\n    user_name,\n    user_email,\n    total_time,\n    talk_time,\n    wait_time,\n    hold_time,\n    abandon_time,\n    total_ringing_time,\n    disposition_code,\n    notes,\n    user_voice_rating,\n    ring_groups,\n    ivr_options,\n    is_in_business_hours,\n    is_callback_from_queue,\n    is_transfer,\n    handling_user_id,\n    handling_user_name,\n    handling_user_email,\n    recording_url,\n    is_external_transfer,\n    is_if_no_answer,\n    is_call_forwarding,\n    csat_score,\n    csat_survey_time,\n    team_id,\n    team_name,\n    rating_reason,\n    agent_disconnected,\n    data_status__valid___damaged_,\n    'general' as instance\nfrom\n    `analytics-dev-328216.talkdesk_api.td_calls_report_data_promisepay` as calls\nleft join phone_name_fix as pnf\n    using (talkdesk_phone_number)\n\n\n    -- recalculate latest day's data + previous\n    where end_at >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.studio_flow_execution_promisepay": {"database": "analytics-prod-328313", "schema": "talkdesk", "name": "studio_flow_execution_promisepay", "resource_type": "model", "package_name": "promise_dwh", "path": "talkdesk/studio_flow_execution_promisepay.sql", "original_file_path": "models/talkdesk/studio_flow_execution_promisepay.sql", "unique_id": "model.promise_dwh.studio_flow_execution_promisepay", "fqn": ["promise_dwh", "talkdesk", "studio_flow_execution_promisepay"], "alias": "studio_flow_execution_promisepay", "checksum": {"name": "sha256", "checksum": "d4d3065965d0486dd2e2c1a8f1c2d35274a610b753265379e94181828f1a06d4"}, "config": {"enabled": true, "alias": null, "schema": "talkdesk", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["call_sid", "destination_number"], "partition_by": {"field": "timestamp", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "talkdesk", "partition_by": {"field": "timestamp", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["call_sid", "destination_number"], "incremental_strategy": "insert_overwrite"}, "created_at": 1715379615.742975, "relation_name": "`analytics-prod-328313`.`talkdesk`.`studio_flow_execution_promisepay`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"timestamp\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"call_sid\",\"destination_number\"],\n    materialized = 'incremental',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\nSELECT\n    call_sid,\n    interaction_id,\n    destination_number,\n    CASE\n        WHEN REGEXP_CONTAINS(origin_number, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(origin_number, r'[2-9][0-9]{9}$'))\n    END AS origin_number_hashed,\n    flow_name,\n    flow_id,\n    component_title,\n    step_name,\n    exit,\n    CAST(time_in_step AS FLOAT64) AS time_in_step,\n    `timestamp`,\n    finished_time,\n    step_execution_order,\n    'general' AS instance\nFROM\n    `analytics-dev-328216.talkdesk_api.td_studio_flow_report_data_promisepay`\n{% if is_incremental() %}\n\n    -- recalculate latest day's data + previous\n    WHERE `timestamp` >= {{ window_back_full_days('_dbt_max_partition', 3) }}\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/talkdesk/studio_flow_execution_promisepay.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    call_sid,\n    interaction_id,\n    destination_number,\n    CASE\n        WHEN REGEXP_CONTAINS(origin_number, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(origin_number, r'[2-9][0-9]{9}$'))\n    END AS origin_number_hashed,\n    flow_name,\n    flow_id,\n    component_title,\n    step_name,\n    exit,\n    CAST(time_in_step AS FLOAT64) AS time_in_step,\n    `timestamp`,\n    finished_time,\n    step_execution_order,\n    'general' AS instance\nFROM\n    `analytics-dev-328216.talkdesk_api.td_studio_flow_report_data_promisepay`\n\n\n    -- recalculate latest day's data + previous\n    WHERE `timestamp` >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.events_wide": {"database": "analytics-prod-328313", "schema": "amplitude", "name": "events_wide", "resource_type": "model", "package_name": "promise_dwh", "path": "amplitude/events_wide.sql", "original_file_path": "models/amplitude/events_wide.sql", "unique_id": "model.promise_dwh.events_wide", "fqn": ["promise_dwh", "amplitude", "events_wide"], "alias": "events_wide", "checksum": {"name": "sha256", "checksum": "7f2bf40f7af690ea9059d9b923ce78860ee1ce45f24c5397a8e71cb51ca8e13d"}, "config": {"enabled": true, "alias": null, "schema": "amplitude", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "amplitude_session_id", "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "session_start_time", "data_type": "timestamp", "granularity": "day"}}, "tags": ["utility_upload_trigger"], "description": "The final, sessionized events table that uses the device_user_map to make sure that all events from a device are assigned to the correct user.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/amplitude/amplitude.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "pre-hook": "{{ jsonObjectKeys() }}", "schema": "amplitude", "unique_key": "amplitude_session_id", "on_schema_change": "sync_all_columns", "partition_by": {"field": "session_start_time", "data_type": "timestamp", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "tags": ["utility_upload_trigger"]}, "created_at": 1715379616.80191, "relation_name": "`analytics-prod-328313`.`amplitude`.`events_wide`", "raw_code": "-- Ignore long lines for linting in this file\n-- noqa: disable=LT05\n{{\n  config(\n        materialized='incremental',\n        unique_key='amplitude_session_id',\n        on_schema_change='sync_all_columns',\n        partition_by={\n                \"field\": \"session_start_time\",\n                \"data_type\": \"timestamp\",\n                \"granularity\": \"day\"\n        },\n        incremental_strategy = 'insert_overwrite',\n        tags = \"utility_upload_trigger\"\n    )\n}}\n\n{% if target.name == \"dev\" %}\n{{ config(enabled=false) }}\n{% endif %}\n\n{% set event_attribs = dbt_utils.get_column_values(\n        table=ref('event_attributes'),\n        column='attributes'\n) %}\n\n{% set user_attribs = dbt_utils.get_column_values(\n        table=ref('user_attributes'),\n        column='attributes'\n) %}\n\n{% set other_attribs = dbt_utils.get_column_values(\n        table=ref('other_attributes'),\n        column='attributes'\n) %}\n{% set user_attrib_count = user_attribs|length %}\n\n-- Amplitude reports event sequences across a user's lifetime. In order to calculate an event's sequence in a session, we need to know the min() for the session\nWITH sequencing AS (\n    SELECT\n        -- Since session_id is not unique, we concat it with the user_id to make it more unique. We use last_user_id from the device_user_map when it exists, \n        -- but fall back to user_id when it doesn't. If the user has no user_id (because they're unidentified) we fall all the way back to device_id\n        CONCAT(CAST(session_id AS STRING), '|', COALESCE(last_user_id, user_id, device_id)) AS amplitude_session_id\n        , MIN(id) AS session_event_seq_start\n    FROM `analytics-dev-328216.amplitude.event`\n    LEFT JOIN {{ ref('device_user_map') }} AS device_user_map USING (device_id)\n    {% if is_incremental() %}\n        -- recalculate latest day's data + previous\n        WHERE client_event_time >= {{ window_back_full_days('_dbt_max_partition', 2) }}\n    {% endif %}\n    GROUP BY 1\n)\n\nSELECT\n    CONCAT(CAST(session_id AS STRING), '|', COALESCE(last_user_id, user_id, device_id)) AS amplitude_session_id\n    , CASE\n        WHEN session_id > 0 -- When events are part of an actual session\n            THEN TIMESTAMP_MILLIS(session_id)\n        ELSE client_event_time -- When session_id = -1, event was server-fired, could be async\n    END AS session_start_time\n    -- We use last_user_id from the device_user_map when it exists, but fall back to user_id when it doesn't.\n    , COALESCE(last_user_id, user_id) AS user_id\n    , device_id\n    , device_brand\n    , device_carrier\n    , device_family\n    , device_manufacturer\n    , device_model\n    , device_type\n    , os_name\n    , os_version\n    , platform\n    , app\n    , `language`\n    , project_name\n    -- Because user_creation_time is tied to user_id, we rely on last_user_creation_time from device_user_map when it exists\n    , COALESCE(last_user_creation_time, user_creation_time) AS user_creation_time\n    -- Jurisidiction is stored as an event_property, but is actually a user_property so we explicitly pull it out here\n    , JSON_VALUE(event_properties, '$.jurisdiction') AS jurisdiction\n    , MIN(city) AS city\n    , MIN(dma) AS dma\n    , MIN(region) AS region\n    , MIN(country) AS country\n    -- We flatten all the user_attributes into their own columns here and wrap them in MIN() so that any attributes that were set during the session are applied to the whole session\n    {% for attrib_name in user_attribs %} -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.{{attrib_name}}')) AS {{attrib_name}} -- noqa\n    {% endfor %} -- noqa\n    -- This creates an array of structs for each event that happens within the session. This nested format takes advantage of BigQuery performance optimizations\n    , ARRAY_AGG(\n        STRUCT(\n            client_event_time\n            , amplitude_id\n            , event_type\n            , id AS lifetime_event_sequence\n            , 1 + id - session_event_seq_start AS session_event_sequence\n            -- We flatten all the event_attributes into their own columns here, except \"jurisdiction\", which is explicitly included at the session level above\n            {%- for attrib_name in event_attribs|reject(\"eq\", \"jurisdiction\") %}\n                , JSON_VALUE(event_properties, '$.{{ attrib_name }}') AS `{{ attrib_name }}`\n            {%- endfor %}\n            -- We flatten all the other_attributes into their own columns here.\n            {%- for attrib_name in other_attribs %}\n                , JSON_VALUE(data, '$.{{ attrib_name }}') AS `{{ attrib_name }}`\n            {%- endfor %}\n        )\n    ) AS events\nFROM\n    `analytics-dev-328216.amplitude.event`\nLEFT JOIN {{ ref('device_user_map') }} AS device_user_map USING (device_id)\nLEFT JOIN sequencing s ON s.amplitude_session_id = CONCAT(CAST(session_id AS STRING), '|', COALESCE(last_user_id, user_id))\n{% if is_incremental() %}\n    -- recalculate latest day's data + previous\n    WHERE client_event_time >= {{ window_back_full_days('_dbt_max_partition', 2) }}\n{% endif %}\n{{ dbt_utils.group_by(18) }}", "language": "sql", "refs": [{"name": "event_attributes", "package": null, "version": null}, {"name": "user_attributes", "package": null, "version": null}, {"name": "other_attributes", "package": null, "version": null}, {"name": "device_user_map", "package": null, "version": null}, {"name": "device_user_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt.is_incremental", "macro.dbt_utils.group_by", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.window_back_full_days"], "nodes": ["model.promise_dwh.event_attributes", "model.promise_dwh.user_attributes", "model.promise_dwh.other_attributes", "model.promise_dwh.device_user_map"]}, "compiled_path": "target/compiled/promise_dwh/models/amplitude/events_wide.sql", "compiled": true, "compiled_code": "-- Ignore long lines for linting in this file\n-- noqa: disable=LT05\n\n\n\n\n\n\n\n\n\n\n\n-- Amplitude reports event sequences across a user's lifetime. In order to calculate an event's sequence in a session, we need to know the min() for the session\nWITH sequencing AS (\n    SELECT\n        -- Since session_id is not unique, we concat it with the user_id to make it more unique. We use last_user_id from the device_user_map when it exists, \n        -- but fall back to user_id when it doesn't. If the user has no user_id (because they're unidentified) we fall all the way back to device_id\n        CONCAT(CAST(session_id AS STRING), '|', COALESCE(last_user_id, user_id, device_id)) AS amplitude_session_id\n        , MIN(id) AS session_event_seq_start\n    FROM `analytics-dev-328216.amplitude.event`\n    LEFT JOIN `analytics-prod-328313`.`amplitude`.`device_user_map` AS device_user_map USING (device_id)\n    \n        -- recalculate latest day's data + previous\n        WHERE client_event_time >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 2 DAY)\n\n    \n    GROUP BY 1\n)\n\nSELECT\n    CONCAT(CAST(session_id AS STRING), '|', COALESCE(last_user_id, user_id, device_id)) AS amplitude_session_id\n    , CASE\n        WHEN session_id > 0 -- When events are part of an actual session\n            THEN TIMESTAMP_MILLIS(session_id)\n        ELSE client_event_time -- When session_id = -1, event was server-fired, could be async\n    END AS session_start_time\n    -- We use last_user_id from the device_user_map when it exists, but fall back to user_id when it doesn't.\n    , COALESCE(last_user_id, user_id) AS user_id\n    , device_id\n    , device_brand\n    , device_carrier\n    , device_family\n    , device_manufacturer\n    , device_model\n    , device_type\n    , os_name\n    , os_version\n    , platform\n    , app\n    , `language`\n    , project_name\n    -- Because user_creation_time is tied to user_id, we rely on last_user_creation_time from device_user_map when it exists\n    , COALESCE(last_user_creation_time, user_creation_time) AS user_creation_time\n    -- Jurisidiction is stored as an event_property, but is actually a user_property so we explicitly pull it out here\n    , JSON_VALUE(event_properties, '$.jurisdiction') AS jurisdiction\n    , MIN(city) AS city\n    , MIN(dma) AS dma\n    , MIN(region) AS region\n    , MIN(country) AS country\n    -- We flatten all the user_attributes into their own columns here and wrap them in MIN() so that any attributes that were set during the session are applied to the whole session\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.referrer')) AS referrer -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.utm_content')) AS utm_content -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_referring_domain')) AS initial_referring_domain -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_utm_campaign')) AS initial_utm_campaign -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_utm_content')) AS initial_utm_content -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.referring_domain')) AS referring_domain -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_utm_medium')) AS initial_utm_medium -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.utm_source')) AS utm_source -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_utm_source')) AS initial_utm_source -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.is_admin')) AS is_admin -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.id')) AS id -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_referrer')) AS initial_referrer -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.utm_campaign')) AS utm_campaign -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.utm_medium')) AS utm_medium -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.account_type')) AS account_type -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.utm_term')) AS utm_term -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_utm_term')) AS initial_utm_term -- noqa\n     -- noqa\n    -- This creates an array of structs for each event that happens within the session. This nested format takes advantage of BigQuery performance optimizations\n    , ARRAY_AGG(\n        STRUCT(\n            client_event_time\n            , amplitude_id\n            , event_type\n            , id AS lifetime_event_sequence\n            , 1 + id - session_event_seq_start AS session_event_sequence\n            -- We flatten all the event_attributes into their own columns here, except \"jurisdiction\", which is explicitly included at the session level above\n                , JSON_VALUE(event_properties, '$.on_behalf_of_user_id') AS `on_behalf_of_user_id`\n                , JSON_VALUE(event_properties, '$.text') AS `text`\n                , JSON_VALUE(event_properties, '$.is_client_initiated') AS `is_client_initiated`\n                , JSON_VALUE(event_properties, '$.machineIp') AS `machineIp`\n                , JSON_VALUE(event_properties, '$.questionnaire_step') AS `questionnaire_step`\n                , JSON_VALUE(event_properties, '$.utm_medium') AS `utm_medium`\n                , JSON_VALUE(event_properties, '$.splitVersionNumber') AS `splitVersionNumber`\n                , JSON_VALUE(event_properties, '$.time') AS `time`\n                , JSON_VALUE(event_properties, '$.is_at_risk') AS `is_at_risk`\n                , JSON_VALUE(event_properties, '$.is_eligible_for_extension') AS `is_eligible_for_extension`\n                , JSON_VALUE(event_properties, '$.treatment') AS `treatment`\n                , JSON_VALUE(event_properties, '$.day') AS `day`\n                , JSON_VALUE(event_properties, '$.questionnaire_id') AS `questionnaire_id`\n                , JSON_VALUE(event_properties, '$.is_past_due') AS `is_past_due`\n                , JSON_VALUE(event_properties, '$.min_installments') AS `min_installments`\n                , JSON_VALUE(event_properties, '$.keyType') AS `keyType`\n                , JSON_VALUE(event_properties, '$.status') AS `status`\n                , JSON_VALUE(event_properties, '$.utm_content') AS `utm_content`\n                , JSON_VALUE(event_properties, '$.days') AS `days`\n                , JSON_VALUE(event_properties, '$.label') AS `label`\n                , JSON_VALUE(event_properties, '$.split') AS `split`\n                , JSON_VALUE(event_properties, '$.environmentName') AS `environmentName`\n                , JSON_VALUE(event_properties, '$.num_plan_options') AS `num_plan_options`\n                , JSON_VALUE(event_properties, '$.hour') AS `hour`\n                , JSON_VALUE(event_properties, '$.option_idx') AS `option_idx`\n                , JSON_VALUE(event_properties, '$.is_new_enrollment') AS `is_new_enrollment`\n                , JSON_VALUE(event_properties, '$.is_water_off') AS `is_water_off`\n                , JSON_VALUE(event_properties, '$.is_in_collections') AS `is_in_collections`\n                , JSON_VALUE(event_properties, '$.context') AS `context`\n                , JSON_VALUE(event_properties, '$.has_error') AS `has_error`\n                , JSON_VALUE(event_properties, '$.sdk') AS `sdk`\n                , JSON_VALUE(event_properties, '$.max_installments') AS `max_installments`\n                , JSON_VALUE(event_properties, '$.source') AS `source`\n                , JSON_VALUE(event_properties, '$.plan_type') AS `plan_type`\n                , JSON_VALUE(event_properties, '$.amount_cents') AS `amount_cents`\n                , JSON_VALUE(event_properties, '$.sdkVersion') AS `sdkVersion`\n                , JSON_VALUE(event_properties, '$.obligation_amount_cents') AS `obligation_amount_cents`\n                , JSON_VALUE(event_properties, '$.num_payments') AS `num_payments`\n                , JSON_VALUE(event_properties, '$.id') AS `id`\n                , JSON_VALUE(event_properties, '$.payment_method') AS `payment_method`\n                , JSON_VALUE(event_properties, '$.environmentId') AS `environmentId`\n                , JSON_VALUE(event_properties, '$.min_installment_amount_cents') AS `min_installment_amount_cents`\n                , JSON_VALUE(event_properties, '$.machineName') AS `machineName`\n                , JSON_VALUE(event_properties, '$.type') AS `type`\n                , JSON_VALUE(event_properties, '$.max_installment_amount_cents') AS `max_installment_amount_cents`\n                , JSON_VALUE(event_properties, '$.relief_amount_cents') AS `relief_amount_cents`\n                , JSON_VALUE(event_properties, '$.lihwap_application_status') AS `lihwap_application_status`\n                , JSON_VALUE(event_properties, '$.lihwap_application_ref') AS `lihwap_application_ref`\n                , JSON_VALUE(event_properties, '$.lihwap_exit_application_reason') AS `lihwap_exit_application_reason`\n                , JSON_VALUE(event_properties, '$.bucketingKey') AS `bucketingKey`\n                , JSON_VALUE(event_properties, '$.altMobileLogin') AS `altMobileLogin`\n            -- We flatten all the other_attributes into their own columns here.\n                , JSON_VALUE(data, '$.group_ids') AS `group_ids`\n                , JSON_VALUE(data, '$.user_properties_updated') AS `user_properties_updated`\n                , JSON_VALUE(data, '$.group_first_event') AS `group_first_event`\n                , JSON_VALUE(data, '$.path') AS `path`\n                , JSON_VALUE(data, '$.first_event') AS `first_event`\n        )\n    ) AS events\nFROM\n    `analytics-dev-328216.amplitude.event`\nLEFT JOIN `analytics-prod-328313`.`amplitude`.`device_user_map` AS device_user_map USING (device_id)\nLEFT JOIN sequencing s ON s.amplitude_session_id = CONCAT(CAST(session_id AS STRING), '|', COALESCE(last_user_id, user_id))\n\n    -- recalculate latest day's data + previous\n    WHERE client_event_time >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 2 DAY)\n\n\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.event_attributes": {"database": "analytics-prod-328313", "schema": "amplitude", "name": "event_attributes", "resource_type": "model", "package_name": "promise_dwh", "path": "amplitude/event_attributes.sql", "original_file_path": "models/amplitude/event_attributes.sql", "unique_id": "model.promise_dwh.event_attributes", "fqn": ["promise_dwh", "amplitude", "event_attributes"], "alias": "event_attributes", "checksum": {"name": "sha256", "checksum": "bda6db554927be353f3b1e0c656883ac52927cb8b0717fc46b2a507926d2eabd"}, "config": {"enabled": true, "alias": null, "schema": "amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "attributes", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table for finding all keys stored in the JSON of the event_properties field", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/amplitude/amplitude.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "pre-hook": "{{ jsonObjectKeys() }}", "schema": "amplitude", "unique_key": "attributes"}, "created_at": 1715379616.80067, "relation_name": "`analytics-prod-328313`.`amplitude`.`event_attributes`", "raw_code": "{{\n  config(\n    materialized = \"incremental\",\n    unique_key='attributes'\n  )\n}}\n\nWITH keys AS (\n    SELECT\n        {{ this.schema }}.jsonObjectKeys(event_properties) AS keys\n    FROM\n        `analytics-dev-328216.amplitude.event`\n    WHERE\n        event_properties IS NOT NULL\n        {%- if is_incremental() %}\n            -- recalculate latest day's data + previous\n            AND client_event_time\n            >= timestamp_sub(current_timestamp(), INTERVAL 3 DAY)\n        {%- endif %}\n)\n\nSELECT DISTINCT k AS attributes\nFROM keys\nCROSS JOIN unnest(keys.keys) AS k\nORDER BY k", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.jsonObjectKeys"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/amplitude/event_attributes.sql", "compiled": true, "compiled_code": "\n\nWITH keys AS (\n    SELECT\n        amplitude.jsonObjectKeys(event_properties) AS keys\n    FROM\n        `analytics-dev-328216.amplitude.event`\n    WHERE\n        event_properties IS NOT NULL\n            -- recalculate latest day's data + previous\n            AND client_event_time\n            >= timestamp_sub(current_timestamp(), INTERVAL 3 DAY)\n)\n\nSELECT DISTINCT k AS attributes\nFROM keys\nCROSS JOIN unnest(keys.keys) AS k\nORDER BY k", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.other_attributes": {"database": "analytics-prod-328313", "schema": "amplitude", "name": "other_attributes", "resource_type": "model", "package_name": "promise_dwh", "path": "amplitude/other_attributes.sql", "original_file_path": "models/amplitude/other_attributes.sql", "unique_id": "model.promise_dwh.other_attributes", "fqn": ["promise_dwh", "amplitude", "other_attributes"], "alias": "other_attributes", "checksum": {"name": "sha256", "checksum": "e4b0e818da1b8f2b2e71ca2cd98b86f71a26ac350414a3900b88208bb49a990d"}, "config": {"enabled": true, "alias": null, "schema": "amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "attributes", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table for finding all keys stored in the JSON of the data field", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/amplitude/amplitude.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "pre-hook": "{{ jsonObjectKeys() }}", "schema": "amplitude", "unique_key": "attributes"}, "created_at": 1715379616.801245, "relation_name": "`analytics-prod-328313`.`amplitude`.`other_attributes`", "raw_code": "{{\n  config(\n    materialized = \"incremental\",\n    unique_key='attributes'\n  )\n}}\n\nWITH keys AS (\n    SELECT amplitude.jsonObjectKeys(data) AS keys\n    FROM\n        `analytics-dev-328216.amplitude.event`\n    WHERE\n        data IS NOT NULL\n        {%- if is_incremental() %}\n            -- recalculate latest day's data + previous\n            AND client_event_time\n            >= timestamp_sub(current_timestamp(), INTERVAL 3 DAY)\n        {%- endif %}\n)\n\nSELECT DISTINCT k AS attributes\nFROM keys\nCROSS JOIN unnest(keys.keys) AS k\nORDER BY k", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.jsonObjectKeys"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/amplitude/other_attributes.sql", "compiled": true, "compiled_code": "\n\nWITH keys AS (\n    SELECT amplitude.jsonObjectKeys(data) AS keys\n    FROM\n        `analytics-dev-328216.amplitude.event`\n    WHERE\n        data IS NOT NULL\n            -- recalculate latest day's data + previous\n            AND client_event_time\n            >= timestamp_sub(current_timestamp(), INTERVAL 3 DAY)\n)\n\nSELECT DISTINCT k AS attributes\nFROM keys\nCROSS JOIN unnest(keys.keys) AS k\nORDER BY k", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.session_facts": {"database": "analytics-prod-328313", "schema": "amplitude", "name": "session_facts", "resource_type": "model", "package_name": "promise_dwh", "path": "amplitude/session_facts.sql", "original_file_path": "models/amplitude/session_facts.sql", "unique_id": "model.promise_dwh.session_facts", "fqn": ["promise_dwh", "amplitude", "session_facts"], "alias": "session_facts", "checksum": {"name": "sha256", "checksum": "b6fe7ea8207d55063ee8a2744194d27aa9476a7f9891863a67ae4448e14a52ad"}, "config": {"enabled": true, "alias": null, "schema": "amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "amplitude_session_id", "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "session_start_time", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "An incrementally built log of all sessions (useful for performing operations across all sessions without having to scan the full events table)", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/amplitude/amplitude.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "pre-hook": "{{ jsonObjectKeys() }}", "schema": "amplitude", "unique_key": "amplitude_session_id", "on_schema_change": "sync_all_columns", "partition_by": {"field": "session_start_time", "data_type": "timestamp", "granularity": "day"}, "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.8014631, "relation_name": "`analytics-prod-328313`.`amplitude`.`session_facts`", "raw_code": "{{\n  config(\n        materialized='incremental',\n        unique_key='amplitude_session_id',\n        on_schema_change='sync_all_columns',\n        partition_by={\n            \"field\": \"session_start_time\",\n            \"data_type\": \"timestamp\",\n            \"granularity\": \"day\"\n            },\n        incremental_strategy = 'insert_overwrite'\n    )\n}}\n\nSELECT\n    session_id\n    , device_id\n    , user_id\n    , user_creation_time\n    , CASE\n        WHEN session_id > 0 -- When events are part of an actual session\n            THEN TIMESTAMP_MILLIS(session_id)\n        ELSE client_event_time -- When session_id = -1, event was server-fired, could be async\n    END AS session_start_time\n    , MAX(client_event_time) AS last_event_ts\nFROM `analytics-dev-328216.amplitude.event`\n{% if is_incremental() %}\n    -- recalculate latest day's data + previous\n    WHERE\n        client_event_time >= {{ window_back_full_days('_dbt_max_partition', 2) }}\n{% endif %}\n{{ dbt_utils.group_by(5) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.group_by", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/amplitude/session_facts.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    session_id\n    , device_id\n    , user_id\n    , user_creation_time\n    , CASE\n        WHEN session_id > 0 -- When events are part of an actual session\n            THEN TIMESTAMP_MILLIS(session_id)\n        ELSE client_event_time -- When session_id = -1, event was server-fired, could be async\n    END AS session_start_time\n    , MAX(client_event_time) AS last_event_ts\nFROM `analytics-dev-328216.amplitude.event`\n\n    -- recalculate latest day's data + previous\n    WHERE\n        client_event_time >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 2 DAY)\n\n\ngroup by 1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.device_user_map": {"database": "analytics-prod-328313", "schema": "amplitude", "name": "device_user_map", "resource_type": "model", "package_name": "promise_dwh", "path": "amplitude/device_user_map.sql", "original_file_path": "models/amplitude/device_user_map.sql", "unique_id": "model.promise_dwh.device_user_map", "fqn": ["promise_dwh", "amplitude", "device_user_map"], "alias": "device_user_map", "checksum": {"name": "sha256", "checksum": "d4f0c5ed761ee0b2a33ed6f31bb41c624b8f0cdbd6c225e574f67ad557aea767"}, "config": {"enabled": true, "alias": null, "schema": "amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A view to find the user_id most recently associated with a particular device_id (and that user_id's creation time). We expect that a single user_id might have multiple (or even many) devices associated with it (e.g. a user using public computers). But other than admins, a single device should rarely, if ever, be associated with multiple user_ids. This mimics the user_id merging that Amplitude does but doesn't expose to Fivetran", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/amplitude/amplitude.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "pre-hook": "{{ jsonObjectKeys() }}", "schema": "amplitude"}, "created_at": 1715379616.801696, "relation_name": "`analytics-prod-328313`.`amplitude`.`device_user_map`", "raw_code": "{{\n  config(\n        materialized='view',\n    )\n}}\n\nWITH\n-- We intentionally want to exclude certain devices from this query\n-- that are associated with many user_ids \ndevices_to_include AS (\n    SELECT\n        device_id,\n        COUNT(DISTINCT user_id) AS count_distinct_user_ids\n    FROM\n        {{ ref('session_facts') }}\n    WHERE\n    -- We don't take into account events where the user had not been identified\n        user_id IS NOT NULL\n        -- We exclude user_ids that look like email addresses, since these all \n        -- belong either to Promise staff or customer staff\n        AND user_id NOT LIKE '%@%'\n        -- We exclude server-side events, which have a session_id of -1, since \n        -- these have constantly changing device_ids\n        AND session_id != -1\n    GROUP BY\n        1\n    -- There is a small number of devices that aren't excluded by the above \n    -- predicate that still have many user_ids associated with them. We exclude\n    -- those with this HAVING clause\n    HAVING\n        COUNT(DISTINCT user_id) <= 3\n)\n\nSELECT\n    -- For each device above\n    device_id,\n    -- we find the the non-null user_id most recently associated with this\n    -- device\n    ARRAY_AGG(\n        user_id IGNORE NULLS\n        ORDER BY session_start_time DESC, last_event_ts DESC LIMIT 1\n    )[SAFE_OFFSET(0)] AS last_user_id,\n    -- as well as the user_creation_time of this user_id\n    ARRAY_AGG(\n        user_creation_time IGNORE NULLS\n        ORDER BY session_start_time DESC, last_event_ts DESC LIMIT 1\n    )[SAFE_OFFSET(0)] AS last_user_creation_time\nFROM\n    {{ ref('session_facts') }} ew\nINNER JOIN\n    devices_to_include dti\n    USING (device_id)\nWHERE\n    user_id IS NOT NULL\n    AND user_id NOT LIKE '%@%'\n    AND session_id != -1\nGROUP BY 1", "language": "sql", "refs": [{"name": "session_facts", "package": null, "version": null}, {"name": "session_facts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.jsonObjectKeys"], "nodes": ["model.promise_dwh.session_facts"]}, "compiled_path": "target/compiled/promise_dwh/models/amplitude/device_user_map.sql", "compiled": true, "compiled_code": "\n\nWITH\n-- We intentionally want to exclude certain devices from this query\n-- that are associated with many user_ids \ndevices_to_include AS (\n    SELECT\n        device_id,\n        COUNT(DISTINCT user_id) AS count_distinct_user_ids\n    FROM\n        `analytics-prod-328313`.`amplitude`.`session_facts`\n    WHERE\n    -- We don't take into account events where the user had not been identified\n        user_id IS NOT NULL\n        -- We exclude user_ids that look like email addresses, since these all \n        -- belong either to Promise staff or customer staff\n        AND user_id NOT LIKE '%@%'\n        -- We exclude server-side events, which have a session_id of -1, since \n        -- these have constantly changing device_ids\n        AND session_id != -1\n    GROUP BY\n        1\n    -- There is a small number of devices that aren't excluded by the above \n    -- predicate that still have many user_ids associated with them. We exclude\n    -- those with this HAVING clause\n    HAVING\n        COUNT(DISTINCT user_id) <= 3\n)\n\nSELECT\n    -- For each device above\n    device_id,\n    -- we find the the non-null user_id most recently associated with this\n    -- device\n    ARRAY_AGG(\n        user_id IGNORE NULLS\n        ORDER BY session_start_time DESC, last_event_ts DESC LIMIT 1\n    )[SAFE_OFFSET(0)] AS last_user_id,\n    -- as well as the user_creation_time of this user_id\n    ARRAY_AGG(\n        user_creation_time IGNORE NULLS\n        ORDER BY session_start_time DESC, last_event_ts DESC LIMIT 1\n    )[SAFE_OFFSET(0)] AS last_user_creation_time\nFROM\n    `analytics-prod-328313`.`amplitude`.`session_facts` ew\nINNER JOIN\n    devices_to_include dti\n    USING (device_id)\nWHERE\n    user_id IS NOT NULL\n    AND user_id NOT LIKE '%@%'\n    AND session_id != -1\nGROUP BY 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.user_attributes": {"database": "analytics-prod-328313", "schema": "amplitude", "name": "user_attributes", "resource_type": "model", "package_name": "promise_dwh", "path": "amplitude/user_attributes.sql", "original_file_path": "models/amplitude/user_attributes.sql", "unique_id": "model.promise_dwh.user_attributes", "fqn": ["promise_dwh", "amplitude", "user_attributes"], "alias": "user_attributes", "checksum": {"name": "sha256", "checksum": "8401a2542faedce1b30bca98f9d2bbb1a223f35cf46f24bbc828b7c9cabe116b"}, "config": {"enabled": true, "alias": null, "schema": "amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "attributes", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table for finding all keys stored in the JSON of the user_properties field", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/amplitude/amplitude.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "pre-hook": "{{ jsonObjectKeys() }}", "schema": "amplitude", "unique_key": "attributes"}, "created_at": 1715379616.8009868, "relation_name": "`analytics-prod-328313`.`amplitude`.`user_attributes`", "raw_code": "{{\n  config(\n    materialized = \"incremental\",\n    unique_key='attributes'\n  )\n}}\n\nWITH keys AS (\n    SELECT\n        {{ this.schema }}.jsonObjectKeys(user_properties) AS keys\n    FROM\n        `analytics-dev-328216.amplitude.event`\n    WHERE\n        user_properties IS NOT NULL\n        {%- if is_incremental() %}\n            -- recalculate latest day's data + previous\n            AND client_event_time\n            >= timestamp_sub(current_timestamp(), INTERVAL 3 DAY)\n        {%- endif %}\n)\n\nSELECT DISTINCT k AS attributes\nFROM keys\nCROSS JOIN unnest(keys.keys) AS k\nORDER BY k", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.jsonObjectKeys"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/amplitude/user_attributes.sql", "compiled": true, "compiled_code": "\n\nWITH keys AS (\n    SELECT\n        amplitude.jsonObjectKeys(user_properties) AS keys\n    FROM\n        `analytics-dev-328216.amplitude.event`\n    WHERE\n        user_properties IS NOT NULL\n            -- recalculate latest day's data + previous\n            AND client_event_time\n            >= timestamp_sub(current_timestamp(), INTERVAL 3 DAY)\n)\n\nSELECT DISTINCT k AS attributes\nFROM keys\nCROSS JOIN unnest(keys.keys) AS k\nORDER BY k", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.company": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "company", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/company.sql", "original_file_path": "models/hubspot/company.sql", "unique_id": "model.promise_dwh.company", "fqn": ["promise_dwh", "hubspot", "company"], "alias": "company", "checksum": {"name": "sha256", "checksum": "f3677f4e6f98a0a46328adca2e8623ef2c81795fae45cbbd29277494f8538383"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.776293, "relation_name": "`analytics-prod-328313`.`hubspot`.`company`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    id,\n    -- , _fivetran_synced\n    -- , is_deleted\n    portal_id,\n    property_address,\n    property_address_2,\n    property_annualrevenue,\n    -- , property_application_process\n    property_city,\n    -- , property_closedate\n    -- , property_company_type\n    property_country,\n    property_createdate,\n    -- , property_current_online_ticket_provider_if_applicable_\n    -- , property_days_to_close\n    -- , property_demographics_asian\n    -- , property_demographics_black\n    -- , property_demographics_hispanic\n    -- , property_demographics_white\n    property_description,\n    property_domain,\n    -- , property_engagements_last_meeting_booked\n    property_facebook_company_page,\n    property_first_contact_createdate,\n    -- , property_first_contact_createdate_timestamp_earliest_value_78_b_50_eea\n    property_first_deal_created_date,\n    property_founded_year,\n    -- , property_how_are_court_dates_communicated_\n    property_hs_all_accessible_team_ids,\n    property_hs_all_owner_ids,\n    property_hs_all_team_ids,\n    property_hs_analytics_first_timestamp,\n    property_hs_analytics_first_visit_timestamp,\n    property_hs_analytics_last_timestamp,\n    property_hs_analytics_last_visit_timestamp,\n    property_hs_analytics_num_page_views,\n    property_hs_analytics_num_visits,\n    property_hs_analytics_source,\n    property_hs_analytics_source_data_1,\n    property_hs_analytics_source_data_2,\n    property_hs_created_by_user_id,\n    property_hs_date_entered_customer,\n    property_hs_date_entered_opportunity,\n    property_hs_date_exited_opportunity,\n    property_hs_is_target_account,\n    property_hs_last_booked_meeting_date,\n    property_hs_last_logged_call_date,\n    property_hs_last_open_task_date,\n    property_hs_last_sales_activity_date,\n    property_hs_last_sales_activity_timestamp,\n    property_hs_lastmodifieddate,\n    property_hs_latest_meeting_activity,\n    property_hs_num_blockers,\n    property_hs_num_child_companies,\n    property_hs_num_contacts_with_buying_roles,\n    property_hs_num_decision_makers,\n    property_hs_num_open_deals,\n    property_hs_parent_company_id,\n    property_hs_pipeline,\n    property_hs_sales_email_last_replied,\n    property_hs_target_account_probability,\n    property_hs_target_account_recommendation_state,\n    property_hs_time_in_customer,\n    property_hs_time_in_opportunity,\n    property_hs_total_deal_value,\n    property_hs_updated_by_user_id,\n    property_hs_user_ids_of_all_owners,\n    property_hubspot_owner_assigneddate,\n    property_hubspot_owner_id,\n    property_hubspot_team_id,\n    property_industry,\n    property_is_public,\n    property_lifecyclestage,\n    property_linkedin_company_page,\n    property_linkedinbio,\n    property_name,\n    property_notes_last_contacted,\n    property_notes_last_updated,\n    property_notes_next_activity_date,\n    property_num_associated_contacts,\n    property_num_associated_deals,\n    property_num_contacted_notes,\n    property_num_notes,\n    property_numberofemployees,\n    property_online_ticket_processing_fee,\n    property_payment_plans_are,\n    property_phone,\n    property_population,\n    property_poverty_rate,\n    property_recent_deal_amount,\n    property_recent_deal_close_date,\n    property_referenceable,\n    property_relationship_type,\n    property_senior_executive_name,\n    property_senior_executive_title,\n    property_state,\n    property_ticket_payment_site_for_court,\n    property_ticket_payment_site_non_court_,\n    property_tickets_can_be_paid_,\n    property_tickets_enforced_by,\n    property_timezone,\n    property_total_money_raised,\n    property_total_revenue,\n    property_twitterhandle,\n    property_web_technologies,\n    property_website,\n    property_zip,\n    property_hs_predictivecontactscore_v_2,\n    property_num_conversion_events,\n    property_decision_level,\n    property_recent_conversion_date,\n    property_first_conversion_date,\n    property_first_conversion_event_name,\n    property_recent_conversion_event_name\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/company.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id,\n    -- , _fivetran_synced\n    -- , is_deleted\n    portal_id,\n    property_address,\n    property_address_2,\n    property_annualrevenue,\n    -- , property_application_process\n    property_city,\n    -- , property_closedate\n    -- , property_company_type\n    property_country,\n    property_createdate,\n    -- , property_current_online_ticket_provider_if_applicable_\n    -- , property_days_to_close\n    -- , property_demographics_asian\n    -- , property_demographics_black\n    -- , property_demographics_hispanic\n    -- , property_demographics_white\n    property_description,\n    property_domain,\n    -- , property_engagements_last_meeting_booked\n    property_facebook_company_page,\n    property_first_contact_createdate,\n    -- , property_first_contact_createdate_timestamp_earliest_value_78_b_50_eea\n    property_first_deal_created_date,\n    property_founded_year,\n    -- , property_how_are_court_dates_communicated_\n    property_hs_all_accessible_team_ids,\n    property_hs_all_owner_ids,\n    property_hs_all_team_ids,\n    property_hs_analytics_first_timestamp,\n    property_hs_analytics_first_visit_timestamp,\n    property_hs_analytics_last_timestamp,\n    property_hs_analytics_last_visit_timestamp,\n    property_hs_analytics_num_page_views,\n    property_hs_analytics_num_visits,\n    property_hs_analytics_source,\n    property_hs_analytics_source_data_1,\n    property_hs_analytics_source_data_2,\n    property_hs_created_by_user_id,\n    property_hs_date_entered_customer,\n    property_hs_date_entered_opportunity,\n    property_hs_date_exited_opportunity,\n    property_hs_is_target_account,\n    property_hs_last_booked_meeting_date,\n    property_hs_last_logged_call_date,\n    property_hs_last_open_task_date,\n    property_hs_last_sales_activity_date,\n    property_hs_last_sales_activity_timestamp,\n    property_hs_lastmodifieddate,\n    property_hs_latest_meeting_activity,\n    property_hs_num_blockers,\n    property_hs_num_child_companies,\n    property_hs_num_contacts_with_buying_roles,\n    property_hs_num_decision_makers,\n    property_hs_num_open_deals,\n    property_hs_parent_company_id,\n    property_hs_pipeline,\n    property_hs_sales_email_last_replied,\n    property_hs_target_account_probability,\n    property_hs_target_account_recommendation_state,\n    property_hs_time_in_customer,\n    property_hs_time_in_opportunity,\n    property_hs_total_deal_value,\n    property_hs_updated_by_user_id,\n    property_hs_user_ids_of_all_owners,\n    property_hubspot_owner_assigneddate,\n    property_hubspot_owner_id,\n    property_hubspot_team_id,\n    property_industry,\n    property_is_public,\n    property_lifecyclestage,\n    property_linkedin_company_page,\n    property_linkedinbio,\n    property_name,\n    property_notes_last_contacted,\n    property_notes_last_updated,\n    property_notes_next_activity_date,\n    property_num_associated_contacts,\n    property_num_associated_deals,\n    property_num_contacted_notes,\n    property_num_notes,\n    property_numberofemployees,\n    property_online_ticket_processing_fee,\n    property_payment_plans_are,\n    property_phone,\n    property_population,\n    property_poverty_rate,\n    property_recent_deal_amount,\n    property_recent_deal_close_date,\n    property_referenceable,\n    property_relationship_type,\n    property_senior_executive_name,\n    property_senior_executive_title,\n    property_state,\n    property_ticket_payment_site_for_court,\n    property_ticket_payment_site_non_court_,\n    property_tickets_can_be_paid_,\n    property_tickets_enforced_by,\n    property_timezone,\n    property_total_money_raised,\n    property_total_revenue,\n    property_twitterhandle,\n    property_web_technologies,\n    property_website,\n    property_zip,\n    property_hs_predictivecontactscore_v_2,\n    property_num_conversion_events,\n    property_decision_level,\n    property_recent_conversion_date,\n    property_first_conversion_date,\n    property_first_conversion_event_name,\n    property_recent_conversion_event_name\nFROM\n    `analytics-prod-328313`.`hubspot`.`company`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.property": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "property", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/property.sql", "original_file_path": "models/hubspot/property.sql", "unique_id": "model.promise_dwh.property", "fqn": ["promise_dwh", "hubspot", "property"], "alias": "property", "checksum": {"name": "sha256", "checksum": "4c2accc5e300ef65f63523c679a89234a4d952290fec23ad1829f95aeb2b419b"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.779454, "relation_name": "`analytics-prod-328313`.`hubspot`.`property`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    -- _fivetran_id\n    -- , _fivetran_synced\n    calculated,\n    `description`,\n    field_type,\n    group_name,\n    hubspot_defined,\n    hubspot_object,\n    label,\n    `name`,\n    `type`\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/property.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    -- _fivetran_id\n    -- , _fivetran_synced\n    calculated,\n    `description`,\n    field_type,\n    group_name,\n    hubspot_defined,\n    hubspot_object,\n    label,\n    `name`,\n    `type`\nFROM\n    `analytics-prod-328313`.`hubspot`.`property`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.engagement_meeting": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "engagement_meeting", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/engagement_meeting.sql", "original_file_path": "models/hubspot/engagement_meeting.sql", "unique_id": "model.promise_dwh.engagement_meeting", "fqn": ["promise_dwh", "hubspot", "engagement_meeting"], "alias": "engagement_meeting", "checksum": {"name": "sha256", "checksum": "640611fb652669cd1a60f352dea8d19d0cf48c4c4b0c56bc81603b63fd3322c2"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.782122, "relation_name": "`analytics-prod-328313`.`hubspot`.`engagement_meeting`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    engagement_id,\n    -- , _fivetran_synced\n    body,\n    calendar_event_hash,\n    created_from_link_id,\n    end_time,\n    external_url,\n    i_cal_uid,\n    internal_meeting_notes,\n    `location`,\n    meeting_change_id,\n    meeting_outcome,\n    pre_meeting_prospect_reminders,\n    source,\n    source_id,\n    start_time,\n    title,\n    web_conference_meeting_id,\n    attendee_owner_ids\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/engagement_meeting.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    engagement_id,\n    -- , _fivetran_synced\n    body,\n    calendar_event_hash,\n    created_from_link_id,\n    end_time,\n    external_url,\n    i_cal_uid,\n    internal_meeting_notes,\n    `location`,\n    meeting_change_id,\n    meeting_outcome,\n    pre_meeting_prospect_reminders,\n    source,\n    source_id,\n    start_time,\n    title,\n    web_conference_meeting_id,\n    attendee_owner_ids\nFROM\n    `analytics-prod-328313`.`hubspot`.`engagement_meeting`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.engagement_deal": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "engagement_deal", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/engagement_deal.sql", "original_file_path": "models/hubspot/engagement_deal.sql", "unique_id": "model.promise_dwh.engagement_deal", "fqn": ["promise_dwh", "hubspot", "engagement_deal"], "alias": "engagement_deal", "checksum": {"name": "sha256", "checksum": "17d45d2d0e0edc49e4c79df0cc0ea4701cfcfc8436a72849bedc0f35758c74a5"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.7848299, "relation_name": "`analytics-prod-328313`.`hubspot`.`engagement_deal`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    deal_id,\n    engagement_id\n-- , _fivetran_synced\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/engagement_deal.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    deal_id,\n    engagement_id\n-- , _fivetran_synced\nFROM\n    `analytics-prod-328313`.`hubspot`.`engagement_deal`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.deal_pipeline_stage": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "deal_pipeline_stage", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/deal_pipeline_stage.sql", "original_file_path": "models/hubspot/deal_pipeline_stage.sql", "unique_id": "model.promise_dwh.deal_pipeline_stage", "fqn": ["promise_dwh", "hubspot", "deal_pipeline_stage"], "alias": "deal_pipeline_stage", "checksum": {"name": "sha256", "checksum": "3aff67e8e613966d1a67f94d54d5ea8556c768be2ee07efc6dee08b4dcdd34a9"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.787503, "relation_name": "`analytics-prod-328313`.`hubspot`.`deal_pipeline_stage`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\nSELECT\n    stage_id,\n    -- , _fivetran_deleted\n    -- , _fivetran_synced\n    active,\n    closed_won,\n    display_order,\n    label,\n    pipeline_id,\n    probability\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/deal_pipeline_stage.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    stage_id,\n    -- , _fivetran_deleted\n    -- , _fivetran_synced\n    active,\n    closed_won,\n    display_order,\n    label,\n    pipeline_id,\n    probability\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal_pipeline_stage`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.contact_property_history": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "contact_property_history", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/contact_property_history.sql", "original_file_path": "models/hubspot/contact_property_history.sql", "unique_id": "model.promise_dwh.contact_property_history", "fqn": ["promise_dwh", "hubspot", "contact_property_history"], "alias": "contact_property_history", "checksum": {"name": "sha256", "checksum": "8a76f445f184b71a23f6cc15ccb73523c599eed1e2066bf7c649e7f42f7d09c7"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.791179, "relation_name": "`analytics-prod-328313`.`hubspot`.`contact_property_history`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n-- _fivetran_start\n    contact_id,\n    `name`,\n    -- , _fivetran_active\n    -- , _fivetran_end\n    -- , _fivetran_synced\n    source,\n    source_id,\n    `timestamp`,\n    `value`\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/contact_property_history.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n-- _fivetran_start\n    contact_id,\n    `name`,\n    -- , _fivetran_active\n    -- , _fivetran_end\n    -- , _fivetran_synced\n    source,\n    source_id,\n    `timestamp`,\n    `value`\nFROM\n    `analytics-prod-328313`.`hubspot`.`contact_property_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.engagement_contact": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "engagement_contact", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/engagement_contact.sql", "original_file_path": "models/hubspot/engagement_contact.sql", "unique_id": "model.promise_dwh.engagement_contact", "fqn": ["promise_dwh", "hubspot", "engagement_contact"], "alias": "engagement_contact", "checksum": {"name": "sha256", "checksum": "f7ab880f0bbec8a43b85c472482ea4546cba470ab4fdc92ec7da668254d959e8"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.793838, "relation_name": "`analytics-prod-328313`.`hubspot`.`engagement_contact`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    contact_id,\n    engagement_id\n-- , _fivetran_synced\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/engagement_contact.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    contact_id,\n    engagement_id\n-- , _fivetran_synced\nFROM\n    `analytics-prod-328313`.`hubspot`.`engagement_contact`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.deal_pipeline": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "deal_pipeline", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/deal_pipeline.sql", "original_file_path": "models/hubspot/deal_pipeline.sql", "unique_id": "model.promise_dwh.deal_pipeline", "fqn": ["promise_dwh", "hubspot", "deal_pipeline"], "alias": "deal_pipeline", "checksum": {"name": "sha256", "checksum": "b238455c0896ff291aa2803480b35175ecc03cb9a9ed5fd2edc9fcdbc13b6b0d"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.796491, "relation_name": "`analytics-prod-328313`.`hubspot`.`deal_pipeline`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    pipeline_id,\n    -- , _fivetran_deleted\n    -- , _fivetran_synced\n    active,\n    display_order,\n    label\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/deal_pipeline.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    pipeline_id,\n    -- , _fivetran_deleted\n    -- , _fivetran_synced\n    active,\n    display_order,\n    label\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal_pipeline`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.deal_company": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "deal_company", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/deal_company.sql", "original_file_path": "models/hubspot/deal_company.sql", "unique_id": "model.promise_dwh.deal_company", "fqn": ["promise_dwh", "hubspot", "deal_company"], "alias": "deal_company", "checksum": {"name": "sha256", "checksum": "3900e10d2821d678299ea600b3a4f966996d0cb1bcd139d7e6a753faff2610e7"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.799144, "relation_name": "`analytics-prod-328313`.`hubspot`.`deal_company`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    company_id,\n    deal_id\n-- , _fivetran_synced\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/deal_company.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    company_id,\n    deal_id\n-- , _fivetran_synced\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal_company`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.deal_contact": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "deal_contact", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/deal_contact.sql", "original_file_path": "models/hubspot/deal_contact.sql", "unique_id": "model.promise_dwh.deal_contact", "fqn": ["promise_dwh", "hubspot", "deal_contact"], "alias": "deal_contact", "checksum": {"name": "sha256", "checksum": "f0f172b081bd05fb4588b1037c6b61d5e19b7764b2d0dde3e44830f83723fe28"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.801873, "relation_name": "`analytics-prod-328313`.`hubspot`.`deal_contact`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    contact_id,\n    deal_id\n-- , _fivetran_synced\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/deal_contact.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    contact_id,\n    deal_id\n-- , _fivetran_synced\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal_contact`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.owner": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "owner", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/owner.sql", "original_file_path": "models/hubspot/owner.sql", "unique_id": "model.promise_dwh.owner", "fqn": ["promise_dwh", "hubspot", "owner"], "alias": "owner", "checksum": {"name": "sha256", "checksum": "76b4561bc9936e853b1b5b1e395eeaf70d8eb28113a21c7a504f9d1aa35319e0"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.8044832, "relation_name": "`analytics-prod-328313`.`hubspot`.`owner`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\nSELECT\n    owner_id,\n    active_user_id,\n    created_at,\n    email,\n    first_name,\n    is_active,\n    last_name,\n    portal_id,\n    `type`,\n    updated_at,\n    user_id_including_inactive\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/owner.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    owner_id,\n    active_user_id,\n    created_at,\n    email,\n    first_name,\n    is_active,\n    last_name,\n    portal_id,\n    `type`,\n    updated_at,\n    user_id_including_inactive\nFROM\n    `analytics-prod-328313`.`hubspot`.`owner`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.engagement_company": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "engagement_company", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/engagement_company.sql", "original_file_path": "models/hubspot/engagement_company.sql", "unique_id": "model.promise_dwh.engagement_company", "fqn": ["promise_dwh", "hubspot", "engagement_company"], "alias": "engagement_company", "checksum": {"name": "sha256", "checksum": "5cfe2b492034527631c6cb29db8aa2d02b11c7fa2ca610892a015406f9918585"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.807128, "relation_name": "`analytics-prod-328313`.`hubspot`.`engagement_company`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    company_id,\n    engagement_id\n-- , _fivetran_synced\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/engagement_company.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    company_id,\n    engagement_id\n-- , _fivetran_synced\nFROM\n    `analytics-prod-328313`.`hubspot`.`engagement_company`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.deal_property_history": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "deal_property_history", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/deal_property_history.sql", "original_file_path": "models/hubspot/deal_property_history.sql", "unique_id": "model.promise_dwh.deal_property_history", "fqn": ["promise_dwh", "hubspot", "deal_property_history"], "alias": "deal_property_history", "checksum": {"name": "sha256", "checksum": "d19f211a29a12b232b1dc608bb2419c48969fa622981ca2ab7681198f44575d4"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.8098738, "relation_name": "`analytics-prod-328313`.`hubspot`.`deal_property_history`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    -- _fivetran_start\n    deal_id,\n    `name`,\n    -- , _fivetran_active\n    -- , _fivetran_end\n    -- , _fivetran_synced\n    source,\n    source_id,\n    `timestamp`,\n    `value`\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/deal_property_history.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    -- _fivetran_start\n    deal_id,\n    `name`,\n    -- , _fivetran_active\n    -- , _fivetran_end\n    -- , _fivetran_synced\n    source,\n    source_id,\n    `timestamp`,\n    `value`\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal_property_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.company_property_history": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "company_property_history", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/company_property_history.sql", "original_file_path": "models/hubspot/company_property_history.sql", "unique_id": "model.promise_dwh.company_property_history", "fqn": ["promise_dwh", "hubspot", "company_property_history"], "alias": "company_property_history", "checksum": {"name": "sha256", "checksum": "442d29a323f188436de668fef91999a65f01f97cfef3e1a4d0af9af58add6d28"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.812501, "relation_name": "`analytics-prod-328313`.`hubspot`.`company_property_history`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    --_fivetran_start\n    company_id,\n    `name`,\n    --, _fivetran_active\n    --, _fivetran_end\n    --, _fivetran_synced\n    source,\n    source_id,\n    `timestamp`,\n    `value`\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/company_property_history.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    --_fivetran_start\n    company_id,\n    `name`,\n    --, _fivetran_active\n    --, _fivetran_end\n    --, _fivetran_synced\n    source,\n    source_id,\n    `timestamp`,\n    `value`\nFROM\n    `analytics-prod-328313`.`hubspot`.`company_property_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.engagement": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "engagement", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/engagement.sql", "original_file_path": "models/hubspot/engagement.sql", "unique_id": "model.promise_dwh.engagement", "fqn": ["promise_dwh", "hubspot", "engagement"], "alias": "engagement", "checksum": {"name": "sha256", "checksum": "6e62396ca3bc65e0df4a5271d81e8f7491cc3d3d2c4b1aaa075341501b55c5f2"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.815134, "relation_name": "`analytics-prod-328313`.`hubspot`.`engagement`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    id,\n    -- , _fivetran_synced\n    active,\n    activity_type,\n    created_at,\n    last_updated,\n    owner_id,\n    portal_id,\n    `timestamp`,\n    `type`\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/engagement.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id,\n    -- , _fivetran_synced\n    active,\n    activity_type,\n    created_at,\n    last_updated,\n    owner_id,\n    portal_id,\n    `timestamp`,\n    `type`\nFROM\n    `analytics-prod-328313`.`hubspot`.`engagement`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.deal": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "deal", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/deal.sql", "original_file_path": "models/hubspot/deal.sql", "unique_id": "model.promise_dwh.deal", "fqn": ["promise_dwh", "hubspot", "deal"], "alias": "deal", "checksum": {"name": "sha256", "checksum": "026640c64f95115f6aea342662eeb50f078635d68af8d9c903a33ba7c74d64a6"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.818635, "relation_name": "`analytics-prod-328313`.`hubspot`.`deal`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    deal_id,\n    -- , _fivetran_synced\n    deal_pipeline_id,\n    deal_pipeline_stage_id,\n    is_deleted,\n    is_merged,\n    owner_id,\n    portal_id,\n    property_amount,\n    property_amount_in_home_currency,\n    property_approval_strategy_context,\n    property_avg_arrearage,\n    property_blockers_concerns,\n    property_can_you_pay_a_citation_online_,\n    property_closed_lost_reason,\n    property_closed_won_reason,\n    property_closedate,\n    property_committed,\n    property_contract_date,\n    property_contract_evergreen,\n    property_contract_expiration,\n    property_contract_renewal_campaign,\n    property_createdate,\n    property_days_to_close,\n    property_dealname,\n    property_dealtype,\n    property_delinquent_accounts,\n    property_description,\n    property_engagements_last_meeting_booked,\n    property_flags,\n    property_forecast_model,\n    property_help_needed,\n    property_hs_all_accessible_team_ids,\n    property_hs_all_owner_ids,\n    property_hs_all_team_ids,\n    property_hs_analytics_source,\n    property_hs_analytics_source_data_1,\n    property_hs_analytics_source_data_2,\n    property_hs_closed_amount,\n    property_hs_closed_amount_in_home_currency,\n    property_hs_created_by_user_id,\n    property_hs_createdate,\n    -- , property_hs_date_entered_1_bd_5379_d_74_f_5_4_aa_7_9_e_2_c_ebe_431778_f_7_f_235311591\n    -- , property_hs_date_entered_1_d_6_f_0_c_54_89_db_4955_a_81_f_399_e_1_c_4_a_0_cbd_1988428775\n    -- , property_hs_date_entered_2004_c_8_de_921_a_4_c_46_bc_90_149_a_8_e_9_d_56_ac_1414072509\n    -- , property_hs_date_entered_2439044\n    -- , property_hs_date_entered_2439453\n    -- , property_hs_date_entered_2_d_5_af_470_6365_480_b_b_3_d_2_2_a_7458_a_30_c_0_d_1081712001\n    -- , property_hs_date_entered_305_f_953_c_0198_41_e_7_8263_226_d_92_c_4_f_5_f_7_961705327\n    -- , property_hs_date_entered_3816814\n    -- , property_hs_date_entered_3_a_2_cc_27_c_e_424_433_d_8_ca_5_a_38350_f_5_c_6_ea_1394195149\n    -- , property_hs_date_entered_3_b_9_f_0_c_7_a_6_eb_0_483_a_8_d_35_6944237166_d_5_1610057148\n    -- , property_hs_date_entered_426389\n    -- , property_hs_date_entered_5068_e_5_ca_fd_2_a_4037_a_36_c_14_f_37224365_b_518395357\n    -- , property_hs_date_entered_638152\n    -- , property_hs_date_entered_8394792\n    -- , property_hs_date_entered_a_67_a_3_dcf_21_ad_4_dd_4_98_a_2_da_039_c_0_a_3_c_2_e_527925615\n    -- , property_hs_date_entered_appointmentscheduled\n    -- , property_hs_date_entered_c_146038_c_696_b_4_c_37_8484_d_9_ed_70353453_2118041574\n    -- , property_hs_date_entered_c_4_a_762_a_9_c_947_49_b_4_b_59_b_7_c_83_d_48890_f_0_2080616206\n    -- , property_hs_date_entered_c_4_c_73_bc_1_288_c_4528_bbfa_f_1_c_58_f_849_a_27_840228759\n    -- , property_hs_date_entered_c_9_fc_7_fea_4_a_57_42_d_6_9_f_7_b_12089_d_8_d_9934_1141043323\n    -- , property_hs_date_entered_ce_02_c_44_d_f_100_421_f_a_77_b_739719_cc_480_b_474304893\n    -- , property_hs_date_entered_ce_6919_e_7_6785_4_f_76_afef_3_edfb_2_e_77_aaa_780981640\n    property_hs_date_entered_closedlost,\n    property_hs_date_entered_closedwon,\n    property_hs_date_entered_contractsent,\n    -- , property_hs_date_entered_d_73_e_17_f_8_678_c_4270_ac_11_ed_2669186_d_48_230132295\n    property_hs_date_entered_decisionmakerboughtin,\n    property_hs_date_entered_presentationscheduled,\n    -- , property_hs_date_exited_1_bd_5379_d_74_f_5_4_aa_7_9_e_2_c_ebe_431778_f_7_f_235311591\n    -- , property_hs_date_exited_1_d_6_f_0_c_54_89_db_4955_a_81_f_399_e_1_c_4_a_0_cbd_1988428775\n    -- , property_hs_date_exited_2004_c_8_de_921_a_4_c_46_bc_90_149_a_8_e_9_d_56_ac_1414072509\n    -- , property_hs_date_exited_2439044\n    -- , property_hs_date_exited_2439453\n    -- , property_hs_date_exited_2_d_5_af_470_6365_480_b_b_3_d_2_2_a_7458_a_30_c_0_d_1081712001\n    -- , property_hs_date_exited_3_a_2_cc_27_c_e_424_433_d_8_ca_5_a_38350_f_5_c_6_ea_1394195149\n    -- , property_hs_date_exited_426389\n    -- , property_hs_date_exited_5068_e_5_ca_fd_2_a_4037_a_36_c_14_f_37224365_b_518395357\n    -- , property_hs_date_exited_638152\n    -- , property_hs_date_exited_8394792\n    -- , property_hs_date_exited_a_67_a_3_dcf_21_ad_4_dd_4_98_a_2_da_039_c_0_a_3_c_2_e_527925615\n    -- , property_hs_date_exited_appointmentscheduled\n    -- , property_hs_date_exited_c_4_a_762_a_9_c_947_49_b_4_b_59_b_7_c_83_d_48890_f_0_2080616206\n    -- , property_hs_date_exited_c_4_c_73_bc_1_288_c_4528_bbfa_f_1_c_58_f_849_a_27_840228759\n    -- , property_hs_date_exited_c_9_fc_7_fea_4_a_57_42_d_6_9_f_7_b_12089_d_8_d_9934_1141043323\n    -- , property_hs_date_exited_ce_02_c_44_d_f_100_421_f_a_77_b_739719_cc_480_b_474304893\n    -- , property_hs_date_exited_contractsent\n    -- , property_hs_date_exited_d_73_e_17_f_8_678_c_4270_ac_11_ed_2669186_d_48_230132295\n    property_hs_date_exited_decisionmakerboughtin,\n    property_hs_date_exited_presentationscheduled,\n    property_hs_deal_stage_probability,\n    property_hs_deal_stage_probability_shadow,\n    property_hs_forecast_probability,\n    property_hs_is_closed,\n    property_hs_is_closed_won,\n    property_hs_lastmodifieddate,\n    property_hs_latest_meeting_activity,\n    property_hs_manual_forecast_category,\n    property_hs_merged_object_ids,\n    property_hs_next_step,\n    property_hs_num_target_accounts,\n    property_hs_projected_amount,\n    property_hs_projected_amount_in_home_currency,\n    property_hs_sales_email_last_replied,\n    -- , property_hs_time_in_1_bd_5379_d_74_f_5_4_aa_7_9_e_2_c_ebe_431778_f_7_f_235311591\n    -- , property_hs_time_in_1_d_6_f_0_c_54_89_db_4955_a_81_f_399_e_1_c_4_a_0_cbd_1988428775\n    -- , property_hs_time_in_2004_c_8_de_921_a_4_c_46_bc_90_149_a_8_e_9_d_56_ac_1414072509\n    -- , property_hs_time_in_2439044\n    -- , property_hs_time_in_2439453\n    -- , property_hs_time_in_2_d_5_af_470_6365_480_b_b_3_d_2_2_a_7458_a_30_c_0_d_1081712001\n    -- , property_hs_time_in_305_f_953_c_0198_41_e_7_8263_226_d_92_c_4_f_5_f_7_961705327\n    -- , property_hs_time_in_3816814\n    -- , property_hs_time_in_3_a_2_cc_27_c_e_424_433_d_8_ca_5_a_38350_f_5_c_6_ea_1394195149\n    -- , property_hs_time_in_3_b_9_f_0_c_7_a_6_eb_0_483_a_8_d_35_6944237166_d_5_1610057148\n    -- , property_hs_time_in_426389\n    -- , property_hs_time_in_5068_e_5_ca_fd_2_a_4037_a_36_c_14_f_37224365_b_518395357\n    -- , property_hs_time_in_638152\n    -- , property_hs_time_in_8394792\n    -- , property_hs_time_in_a_67_a_3_dcf_21_ad_4_dd_4_98_a_2_da_039_c_0_a_3_c_2_e_527925615\n    -- , property_hs_time_in_appointmentscheduled\n    -- , property_hs_time_in_c_146038_c_696_b_4_c_37_8484_d_9_ed_70353453_2118041574\n    -- , property_hs_time_in_c_4_a_762_a_9_c_947_49_b_4_b_59_b_7_c_83_d_48890_f_0_2080616206\n    -- , property_hs_time_in_c_4_c_73_bc_1_288_c_4528_bbfa_f_1_c_58_f_849_a_27_840228759\n    -- , property_hs_time_in_c_9_fc_7_fea_4_a_57_42_d_6_9_f_7_b_12089_d_8_d_9934_1141043323\n    -- , property_hs_time_in_ce_02_c_44_d_f_100_421_f_a_77_b_739719_cc_480_b_474304893\n    -- , property_hs_time_in_ce_6919_e_7_6785_4_f_76_afef_3_edfb_2_e_77_aaa_780981640\n    property_hs_time_in_closedlost,\n    property_hs_time_in_closedwon,\n    property_hs_time_in_contractsent,\n    -- , property_hs_time_in_d_73_e_17_f_8_678_c_4270_ac_11_ed_2669186_d_48_230132295\n    property_hs_time_in_decisionmakerboughtin,\n    property_hs_time_in_presentationscheduled,\n    property_hs_updated_by_user_id,\n    property_hs_user_ids_of_all_owners,\n    property_hubspot_owner_assigneddate,\n    property_hubspot_team_id,\n    property_notes_last_contacted,\n    property_notes_last_updated,\n    property_notes_next_activity_date,\n    property_num_contacted_notes,\n    property_num_notes,\n    property_of_accounts,\n    property_pel_commit,\n    property_population,\n    property_primary_pilot_strategy,\n    property_product,\n    property_proj_annual_txn_fees,\n    property_relationship_level,\n    property_renewal_notice,\n    property_rfi_rfp_requirement,\n    property_roi_calculator,\n    property_saas_fee,\n    property_saas_fee_amt,\n    property_service_fee,\n    property_service_fees,\n    property_status,\n    property_success_fee,\n    property_success_fee_,\n    property_term,\n    property_wow_change,\n    property_hs_line_item_global_term_recurringbillingfrequency,\n    property_hs_line_item_global_term_hs_recurring_billing_start_date,\n    property_implementation_start_date,\n    property_hs_line_item_global_term_hs_recurring_billing_period_enabled,\n    property_memory_blue,\n    property_hs_line_item_global_term_hs_recurring_billing_start_date_enabled,\n    property_hs_line_item_global_term_recurringbillingfrequency_enabled,\n    property_transaction_fees_paid_by\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/deal.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    deal_id,\n    -- , _fivetran_synced\n    deal_pipeline_id,\n    deal_pipeline_stage_id,\n    is_deleted,\n    is_merged,\n    owner_id,\n    portal_id,\n    property_amount,\n    property_amount_in_home_currency,\n    property_approval_strategy_context,\n    property_avg_arrearage,\n    property_blockers_concerns,\n    property_can_you_pay_a_citation_online_,\n    property_closed_lost_reason,\n    property_closed_won_reason,\n    property_closedate,\n    property_committed,\n    property_contract_date,\n    property_contract_evergreen,\n    property_contract_expiration,\n    property_contract_renewal_campaign,\n    property_createdate,\n    property_days_to_close,\n    property_dealname,\n    property_dealtype,\n    property_delinquent_accounts,\n    property_description,\n    property_engagements_last_meeting_booked,\n    property_flags,\n    property_forecast_model,\n    property_help_needed,\n    property_hs_all_accessible_team_ids,\n    property_hs_all_owner_ids,\n    property_hs_all_team_ids,\n    property_hs_analytics_source,\n    property_hs_analytics_source_data_1,\n    property_hs_analytics_source_data_2,\n    property_hs_closed_amount,\n    property_hs_closed_amount_in_home_currency,\n    property_hs_created_by_user_id,\n    property_hs_createdate,\n    -- , property_hs_date_entered_1_bd_5379_d_74_f_5_4_aa_7_9_e_2_c_ebe_431778_f_7_f_235311591\n    -- , property_hs_date_entered_1_d_6_f_0_c_54_89_db_4955_a_81_f_399_e_1_c_4_a_0_cbd_1988428775\n    -- , property_hs_date_entered_2004_c_8_de_921_a_4_c_46_bc_90_149_a_8_e_9_d_56_ac_1414072509\n    -- , property_hs_date_entered_2439044\n    -- , property_hs_date_entered_2439453\n    -- , property_hs_date_entered_2_d_5_af_470_6365_480_b_b_3_d_2_2_a_7458_a_30_c_0_d_1081712001\n    -- , property_hs_date_entered_305_f_953_c_0198_41_e_7_8263_226_d_92_c_4_f_5_f_7_961705327\n    -- , property_hs_date_entered_3816814\n    -- , property_hs_date_entered_3_a_2_cc_27_c_e_424_433_d_8_ca_5_a_38350_f_5_c_6_ea_1394195149\n    -- , property_hs_date_entered_3_b_9_f_0_c_7_a_6_eb_0_483_a_8_d_35_6944237166_d_5_1610057148\n    -- , property_hs_date_entered_426389\n    -- , property_hs_date_entered_5068_e_5_ca_fd_2_a_4037_a_36_c_14_f_37224365_b_518395357\n    -- , property_hs_date_entered_638152\n    -- , property_hs_date_entered_8394792\n    -- , property_hs_date_entered_a_67_a_3_dcf_21_ad_4_dd_4_98_a_2_da_039_c_0_a_3_c_2_e_527925615\n    -- , property_hs_date_entered_appointmentscheduled\n    -- , property_hs_date_entered_c_146038_c_696_b_4_c_37_8484_d_9_ed_70353453_2118041574\n    -- , property_hs_date_entered_c_4_a_762_a_9_c_947_49_b_4_b_59_b_7_c_83_d_48890_f_0_2080616206\n    -- , property_hs_date_entered_c_4_c_73_bc_1_288_c_4528_bbfa_f_1_c_58_f_849_a_27_840228759\n    -- , property_hs_date_entered_c_9_fc_7_fea_4_a_57_42_d_6_9_f_7_b_12089_d_8_d_9934_1141043323\n    -- , property_hs_date_entered_ce_02_c_44_d_f_100_421_f_a_77_b_739719_cc_480_b_474304893\n    -- , property_hs_date_entered_ce_6919_e_7_6785_4_f_76_afef_3_edfb_2_e_77_aaa_780981640\n    property_hs_date_entered_closedlost,\n    property_hs_date_entered_closedwon,\n    property_hs_date_entered_contractsent,\n    -- , property_hs_date_entered_d_73_e_17_f_8_678_c_4270_ac_11_ed_2669186_d_48_230132295\n    property_hs_date_entered_decisionmakerboughtin,\n    property_hs_date_entered_presentationscheduled,\n    -- , property_hs_date_exited_1_bd_5379_d_74_f_5_4_aa_7_9_e_2_c_ebe_431778_f_7_f_235311591\n    -- , property_hs_date_exited_1_d_6_f_0_c_54_89_db_4955_a_81_f_399_e_1_c_4_a_0_cbd_1988428775\n    -- , property_hs_date_exited_2004_c_8_de_921_a_4_c_46_bc_90_149_a_8_e_9_d_56_ac_1414072509\n    -- , property_hs_date_exited_2439044\n    -- , property_hs_date_exited_2439453\n    -- , property_hs_date_exited_2_d_5_af_470_6365_480_b_b_3_d_2_2_a_7458_a_30_c_0_d_1081712001\n    -- , property_hs_date_exited_3_a_2_cc_27_c_e_424_433_d_8_ca_5_a_38350_f_5_c_6_ea_1394195149\n    -- , property_hs_date_exited_426389\n    -- , property_hs_date_exited_5068_e_5_ca_fd_2_a_4037_a_36_c_14_f_37224365_b_518395357\n    -- , property_hs_date_exited_638152\n    -- , property_hs_date_exited_8394792\n    -- , property_hs_date_exited_a_67_a_3_dcf_21_ad_4_dd_4_98_a_2_da_039_c_0_a_3_c_2_e_527925615\n    -- , property_hs_date_exited_appointmentscheduled\n    -- , property_hs_date_exited_c_4_a_762_a_9_c_947_49_b_4_b_59_b_7_c_83_d_48890_f_0_2080616206\n    -- , property_hs_date_exited_c_4_c_73_bc_1_288_c_4528_bbfa_f_1_c_58_f_849_a_27_840228759\n    -- , property_hs_date_exited_c_9_fc_7_fea_4_a_57_42_d_6_9_f_7_b_12089_d_8_d_9934_1141043323\n    -- , property_hs_date_exited_ce_02_c_44_d_f_100_421_f_a_77_b_739719_cc_480_b_474304893\n    -- , property_hs_date_exited_contractsent\n    -- , property_hs_date_exited_d_73_e_17_f_8_678_c_4270_ac_11_ed_2669186_d_48_230132295\n    property_hs_date_exited_decisionmakerboughtin,\n    property_hs_date_exited_presentationscheduled,\n    property_hs_deal_stage_probability,\n    property_hs_deal_stage_probability_shadow,\n    property_hs_forecast_probability,\n    property_hs_is_closed,\n    property_hs_is_closed_won,\n    property_hs_lastmodifieddate,\n    property_hs_latest_meeting_activity,\n    property_hs_manual_forecast_category,\n    property_hs_merged_object_ids,\n    property_hs_next_step,\n    property_hs_num_target_accounts,\n    property_hs_projected_amount,\n    property_hs_projected_amount_in_home_currency,\n    property_hs_sales_email_last_replied,\n    -- , property_hs_time_in_1_bd_5379_d_74_f_5_4_aa_7_9_e_2_c_ebe_431778_f_7_f_235311591\n    -- , property_hs_time_in_1_d_6_f_0_c_54_89_db_4955_a_81_f_399_e_1_c_4_a_0_cbd_1988428775\n    -- , property_hs_time_in_2004_c_8_de_921_a_4_c_46_bc_90_149_a_8_e_9_d_56_ac_1414072509\n    -- , property_hs_time_in_2439044\n    -- , property_hs_time_in_2439453\n    -- , property_hs_time_in_2_d_5_af_470_6365_480_b_b_3_d_2_2_a_7458_a_30_c_0_d_1081712001\n    -- , property_hs_time_in_305_f_953_c_0198_41_e_7_8263_226_d_92_c_4_f_5_f_7_961705327\n    -- , property_hs_time_in_3816814\n    -- , property_hs_time_in_3_a_2_cc_27_c_e_424_433_d_8_ca_5_a_38350_f_5_c_6_ea_1394195149\n    -- , property_hs_time_in_3_b_9_f_0_c_7_a_6_eb_0_483_a_8_d_35_6944237166_d_5_1610057148\n    -- , property_hs_time_in_426389\n    -- , property_hs_time_in_5068_e_5_ca_fd_2_a_4037_a_36_c_14_f_37224365_b_518395357\n    -- , property_hs_time_in_638152\n    -- , property_hs_time_in_8394792\n    -- , property_hs_time_in_a_67_a_3_dcf_21_ad_4_dd_4_98_a_2_da_039_c_0_a_3_c_2_e_527925615\n    -- , property_hs_time_in_appointmentscheduled\n    -- , property_hs_time_in_c_146038_c_696_b_4_c_37_8484_d_9_ed_70353453_2118041574\n    -- , property_hs_time_in_c_4_a_762_a_9_c_947_49_b_4_b_59_b_7_c_83_d_48890_f_0_2080616206\n    -- , property_hs_time_in_c_4_c_73_bc_1_288_c_4528_bbfa_f_1_c_58_f_849_a_27_840228759\n    -- , property_hs_time_in_c_9_fc_7_fea_4_a_57_42_d_6_9_f_7_b_12089_d_8_d_9934_1141043323\n    -- , property_hs_time_in_ce_02_c_44_d_f_100_421_f_a_77_b_739719_cc_480_b_474304893\n    -- , property_hs_time_in_ce_6919_e_7_6785_4_f_76_afef_3_edfb_2_e_77_aaa_780981640\n    property_hs_time_in_closedlost,\n    property_hs_time_in_closedwon,\n    property_hs_time_in_contractsent,\n    -- , property_hs_time_in_d_73_e_17_f_8_678_c_4270_ac_11_ed_2669186_d_48_230132295\n    property_hs_time_in_decisionmakerboughtin,\n    property_hs_time_in_presentationscheduled,\n    property_hs_updated_by_user_id,\n    property_hs_user_ids_of_all_owners,\n    property_hubspot_owner_assigneddate,\n    property_hubspot_team_id,\n    property_notes_last_contacted,\n    property_notes_last_updated,\n    property_notes_next_activity_date,\n    property_num_contacted_notes,\n    property_num_notes,\n    property_of_accounts,\n    property_pel_commit,\n    property_population,\n    property_primary_pilot_strategy,\n    property_product,\n    property_proj_annual_txn_fees,\n    property_relationship_level,\n    property_renewal_notice,\n    property_rfi_rfp_requirement,\n    property_roi_calculator,\n    property_saas_fee,\n    property_saas_fee_amt,\n    property_service_fee,\n    property_service_fees,\n    property_status,\n    property_success_fee,\n    property_success_fee_,\n    property_term,\n    property_wow_change,\n    property_hs_line_item_global_term_recurringbillingfrequency,\n    property_hs_line_item_global_term_hs_recurring_billing_start_date,\n    property_implementation_start_date,\n    property_hs_line_item_global_term_hs_recurring_billing_period_enabled,\n    property_memory_blue,\n    property_hs_line_item_global_term_hs_recurring_billing_start_date_enabled,\n    property_hs_line_item_global_term_recurringbillingfrequency_enabled,\n    property_transaction_fees_paid_by\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.deal_stage": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "deal_stage", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/deal_stage.sql", "original_file_path": "models/hubspot/deal_stage.sql", "unique_id": "model.promise_dwh.deal_stage", "fqn": ["promise_dwh", "hubspot", "deal_stage"], "alias": "deal_stage", "checksum": {"name": "sha256", "checksum": "1dbe255d7e156ca72b83fab764020cb0a8ae237e8674c51615792a9c47c647f7"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.82191, "relation_name": "`analytics-prod-328313`.`hubspot`.`deal_stage`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    -- _fivetran_start\n    deal_id,\n    -- , _fivetran_active\n    -- , _fivetran_end\n    -- , _fivetran_synced\n    date_entered,\n    source,\n    source_id,\n    `value`\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/deal_stage.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    -- _fivetran_start\n    deal_id,\n    -- , _fivetran_active\n    -- , _fivetran_end\n    -- , _fivetran_synced\n    date_entered,\n    source,\n    source_id,\n    `value`\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal_stage`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.contact": {"database": "analytics-prod-328313", "schema": "hubspot", "name": "contact", "resource_type": "model", "package_name": "promise_dwh", "path": "hubspot/contact.sql", "original_file_path": "models/hubspot/contact.sql", "unique_id": "model.promise_dwh.contact", "fqn": ["promise_dwh", "hubspot", "contact"], "alias": "contact", "checksum": {"name": "sha256", "checksum": "5af11f626c9ecd59ddb0c0a5198d3bf44ccdf29552b34a789ff9d268e820165c"}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot"}, "created_at": 1715379615.824528, "relation_name": "`analytics-prod-328313`.`hubspot`.`contact`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\nSELECT\n    id,\n    -- , _fivetran_deleted\n    -- , _fivetran_synced\n    canonical_vid,\n    merged_vids,\n    property_address,\n    property_annualrevenue,\n    property_associatedcompanyid,\n    property_city,\n    property_closedate,\n    property_company,\n    property_company_size,\n    property_country,\n    property_createdate,\n    property_currentlyinworkflow,\n    property_date_of_birth,\n    property_degree,\n    property_department,\n    property_email,\n    property_engagements_last_meeting_booked,\n    property_engagements_last_meeting_booked_campaign,\n    property_engagements_last_meeting_booked_medium,\n    property_engagements_last_meeting_booked_source,\n    property_fax,\n    property_field_of_study,\n    property_first_deal_created_date,\n    property_firstname,\n    property_gender,\n    property_graduation_date,\n    property_hs_all_accessible_team_ids,\n    property_hs_all_assigned_business_unit_ids,\n    property_hs_all_owner_ids,\n    property_hs_all_team_ids,\n    property_hs_analytics_average_page_views,\n    property_hs_analytics_first_referrer,\n    property_hs_analytics_first_timestamp,\n    property_hs_analytics_first_touch_converting_campaign,\n    property_hs_analytics_first_url,\n    property_hs_analytics_first_visit_timestamp,\n    property_hs_analytics_last_referrer,\n    property_hs_analytics_last_timestamp,\n    property_hs_analytics_last_touch_converting_campaign,\n    property_hs_analytics_last_url,\n    property_hs_analytics_last_visit_timestamp,\n    property_hs_analytics_num_event_completions,\n    property_hs_analytics_num_page_views,\n    property_hs_analytics_num_visits,\n    property_hs_analytics_revenue,\n    property_hs_analytics_source,\n    property_hs_analytics_source_data_1,\n    property_hs_analytics_source_data_2,\n    property_hs_avatar_filemanager_key,\n    property_hs_buying_role,\n    property_hs_content_membership_notes,\n    property_hs_content_membership_registration_domain_sent_to,\n    property_hs_content_membership_status,\n    property_hs_conversations_visitor_email,\n    property_hs_count_is_unworked,\n    property_hs_count_is_worked,\n    property_hs_created_by_conversations,\n    property_hs_email_bounce,\n    property_hs_email_click,\n    property_hs_email_customer_quarantined_reason,\n    property_hs_email_delivered,\n    property_hs_email_first_click_date,\n    property_hs_email_first_open_date,\n    property_hs_email_first_reply_date,\n    property_hs_email_first_send_date,\n    property_hs_email_hard_bounce_reason,\n    property_hs_email_hard_bounce_reason_enum,\n    property_hs_email_last_click_date,\n    property_hs_email_last_email_name,\n    property_hs_email_last_open_date,\n    property_hs_email_last_reply_date,\n    property_hs_email_last_send_date,\n    property_hs_email_open,\n    property_hs_email_optout,\n    property_hs_email_optout_5747393,\n    property_hs_email_optout_7148597,\n    property_hs_email_quarantined,\n    property_hs_email_quarantined_reason,\n    property_hs_email_replied,\n    property_hs_email_sends_since_last_engagement,\n    property_hs_emailconfirmationstatus,\n    property_hs_facebook_click_id,\n    property_hs_facebookid,\n    property_hs_feedback_last_nps_follow_up,\n    property_hs_feedback_last_nps_rating,\n    property_hs_google_click_id,\n    property_hs_googleplusid,\n    property_hs_ip_timezone,\n    property_hs_is_unworked,\n    property_hs_language,\n    property_hs_last_sales_activity_date,\n    property_hs_last_sales_activity_timestamp,\n    property_hs_latest_meeting_activity,\n    property_hs_latest_source,\n    property_hs_latest_source_data_1,\n    property_hs_latest_source_data_2,\n    property_hs_lead_status,\n    property_hs_legal_basis,\n    property_hs_lifecyclestage_customer_date,\n    property_hs_lifecyclestage_evangelist_date,\n    property_hs_lifecyclestage_lead_date,\n    property_hs_lifecyclestage_marketingqualifiedlead_date,\n    property_hs_lifecyclestage_opportunity_date,\n    property_hs_lifecyclestage_other_date,\n    property_hs_lifecyclestage_salesqualifiedlead_date,\n    property_hs_lifecyclestage_subscriber_date,\n    property_hs_linkedinid,\n    property_hs_marketable_reason_id,\n    property_hs_marketable_reason_type,\n    property_hs_marketable_status,\n    property_hs_marketable_until_renewal,\n    property_hs_merged_object_ids,\n    property_hs_persona,\n    property_hs_pipeline,\n    property_hs_predictivecontactscorebucket,\n    property_hs_predictivescoringtier,\n    property_hs_sa_first_engagement_date,\n    property_hs_sales_email_last_clicked,\n    property_hs_sales_email_last_opened,\n    property_hs_sales_email_last_replied,\n    property_hs_sequences_actively_enrolled_count,\n    property_hs_social_facebook_clicks,\n    property_hs_social_google_plus_clicks,\n    property_hs_social_linkedin_clicks,\n    property_hs_social_num_broadcast_clicks,\n    property_hs_social_twitter_clicks,\n    property_hs_testpurge,\n    property_hs_testrollback,\n    property_hs_time_between_contact_creation_and_deal_close,\n    property_hs_time_between_contact_creation_and_deal_creation,\n    property_hs_time_to_move_from_lead_to_customer,\n    property_hs_time_to_move_from_opportunity_to_customer,\n    property_hs_time_to_move_from_subscriber_to_customer,\n    property_hs_timezone,\n    property_hs_twitterid,\n    property_hs_unique_creation_key,\n    property_hs_user_ids_of_all_notification_followers,\n    property_hs_user_ids_of_all_notification_unfollowers,\n    property_hs_user_ids_of_all_owners,\n    property_hubspot_owner_assigneddate,\n    property_hubspot_owner_id,\n    property_hubspot_team_id,\n    property_industry,\n    property_ip_city,\n    property_ip_country,\n    property_ip_country_code,\n    property_ip_latlon,\n    property_ip_state,\n    property_ip_state_code,\n    property_ip_zipcode,\n    property_job_function,\n    property_jobtitle,\n    property_lastmodifieddate,\n    property_lastname,\n    property_lifecyclestage,\n    property_linkedin_profile,\n    property_linkedinbio,\n    property_lists,\n    property_marital_status,\n    property_message,\n    property_military_status,\n    property_mobilephone,\n    property_notes_last_contacted,\n    property_notes_last_updated,\n    property_notes_next_activity_date,\n    property_num_associated_deals,\n    property_num_contacted_notes,\n    property_num_notes,\n    property_numemployees,\n    property_owneremail,\n    property_ownername,\n    property_payment_processor,\n    property_payments_url,\n    property_phone,\n    property_photo,\n    property_product,\n    property_recent_deal_amount,\n    property_recent_deal_close_date,\n    property_relationship_status,\n    property_salutation,\n    property_school,\n    property_seniority,\n    property_start_date,\n    property_state,\n    property_total_revenue,\n    property_twitterbio,\n    property_twitterhandle,\n    property_twitterprofilephoto,\n    property_website,\n    property_work_email,\n    property_zip,\n    property_hs_predictivecontactscore_v_2,\n    property_realcontact_type,\n    property_contact_type,\n    property_hs_clicked_linkedin_ad,\n    property_hs_linkedin_ad_clicked,\n    property_memory_blue_contact,\n    property_hs_latest_source_timestamp,\n    property_hs_created_by_user_id,\n    property_hs_email_bad_address\nFROM\n    `{{ this.database }}`.`{{ this.schema }}`.`{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/hubspot/contact.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id,\n    -- , _fivetran_deleted\n    -- , _fivetran_synced\n    canonical_vid,\n    merged_vids,\n    property_address,\n    property_annualrevenue,\n    property_associatedcompanyid,\n    property_city,\n    property_closedate,\n    property_company,\n    property_company_size,\n    property_country,\n    property_createdate,\n    property_currentlyinworkflow,\n    property_date_of_birth,\n    property_degree,\n    property_department,\n    property_email,\n    property_engagements_last_meeting_booked,\n    property_engagements_last_meeting_booked_campaign,\n    property_engagements_last_meeting_booked_medium,\n    property_engagements_last_meeting_booked_source,\n    property_fax,\n    property_field_of_study,\n    property_first_deal_created_date,\n    property_firstname,\n    property_gender,\n    property_graduation_date,\n    property_hs_all_accessible_team_ids,\n    property_hs_all_assigned_business_unit_ids,\n    property_hs_all_owner_ids,\n    property_hs_all_team_ids,\n    property_hs_analytics_average_page_views,\n    property_hs_analytics_first_referrer,\n    property_hs_analytics_first_timestamp,\n    property_hs_analytics_first_touch_converting_campaign,\n    property_hs_analytics_first_url,\n    property_hs_analytics_first_visit_timestamp,\n    property_hs_analytics_last_referrer,\n    property_hs_analytics_last_timestamp,\n    property_hs_analytics_last_touch_converting_campaign,\n    property_hs_analytics_last_url,\n    property_hs_analytics_last_visit_timestamp,\n    property_hs_analytics_num_event_completions,\n    property_hs_analytics_num_page_views,\n    property_hs_analytics_num_visits,\n    property_hs_analytics_revenue,\n    property_hs_analytics_source,\n    property_hs_analytics_source_data_1,\n    property_hs_analytics_source_data_2,\n    property_hs_avatar_filemanager_key,\n    property_hs_buying_role,\n    property_hs_content_membership_notes,\n    property_hs_content_membership_registration_domain_sent_to,\n    property_hs_content_membership_status,\n    property_hs_conversations_visitor_email,\n    property_hs_count_is_unworked,\n    property_hs_count_is_worked,\n    property_hs_created_by_conversations,\n    property_hs_email_bounce,\n    property_hs_email_click,\n    property_hs_email_customer_quarantined_reason,\n    property_hs_email_delivered,\n    property_hs_email_first_click_date,\n    property_hs_email_first_open_date,\n    property_hs_email_first_reply_date,\n    property_hs_email_first_send_date,\n    property_hs_email_hard_bounce_reason,\n    property_hs_email_hard_bounce_reason_enum,\n    property_hs_email_last_click_date,\n    property_hs_email_last_email_name,\n    property_hs_email_last_open_date,\n    property_hs_email_last_reply_date,\n    property_hs_email_last_send_date,\n    property_hs_email_open,\n    property_hs_email_optout,\n    property_hs_email_optout_5747393,\n    property_hs_email_optout_7148597,\n    property_hs_email_quarantined,\n    property_hs_email_quarantined_reason,\n    property_hs_email_replied,\n    property_hs_email_sends_since_last_engagement,\n    property_hs_emailconfirmationstatus,\n    property_hs_facebook_click_id,\n    property_hs_facebookid,\n    property_hs_feedback_last_nps_follow_up,\n    property_hs_feedback_last_nps_rating,\n    property_hs_google_click_id,\n    property_hs_googleplusid,\n    property_hs_ip_timezone,\n    property_hs_is_unworked,\n    property_hs_language,\n    property_hs_last_sales_activity_date,\n    property_hs_last_sales_activity_timestamp,\n    property_hs_latest_meeting_activity,\n    property_hs_latest_source,\n    property_hs_latest_source_data_1,\n    property_hs_latest_source_data_2,\n    property_hs_lead_status,\n    property_hs_legal_basis,\n    property_hs_lifecyclestage_customer_date,\n    property_hs_lifecyclestage_evangelist_date,\n    property_hs_lifecyclestage_lead_date,\n    property_hs_lifecyclestage_marketingqualifiedlead_date,\n    property_hs_lifecyclestage_opportunity_date,\n    property_hs_lifecyclestage_other_date,\n    property_hs_lifecyclestage_salesqualifiedlead_date,\n    property_hs_lifecyclestage_subscriber_date,\n    property_hs_linkedinid,\n    property_hs_marketable_reason_id,\n    property_hs_marketable_reason_type,\n    property_hs_marketable_status,\n    property_hs_marketable_until_renewal,\n    property_hs_merged_object_ids,\n    property_hs_persona,\n    property_hs_pipeline,\n    property_hs_predictivecontactscorebucket,\n    property_hs_predictivescoringtier,\n    property_hs_sa_first_engagement_date,\n    property_hs_sales_email_last_clicked,\n    property_hs_sales_email_last_opened,\n    property_hs_sales_email_last_replied,\n    property_hs_sequences_actively_enrolled_count,\n    property_hs_social_facebook_clicks,\n    property_hs_social_google_plus_clicks,\n    property_hs_social_linkedin_clicks,\n    property_hs_social_num_broadcast_clicks,\n    property_hs_social_twitter_clicks,\n    property_hs_testpurge,\n    property_hs_testrollback,\n    property_hs_time_between_contact_creation_and_deal_close,\n    property_hs_time_between_contact_creation_and_deal_creation,\n    property_hs_time_to_move_from_lead_to_customer,\n    property_hs_time_to_move_from_opportunity_to_customer,\n    property_hs_time_to_move_from_subscriber_to_customer,\n    property_hs_timezone,\n    property_hs_twitterid,\n    property_hs_unique_creation_key,\n    property_hs_user_ids_of_all_notification_followers,\n    property_hs_user_ids_of_all_notification_unfollowers,\n    property_hs_user_ids_of_all_owners,\n    property_hubspot_owner_assigneddate,\n    property_hubspot_owner_id,\n    property_hubspot_team_id,\n    property_industry,\n    property_ip_city,\n    property_ip_country,\n    property_ip_country_code,\n    property_ip_latlon,\n    property_ip_state,\n    property_ip_state_code,\n    property_ip_zipcode,\n    property_job_function,\n    property_jobtitle,\n    property_lastmodifieddate,\n    property_lastname,\n    property_lifecyclestage,\n    property_linkedin_profile,\n    property_linkedinbio,\n    property_lists,\n    property_marital_status,\n    property_message,\n    property_military_status,\n    property_mobilephone,\n    property_notes_last_contacted,\n    property_notes_last_updated,\n    property_notes_next_activity_date,\n    property_num_associated_deals,\n    property_num_contacted_notes,\n    property_num_notes,\n    property_numemployees,\n    property_owneremail,\n    property_ownername,\n    property_payment_processor,\n    property_payments_url,\n    property_phone,\n    property_photo,\n    property_product,\n    property_recent_deal_amount,\n    property_recent_deal_close_date,\n    property_relationship_status,\n    property_salutation,\n    property_school,\n    property_seniority,\n    property_start_date,\n    property_state,\n    property_total_revenue,\n    property_twitterbio,\n    property_twitterhandle,\n    property_twitterprofilephoto,\n    property_website,\n    property_work_email,\n    property_zip,\n    property_hs_predictivecontactscore_v_2,\n    property_realcontact_type,\n    property_contact_type,\n    property_hs_clicked_linkedin_ad,\n    property_hs_linkedin_ad_clicked,\n    property_memory_blue_contact,\n    property_hs_latest_source_timestamp,\n    property_hs_created_by_user_id,\n    property_hs_email_bad_address\nFROM\n    `analytics-prod-328313`.`hubspot`.`contact`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.prod_dag_list": {"database": "analytics-prod-328313", "schema": "astro_airflow_logs", "name": "prod_dag_list", "resource_type": "model", "package_name": "promise_dwh", "path": "airflow/prod_dag_list.sql", "original_file_path": "models/airflow/prod_dag_list.sql", "unique_id": "model.promise_dwh.prod_dag_list", "fqn": ["promise_dwh", "airflow", "prod_dag_list"], "alias": "prod_dag_list", "checksum": {"name": "sha256", "checksum": "b08aa67be98f19cbc6c6dcc20ba2adc95daf4624ce1b551ee6a9121af682363d"}, "config": {"enabled": true, "alias": null, "schema": "astro_airflow_logs", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "astro_airflow_logs"}, "created_at": 1715379615.827659, "relation_name": "`analytics-prod-328313`.`astro_airflow_logs`.`prod_dag_list`", "raw_code": "SELECT\n    dag_id,\n    default_view,\n    CAST(`description` AS STRING) AS dag_description,\n    file_token,\n    fileloc,\n    has_import_errors,\n    has_task_concurrency_limits,\n    CAST(is_active AS BOOLEAN) AS is_active,\n    CAST(is_paused AS BOOLEAN) AS is_paused,\n    CAST(is_subdag AS BOOLEAN) AS is_subdag,\n    CAST(last_expired AS TIMESTAMP) AS last_expired,\n    CAST(last_parsed_time AS TIMESTAMP) AS last_parsed_time,\n    CAST(last_pickled AS TIMESTAMP) AS last_pickled,\n    CAST(max_active_runs AS INTEGER) AS max_active_runs,\n    CAST(max_active_tasks AS INTEGER) AS max_active_tasks,\n    CAST(next_dagrun AS TIMESTAMP) AS next_dagrun,\n    CAST(next_dagrun_create_after AS TIMESTAMP) AS next_dagrun_create_after,\n    CAST(next_dagrun_data_interval_end AS TIMESTAMP)\n        AS next_dagrun_data_interval_end,\n    CAST(next_dagrun_data_interval_start AS TIMESTAMP)\n        AS next_dagrun_data_interval_start,\n    pickle_id,\n    root_dag_id,\n    scheduler_lock,\n    timetable_description,\n    tags,\n    schedule_interval,\n    owners\nFROM\n{% if target.name == \"prod\" %}\n  `analytics-dev-328216.astro_airflow_logs.prod_dag_list`\n  {% else %}\n        `analytics-dev-328216.astro_airflow_logs.dev_dag_list`\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/airflow/prod_dag_list.sql", "compiled": true, "compiled_code": "SELECT\n    dag_id,\n    default_view,\n    CAST(`description` AS STRING) AS dag_description,\n    file_token,\n    fileloc,\n    has_import_errors,\n    has_task_concurrency_limits,\n    CAST(is_active AS BOOLEAN) AS is_active,\n    CAST(is_paused AS BOOLEAN) AS is_paused,\n    CAST(is_subdag AS BOOLEAN) AS is_subdag,\n    CAST(last_expired AS TIMESTAMP) AS last_expired,\n    CAST(last_parsed_time AS TIMESTAMP) AS last_parsed_time,\n    CAST(last_pickled AS TIMESTAMP) AS last_pickled,\n    CAST(max_active_runs AS INTEGER) AS max_active_runs,\n    CAST(max_active_tasks AS INTEGER) AS max_active_tasks,\n    CAST(next_dagrun AS TIMESTAMP) AS next_dagrun,\n    CAST(next_dagrun_create_after AS TIMESTAMP) AS next_dagrun_create_after,\n    CAST(next_dagrun_data_interval_end AS TIMESTAMP)\n        AS next_dagrun_data_interval_end,\n    CAST(next_dagrun_data_interval_start AS TIMESTAMP)\n        AS next_dagrun_data_interval_start,\n    pickle_id,\n    root_dag_id,\n    scheduler_lock,\n    timetable_description,\n    tags,\n    schedule_interval,\n    owners\nFROM\n\n  `analytics-dev-328216.astro_airflow_logs.prod_dag_list`\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.prod_all_dag_runs": {"database": "analytics-prod-328313", "schema": "astro_airflow_logs", "name": "prod_all_dag_runs", "resource_type": "model", "package_name": "promise_dwh", "path": "airflow/prod_all_dag_runs.sql", "original_file_path": "models/airflow/prod_all_dag_runs.sql", "unique_id": "model.promise_dwh.prod_all_dag_runs", "fqn": ["promise_dwh", "airflow", "prod_all_dag_runs"], "alias": "prod_all_dag_runs", "checksum": {"name": "sha256", "checksum": "4ab70a8342c5d09a426bbcbf463df3ecdb74bc74722bfe9fa8c963196f5574d1"}, "config": {"enabled": true, "alias": null, "schema": "astro_airflow_logs", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "astro_airflow_logs"}, "created_at": 1715379615.830359, "relation_name": "`analytics-prod-328313`.`astro_airflow_logs`.`prod_all_dag_runs`", "raw_code": "SELECT\n    dag_id,\n    dag_run_id,\n    CONCAT(dag_id, \"_\", dag_run_id) AS pk_dag_id_dag_run_id,\n    CAST(data_interval_end AS TIMESTAMP) AS data_interval_end,\n    CAST(data_interval_start AS TIMESTAMP) AS data_interval_start,\n    CAST(end_date AS TIMESTAMP) AS end_date,\n    CAST(execution_date AS TIMESTAMP) AS execution_date,\n    CAST(external_trigger AS BOOLEAN) AS external_trigger,\n    CAST(last_scheduling_decision AS TIMESTAMP) AS last_scheduling_decision,\n    CAST(logical_date AS TIMESTAMP) AS logical_date,\n    CAST(note AS STRING) AS note,\n    CAST(run_type AS STRING) AS run_type,\n    CAST(`start_date` AS TIMESTAMP) AS `start_date`,\n    CAST(`state` AS STRING) AS `state`,\n    CAST(conf AS STRING) AS conf\nFROM\n{% if target.name == \"prod\" %}\n  `analytics-dev-328216.astro_airflow_logs.prod_all_dag_runs`\n  {% else %}\n        `analytics-dev-328216.astro_airflow_logs.dev_all_dag_runs`\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/airflow/prod_all_dag_runs.sql", "compiled": true, "compiled_code": "SELECT\n    dag_id,\n    dag_run_id,\n    CONCAT(dag_id, \"_\", dag_run_id) AS pk_dag_id_dag_run_id,\n    CAST(data_interval_end AS TIMESTAMP) AS data_interval_end,\n    CAST(data_interval_start AS TIMESTAMP) AS data_interval_start,\n    CAST(end_date AS TIMESTAMP) AS end_date,\n    CAST(execution_date AS TIMESTAMP) AS execution_date,\n    CAST(external_trigger AS BOOLEAN) AS external_trigger,\n    CAST(last_scheduling_decision AS TIMESTAMP) AS last_scheduling_decision,\n    CAST(logical_date AS TIMESTAMP) AS logical_date,\n    CAST(note AS STRING) AS note,\n    CAST(run_type AS STRING) AS run_type,\n    CAST(`start_date` AS TIMESTAMP) AS `start_date`,\n    CAST(`state` AS STRING) AS `state`,\n    CAST(conf AS STRING) AS conf\nFROM\n\n  `analytics-dev-328216.astro_airflow_logs.prod_all_dag_runs`\n  ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.alexrenew_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "alexrenew_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/alexrenew_water.sql", "original_file_path": "models/utilities/alexrenew_water.sql", "unique_id": "model.promise_dwh.alexrenew_water", "fqn": ["promise_dwh", "utilities", "alexrenew_water"], "alias": "alexrenew_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["alexrenew_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["alexrenew_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["alexrenew_water_utility_upload"]}, "created_at": 1715379615.8328562, "relation_name": "`analytics-prod-328313`.`utilities`.`alexrenew_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "alexrenew_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.alexrenew_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/alexrenew_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`alexrenew_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'alexrenewwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.jackson_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "jackson_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/jackson_water.sql", "original_file_path": "models/utilities/jackson_water.sql", "unique_id": "model.promise_dwh.jackson_water", "fqn": ["promise_dwh", "utilities", "jackson_water"], "alias": "jackson_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["jackson_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["jackson_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["jackson_water_utility_upload"]}, "created_at": 1715379615.845804, "relation_name": "`analytics-prod-328313`.`utilities`.`jackson_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "jackson_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.jackson_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/jackson_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`jackson_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'jacksonwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newark_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "newark_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/newark_water.sql", "original_file_path": "models/utilities/newark_water.sql", "unique_id": "model.promise_dwh.newark_water", "fqn": ["promise_dwh", "utilities", "newark_water"], "alias": "newark_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["newark_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["newark_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["newark_water_utility_upload"]}, "created_at": 1715379615.8497229, "relation_name": "`analytics-prod-328313`.`utilities`.`newark_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "newark_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.newark_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/newark_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`newark_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'newarkwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.account_history_combined": {"database": "analytics-prod-328313", "schema": "utilities", "name": "account_history_combined", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/account_history_combined.sql", "original_file_path": "models/utilities/account_history_combined.sql", "unique_id": "model.promise_dwh.account_history_combined", "fqn": ["promise_dwh", "utilities", "account_history_combined"], "alias": "account_history_combined", "checksum": {"name": "sha256", "checksum": "70bab86ec4aa6f28b98d92436cd6482b0f4dba124f3669f1c41c647f9fe328e8"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": [], "description": "", "columns": {"account_type": {"name": "account_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utilities/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.904406, "relation_name": "`analytics-prod-328313`.`utilities`.`account_history_combined`", "raw_code": "-- noqa: disable=all\n-- disable linting from here\n{{ \n   config(\n    materialized='table',\n    cluster_by = ['jurisdiction'],\n   ) \n}}\n{%- set ref_list = [] %}\n{%- set exclude_jurx = [\n   'florida_lihwap',\n]%}\n\n{%- for jurx in var(\"jurisdiction-map\").keys()  %}\n{%-   if jurx not in exclude_jurx %}\n{%-      if var('jurisdiction-map')[jurx][target.name] != '' and target.name in var('jurisdiction-map')[jurx] %}\n{%-         set _ = ref_list.append( ref(jurx) ) %}\n{%-      endif %}\n{%-   endif %}\n{%- endfor %}\n-- noqa: enable=all\n-- re-enable linting from here\nWITH unioned_utilities AS ({{ \n   dbt_utils.union_relations(\n   relations=ref_list\n   )\n}})\nSELECT \n   *,\n   CONCAT(jurisdiction, client_id) AS jurisdiction_x_client_id,\n   total_balance - LAG(total_balance) OVER (PARTITION BY client_id, jurisdiction ORDER BY valid_starting) AS delta_total_balance_dbt\nFROM unioned_utilities", "language": "sql", "refs": [{"name": "alexrenew_water", "package": null, "version": null}, {"name": "baltimore", "package": null, "version": null}, {"name": "buffalo_water", "package": null, "version": null}, {"name": "cal_water", "package": null, "version": null}, {"name": "centralarkansas_water", "package": null, "version": null}, {"name": "corona", "package": null, "version": null}, {"name": "gcww", "package": null, "version": null}, {"name": "hrsd", "package": null, "version": null}, {"name": "jackson_water", "package": null, "version": null}, {"name": "louisville_water", "package": null, "version": null}, {"name": "newark_water", "package": null, "version": null}, {"name": "newmexico_water", "package": null, "version": null}, {"name": "newportnews_water", "package": null, "version": null}, {"name": "nola_water", "package": null, "version": null}, {"name": "richmond", "package": null, "version": null}, {"name": "sj_water", "package": null, "version": null}, {"name": "toledo", "package": null, "version": null}, {"name": "veoliany_water", "package": null, "version": null}, {"name": "washington_water", "package": null, "version": null}, {"name": "wssc_water", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.promise_dwh.alexrenew_water", "model.promise_dwh.baltimore", "model.promise_dwh.buffalo_water", "model.promise_dwh.cal_water", "model.promise_dwh.centralarkansas_water", "model.promise_dwh.corona", "model.promise_dwh.gcww", "model.promise_dwh.hrsd", "model.promise_dwh.jackson_water", "model.promise_dwh.louisville_water", "model.promise_dwh.newark_water", "model.promise_dwh.newmexico_water", "model.promise_dwh.newportnews_water", "model.promise_dwh.nola_water", "model.promise_dwh.richmond", "model.promise_dwh.sj_water", "model.promise_dwh.toledo", "model.promise_dwh.veoliany_water", "model.promise_dwh.washington_water", "model.promise_dwh.wssc_water"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/account_history_combined.sql", "compiled": true, "compiled_code": "-- noqa: disable=all\n-- disable linting from here\n\n-- noqa: enable=all\n-- re-enable linting from here\nWITH unioned_utilities AS (\n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`alexrenew_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`alexrenew_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`baltimore`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`baltimore`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`buffalo_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`buffalo_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`cal_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`cal_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`centralarkansas_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`centralarkansas_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`corona`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`corona`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`gcww`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`gcww`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`hrsd`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`hrsd`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`jackson_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`jackson_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`louisville_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`louisville_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`newark_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`newark_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`newmexico_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`newmexico_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`newportnews_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`newportnews_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`nola_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`nola_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`richmond`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`richmond`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`sj_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`sj_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`toledo`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`toledo`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`veoliany_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`veoliany_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`washington_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`washington_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`wssc_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`wssc_water`\n\n            \n        )\n\n        )\nSELECT \n   *,\n   CONCAT(jurisdiction, client_id) AS jurisdiction_x_client_id,\n   total_balance - LAG(total_balance) OVER (PARTITION BY client_id, jurisdiction ORDER BY valid_starting) AS delta_total_balance_dbt\nFROM unioned_utilities", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.corona": {"database": "analytics-prod-328313", "schema": "utilities", "name": "corona", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/corona.sql", "original_file_path": "models/utilities/corona.sql", "unique_id": "model.promise_dwh.corona", "fqn": ["promise_dwh", "utilities", "corona"], "alias": "corona", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["corona_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["corona_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["corona_utility_upload"]}, "created_at": 1715379615.859315, "relation_name": "`analytics-prod-328313`.`utilities`.`corona`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "corona_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.corona_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/corona.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`corona_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'corona'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.buffalo_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "buffalo_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/buffalo_water.sql", "original_file_path": "models/utilities/buffalo_water.sql", "unique_id": "model.promise_dwh.buffalo_water", "fqn": ["promise_dwh", "utilities", "buffalo_water"], "alias": "buffalo_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["buffalo_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["buffalo_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["buffalo_water_utility_upload"]}, "created_at": 1715379615.867309, "relation_name": "`analytics-prod-328313`.`utilities`.`buffalo_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "buffalo_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.buffalo_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/buffalo_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`buffalo_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'buffalowater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.richmond": {"database": "analytics-prod-328313", "schema": "utilities", "name": "richmond", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/richmond.sql", "original_file_path": "models/utilities/richmond.sql", "unique_id": "model.promise_dwh.richmond", "fqn": ["promise_dwh", "utilities", "richmond"], "alias": "richmond", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["richmond_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["richmond_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["richmond_utility_upload"]}, "created_at": 1715379615.8711941, "relation_name": "`analytics-prod-328313`.`utilities`.`richmond`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "richmond_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.richmond_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/richmond.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`richmond_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'richmond'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.gcww": {"database": "analytics-prod-328313", "schema": "utilities", "name": "gcww", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/gcww.sql", "original_file_path": "models/utilities/gcww.sql", "unique_id": "model.promise_dwh.gcww", "fqn": ["promise_dwh", "utilities", "gcww"], "alias": "gcww", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["gcww_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["gcww_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["gcww_utility_upload"]}, "created_at": 1715379615.875094, "relation_name": "`analytics-prod-328313`.`utilities`.`gcww`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "gcww_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.gcww_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/gcww.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`gcww_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'gcww'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.washington_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "washington_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/washington_water.sql", "original_file_path": "models/utilities/washington_water.sql", "unique_id": "model.promise_dwh.washington_water", "fqn": ["promise_dwh", "utilities", "washington_water"], "alias": "washington_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["washington_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["washington_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["washington_water_utility_upload"]}, "created_at": 1715379615.879105, "relation_name": "`analytics-prod-328313`.`utilities`.`washington_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "washington_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.washington_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/washington_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`washington_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'washingtonwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.baltimore": {"database": "analytics-prod-328313", "schema": "utilities", "name": "baltimore", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/baltimore.sql", "original_file_path": "models/utilities/baltimore.sql", "unique_id": "model.promise_dwh.baltimore", "fqn": ["promise_dwh", "utilities", "baltimore"], "alias": "baltimore", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["baltimore_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["baltimore_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["baltimore_utility_upload"]}, "created_at": 1715379615.882988, "relation_name": "`analytics-prod-328313`.`utilities`.`baltimore`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "baltimore_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.baltimore_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/baltimore.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`baltimore_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'baltimore'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,--\n        -- if Baltimore, get payment_arrangement from list\n        bpp.client_id is NOT NULL as payment_arrangement,\n    \n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae--\n    -- if baltimore, join to list clients with pre-existing plans\n    LEFT JOIN `analytics-prod-328313.exclusions.baltimore_preexisting_plans` bpp\n        ON ae.client_id = bpp.client_id\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.nola_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "nola_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/nola_water.sql", "original_file_path": "models/utilities/nola_water.sql", "unique_id": "model.promise_dwh.nola_water", "fqn": ["promise_dwh", "utilities", "nola_water"], "alias": "nola_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["nola_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["nola_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["nola_water_utility_upload"]}, "created_at": 1715379615.8868558, "relation_name": "`analytics-prod-328313`.`utilities`.`nola_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "nola_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.nola_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/nola_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`nola_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'nolawater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newportnews_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "newportnews_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/newportnews_water.sql", "original_file_path": "models/utilities/newportnews_water.sql", "unique_id": "model.promise_dwh.newportnews_water", "fqn": ["promise_dwh", "utilities", "newportnews_water"], "alias": "newportnews_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["newportnews_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["newportnews_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["newportnews_water_utility_upload"]}, "created_at": 1715379615.8917272, "relation_name": "`analytics-prod-328313`.`utilities`.`newportnews_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "newportnews_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.newportnews_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/newportnews_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`newportnews_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'newportnewswater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.veoliany_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "veoliany_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/veoliany_water.sql", "original_file_path": "models/utilities/veoliany_water.sql", "unique_id": "model.promise_dwh.veoliany_water", "fqn": ["promise_dwh", "utilities", "veoliany_water"], "alias": "veoliany_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["veoliany_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["veoliany_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["veoliany_water_utility_upload"]}, "created_at": 1715379615.899536, "relation_name": "`analytics-prod-328313`.`utilities`.`veoliany_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "veoliany_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.veoliany_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/veoliany_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`veoliany_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'veolianywater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.lw_gte_7_days_past_due": {"database": "analytics-prod-328313", "schema": "utilities", "name": "lw_gte_7_days_past_due", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/lw_gte_7_days_past_due.sql", "original_file_path": "models/utilities/lw_gte_7_days_past_due.sql", "unique_id": "model.promise_dwh.lw_gte_7_days_past_due", "fqn": ["promise_dwh", "utilities", "lw_gte_7_days_past_due"], "alias": "lw_gte_7_days_past_due", "checksum": {"name": "sha256", "checksum": "203713d3361cf0c2ddf26437683c62c7e3ee4af12a76d52ec62a4b3fea006e98"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities"}, "created_at": 1715379615.903598, "relation_name": "`analytics-prod-328313`.`utilities`.`lw_gte_7_days_past_due`", "raw_code": "{{\n   config(\n      materialized=\"table\"\n   )\n}}\n\nSELECT\n    account_number_hashed,\n    MAX(valid_ending) AS last_day_zero_past_due\nFROM {{ ref('account_history_combined') }}\nWHERE\n    (past_due_balance = 0 OR past_due_balance IS NULL)\n    AND jurisdiction = 'louisvillewater'\nGROUP BY 1", "language": "sql", "refs": [{"name": "account_history_combined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.promise_dwh.account_history_combined"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/lw_gte_7_days_past_due.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    account_number_hashed,\n    MAX(valid_ending) AS last_day_zero_past_due\nFROM `analytics-prod-328313`.`utilities`.`account_history_combined`\nWHERE\n    (past_due_balance = 0 OR past_due_balance IS NULL)\n    AND jurisdiction = 'louisvillewater'\nGROUP BY 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.centralarkansas_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "centralarkansas_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/centralarkansas_water.sql", "original_file_path": "models/utilities/centralarkansas_water.sql", "unique_id": "model.promise_dwh.centralarkansas_water", "fqn": ["promise_dwh", "utilities", "centralarkansas_water"], "alias": "centralarkansas_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["centralarkansas_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["centralarkansas_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["centralarkansas_water_utility_upload"]}, "created_at": 1715379615.904902, "relation_name": "`analytics-prod-328313`.`utilities`.`centralarkansas_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "centralarkansas_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.centralarkansas_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/centralarkansas_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`centralarkansas_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'centralarkansaswater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.hrsd": {"database": "analytics-prod-328313", "schema": "utilities", "name": "hrsd", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/hrsd.sql", "original_file_path": "models/utilities/hrsd.sql", "unique_id": "model.promise_dwh.hrsd", "fqn": ["promise_dwh", "utilities", "hrsd"], "alias": "hrsd", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["hrsd_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["hrsd_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["hrsd_utility_upload"]}, "created_at": 1715379615.9089348, "relation_name": "`analytics-prod-328313`.`utilities`.`hrsd`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "hrsd_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.hrsd_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/hrsd.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`hrsd_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'hrsd'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.sj_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "sj_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/sj_water.sql", "original_file_path": "models/utilities/sj_water.sql", "unique_id": "model.promise_dwh.sj_water", "fqn": ["promise_dwh", "utilities", "sj_water"], "alias": "sj_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["sj_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["sj_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["sj_water_utility_upload"]}, "created_at": 1715379615.9130208, "relation_name": "`analytics-prod-328313`.`utilities`.`sj_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "sj_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.sj_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/sj_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`sj_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'sjwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.cal_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "cal_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/cal_water.sql", "original_file_path": "models/utilities/cal_water.sql", "unique_id": "model.promise_dwh.cal_water", "fqn": ["promise_dwh", "utilities", "cal_water"], "alias": "cal_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["cal_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cal_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["cal_water_utility_upload"]}, "created_at": 1715379615.916925, "relation_name": "`analytics-prod-328313`.`utilities`.`cal_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "cal_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.cal_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/cal_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`cal_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'calwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.account_history_combined_current": {"database": "analytics-prod-328313", "schema": "utilities", "name": "account_history_combined_current", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/account_history_combined_current.sql", "original_file_path": "models/utilities/account_history_combined_current.sql", "unique_id": "model.promise_dwh.account_history_combined_current", "fqn": ["promise_dwh", "utilities", "account_history_combined_current"], "alias": "account_history_combined_current", "checksum": {"name": "sha256", "checksum": "ad1c07330ab38d7b2a515cab9f512a92d46ea259435764bba986bdf15dea0ef3"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "cluster_by": ["jurisdiction"]}, "created_at": 1715379615.9208388, "relation_name": "`analytics-prod-328313`.`utilities`.`account_history_combined_current`", "raw_code": "{{ \n   config(\n    materialized='table',\n    cluster_by = ['jurisdiction'],\n   ) \n}}\nSELECT * FROM {{ ref('account_history_combined') }}\nWHERE is_current", "language": "sql", "refs": [{"name": "account_history_combined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.promise_dwh.account_history_combined"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/account_history_combined_current.sql", "compiled": true, "compiled_code": "\nSELECT * FROM `analytics-prod-328313`.`utilities`.`account_history_combined`\nWHERE is_current", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.louisville_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "louisville_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/louisville_water.sql", "original_file_path": "models/utilities/louisville_water.sql", "unique_id": "model.promise_dwh.louisville_water", "fqn": ["promise_dwh", "utilities", "louisville_water"], "alias": "louisville_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["louisville_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["louisville_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["louisville_water_utility_upload"]}, "created_at": 1715379615.9220312, "relation_name": "`analytics-prod-328313`.`utilities`.`louisville_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "louisville_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.louisville_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/louisville_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`louisville_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'louisvillewater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newmexico_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "newmexico_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/newmexico_water.sql", "original_file_path": "models/utilities/newmexico_water.sql", "unique_id": "model.promise_dwh.newmexico_water", "fqn": ["promise_dwh", "utilities", "newmexico_water"], "alias": "newmexico_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["newmexico_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["newmexico_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["newmexico_water_utility_upload"]}, "created_at": 1715379615.9269261, "relation_name": "`analytics-prod-328313`.`utilities`.`newmexico_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "newmexico_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.newmexico_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/newmexico_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`newmexico_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'newmexicowater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.wssc_water": {"database": "analytics-prod-328313", "schema": "utilities", "name": "wssc_water", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/wssc_water.sql", "original_file_path": "models/utilities/wssc_water.sql", "unique_id": "model.promise_dwh.wssc_water", "fqn": ["promise_dwh", "utilities", "wssc_water"], "alias": "wssc_water", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["wssc_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["wssc_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["wssc_water_utility_upload"]}, "created_at": 1715379615.930836, "relation_name": "`analytics-prod-328313`.`utilities`.`wssc_water`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "wssc_water_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.wssc_water_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/wssc_water.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`wssc_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'wsscwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.toledo": {"database": "analytics-prod-328313", "schema": "utilities", "name": "toledo", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/toledo.sql", "original_file_path": "models/utilities/toledo.sql", "unique_id": "model.promise_dwh.toledo", "fqn": ["promise_dwh", "utilities", "toledo"], "alias": "toledo", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": ["toledo_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["toledo_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["toledo_utility_upload"]}, "created_at": 1715379615.938764, "relation_name": "`analytics-prod-328313`.`utilities`.`toledo`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "toledo_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": ["model.promise_dwh.toledo_deltas_v2", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/toledo.sql", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`toledo_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'toledo'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.hrsd_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "hrsd_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/hrsd_mr_data.sql", "original_file_path": "models/utility_uploads/hrsd_mr_data.sql", "unique_id": "model.promise_dwh.hrsd_mr_data", "fqn": ["promise_dwh", "utility_uploads", "hrsd_mr_data"], "alias": "hrsd_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "hrsd_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "hrsd_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["hrsd_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379615.94266, "relation_name": "`analytics-prod-328313`.`utility_data`.`hrsd_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "hrsd_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.hrsd_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/hrsd_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`hrsd_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'hrsd' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.richmond_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "richmond_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/richmond_delta_rows.sql", "original_file_path": "models/utility_uploads/richmond_delta_rows.sql", "unique_id": "model.promise_dwh.richmond_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "richmond_delta_rows"], "alias": "richmond_delta_rows", "checksum": {"name": "sha256", "checksum": "74ddfb24513cf740b6443e8b977dfd2d755730784d1d12d932d554baea89bf05"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "richmond_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.richmond_delta_rows WHERE jurisdiction='richmond' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.richmond_delta_rows WHERE jurisdiction='richmond' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "richmond_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["richmond_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.richmond_delta_rows WHERE jurisdiction='richmond' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.richmond_delta_rows WHERE jurisdiction='richmond' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379615.959064, "relation_name": "`analytics-prod-328313`.`utility_data`.`richmond_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"AcctType\", \"Balance\", \"PastDueBal\", \"DueDate\", \"ACCT_ELIGIBLE\",\n                           \"PromisePlanBal\", \"DisconnectRisk\", \"lihwap_amount_applied_cents\", \"PaymentArrangement\"]\n    )\n}}", "language": "sql", "refs": [{"name": "richmond_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.richmond_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/richmond_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (AcctType = LAG(AcctType) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR AcctType IS NULL)\n            AND\n            (Balance = LAG(Balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR Balance IS NULL)\n            AND\n            (PastDueBal = LAG(PastDueBal) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR PastDueBal IS NULL)\n            AND\n            (DueDate = LAG(DueDate) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR DueDate IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (PromisePlanBal = LAG(PromisePlanBal) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR PromisePlanBal IS NULL)\n            AND\n            (DisconnectRisk = LAG(DisconnectRisk) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR DisconnectRisk IS NULL)\n            AND\n            (lihwap_amount_applied_cents = LAG(lihwap_amount_applied_cents) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR lihwap_amount_applied_cents IS NULL)\n            AND\n            (PaymentArrangement = LAG(PaymentArrangement) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR PaymentArrangement IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`richmond_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.richmond_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "richmond_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/richmond_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/richmond_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.richmond_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "richmond_complete_with_eligibility"], "alias": "richmond_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "367147209481e2e93ea47adc40f4fb5ab8f91c8ec540d6d44e74bc6bf045a138"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "richmond_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.richmond_complete_with_eligibility WHERE jurisdiction='richmond' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.richmond_complete_with_eligibility WHERE jurisdiction='richmond' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "richmond_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["richmond_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.richmond_complete_with_eligibility WHERE jurisdiction='richmond' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.richmond_complete_with_eligibility WHERE jurisdiction='richmond' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379615.9621382, "relation_name": "`analytics-prod-328313`.`utility_data`.`richmond_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'PastDueBal'\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/richmond_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `richmond-pay.staging.complete`\n    WHERE jurisdiction = 'richmond'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        \n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN PastDueBal > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN PastDueBal = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN PastDueBal is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN PastDueBal > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN PastDueBal = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN PastDueBal is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.veoliany_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "veoliany_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/veoliany_water_mr_data.sql", "original_file_path": "models/utility_uploads/veoliany_water_mr_data.sql", "unique_id": "model.promise_dwh.veoliany_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "veoliany_water_mr_data"], "alias": "veoliany_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "veoliany_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "veoliany_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["veoliany_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379615.971165, "relation_name": "`analytics-prod-328313`.`utility_data`.`veoliany_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "veoliany_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.veoliany_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/veoliany_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`veoliany_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'veolianywater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.hrsd_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "hrsd_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/hrsd_deltas_v2.sql", "original_file_path": "models/utility_uploads/hrsd_deltas_v2.sql", "unique_id": "model.promise_dwh.hrsd_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "hrsd_deltas_v2"], "alias": "hrsd_deltas_v2", "checksum": {"name": "sha256", "checksum": "490f636c83aa7ef73efdc5ed684aa30b6febbed1d678132b8d48b8f6200aa3bf"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "hrsd_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "hrsd_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["hrsd_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.912572, "relation_name": "`analytics-prod-328313`.`utility_data`.`hrsd_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\", \n      \"due_date\": \"DUE_DATE\", \n      \"outstanding_new_bill\": \"TOTAL_BALANCE - PAST_DUE_BALANCE\",\n      \"past_due_balance\": \"PAST_DUE_BALANCE\",\n      \"total_balance\": \"TOTAL_BALANCE\",\n      \"relief_amount\": \"RELIEF_AMT\",\n      \"account_type\": \"ACCT_TYPE\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"customer_type\": \"CUST_TYPE\",\n      \"active_promise_pay_plan\": \"ACTIVE_PP\",\n      \"in_severance\": \"IN_SEVERANCE\"\n    } \n    )\n}}", "language": "sql", "refs": [{"name": "hrsd_complete_with_eligibility", "package": null, "version": null}, {"name": "hrsd_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.hrsd_complete_with_eligibility", "model.promise_dwh.hrsd_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/hrsd_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`hrsd_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`hrsd_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'hrsd' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(DUE_DATE AS DATE)  AS due_date\n        , CAST(TOTAL_BALANCE - PAST_DUE_BALANCE AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(PAST_DUE_BALANCE AS INT64)  AS past_due_balance\n        , CAST(TOTAL_BALANCE AS INT64)  AS total_balance\n        , CAST(RELIEF_AMT AS INT64)  AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(ACCT_TYPE AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(CUST_TYPE AS STRING)  AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(ACTIVE_PP AS STRING)  AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(IN_SEVERANCE AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.toledo_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "toledo_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/toledo_delta_rows.sql", "original_file_path": "models/utility_uploads/toledo_delta_rows.sql", "unique_id": "model.promise_dwh.toledo_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "toledo_delta_rows"], "alias": "toledo_delta_rows", "checksum": {"name": "sha256", "checksum": "7ae1a5973a2d22ba5094a29b9290a8a05f99204db819563c140e55922b5269ab"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "toledo_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.toledo_delta_rows WHERE jurisdiction='toledo' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.toledo_delta_rows WHERE jurisdiction='toledo' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "toledo_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["toledo_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.toledo_delta_rows WHERE jurisdiction='toledo' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.toledo_delta_rows WHERE jurisdiction='toledo' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.910109, "relation_name": "`analytics-prod-328313`.`utility_data`.`toledo_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"due_date\", \"relief_balance\", \"relief_granted\", \"acct_type\", \"past_due_balance\",\n                           \"compliance_total_balance\", \"compliance_past_due_balance\", \"no_owner_permission\", \"ACCT_ELIGIBLE\"]\n    )\n}}", "language": "sql", "refs": [{"name": "toledo_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.toledo_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/toledo_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (relief_balance = LAG(relief_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR relief_balance IS NULL)\n            AND\n            (relief_granted = LAG(relief_granted) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR relief_granted IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (compliance_total_balance = LAG(compliance_total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR compliance_total_balance IS NULL)\n            AND\n            (compliance_past_due_balance = LAG(compliance_past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR compliance_past_due_balance IS NULL)\n            AND\n            (no_owner_permission = LAG(no_owner_permission) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR no_owner_permission IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`toledo_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.veoliany_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "veoliany_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/veoliany_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/veoliany_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.veoliany_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "veoliany_water_complete_with_eligibility"], "alias": "veoliany_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "veoliany_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.veoliany_water_complete_with_eligibility WHERE jurisdiction='veoliany_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.veoliany_water_complete_with_eligibility WHERE jurisdiction='veoliany_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "veoliany_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["veoliany_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.veoliany_water_complete_with_eligibility WHERE jurisdiction='veoliany_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.veoliany_water_complete_with_eligibility WHERE jurisdiction='veoliany_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379615.989231, "relation_name": "`analytics-prod-328313`.`utility_data`.`veoliany_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/veoliany_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `veoliany-water-pay.staging.complete`\n    WHERE jurisdiction = 'veoliany_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.wssc_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "wssc_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/wssc_water_mr_data.sql", "original_file_path": "models/utility_uploads/wssc_water_mr_data.sql", "unique_id": "model.promise_dwh.wssc_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "wssc_water_mr_data"], "alias": "wssc_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "wssc_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "wssc_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["wssc_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379615.992417, "relation_name": "`analytics-prod-328313`.`utility_data`.`wssc_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "wssc_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.wssc_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/wssc_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`wssc_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'wsscwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.alexrenew_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "alexrenew_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/alexrenew_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/alexrenew_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.alexrenew_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "alexrenew_water_complete_with_eligibility"], "alias": "alexrenew_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "2e760949a1262468f8bf32d201ed2f4d17c467c3ab6bff681cd0a32d5913bb13"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "alexrenew_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.alexrenew_water_complete_with_eligibility WHERE jurisdiction='alexrenew_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.alexrenew_water_complete_with_eligibility WHERE jurisdiction='alexrenew_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "alexrenew_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["alexrenew_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.alexrenew_water_complete_with_eligibility WHERE jurisdiction='alexrenew_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.alexrenew_water_complete_with_eligibility WHERE jurisdiction='alexrenew_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379615.9952042, "relation_name": "`analytics-prod-328313`.`utility_data`.`alexrenew_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'pastDueBalance',\n    'payPlanEligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/alexrenew_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `alexrenew-water-pay.staging.complete`\n    WHERE jurisdiction = 'alexrenew_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(payPlanEligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN pastDueBalance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN pastDueBalance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN pastDueBalance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN pastDueBalance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN pastDueBalance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN pastDueBalance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.mr_client_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "mr_client_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/mr_client_data.sql", "original_file_path": "models/utility_uploads/mr_client_data.sql", "unique_id": "model.promise_dwh.mr_client_data", "fqn": ["promise_dwh", "utility_uploads", "mr_client_data"], "alias": "mr_client_data", "checksum": {"name": "sha256", "checksum": "d10e71320cf65022ca7b42f119274d1b75b51fe90a47e2405bc433c5763bea4f"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": "utility_upload_trigger", "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379615.998165, "relation_name": "`analytics-prod-328313`.`utility_data`.`mr_client_data`", "raw_code": "{{\n  config(\n    cluster_by = ['jurisdiction'],\n    materialized = 'view',\n  )\n}}\n{%- set ref_list = [] %}\n\n{%- for jurx in var(\"jurisdiction-map\").keys()  %}\n{%-   if jurx != 'florida_lihwap' %}\n{%-      if var('jurisdiction-map')[jurx][target.name] != '' and target.name in var('jurisdiction-map')[jurx] %}\n{%-          set _ = ref_list.append( ref( jurx + '_mr_data' ) ) %}\n{%-      endif %}\n{%-   endif %}\n{%- endfor %}\n\n{{ \n   dbt_utils.union_relations(\n    relations=ref_list\n   )\n}}", "language": "sql", "refs": [{"name": "alexrenew_water_mr_data", "package": null, "version": null}, {"name": "baltimore_mr_data", "package": null, "version": null}, {"name": "buffalo_water_mr_data", "package": null, "version": null}, {"name": "cal_water_mr_data", "package": null, "version": null}, {"name": "centralarkansas_water_mr_data", "package": null, "version": null}, {"name": "corona_mr_data", "package": null, "version": null}, {"name": "gcww_mr_data", "package": null, "version": null}, {"name": "hrsd_mr_data", "package": null, "version": null}, {"name": "jackson_water_mr_data", "package": null, "version": null}, {"name": "louisville_water_mr_data", "package": null, "version": null}, {"name": "newark_water_mr_data", "package": null, "version": null}, {"name": "newmexico_water_mr_data", "package": null, "version": null}, {"name": "newportnews_water_mr_data", "package": null, "version": null}, {"name": "nola_water_mr_data", "package": null, "version": null}, {"name": "richmond_mr_data", "package": null, "version": null}, {"name": "sj_water_mr_data", "package": null, "version": null}, {"name": "toledo_mr_data", "package": null, "version": null}, {"name": "veoliany_water_mr_data", "package": null, "version": null}, {"name": "washington_water_mr_data", "package": null, "version": null}, {"name": "wssc_water_mr_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.promise_dwh.alexrenew_water_mr_data", "model.promise_dwh.baltimore_mr_data", "model.promise_dwh.buffalo_water_mr_data", "model.promise_dwh.cal_water_mr_data", "model.promise_dwh.centralarkansas_water_mr_data", "model.promise_dwh.corona_mr_data", "model.promise_dwh.gcww_mr_data", "model.promise_dwh.hrsd_mr_data", "model.promise_dwh.jackson_water_mr_data", "model.promise_dwh.louisville_water_mr_data", "model.promise_dwh.newark_water_mr_data", "model.promise_dwh.newmexico_water_mr_data", "model.promise_dwh.newportnews_water_mr_data", "model.promise_dwh.nola_water_mr_data", "model.promise_dwh.richmond_mr_data", "model.promise_dwh.sj_water_mr_data", "model.promise_dwh.toledo_mr_data", "model.promise_dwh.veoliany_water_mr_data", "model.promise_dwh.washington_water_mr_data", "model.promise_dwh.wssc_water_mr_data"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/mr_client_data.sql", "compiled": true, "compiled_code": "\n\n\n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`alexrenew_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`alexrenew_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`baltimore_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`baltimore_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`buffalo_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`buffalo_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`cal_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`cal_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`centralarkansas_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`centralarkansas_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`corona_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`corona_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`gcww_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`gcww_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`hrsd_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`hrsd_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`jackson_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`jackson_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`louisville_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`louisville_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`newark_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`newark_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`newmexico_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`newmexico_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`newportnews_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`newportnews_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`nola_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`nola_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`richmond_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`richmond_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`sj_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`sj_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`toledo_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`toledo_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`veoliany_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`veoliany_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`washington_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`washington_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`wssc_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`wssc_water_mr_data`\n\n            \n        )\n\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.washington_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "washington_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/washington_water_delta_rows.sql", "original_file_path": "models/utility_uploads/washington_water_delta_rows.sql", "unique_id": "model.promise_dwh.washington_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "washington_water_delta_rows"], "alias": "washington_water_delta_rows", "checksum": {"name": "sha256", "checksum": "9864356f9071b03f204f0a3a7d3535d9df2eb272e3cfb88c420519825c5f02b7"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "washington_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.washington_water_delta_rows WHERE jurisdiction='washington_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.washington_water_delta_rows WHERE jurisdiction='washington_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "washington_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["washington_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.washington_water_delta_rows WHERE jurisdiction='washington_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.washington_water_delta_rows WHERE jurisdiction='washington_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.002929, "relation_name": "`analytics-prod-328313`.`utility_data`.`washington_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"past_due_balance\", \"due_date\", \"acct_type\",\n                           \"ACCT_ELIGIBLE\", \"promise_plan_balance\",\n                           \"district\", \"consolidated_district\"]\n    )\n}}", "language": "sql", "refs": [{"name": "washington_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.washington_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/washington_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (district = LAG(district) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR district IS NULL)\n            AND\n            (consolidated_district = LAG(consolidated_district) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR consolidated_district IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`washington_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newark_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "newark_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/newark_water_mr_data.sql", "original_file_path": "models/utility_uploads/newark_water_mr_data.sql", "unique_id": "model.promise_dwh.newark_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "newark_water_mr_data"], "alias": "newark_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "newark_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "newark_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["newark_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.006953, "relation_name": "`analytics-prod-328313`.`utility_data`.`newark_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "newark_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.newark_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/newark_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newark_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'newarkwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.richmond_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "richmond_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/richmond_deltas_v2.sql", "original_file_path": "models/utility_uploads/richmond_deltas_v2.sql", "unique_id": "model.promise_dwh.richmond_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "richmond_deltas_v2"], "alias": "richmond_deltas_v2", "checksum": {"name": "sha256", "checksum": "62bf2211f08f606e07be31bb7c6b8b6a3ea737987df7dbf3503f1836c54c667c"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "richmond_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "richmond_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["richmond_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.009847, "relation_name": "`analytics-prod-328313`.`utility_data`.`richmond_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\",\n      \"due_date\": \"PARSE_DATE('%Y%m%d', DueDate)\",\n      \"outstanding_new_bill\": \"SAFE_CAST(100 * Balance - 100 * PastDueBal AS INT64)\",\n      \"past_due_balance\": \"SAFE_CAST(100 * PastDueBal AS INT64)\",\n      \"total_balance\": \"SAFE_CAST(100 * Balance AS INT64)\",\n      \"account_type\": \"LEFT(AcctType, 1)\",\n      \"promise_plan_balance\": \"SAFE_CAST(100 * PromisePlanBal AS INT64)\",\n      \"active_promise_pay_plan\": \"CASE WHEN PromisePlanBal > 0 THEN 'Y' WHEN PromisePlanBal = 0 THEN 'N' ELSE NULL END\",\n      \"in_severance\": \"DisconnectRisk\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"lihwap_amount_applied_cents\": \"lihwap_amount_applied_cents\",\n      \"lihwap_amount_applied_date\": \"lihwap_amount_applied_date\",\n      \"payment_arrangement\": \"CASE WHEN PaymentArrangement = 'Y' THEN TRUE ELSE FALSE END\"\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "richmond_complete_with_eligibility", "package": null, "version": null}, {"name": "richmond_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.richmond_complete_with_eligibility", "model.promise_dwh.richmond_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/richmond_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`richmond_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`richmond_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'richmond' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(PARSE_DATE('%Y%m%d', DueDate) AS DATE)  AS due_date\n        , CAST(SAFE_CAST(100 * Balance - 100 * PastDueBal AS INT64) AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(SAFE_CAST(100 * PastDueBal AS INT64) AS INT64)  AS past_due_balance\n        , CAST(SAFE_CAST(100 * Balance AS INT64) AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(LEFT(AcctType, 1) AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(CASE WHEN PaymentArrangement = 'Y' THEN TRUE ELSE FALSE END AS BOOLEAN)  AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN PromisePlanBal > 0 THEN 'Y' WHEN PromisePlanBal = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(SAFE_CAST(100 * PromisePlanBal AS INT64) AS INT64)  AS promise_plan_balance\n        , CAST(DisconnectRisk AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(lihwap_amount_applied_cents AS INT64)  AS lihwap_amount_applied_cents\n        , CAST(lihwap_amount_applied_date AS DATE)  AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.buffalo_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "buffalo_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/buffalo_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/buffalo_water_deltas_v2.sql", "unique_id": "model.promise_dwh.buffalo_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "buffalo_water_deltas_v2"], "alias": "buffalo_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "8374a43975a2d97f8eb974851ca35783e12e2a2707eb6495f508f2449f503cf4"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "buffalo_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "buffalo_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["buffalo_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.913192, "relation_name": "`analytics-prod-328313`.`utility_data`.`buffalo_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\", \n      \"due_date\": \"due_date\", \n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"total_balance\",\n      \"account_type\": \"acct_type\",\n      \"active_promise_pay_plan\": \"IF(promise_plan_balance > 0, 'Y', 'N')\",\n      \"promise_plan_balance\": \"promise_plan_balance\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\"\n    } \n    )\n}}", "language": "sql", "refs": [{"name": "buffalo_water_complete_with_eligibility", "package": null, "version": null}, {"name": "buffalo_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.buffalo_water_complete_with_eligibility", "model.promise_dwh.buffalo_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/buffalo_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`buffalo_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`buffalo_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'buffalowater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(IF(promise_plan_balance > 0, 'Y', 'N') AS STRING)  AS active_promise_pay_plan\n        , CAST(promise_plan_balance AS INT64)  AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.sj_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "sj_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/sj_water_delta_rows.sql", "original_file_path": "models/utility_uploads/sj_water_delta_rows.sql", "unique_id": "model.promise_dwh.sj_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "sj_water_delta_rows"], "alias": "sj_water_delta_rows", "checksum": {"name": "sha256", "checksum": "d7d99dc4de2d869ad79497da7d75ae2db75be55dcb45e1dd180f6ca0eaf812de"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "sj_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.sj_water_delta_rows WHERE jurisdiction='sj_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.sj_water_delta_rows WHERE jurisdiction='sj_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "sj_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["sj_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.sj_water_delta_rows WHERE jurisdiction='sj_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.sj_water_delta_rows WHERE jurisdiction='sj_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.019577, "relation_name": "`analytics-prod-328313`.`utility_data`.`sj_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\n        \"total_balance\", \"due_date\", \"ACCT_ELIGIBLE\", \n        \"acct_type\", \"past_due_balance\"\n    ]\n    )\n}}", "language": "sql", "refs": [{"name": "sj_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.sj_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/sj_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`sj_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.veoliany_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "veoliany_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/veoliany_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/veoliany_water_deltas_v2.sql", "unique_id": "model.promise_dwh.veoliany_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "veoliany_water_deltas_v2"], "alias": "veoliany_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "7761e3b0e67d743d23bb0339233664924938e381df553297c883bf7dd7a85307"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "veoliany_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "veoliany_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["veoliany_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.9136, "relation_name": "`analytics-prod-328313`.`utility_data`.`veoliany_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \n        \"account_number_hashed\": \"account_number_hashed\",\n        \"total_balance\": \"total_balance\",\n        \"due_date\": \"PARSE_DATE('@%B %d, %Y', due_date)\",\n        \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n        \"account_type\": \"acct_type\",\n        \"past_due_balance\": \"past_due_balance\",\n        \"in_severance\": \"disconnect_risk\",\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "veoliany_water_complete_with_eligibility", "package": null, "version": null}, {"name": "veoliany_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.veoliany_water_complete_with_eligibility", "model.promise_dwh.veoliany_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/veoliany_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`veoliany_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`veoliany_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'veolianywater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(PARSE_DATE('@%B %d, %Y', due_date) AS DATE)  AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(disconnect_risk AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newark_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "newark_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/newark_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/newark_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.newark_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "newark_water_complete_with_eligibility"], "alias": "newark_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "c98e72368a37c57ac24223e2a4bfe10b3b13841c4ee437f05528b173442f263f"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "newark_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newark_water_complete_with_eligibility WHERE jurisdiction='newark_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newark_water_complete_with_eligibility WHERE jurisdiction='newark_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "newark_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["newark_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newark_water_complete_with_eligibility WHERE jurisdiction='newark_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newark_water_complete_with_eligibility WHERE jurisdiction='newark_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.910984, "relation_name": "`analytics-prod-328313`.`utility_data`.`newark_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name | replace('_complete_with_eligibility', ''),\n    'past_due_balance'\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/newark_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `newark-water-pay.staging.complete`\n    WHERE jurisdiction = 'newark_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        \n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.gcww_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "gcww_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/gcww_deltas_v2.sql", "original_file_path": "models/utility_uploads/gcww_deltas_v2.sql", "unique_id": "model.promise_dwh.gcww_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "gcww_deltas_v2"], "alias": "gcww_deltas_v2", "checksum": {"name": "sha256", "checksum": "5e5c6777407b99b7d9cfc33707ec65942445bedbca350169c5b8d2ea173d5acb"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "gcww_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "gcww_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["gcww_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.911835, "relation_name": "`analytics-prod-328313`.`utility_data`.`gcww_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\", \n      \"due_date\": \"dueDate\", \n      \"outstanding_new_bill\": \"100*(currentBalance - pastDueBalance)\",\n      \"past_due_balance\": \"100*pastDueBalance\",\n      \"total_balance\": \"100*currentBalance\",\n      \"bill_date\": \"billDate\",\n      \"account_type\": \"accountType\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"active_promise_pay_plan\": \"CASE WHEN amountInPromisePlan > 0 THEN 'Y' WHEN amountInPromisePlan = 0 THEN 'N' ELSE NULL END\",\n      \"promise_plan_balance\": \"100*amountInPromisePlan\",\n      \"in_severance\": \"currentlyInSeverance\"\n    } \n    )\n}}", "language": "sql", "refs": [{"name": "gcww_complete_with_eligibility", "package": null, "version": null}, {"name": "gcww_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.gcww_complete_with_eligibility", "model.promise_dwh.gcww_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/gcww_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`gcww_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`gcww_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'gcww' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(dueDate AS DATE)  AS due_date\n        , CAST(100*(currentBalance - pastDueBalance) AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(100*pastDueBalance AS INT64)  AS past_due_balance\n        , CAST(100*currentBalance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(billDate AS DATE)  AS bill_date\n        , CAST(accountType AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN amountInPromisePlan > 0 THEN 'Y' WHEN amountInPromisePlan = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(100*amountInPromisePlan AS INT64)  AS promise_plan_balance\n        , CAST(currentlyInSeverance AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.toledo_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "toledo_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/toledo_deltas_v2.sql", "original_file_path": "models/utility_uploads/toledo_deltas_v2.sql", "unique_id": "model.promise_dwh.toledo_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "toledo_deltas_v2"], "alias": "toledo_deltas_v2", "checksum": {"name": "sha256", "checksum": "e211528532b11c25042c9bba807595c695befeb85df7efadc2b2ac1a586a02ba"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "toledo_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "toledo_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["toledo_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.9122481, "relation_name": "`analytics-prod-328313`.`utility_data`.`toledo_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\", \n      \"due_date\": \"due_date\", \n      \"outstanding_new_bill\": \"total_balance - past_due_balance\",\n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"total_balance\",\n      \"relief_amount\": \"relief_granted\",\n      \"relief_balance\": \"relief_balance\",\n      \"compliance_total_balance\": \"compliance_total_balance\",\n      \"compliance_past_due_balance\": \"compliance_past_due_balance\",\n      \"account_type\": \"acct_type\",\n      \"pay_plan_eligible\": \"CAST(CASE WHEN acct_type = 'R' THEN ACCT_ELIGIBLE ELSE 'N' END AS STRING)\",\n      \"no_owner_permission\": \"no_owner_permission\"\n    } \n    )\n}}", "language": "sql", "refs": [{"name": "toledo_complete_with_eligibility", "package": null, "version": null}, {"name": "toledo_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.toledo_complete_with_eligibility", "model.promise_dwh.toledo_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/toledo_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`toledo_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`toledo_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'toledo' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(total_balance - past_due_balance AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(relief_granted AS INT64)  AS relief_amount\n        , CAST(relief_balance AS INT64)  AS relief_balance\n        , CAST(compliance_total_balance AS INT64)  AS compliance_total_balance\n        , CAST(compliance_past_due_balance AS INT64)  AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(CAST(CASE WHEN acct_type = 'R' THEN ACCT_ELIGIBLE ELSE 'N' END AS STRING) AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(no_owner_permission AS STRING)  AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.baltimore_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "baltimore_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/baltimore_mr_data.sql", "original_file_path": "models/utility_uploads/baltimore_mr_data.sql", "unique_id": "model.promise_dwh.baltimore_mr_data", "fqn": ["promise_dwh", "utility_uploads", "baltimore_mr_data"], "alias": "baltimore_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "baltimore_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "baltimore_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["baltimore_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.0364091, "relation_name": "`analytics-prod-328313`.`utility_data`.`baltimore_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "baltimore_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.baltimore_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/baltimore_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`baltimore_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'baltimore' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.nola_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "nola_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/nola_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/nola_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.nola_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "nola_water_complete_with_eligibility"], "alias": "nola_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "nola_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.nola_water_complete_with_eligibility WHERE jurisdiction='nola_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.nola_water_complete_with_eligibility WHERE jurisdiction='nola_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "nola_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["nola_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.nola_water_complete_with_eligibility WHERE jurisdiction='nola_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.nola_water_complete_with_eligibility WHERE jurisdiction='nola_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.0391428, "relation_name": "`analytics-prod-328313`.`utility_data`.`nola_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/nola_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `nola-water-pay.staging.complete`\n    WHERE jurisdiction = 'nola_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newmexico_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "newmexico_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/newmexico_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/newmexico_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.newmexico_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "newmexico_water_complete_with_eligibility"], "alias": "newmexico_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "newmexico_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newmexico_water_complete_with_eligibility WHERE jurisdiction='newmexico_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newmexico_water_complete_with_eligibility WHERE jurisdiction='newmexico_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "newmexico_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["newmexico_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newmexico_water_complete_with_eligibility WHERE jurisdiction='newmexico_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newmexico_water_complete_with_eligibility WHERE jurisdiction='newmexico_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.044982, "relation_name": "`analytics-prod-328313`.`utility_data`.`newmexico_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/newmexico_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `cal-water-pay.staging.complete`\n    WHERE jurisdiction = 'newmexico_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newportnews_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "newportnews_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/newportnews_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/newportnews_water_deltas_v2.sql", "unique_id": "model.promise_dwh.newportnews_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "newportnews_water_deltas_v2"], "alias": "newportnews_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "99858a2a0d0c1742a82a89c73255a794d80419a52e7edea3092d516546e77557"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "newportnews_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "newportnews_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["newportnews_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.047824, "relation_name": "`analytics-prod-328313`.`utility_data`.`newportnews_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\", \n      \"total_balance\": \"total_balance\",\n      \"past_due_balance\": \"past_due_balance\",\n      \"due_date\": \"due_date\",\n      \"account_type\": \"CASE acct_type WHEN 'COMM' THEN 'C' WHEN 'INST' THEN 'C' WHEN 'RESI' THEN 'R' WHEN 'INDU' THEN 'I' ELSE acct_type END\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"promise_plan_balance\": \"promise_plan_balance\",\n      \"in_severance\": \"disconnect_risk\",\n      \"disconnected\": \"is_disconnected\",\n      \"payment_arrangement\": \"CASE WHEN has_installment_plan = 'Y' THEN TRUE ELSE FALSE END\"\n    } \n    )\n}}", "language": "sql", "refs": [{"name": "newportnews_water_complete_with_eligibility", "package": null, "version": null}, {"name": "newportnews_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.newportnews_water_complete_with_eligibility", "model.promise_dwh.newportnews_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/newportnews_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newportnews_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newportnews_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'newportnewswater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(CASE acct_type WHEN 'COMM' THEN 'C' WHEN 'INST' THEN 'C' WHEN 'RESI' THEN 'R' WHEN 'INDU' THEN 'I' ELSE acct_type END AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(CASE WHEN has_installment_plan = 'Y' THEN TRUE ELSE FALSE END AS BOOLEAN)  AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(promise_plan_balance AS INT64)  AS promise_plan_balance\n        , CAST(disconnect_risk AS STRING)  AS in_severance\n        , CAST(is_disconnected AS STRING)  AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.buffalo_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "buffalo_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/buffalo_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/buffalo_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.buffalo_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "buffalo_water_complete_with_eligibility"], "alias": "buffalo_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "buffalo_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.buffalo_water_complete_with_eligibility WHERE jurisdiction='buffalo_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.buffalo_water_complete_with_eligibility WHERE jurisdiction='buffalo_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "buffalo_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["buffalo_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.buffalo_water_complete_with_eligibility WHERE jurisdiction='buffalo_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.buffalo_water_complete_with_eligibility WHERE jurisdiction='buffalo_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.91077, "relation_name": "`analytics-prod-328313`.`utility_data`.`buffalo_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/buffalo_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `buffalo-water-pay.staging.complete`\n    WHERE jurisdiction = 'buffalo_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.washington_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "washington_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/washington_water_mr_data.sql", "original_file_path": "models/utility_uploads/washington_water_mr_data.sql", "unique_id": "model.promise_dwh.washington_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "washington_water_mr_data"], "alias": "washington_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "washington_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "washington_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["washington_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.057303, "relation_name": "`analytics-prod-328313`.`utility_data`.`washington_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "washington_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.washington_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/washington_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`washington_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'washingtonwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.sj_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "sj_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/sj_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/sj_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.sj_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "sj_water_complete_with_eligibility"], "alias": "sj_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "sj_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.sj_water_complete_with_eligibility WHERE jurisdiction='sj_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.sj_water_complete_with_eligibility WHERE jurisdiction='sj_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "sj_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["sj_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.sj_water_complete_with_eligibility WHERE jurisdiction='sj_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.sj_water_complete_with_eligibility WHERE jurisdiction='sj_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.060987, "relation_name": "`analytics-prod-328313`.`utility_data`.`sj_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/sj_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `sj-water-pay.staging.complete`\n    WHERE jurisdiction = 'sj_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.centralarkansas_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "centralarkansas_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/centralarkansas_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/centralarkansas_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.centralarkansas_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "centralarkansas_water_complete_with_eligibility"], "alias": "centralarkansas_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "1c71b5fb2c3ef339e4787fbc98b998644b39a85188aaede63da96a0449ae5977"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "centralarkansas_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.centralarkansas_water_complete_with_eligibility WHERE jurisdiction='centralarkansas_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.centralarkansas_water_complete_with_eligibility WHERE jurisdiction='centralarkansas_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "centralarkansas_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["centralarkansas_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.centralarkansas_water_complete_with_eligibility WHERE jurisdiction='centralarkansas_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.centralarkansas_water_complete_with_eligibility WHERE jurisdiction='centralarkansas_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.063817, "relation_name": "`analytics-prod-328313`.`utility_data`.`centralarkansas_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'active_status',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/centralarkansas_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `centralarkansas-water-pay.staging.complete`\n    WHERE jurisdiction = 'centralarkansas_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(active_status, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.sj_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "sj_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/sj_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/sj_water_deltas_v2.sql", "unique_id": "model.promise_dwh.sj_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "sj_water_deltas_v2"], "alias": "sj_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "3566b544dcdcb51d7d1bc6f9aee6326636a268910f6db127d164ec544c6ee913"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "sj_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "sj_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["sj_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.0666912, "relation_name": "`analytics-prod-328313`.`utility_data`.`sj_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\",\n      \"due_date\": \"due_date\",\n      \"outstanding_new_bill\": \"total_balance - past_due_balance\",\n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"total_balance\",\n      \"account_type\": \"acct_type\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\"\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "sj_water_complete_with_eligibility", "package": null, "version": null}, {"name": "sj_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.sj_water_complete_with_eligibility", "model.promise_dwh.sj_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/sj_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`sj_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`sj_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'sjwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(total_balance - past_due_balance AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.toledo_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "toledo_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/toledo_mr_data.sql", "original_file_path": "models/utility_uploads/toledo_mr_data.sql", "unique_id": "model.promise_dwh.toledo_mr_data", "fqn": ["promise_dwh", "utility_uploads", "toledo_mr_data"], "alias": "toledo_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "toledo_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "toledo_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["toledo_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.069949, "relation_name": "`analytics-prod-328313`.`utility_data`.`toledo_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "toledo_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.toledo_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/toledo_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`toledo_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'toledo' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.cal_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "cal_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/cal_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/cal_water_deltas_v2.sql", "unique_id": "model.promise_dwh.cal_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "cal_water_deltas_v2"], "alias": "cal_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "e4d12fdba893666a74dece86b86b03a632f14e60bbe79bb7c528630bb0fce65c"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "cal_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "cal_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["cal_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.072688, "relation_name": "`analytics-prod-328313`.`utility_data`.`cal_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\",\n      \"due_date\": \"due_date\",\n      \"outstanding_new_bill\": \"total_balance - past_due_balance\",\n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"total_balance\",\n      \"account_type\": \"acct_type\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"promise_plan_balance\": \"promise_plan_balance\",\n      \"active_promise_pay_plan\": \"CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END\"\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "cal_water_complete_with_eligibility", "package": null, "version": null}, {"name": "cal_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.cal_water_complete_with_eligibility", "model.promise_dwh.cal_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/cal_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`cal_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`cal_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'calwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(total_balance - past_due_balance AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(promise_plan_balance AS INT64)  AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.centralarkansas_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "centralarkansas_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/centralarkansas_water_mr_data.sql", "original_file_path": "models/utility_uploads/centralarkansas_water_mr_data.sql", "unique_id": "model.promise_dwh.centralarkansas_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "centralarkansas_water_mr_data"], "alias": "centralarkansas_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "centralarkansas_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "centralarkansas_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["centralarkansas_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.079008, "relation_name": "`analytics-prod-328313`.`utility_data`.`centralarkansas_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "centralarkansas_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.centralarkansas_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/centralarkansas_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`centralarkansas_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'centralarkansaswater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.baltimore_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "baltimore_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/baltimore_delta_rows.sql", "original_file_path": "models/utility_uploads/baltimore_delta_rows.sql", "unique_id": "model.promise_dwh.baltimore_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "baltimore_delta_rows"], "alias": "baltimore_delta_rows", "checksum": {"name": "sha256", "checksum": "814755fd3018f459e43dc0a5e5d5a5122480c7adcb316a791b08fc34810a2172"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "baltimore_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.baltimore_delta_rows WHERE jurisdiction='baltimore' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.baltimore_delta_rows WHERE jurisdiction='baltimore' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "baltimore_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["baltimore_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.baltimore_delta_rows WHERE jurisdiction='baltimore' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.baltimore_delta_rows WHERE jurisdiction='baltimore' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.081784, "relation_name": "`analytics-prod-328313`.`utility_data`.`baltimore_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"balance\", \"balance_forward\", \"last_bill_due_date\", \"actual_balance\", \"acct_type\", \"last_bill_amount\",\n                           \"past_due_balance\", \"ACCT_ELIGIBLE\", \"promise_plan_balance\", \"disconnect_risk\"]\n    )\n}}", "language": "sql", "refs": [{"name": "baltimore_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.baltimore_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/baltimore_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (balance = LAG(balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR balance IS NULL)\n            AND\n            (balance_forward = LAG(balance_forward) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR balance_forward IS NULL)\n            AND\n            (last_bill_due_date = LAG(last_bill_due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR last_bill_due_date IS NULL)\n            AND\n            (actual_balance = LAG(actual_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR actual_balance IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (last_bill_amount = LAG(last_bill_amount) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR last_bill_amount IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (disconnect_risk = LAG(disconnect_risk) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR disconnect_risk IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`baltimore_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newportnews_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "newportnews_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/newportnews_water_delta_rows.sql", "original_file_path": "models/utility_uploads/newportnews_water_delta_rows.sql", "unique_id": "model.promise_dwh.newportnews_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "newportnews_water_delta_rows"], "alias": "newportnews_water_delta_rows", "checksum": {"name": "sha256", "checksum": "b5d0bda9a7d6de812abce098ec3f69867ebb53d77a8394a3c9cd8b4a7d4f1eeb"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "newportnews_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newportnews_water_delta_rows WHERE jurisdiction='newportnews_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newportnews_water_delta_rows WHERE jurisdiction='newportnews_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "newportnews_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["newportnews_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newportnews_water_delta_rows WHERE jurisdiction='newportnews_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newportnews_water_delta_rows WHERE jurisdiction='newportnews_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.0850182, "relation_name": "`analytics-prod-328313`.`utility_data`.`newportnews_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"past_due_balance\", \"due_date\", \"acct_type\", \"plan_eligible\", \n        \"promise_plan_balance\", \"disconnect_risk\", \"is_disconnected\", \"has_installment_plan\"]\n    )\n}}", "language": "sql", "refs": [{"name": "newportnews_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.newportnews_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/newportnews_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (plan_eligible = LAG(plan_eligible) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR plan_eligible IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (disconnect_risk = LAG(disconnect_risk) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR disconnect_risk IS NULL)\n            AND\n            (is_disconnected = LAG(is_disconnected) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR is_disconnected IS NULL)\n            AND\n            (has_installment_plan = LAG(has_installment_plan) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR has_installment_plan IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`newportnews_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.nola_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "nola_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/nola_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/nola_water_deltas_v2.sql", "unique_id": "model.promise_dwh.nola_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "nola_water_deltas_v2"], "alias": "nola_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "6ab2085072823d069947f2977089b130c56cd9d2009f1a7dd680ff63d7c037f4"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "nola_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "nola_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["nola_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.088922, "relation_name": "`analytics-prod-328313`.`utility_data`.`nola_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\", \n      \"due_date\": \"IF(due_date != 'Jan  1 1900 12:00AM', DATE(PARSE_DATETIME('%b %d %Y  %H:%M%p',  due_date)), NULL)\", \n      \"outstanding_new_bill\": \"(total_balance - past_due_balance)\",\n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"total_balance\",\n      \"account_type\": \"acct_type\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"promise_plan_balance\": \"promise_plan_balance\",\n      \"active_promise_pay_plan\": \"CASE WHEN promise_plan_balance > 0 THEN 'Y' WHEN promise_plan_balance = 0 THEN 'N' ELSE NULL END\",\n      \"in_severance\": \"disconnect_risk\",\n      \"disconnected\": \"is_disconnected\"\n    } \n    )\n}}", "language": "sql", "refs": [{"name": "nola_water_complete_with_eligibility", "package": null, "version": null}, {"name": "nola_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.nola_water_complete_with_eligibility", "model.promise_dwh.nola_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/nola_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`nola_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`nola_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'nolawater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(IF(due_date != 'Jan  1 1900 12:00AM', DATE(PARSE_DATETIME('%b %d %Y  %H:%M%p',  due_date)), NULL) AS DATE)  AS due_date\n        , CAST((total_balance - past_due_balance) AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN promise_plan_balance > 0 THEN 'Y' WHEN promise_plan_balance = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(promise_plan_balance AS INT64)  AS promise_plan_balance\n        , CAST(disconnect_risk AS STRING)  AS in_severance\n        , CAST(is_disconnected AS STRING)  AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.cal_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "cal_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/cal_water_mr_data.sql", "original_file_path": "models/utility_uploads/cal_water_mr_data.sql", "unique_id": "model.promise_dwh.cal_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "cal_water_mr_data"], "alias": "cal_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "cal_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "cal_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["cal_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.0956879, "relation_name": "`analytics-prod-328313`.`utility_data`.`cal_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "cal_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.cal_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/cal_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`cal_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'calwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.wssc_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "wssc_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/wssc_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/wssc_water_deltas_v2.sql", "unique_id": "model.promise_dwh.wssc_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "wssc_water_deltas_v2"], "alias": "wssc_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "d1d5c7c46e921df40d397ae71b81018686616e2dac6b658738be508a7a88c0a4"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "wssc_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "wssc_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["wssc_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.1016572, "relation_name": "`analytics-prod-328313`.`utility_data`.`wssc_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \n        \"account_number_hashed\": \"account_number_hashed\",\n        \"total_balance\": \"total_balance\",\n        \"due_date\": \"due_date\",\n        \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n        \"account_type\": \"acct_type\",\n        \"past_due_balance\": \"past_due_balance\",\n        \"disconnected\": \"IF(has_service='N', 'Y', 'N')\",\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "wssc_water_complete_with_eligibility", "package": null, "version": null}, {"name": "wssc_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.wssc_water_complete_with_eligibility", "model.promise_dwh.wssc_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/wssc_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`wssc_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`wssc_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'wsscwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(IF(has_service='N', 'Y', 'N') AS STRING)  AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.gcww_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "gcww_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/gcww_delta_rows.sql", "original_file_path": "models/utility_uploads/gcww_delta_rows.sql", "unique_id": "model.promise_dwh.gcww_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "gcww_delta_rows"], "alias": "gcww_delta_rows", "checksum": {"name": "sha256", "checksum": "9af2dc7dd29c744ed55ddf5766a6e29ac2d9020aa4de2cd584dff83feb1fdb88"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "gcww_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.gcww_delta_rows WHERE jurisdiction='gcww' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.gcww_delta_rows WHERE jurisdiction='gcww' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "gcww_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["gcww_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.gcww_delta_rows WHERE jurisdiction='gcww' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.gcww_delta_rows WHERE jurisdiction='gcww' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.909409, "relation_name": "`analytics-prod-328313`.`utility_data`.`gcww_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"dueDate\", \"currentBalance\", \"pastDueBalance\", \"billDate\", \"accountType\", \n                           \"cashOnly\", \"ACCT_ELIGIBLE\", \"nonOwnerContactPermission\", \"amountInPromisePlan\", \"currentlyInSeverance\"]\n    )\n}}", "language": "sql", "refs": [{"name": "gcww_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.gcww_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/gcww_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (dueDate = LAG(dueDate) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR dueDate IS NULL)\n            AND\n            (currentBalance = LAG(currentBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR currentBalance IS NULL)\n            AND\n            (pastDueBalance = LAG(pastDueBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR pastDueBalance IS NULL)\n            AND\n            (billDate = LAG(billDate) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR billDate IS NULL)\n            AND\n            (accountType = LAG(accountType) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR accountType IS NULL)\n            AND\n            (cashOnly = LAG(cashOnly) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR cashOnly IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (nonOwnerContactPermission = LAG(nonOwnerContactPermission) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR nonOwnerContactPermission IS NULL)\n            AND\n            (amountInPromisePlan = LAG(amountInPromisePlan) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR amountInPromisePlan IS NULL)\n            AND\n            (currentlyInSeverance = LAG(currentlyInSeverance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR currentlyInSeverance IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`gcww_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.jackson_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "jackson_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/jackson_water_mr_data.sql", "original_file_path": "models/utility_uploads/jackson_water_mr_data.sql", "unique_id": "model.promise_dwh.jackson_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "jackson_water_mr_data"], "alias": "jackson_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "jackson_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "jackson_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["jackson_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.108018, "relation_name": "`analytics-prod-328313`.`utility_data`.`jackson_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "jackson_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.jackson_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/jackson_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`jackson_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'jacksonwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.louisville_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "louisville_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/louisville_water_mr_data.sql", "original_file_path": "models/utility_uploads/louisville_water_mr_data.sql", "unique_id": "model.promise_dwh.louisville_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "louisville_water_mr_data"], "alias": "louisville_water_mr_data", "checksum": {"name": "sha256", "checksum": "be532ed91cd287c7cf4b984bb237fc457be27a2152782c5f84c35505b4244ac3"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "louisville_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "louisville_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["louisville_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.1107671, "relation_name": "`analytics-prod-328313`.`utility_data`.`louisville_water_mr_data`", "raw_code": "{{\n  config(\n    materialized = 'table',\n    dataset = 'utility_data',\n    tags=\"louisville_water_utility_upload\",\n    cluster_by = ['jurisdiction']\n  )\n}}\n\n{%- set project_source =  \"louisville-water-pay\" %}\n{%- set jurisdiction = \"louisvillewater\" %}\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `{{ project_source }}.staging.complete` WHERE jurisdiction = 'louisville_water')\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n{{ get_mr_dates(jurisdiction) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_mr_dates"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/louisville_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `louisville-water-pay.staging.complete` WHERE jurisdiction = 'louisville_water')\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'louisvillewater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.centralarkansas_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "centralarkansas_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/centralarkansas_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/centralarkansas_water_deltas_v2.sql", "unique_id": "model.promise_dwh.centralarkansas_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "centralarkansas_water_deltas_v2"], "alias": "centralarkansas_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "29d5996aa2d8fc98d92091c0371645da6c0e840115ea16ae1fcca0b59d8c69c9"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "centralarkansas_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "centralarkansas_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["centralarkansas_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.913804, "relation_name": "`analytics-prod-328313`.`utility_data`.`centralarkansas_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \n        \"account_number_hashed\": \"account_number_hashed\",\n        \"past_due_balance\": \"past_due_balance\",\n        \"total_balance\": \"total_balance\",\n        \"due_date\": \"due_date\",\n        \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n        \"account_type\": \"acct_type\",\n        \"broken\": \"broken\"\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "centralarkansas_water_complete_with_eligibility", "package": null, "version": null}, {"name": "centralarkansas_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.centralarkansas_water_complete_with_eligibility", "model.promise_dwh.centralarkansas_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/centralarkansas_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`centralarkansas_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`centralarkansas_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'centralarkansaswater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(broken AS STRING)  AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newmexico_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "newmexico_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/newmexico_water_delta_rows.sql", "original_file_path": "models/utility_uploads/newmexico_water_delta_rows.sql", "unique_id": "model.promise_dwh.newmexico_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "newmexico_water_delta_rows"], "alias": "newmexico_water_delta_rows", "checksum": {"name": "sha256", "checksum": "9864356f9071b03f204f0a3a7d3535d9df2eb272e3cfb88c420519825c5f02b7"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "newmexico_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newmexico_water_delta_rows WHERE jurisdiction='newmexico_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newmexico_water_delta_rows WHERE jurisdiction='newmexico_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "newmexico_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["newmexico_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newmexico_water_delta_rows WHERE jurisdiction='newmexico_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newmexico_water_delta_rows WHERE jurisdiction='newmexico_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.12418, "relation_name": "`analytics-prod-328313`.`utility_data`.`newmexico_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"past_due_balance\", \"due_date\", \"acct_type\",\n                           \"ACCT_ELIGIBLE\", \"promise_plan_balance\",\n                           \"district\", \"consolidated_district\"]\n    )\n}}", "language": "sql", "refs": [{"name": "newmexico_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.newmexico_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/newmexico_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (district = LAG(district) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR district IS NULL)\n            AND\n            (consolidated_district = LAG(consolidated_district) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR consolidated_district IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`newmexico_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.louisville_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "louisville_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/louisville_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/louisville_water_deltas_v2.sql", "unique_id": "model.promise_dwh.louisville_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "louisville_water_deltas_v2"], "alias": "louisville_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "37976050c540019ee986e5233251cf22827a087fd3a633eb1ccf4da5158ba8bf"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "louisville_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "louisville_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["louisville_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.9127822, "relation_name": "`analytics-prod-328313`.`utility_data`.`louisville_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\", \n      \"due_date\": \"billDueDate\", \n      \"outstanding_new_bill\": \"totalBalanceSigned - pastDueSigned\",\n      \"current_balance\": \"currentDueSigned\",\n      \"past_due_balance\": \"pastDueSigned\",\n      \"total_balance\": \"totalBalanceSigned\",\n      \"bill_date\": \"CAST(NULL as DATE)\",\n      \"account_type\": \"accountType\",\n      \"cash_only\": \"cashOnlyIndicator\",\n      \"payment_arrangement\": \"paymentArrangementFlag\"\n    } \n    )\n}}", "language": "sql", "refs": [{"name": "louisville_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.louisville_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/louisville_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`louisville_water_delta_rows`),\nc AS (SELECT * FROM `louisville-water-pay.staging.complete` WHERE jurisdiction='louisville_water')\n\n\n    \n    \n\nSELECT \n  'louisvillewater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(billDueDate AS DATE)  AS due_date\n        , CAST(totalBalanceSigned - pastDueSigned AS INT64)  AS outstanding_new_bill\n        , CAST(currentDueSigned AS INT64)  AS current_balance\n        , CAST(pastDueSigned AS INT64)  AS past_due_balance\n        , CAST(totalBalanceSigned AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(CAST(NULL as DATE) AS DATE)  AS bill_date\n        , CAST(accountType AS STRING)  AS account_type\n        , CAST(cashOnlyIndicator AS BOOLEAN)  AS cash_only\n        , CAST(NULL AS STRING) AS pay_plan_eligible\n        , CAST(paymentArrangementFlag AS BOOLEAN)  AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(NULL AS BOOLEAN) AS gte_7_days_past_due\n        , CAST(NULL AS BOOLEAN) AS gte_15_days_past_due\n        , CAST(NULL AS BOOLEAN) AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.corona_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "corona_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/corona_deltas_v2.sql", "original_file_path": "models/utility_uploads/corona_deltas_v2.sql", "unique_id": "model.promise_dwh.corona_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "corona_deltas_v2"], "alias": "corona_deltas_v2", "checksum": {"name": "sha256", "checksum": "8599aa590e077d3fb92da6441d5cd3fdc7fcfa347359a0df2f68b08a7c2ab5c3"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "corona_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "corona_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["corona_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.912988, "relation_name": "`analytics-prod-328313`.`utility_data`.`corona_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\", \n      \"due_date\": \"due_date\", \n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"total_balance\",\n      \"account_type\": \"acct_type\",\n      \"active_promise_pay_plan\": \"active_pp\",\n      \"in_severance\": \"Severance_Flag\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"disconnected\": \"Disconnect_Flag\"\n    } \n    )\n}}", "language": "sql", "refs": [{"name": "corona_complete_with_eligibility", "package": null, "version": null}, {"name": "corona_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.corona_complete_with_eligibility", "model.promise_dwh.corona_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/corona_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`corona_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`corona_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'corona' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(active_pp AS STRING)  AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(Severance_Flag AS STRING)  AS in_severance\n        , CAST(Disconnect_Flag AS STRING)  AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newmexico_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "newmexico_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/newmexico_water_mr_data.sql", "original_file_path": "models/utility_uploads/newmexico_water_mr_data.sql", "unique_id": "model.promise_dwh.newmexico_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "newmexico_water_mr_data"], "alias": "newmexico_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "newmexico_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "newmexico_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["newmexico_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.1365252, "relation_name": "`analytics-prod-328313`.`utility_data`.`newmexico_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "newmexico_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.newmexico_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/newmexico_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newmexico_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'newmexicowater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.buffalo_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "buffalo_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/buffalo_water_delta_rows.sql", "original_file_path": "models/utility_uploads/buffalo_water_delta_rows.sql", "unique_id": "model.promise_dwh.buffalo_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "buffalo_water_delta_rows"], "alias": "buffalo_water_delta_rows", "checksum": {"name": "sha256", "checksum": "ae23bdff3dc7c537ad6f4e7696c097e822ed63ab85341e233b633042fc19e731"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "buffalo_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.buffalo_water_delta_rows WHERE jurisdiction='buffalo_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.buffalo_water_delta_rows WHERE jurisdiction='buffalo_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "buffalo_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["buffalo_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.buffalo_water_delta_rows WHERE jurisdiction='buffalo_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.buffalo_water_delta_rows WHERE jurisdiction='buffalo_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.1392698, "relation_name": "`analytics-prod-328313`.`utility_data`.`buffalo_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"due_date\", \"promise_plan_balance\", \"past_due_balance\", \"acct_type\", \n                           \"ACCT_ELIGIBLE\"] \n    )\n}}", "language": "sql", "refs": [{"name": "buffalo_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.buffalo_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/buffalo_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`buffalo_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.alexrenew_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "alexrenew_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/alexrenew_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/alexrenew_water_deltas_v2.sql", "unique_id": "model.promise_dwh.alexrenew_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "alexrenew_water_deltas_v2"], "alias": "alexrenew_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "490d2be5dc026aab7e950b0f6ca1583f414b41d0c8b631dc9c8d85c52b490a09"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "alexrenew_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "alexrenew_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["alexrenew_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.912044, "relation_name": "`analytics-prod-328313`.`utility_data`.`alexrenew_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\", \n      \"due_date\": \"dueDate\", \n      \"outstanding_new_bill\": \"100*(currentBalance - pastDueBalance)\",\n      \"past_due_balance\": \"100*pastDueBalance\",\n      \"total_balance\": \"100*currentBalance\",\n      \"bill_date\": \"billDate\",\n      \"account_type\": \"accountType\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"promise_plan_balance\": \"100*amountInPromisePlan\",\n      \"active_promise_pay_plan\": \"CASE WHEN amountInPromisePlan > 0 THEN 'Y' WHEN amountInPromisePlan = 0 THEN 'N' ELSE NULL END\",\n      \"in_severance\": \"currentlyInSeverance\"\n    } \n    )\n}}", "language": "sql", "refs": [{"name": "alexrenew_water_complete_with_eligibility", "package": null, "version": null}, {"name": "alexrenew_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.alexrenew_water_complete_with_eligibility", "model.promise_dwh.alexrenew_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/alexrenew_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`alexrenew_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`alexrenew_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'alexrenewwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(dueDate AS DATE)  AS due_date\n        , CAST(100*(currentBalance - pastDueBalance) AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(100*pastDueBalance AS INT64)  AS past_due_balance\n        , CAST(100*currentBalance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(billDate AS DATE)  AS bill_date\n        , CAST(accountType AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN amountInPromisePlan > 0 THEN 'Y' WHEN amountInPromisePlan = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(100*amountInPromisePlan AS INT64)  AS promise_plan_balance\n        , CAST(currentlyInSeverance AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.richmond_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "richmond_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/richmond_mr_data.sql", "original_file_path": "models/utility_uploads/richmond_mr_data.sql", "unique_id": "model.promise_dwh.richmond_mr_data", "fqn": ["promise_dwh", "utility_uploads", "richmond_mr_data"], "alias": "richmond_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "richmond_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "richmond_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["richmond_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.149631, "relation_name": "`analytics-prod-328313`.`utility_data`.`richmond_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "richmond_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.richmond_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/richmond_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`richmond_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'richmond' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.nola_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "nola_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/nola_water_delta_rows.sql", "original_file_path": "models/utility_uploads/nola_water_delta_rows.sql", "unique_id": "model.promise_dwh.nola_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "nola_water_delta_rows"], "alias": "nola_water_delta_rows", "checksum": {"name": "sha256", "checksum": "306138bbf497e1a00bc57d44b25ee79d5f319350322220aa4a25f233c682fbb5"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "nola_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.nola_water_delta_rows WHERE jurisdiction='nola_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.nola_water_delta_rows WHERE jurisdiction='nola_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "nola_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["nola_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.nola_water_delta_rows WHERE jurisdiction='nola_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.nola_water_delta_rows WHERE jurisdiction='nola_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.152341, "relation_name": "`analytics-prod-328313`.`utility_data`.`nola_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"past_due_balance\", \"due_date\", \"acct_type\", \"ACCT_ELIGIBLE\", \n                           \"promise_plan_balance\", \"disconnect_risk\", \"is_disconnected\"]\n    )\n}}", "language": "sql", "refs": [{"name": "nola_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.nola_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/nola_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (disconnect_risk = LAG(disconnect_risk) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR disconnect_risk IS NULL)\n            AND\n            (is_disconnected = LAG(is_disconnected) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR is_disconnected IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`nola_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newark_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "newark_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/newark_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/newark_water_deltas_v2.sql", "unique_id": "model.promise_dwh.newark_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "newark_water_deltas_v2"], "alias": "newark_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "f6ab2d166114b7641cd7a45f5438a4df4c2d5e724a95424040747ed5893d2411"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "newark_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "newark_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["newark_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.913396, "relation_name": "`analytics-prod-328313`.`utility_data`.`newark_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\", \n      \"past_due_balance\": \"COALESCE(past_due_balance, sixty_days)\",\n      \"total_balance\": \"COALESCE(total_balance, current_balance)\",\n      \"in_severance\": \"disconnect_risk\",\n      \"account_type\": \" CASE WHEN acct_type = 'Residential'\n                            THEN 'R'\n                            WHEN acct_type = 'Commercial'\n                            THEN 'C'\n                            -- Other WHENs for old Newark data version\n                            WHEN TRIM(property_description) IN ('2 1/2 FAMILY', 'CONDOMINIUM', 'DUPLEX', 'FIVE FAMILY', \n                            'FOUR FAMILY', 'MULTI FAMILY', 'ONE FAMILY', 'SIX FAMILY', 'THREE FAMILY', 'TOWN-HOUSE', 'TWO FAMILY')\n                            THEN 'R'\n                            WHEN property_description in ('INDUSTRIAL', 'WARE HOUSE')\n                            THEN 'I'\n                            ELSE 'I'\n                        END\",\n      \"pay_plan_eligible\": \" CASE WHEN acct_type = 'Residential' OR (\n                              TRIM(property_description) IN ('2 1/2 FAMILY', 'CONDOMINIUM', 'DUPLEX', 'FIVE FAMILY', \n                                                    'FOUR FAMILY', 'MULTI FAMILY', 'ONE FAMILY', 'SIX FAMILY', 'THREE FAMILY', 'TOWN-HOUSE', 'TWO FAMILY')\n                                                    AND cycle IN (1, 4, 6, 9, 12, 15))\n                              THEN ACCT_ELIGIBLE\n                              ELSE 'N'\n                            END\"\n    } \n    )\n}}", "language": "sql", "refs": [{"name": "newark_water_complete_with_eligibility", "package": null, "version": null}, {"name": "newark_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.newark_water_complete_with_eligibility", "model.promise_dwh.newark_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/newark_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newark_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newark_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'newarkwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(NULL AS DATE) AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(COALESCE(past_due_balance, sixty_days) AS INT64)  AS past_due_balance\n        , CAST(COALESCE(total_balance, current_balance) AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST( CASE WHEN acct_type = 'Residential'\n                            THEN 'R'\n                            WHEN acct_type = 'Commercial'\n                            THEN 'C'\n                            -- Other WHENs for old Newark data version\n                            WHEN TRIM(property_description) IN ('2 1/2 FAMILY', 'CONDOMINIUM', 'DUPLEX', 'FIVE FAMILY', \n                            'FOUR FAMILY', 'MULTI FAMILY', 'ONE FAMILY', 'SIX FAMILY', 'THREE FAMILY', 'TOWN-HOUSE', 'TWO FAMILY')\n                            THEN 'R'\n                            WHEN property_description in ('INDUSTRIAL', 'WARE HOUSE')\n                            THEN 'I'\n                            ELSE 'I'\n                        END AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST( CASE WHEN acct_type = 'Residential' OR (\n                              TRIM(property_description) IN ('2 1/2 FAMILY', 'CONDOMINIUM', 'DUPLEX', 'FIVE FAMILY', \n                                                    'FOUR FAMILY', 'MULTI FAMILY', 'ONE FAMILY', 'SIX FAMILY', 'THREE FAMILY', 'TOWN-HOUSE', 'TWO FAMILY')\n                                                    AND cycle IN (1, 4, 6, 9, 12, 15))\n                              THEN ACCT_ELIGIBLE\n                              ELSE 'N'\n                            END AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(disconnect_risk AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.sj_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "sj_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/sj_water_mr_data.sql", "original_file_path": "models/utility_uploads/sj_water_mr_data.sql", "unique_id": "model.promise_dwh.sj_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "sj_water_mr_data"], "alias": "sj_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "sj_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "sj_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["sj_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.1614442, "relation_name": "`analytics-prod-328313`.`utility_data`.`sj_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "sj_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.sj_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/sj_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`sj_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'sjwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.gcww_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "gcww_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/gcww_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/gcww_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.gcww_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "gcww_complete_with_eligibility"], "alias": "gcww_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "c520a9ef2fa75c56651dcdd81da2e8dfb46e85eb311ee7e5631e478742ff8139"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "gcww_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.gcww_complete_with_eligibility WHERE jurisdiction='gcww' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.gcww_complete_with_eligibility WHERE jurisdiction='gcww' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "gcww_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["gcww_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.gcww_complete_with_eligibility WHERE jurisdiction='gcww' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.gcww_complete_with_eligibility WHERE jurisdiction='gcww' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.1642282, "relation_name": "`analytics-prod-328313`.`utility_data`.`gcww_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'pastDueBalance',\n    'payPlanEligible'\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/gcww_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `gcww-pay.staging.complete`\n    WHERE jurisdiction = 'gcww'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(payPlanEligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN pastDueBalance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN pastDueBalance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN pastDueBalance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN pastDueBalance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN pastDueBalance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN pastDueBalance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.jackson_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "jackson_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/jackson_water_delta_rows.sql", "original_file_path": "models/utility_uploads/jackson_water_delta_rows.sql", "unique_id": "model.promise_dwh.jackson_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "jackson_water_delta_rows"], "alias": "jackson_water_delta_rows", "checksum": {"name": "sha256", "checksum": "fbc42580df2cc77bccf304f958b85feade9067de1806ef13917f2639a1a01e53"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "jackson_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jackson_water_delta_rows WHERE jurisdiction='jackson_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jackson_water_delta_rows WHERE jurisdiction='jackson_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "jackson_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["jackson_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jackson_water_delta_rows WHERE jurisdiction='jackson_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jackson_water_delta_rows WHERE jurisdiction='jackson_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.167806, "relation_name": "`analytics-prod-328313`.`utility_data`.`jackson_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"totalBalance\", \"reliefBalance\", \"pastDueBalance\", \"sanitationBalance\", \"accountClass\", \n                           \"accountType\", \"ACCT_ELIGIBLE\"]\n    )\n}}", "language": "sql", "refs": [{"name": "jackson_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.jackson_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/jackson_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (totalBalance = LAG(totalBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR totalBalance IS NULL)\n            AND\n            (reliefBalance = LAG(reliefBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR reliefBalance IS NULL)\n            AND\n            (pastDueBalance = LAG(pastDueBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR pastDueBalance IS NULL)\n            AND\n            (sanitationBalance = LAG(sanitationBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR sanitationBalance IS NULL)\n            AND\n            (accountClass = LAG(accountClass) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR accountClass IS NULL)\n            AND\n            (accountType = LAG(accountType) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR accountType IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`jackson_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.wssc_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "wssc_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/wssc_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/wssc_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.wssc_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "wssc_water_complete_with_eligibility"], "alias": "wssc_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "wssc_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.wssc_water_complete_with_eligibility WHERE jurisdiction='wssc_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.wssc_water_complete_with_eligibility WHERE jurisdiction='wssc_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "wssc_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["wssc_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.wssc_water_complete_with_eligibility WHERE jurisdiction='wssc_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.wssc_water_complete_with_eligibility WHERE jurisdiction='wssc_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.1711109, "relation_name": "`analytics-prod-328313`.`utility_data`.`wssc_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/wssc_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `wssc-water-pay.staging.complete`\n    WHERE jurisdiction = 'wssc_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newark_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "newark_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/newark_water_delta_rows.sql", "original_file_path": "models/utility_uploads/newark_water_delta_rows.sql", "unique_id": "model.promise_dwh.newark_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "newark_water_delta_rows"], "alias": "newark_water_delta_rows", "checksum": {"name": "sha256", "checksum": "98330d13df20f602fad356ad24784b3ea9dac88b71aed421ed8864f525229e83"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "newark_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newark_water_delta_rows WHERE jurisdiction='newark_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newark_water_delta_rows WHERE jurisdiction='newark_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "newark_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["newark_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newark_water_delta_rows WHERE jurisdiction='newark_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newark_water_delta_rows WHERE jurisdiction='newark_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.1753678, "relation_name": "`analytics-prod-328313`.`utility_data`.`newark_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"due_date\", \"acct_type\", \"past_due_balance\", \"disconnect_risk\", \"ACCT_ELIGIBLE\", \n     \"sixty_days\", \"current_balance\", \"acct_type\"]\n    )\n}}", "language": "sql", "refs": [{"name": "newark_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.newark_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/newark_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (disconnect_risk = LAG(disconnect_risk) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR disconnect_risk IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (sixty_days = LAG(sixty_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR sixty_days IS NULL)\n            AND\n            (current_balance = LAG(current_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR current_balance IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`newark_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.corona_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "corona_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/corona_delta_rows.sql", "original_file_path": "models/utility_uploads/corona_delta_rows.sql", "unique_id": "model.promise_dwh.corona_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "corona_delta_rows"], "alias": "corona_delta_rows", "checksum": {"name": "sha256", "checksum": "697be2e874d563645d531a0bcde966be0bcc25d67abeb3c28a1cd5586a63f65d"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "corona_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.corona_delta_rows WHERE jurisdiction='corona' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.corona_delta_rows WHERE jurisdiction='corona' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "corona_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["corona_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.corona_delta_rows WHERE jurisdiction='corona' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.corona_delta_rows WHERE jurisdiction='corona' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.9116218, "relation_name": "`analytics-prod-328313`.`utility_data`.`corona_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"due_date\", \"past_due_balance\", \"acct_type\", \"active_pp\", \"Severance_Flag\", \n                           \"ACCT_ELIGIBLE\", \"Disconnect_Flag\"]\n    )\n}}", "language": "sql", "refs": [{"name": "corona_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.corona_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/corona_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (active_pp = LAG(active_pp) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR active_pp IS NULL)\n            AND\n            (Severance_Flag = LAG(Severance_Flag) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR Severance_Flag IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (Disconnect_Flag = LAG(Disconnect_Flag) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR Disconnect_Flag IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`corona_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.washington_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "washington_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/washington_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/washington_water_deltas_v2.sql", "unique_id": "model.promise_dwh.washington_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "washington_water_deltas_v2"], "alias": "washington_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "e4d12fdba893666a74dece86b86b03a632f14e60bbe79bb7c528630bb0fce65c"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "washington_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "washington_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["washington_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.1814778, "relation_name": "`analytics-prod-328313`.`utility_data`.`washington_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\",\n      \"due_date\": \"due_date\",\n      \"outstanding_new_bill\": \"total_balance - past_due_balance\",\n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"total_balance\",\n      \"account_type\": \"acct_type\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"promise_plan_balance\": \"promise_plan_balance\",\n      \"active_promise_pay_plan\": \"CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END\"\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "washington_water_complete_with_eligibility", "package": null, "version": null}, {"name": "washington_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.washington_water_complete_with_eligibility", "model.promise_dwh.washington_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/washington_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`washington_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`washington_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'washingtonwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(total_balance - past_due_balance AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(promise_plan_balance AS INT64)  AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.jackson_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "jackson_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/jackson_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/jackson_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.jackson_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "jackson_water_complete_with_eligibility"], "alias": "jackson_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "3173a623be2007ee05527799346629c87844a87fffad452bf2fd44af97b2c1aa"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "jackson_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jackson_water_complete_with_eligibility WHERE jurisdiction='jackson_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jackson_water_complete_with_eligibility WHERE jurisdiction='jackson_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "jackson_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["jackson_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jackson_water_complete_with_eligibility WHERE jurisdiction='jackson_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jackson_water_complete_with_eligibility WHERE jurisdiction='jackson_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.184874, "relation_name": "`analytics-prod-328313`.`utility_data`.`jackson_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'pastDueBalance'\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/jackson_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `jackson-water-pay.staging.complete`\n    WHERE jurisdiction = 'jackson_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        \n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN pastDueBalance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN pastDueBalance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN pastDueBalance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN pastDueBalance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN pastDueBalance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN pastDueBalance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.veoliany_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "veoliany_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/veoliany_water_delta_rows.sql", "original_file_path": "models/utility_uploads/veoliany_water_delta_rows.sql", "unique_id": "model.promise_dwh.veoliany_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "veoliany_water_delta_rows"], "alias": "veoliany_water_delta_rows", "checksum": {"name": "sha256", "checksum": "0bf2ace1dc42313b652bc20f301f41ee5f6316fd810b20fc69e181dfba62f393"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "veoliany_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.veoliany_water_delta_rows WHERE jurisdiction='veoliany_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.veoliany_water_delta_rows WHERE jurisdiction='veoliany_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "veoliany_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["veoliany_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.veoliany_water_delta_rows WHERE jurisdiction='veoliany_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.veoliany_water_delta_rows WHERE jurisdiction='veoliany_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.187702, "relation_name": "`analytics-prod-328313`.`utility_data`.`veoliany_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"due_date\", \"ACCT_ELIGIBLE\", \"acct_type\", \"past_due_balance\", \"disconnect_risk\"]\n    )\n}}", "language": "sql", "refs": [{"name": "veoliany_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.veoliany_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/veoliany_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (disconnect_risk = LAG(disconnect_risk) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR disconnect_risk IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`veoliany_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.jackson_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "jackson_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/jackson_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/jackson_water_deltas_v2.sql", "unique_id": "model.promise_dwh.jackson_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "jackson_water_deltas_v2"], "alias": "jackson_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "f28f7189164b0c35152dd5c36ecd1ed059b7bdf1f84c673dd75baf63ac4d82ce"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "jackson_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "jackson_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["jackson_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.1908422, "relation_name": "`analytics-prod-328313`.`utility_data`.`jackson_water_deltas_v2`", "raw_code": "{# For Jackson, null out account_type since theirs are weird and it's no longer active #}\n{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\",\n      \"total_balance\": \"totalBalance\",\n      \"relief_balance\": \"reliefBalance\",\n      \"past_due_balance\": \"pastDueBalance\",\n      \"sanitation_balance\": \"sanitationBalance\",\n      \"account_type\": \"NULL\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"stranded\": \"IF(accountType = 'S', TRUE, FALSE)\"\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "jackson_water_complete_with_eligibility", "package": null, "version": null}, {"name": "jackson_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.jackson_water_complete_with_eligibility", "model.promise_dwh.jackson_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/jackson_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`jackson_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`jackson_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'jacksonwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(NULL AS DATE) AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(pastDueBalance AS INT64)  AS past_due_balance\n        , CAST(totalBalance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(reliefBalance AS INT64)  AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(sanitationBalance AS INT64)  AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(NULL AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(IF(accountType = 'S', TRUE, FALSE) AS BOOLEAN)  AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.hrsd_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "hrsd_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/hrsd_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/hrsd_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.hrsd_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "hrsd_complete_with_eligibility"], "alias": "hrsd_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "ab36e8ceeb477df9c75d35d9521204447f8560b757e62868169ba255d3acb2db"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "hrsd_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.hrsd_complete_with_eligibility WHERE jurisdiction='hrsd' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.hrsd_complete_with_eligibility WHERE jurisdiction='hrsd' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "hrsd_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["hrsd_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.hrsd_complete_with_eligibility WHERE jurisdiction='hrsd' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.hrsd_complete_with_eligibility WHERE jurisdiction='hrsd' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.910332, "relation_name": "`analytics-prod-328313`.`utility_data`.`hrsd_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'PAST_DUE_BALANCE'\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/hrsd_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `hrsd-pay.staging.complete`\n    WHERE jurisdiction = 'hrsd'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        \n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN PAST_DUE_BALANCE > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN PAST_DUE_BALANCE = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN PAST_DUE_BALANCE is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN PAST_DUE_BALANCE > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN PAST_DUE_BALANCE = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN PAST_DUE_BALANCE is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.baltimore_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "baltimore_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/baltimore_deltas_v2.sql", "original_file_path": "models/utility_uploads/baltimore_deltas_v2.sql", "unique_id": "model.promise_dwh.baltimore_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "baltimore_deltas_v2"], "alias": "baltimore_deltas_v2", "checksum": {"name": "sha256", "checksum": "e32d93c030be8e122c9f95d9fbfc825d39158efa62b035d11436bbd33d4b0f89"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "baltimore_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "baltimore_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["baltimore_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.200589, "relation_name": "`analytics-prod-328313`.`utility_data`.`baltimore_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\",\n      \"due_date\": \"last_bill_due_date\",\n      \"outstanding_new_bill\": \"last_bill_amount - balance_forward\",\n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"balance\",\n      \"account_type\": \"acct_type\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"promise_plan_balance\": \"SAFE_CAST(promise_plan_balance AS INT64)\",\n      \"active_promise_pay_plan\": \"CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END\",\n      \"in_severance\": \"disconnect_risk\"\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "baltimore_complete_with_eligibility", "package": null, "version": null}, {"name": "baltimore_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.baltimore_complete_with_eligibility", "model.promise_dwh.baltimore_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/baltimore_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`baltimore_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`baltimore_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'baltimore' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(last_bill_due_date AS DATE)  AS due_date\n        , CAST(last_bill_amount - balance_forward AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(SAFE_CAST(promise_plan_balance AS INT64) AS INT64)  AS promise_plan_balance\n        , CAST(disconnect_risk AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newmexico_water_deltas_v2": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "newmexico_water_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/newmexico_water_deltas_v2.sql", "original_file_path": "models/utility_uploads/newmexico_water_deltas_v2.sql", "unique_id": "model.promise_dwh.newmexico_water_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "newmexico_water_deltas_v2"], "alias": "newmexico_water_deltas_v2", "checksum": {"name": "sha256", "checksum": "e4d12fdba893666a74dece86b86b03a632f14e60bbe79bb7c528630bb0fce65c"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "newmexico_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "newmexico_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["newmexico_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"]}, "created_at": 1715379616.203878, "relation_name": "`analytics-prod-328313`.`utility_data`.`newmexico_water_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\",\n      \"due_date\": \"due_date\",\n      \"outstanding_new_bill\": \"total_balance - past_due_balance\",\n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"total_balance\",\n      \"account_type\": \"acct_type\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"promise_plan_balance\": \"promise_plan_balance\",\n      \"active_promise_pay_plan\": \"CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END\"\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "newmexico_water_complete_with_eligibility", "package": null, "version": null}, {"name": "newmexico_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": ["model.promise_dwh.newmexico_water_complete_with_eligibility", "model.promise_dwh.newmexico_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/newmexico_water_deltas_v2.sql", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newmexico_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newmexico_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'newmexicowater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(total_balance - past_due_balance AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(promise_plan_balance AS INT64)  AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.cal_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "cal_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/cal_water_delta_rows.sql", "original_file_path": "models/utility_uploads/cal_water_delta_rows.sql", "unique_id": "model.promise_dwh.cal_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "cal_water_delta_rows"], "alias": "cal_water_delta_rows", "checksum": {"name": "sha256", "checksum": "96d9ab0ac4fb5047a35da7b97e0f0a1881f5c49de4e83cac118ef3e886ce9683"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "cal_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.cal_water_delta_rows WHERE jurisdiction='cal_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.cal_water_delta_rows WHERE jurisdiction='cal_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "cal_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["cal_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.cal_water_delta_rows WHERE jurisdiction='cal_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.cal_water_delta_rows WHERE jurisdiction='cal_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.207144, "relation_name": "`analytics-prod-328313`.`utility_data`.`cal_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"past_due_balance\", \"due_date\", \"acct_type\",\n                           \"ACCT_ELIGIBLE\", \"promise_plan_balance\"]\n    )\n}}", "language": "sql", "refs": [{"name": "cal_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.cal_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/cal_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`cal_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newportnews_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "newportnews_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/newportnews_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/newportnews_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.newportnews_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "newportnews_water_complete_with_eligibility"], "alias": "newportnews_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "newportnews_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newportnews_water_complete_with_eligibility WHERE jurisdiction='newportnews_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newportnews_water_complete_with_eligibility WHERE jurisdiction='newportnews_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "newportnews_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["newportnews_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newportnews_water_complete_with_eligibility WHERE jurisdiction='newportnews_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.newportnews_water_complete_with_eligibility WHERE jurisdiction='newportnews_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.213151, "relation_name": "`analytics-prod-328313`.`utility_data`.`newportnews_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/newportnews_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `newportnews-water-pay.staging.complete`\n    WHERE jurisdiction = 'newportnews_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.louisville_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "louisville_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/louisville_water_delta_rows.sql", "original_file_path": "models/utility_uploads/louisville_water_delta_rows.sql", "unique_id": "model.promise_dwh.louisville_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "louisville_water_delta_rows"], "alias": "louisville_water_delta_rows", "checksum": {"name": "sha256", "checksum": "209bce15f29f615ab9cc75e8d307c12274898be2fb6f8ceece939fe280bd912f"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "louisville_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.louisville_water_delta_rows WHERE jurisdiction='louisville_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.louisville_water_delta_rows WHERE jurisdiction='louisville_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "louisville_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["louisville_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.louisville_water_delta_rows WHERE jurisdiction='louisville_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.louisville_water_delta_rows WHERE jurisdiction='louisville_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.911412, "relation_name": "`analytics-prod-328313`.`utility_data`.`louisville_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"accountType\", \"cashOnlyIndicator\", \"blockingCode\", \"totalBalanceSigned\", \"currentDueSigned\",\n                           \"pastDueSigned\", \"paymentArrangementFlag\", \"billDueDate\"] \n    )\n}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/louisville_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (accountType = LAG(accountType) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR accountType IS NULL)\n            AND\n            (cashOnlyIndicator = LAG(cashOnlyIndicator) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR cashOnlyIndicator IS NULL)\n            AND\n            (blockingCode = LAG(blockingCode) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR blockingCode IS NULL)\n            AND\n            (totalBalanceSigned = LAG(totalBalanceSigned) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR totalBalanceSigned IS NULL)\n            AND\n            (currentDueSigned = LAG(currentDueSigned) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR currentDueSigned IS NULL)\n            AND\n            (pastDueSigned = LAG(pastDueSigned) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR pastDueSigned IS NULL)\n            AND\n            (paymentArrangementFlag = LAG(paymentArrangementFlag) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR paymentArrangementFlag IS NULL)\n            AND\n            (billDueDate = LAG(billDueDate) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR billDueDate IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM (SELECT * FROM `louisville-water-pay.staging.complete` WHERE jurisdiction='louisville_water' )-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.wssc_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "wssc_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/wssc_water_delta_rows.sql", "original_file_path": "models/utility_uploads/wssc_water_delta_rows.sql", "unique_id": "model.promise_dwh.wssc_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "wssc_water_delta_rows"], "alias": "wssc_water_delta_rows", "checksum": {"name": "sha256", "checksum": "91717c9bb47fcb8065ab7ae0bd5118a0d08a8eafbbab074f7e9447b473b713ca"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "wssc_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.wssc_water_delta_rows WHERE jurisdiction='wssc_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.wssc_water_delta_rows WHERE jurisdiction='wssc_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "wssc_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["wssc_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.wssc_water_delta_rows WHERE jurisdiction='wssc_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.wssc_water_delta_rows WHERE jurisdiction='wssc_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.21909, "relation_name": "`analytics-prod-328313`.`utility_data`.`wssc_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\n        \"total_balance\", \"due_date\", \"ACCT_ELIGIBLE\", \n        \"acct_type\", \"past_due_balance\", \"has_service\"\n    ]\n    )\n}}", "language": "sql", "refs": [{"name": "wssc_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.wssc_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/wssc_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (has_service = LAG(has_service) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR has_service IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`wssc_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.alexrenew_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "alexrenew_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/alexrenew_water_delta_rows.sql", "original_file_path": "models/utility_uploads/alexrenew_water_delta_rows.sql", "unique_id": "model.promise_dwh.alexrenew_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "alexrenew_water_delta_rows"], "alias": "alexrenew_water_delta_rows", "checksum": {"name": "sha256", "checksum": "9af2dc7dd29c744ed55ddf5766a6e29ac2d9020aa4de2cd584dff83feb1fdb88"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "alexrenew_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.alexrenew_water_delta_rows WHERE jurisdiction='alexrenew_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.alexrenew_water_delta_rows WHERE jurisdiction='alexrenew_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "alexrenew_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["alexrenew_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.alexrenew_water_delta_rows WHERE jurisdiction='alexrenew_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.alexrenew_water_delta_rows WHERE jurisdiction='alexrenew_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.909649, "relation_name": "`analytics-prod-328313`.`utility_data`.`alexrenew_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"dueDate\", \"currentBalance\", \"pastDueBalance\", \"billDate\", \"accountType\", \n                           \"cashOnly\", \"ACCT_ELIGIBLE\", \"nonOwnerContactPermission\", \"amountInPromisePlan\", \"currentlyInSeverance\"]\n    )\n}}", "language": "sql", "refs": [{"name": "alexrenew_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.alexrenew_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/alexrenew_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (dueDate = LAG(dueDate) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR dueDate IS NULL)\n            AND\n            (currentBalance = LAG(currentBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR currentBalance IS NULL)\n            AND\n            (pastDueBalance = LAG(pastDueBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR pastDueBalance IS NULL)\n            AND\n            (billDate = LAG(billDate) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR billDate IS NULL)\n            AND\n            (accountType = LAG(accountType) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR accountType IS NULL)\n            AND\n            (cashOnly = LAG(cashOnly) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR cashOnly IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (nonOwnerContactPermission = LAG(nonOwnerContactPermission) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR nonOwnerContactPermission IS NULL)\n            AND\n            (amountInPromisePlan = LAG(amountInPromisePlan) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR amountInPromisePlan IS NULL)\n            AND\n            (currentlyInSeverance = LAG(currentlyInSeverance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR currentlyInSeverance IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`alexrenew_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.cal_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "cal_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/cal_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/cal_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.cal_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "cal_water_complete_with_eligibility"], "alias": "cal_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "cal_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.cal_water_complete_with_eligibility WHERE jurisdiction='cal_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.cal_water_complete_with_eligibility WHERE jurisdiction='cal_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "cal_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["cal_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.cal_water_complete_with_eligibility WHERE jurisdiction='cal_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.cal_water_complete_with_eligibility WHERE jurisdiction='cal_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.225235, "relation_name": "`analytics-prod-328313`.`utility_data`.`cal_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/cal_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `cal-water-pay.staging.complete`\n    WHERE jurisdiction = 'cal_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.centralarkansas_water_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "centralarkansas_water_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/centralarkansas_water_delta_rows.sql", "original_file_path": "models/utility_uploads/centralarkansas_water_delta_rows.sql", "unique_id": "model.promise_dwh.centralarkansas_water_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "centralarkansas_water_delta_rows"], "alias": "centralarkansas_water_delta_rows", "checksum": {"name": "sha256", "checksum": "b6f4868c5337ea87d74ac52ad955a2fe95ad032c61ed0fa8791dacd123f790c6"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "centralarkansas_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.centralarkansas_water_delta_rows WHERE jurisdiction='centralarkansas_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.centralarkansas_water_delta_rows WHERE jurisdiction='centralarkansas_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "centralarkansas_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["centralarkansas_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.centralarkansas_water_delta_rows WHERE jurisdiction='centralarkansas_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.centralarkansas_water_delta_rows WHERE jurisdiction='centralarkansas_water' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.231711, "relation_name": "`analytics-prod-328313`.`utility_data`.`centralarkansas_water_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [  \n        \"past_due_balance\", \n        \"total_balance\", \n        \"due_date\", \n        \"write_off_status\",\n        \"active_status\",\n        \"enrolled\", \n        \"acct_type\", \n        \"broken\",\n        \"active_status\"\n    ]\n    )\n}}", "language": "sql", "refs": [{"name": "centralarkansas_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.centralarkansas_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/centralarkansas_water_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (write_off_status = LAG(write_off_status) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR write_off_status IS NULL)\n            AND\n            (active_status = LAG(active_status) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR active_status IS NULL)\n            AND\n            (enrolled = LAG(enrolled) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR enrolled IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (broken = LAG(broken) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR broken IS NULL)\n            AND\n            (active_status = LAG(active_status) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR active_status IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`centralarkansas_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.corona_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "corona_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/corona_mr_data.sql", "original_file_path": "models/utility_uploads/corona_mr_data.sql", "unique_id": "model.promise_dwh.corona_mr_data", "fqn": ["promise_dwh", "utility_uploads", "corona_mr_data"], "alias": "corona_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "corona_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "corona_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["corona_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.2348108, "relation_name": "`analytics-prod-328313`.`utility_data`.`corona_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "corona_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.corona_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/corona_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`corona_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'corona' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.gcww_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "gcww_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/gcww_mr_data.sql", "original_file_path": "models/utility_uploads/gcww_mr_data.sql", "unique_id": "model.promise_dwh.gcww_mr_data", "fqn": ["promise_dwh", "utility_uploads", "gcww_mr_data"], "alias": "gcww_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "gcww_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "gcww_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["gcww_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.237531, "relation_name": "`analytics-prod-328313`.`utility_data`.`gcww_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "gcww_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.gcww_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/gcww_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`gcww_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'gcww' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.buffalo_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "buffalo_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/buffalo_water_mr_data.sql", "original_file_path": "models/utility_uploads/buffalo_water_mr_data.sql", "unique_id": "model.promise_dwh.buffalo_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "buffalo_water_mr_data"], "alias": "buffalo_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "buffalo_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "buffalo_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["buffalo_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.240376, "relation_name": "`analytics-prod-328313`.`utility_data`.`buffalo_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "buffalo_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.buffalo_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/buffalo_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`buffalo_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'buffalowater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.nola_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "nola_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/nola_water_mr_data.sql", "original_file_path": "models/utility_uploads/nola_water_mr_data.sql", "unique_id": "model.promise_dwh.nola_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "nola_water_mr_data"], "alias": "nola_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "nola_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "nola_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["nola_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.243058, "relation_name": "`analytics-prod-328313`.`utility_data`.`nola_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "nola_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.nola_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/nola_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`nola_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'nolawater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.hrsd_delta_rows": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "hrsd_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/hrsd_delta_rows.sql", "original_file_path": "models/utility_uploads/hrsd_delta_rows.sql", "unique_id": "model.promise_dwh.hrsd_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "hrsd_delta_rows"], "alias": "hrsd_delta_rows", "checksum": {"name": "sha256", "checksum": "fcb522da163b98c273e8f00ea1a027ccc8a4ee8fdf00da22614081a24aca66e7"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "hrsd_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.hrsd_delta_rows WHERE jurisdiction='hrsd' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.hrsd_delta_rows WHERE jurisdiction='hrsd' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "hrsd_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["hrsd_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.hrsd_delta_rows WHERE jurisdiction='hrsd' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.hrsd_delta_rows WHERE jurisdiction='hrsd' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.911201, "relation_name": "`analytics-prod-328313`.`utility_data`.`hrsd_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"TOTAL_BALANCE\", \"DUE_DATE\", \"ACCT_TYPE\", \"ACCT_ELIGIBLE\", \n                            \"PAST_DUE_BALANCE\", \"RELIEF_AMT\", \"CUST_TYPE\", \"ACTIVE_PP\", \"IN_SEVERANCE\"]\n    )\n}}", "language": "sql", "refs": [{"name": "hrsd_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": ["model.promise_dwh.hrsd_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/hrsd_delta_rows.sql", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (TOTAL_BALANCE = LAG(TOTAL_BALANCE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR TOTAL_BALANCE IS NULL)\n            AND\n            (DUE_DATE = LAG(DUE_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR DUE_DATE IS NULL)\n            AND\n            (ACCT_TYPE = LAG(ACCT_TYPE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_TYPE IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (PAST_DUE_BALANCE = LAG(PAST_DUE_BALANCE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR PAST_DUE_BALANCE IS NULL)\n            AND\n            (RELIEF_AMT = LAG(RELIEF_AMT) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR RELIEF_AMT IS NULL)\n            AND\n            (CUST_TYPE = LAG(CUST_TYPE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR CUST_TYPE IS NULL)\n            AND\n            (ACTIVE_PP = LAG(ACTIVE_PP) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACTIVE_PP IS NULL)\n            AND\n            (IN_SEVERANCE = LAG(IN_SEVERANCE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR IN_SEVERANCE IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`hrsd_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.newportnews_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "newportnews_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/newportnews_water_mr_data.sql", "original_file_path": "models/utility_uploads/newportnews_water_mr_data.sql", "unique_id": "model.promise_dwh.newportnews_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "newportnews_water_mr_data"], "alias": "newportnews_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "newportnews_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "newportnews_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["newportnews_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.248897, "relation_name": "`analytics-prod-328313`.`utility_data`.`newportnews_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "newportnews_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.newportnews_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/newportnews_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newportnews_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'newportnewswater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.alexrenew_water_mr_data": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "alexrenew_water_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/alexrenew_water_mr_data.sql", "original_file_path": "models/utility_uploads/alexrenew_water_mr_data.sql", "unique_id": "model.promise_dwh.alexrenew_water_mr_data", "fqn": ["promise_dwh", "utility_uploads", "alexrenew_water_mr_data"], "alias": "alexrenew_water_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "alexrenew_water_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "alexrenew_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["alexrenew_water_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"]}, "created_at": 1715379616.251595, "relation_name": "`analytics-prod-328313`.`utility_data`.`alexrenew_water_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "alexrenew_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": ["model.promise_dwh.alexrenew_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/alexrenew_water_mr_data.sql", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`alexrenew_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'alexrenewwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.washington_water_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "washington_water_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/washington_water_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/washington_water_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.washington_water_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "washington_water_complete_with_eligibility"], "alias": "washington_water_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "washington_water_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.washington_water_complete_with_eligibility WHERE jurisdiction='washington_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.washington_water_complete_with_eligibility WHERE jurisdiction='washington_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "washington_water_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["washington_water_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.washington_water_complete_with_eligibility WHERE jurisdiction='washington_water' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.washington_water_complete_with_eligibility WHERE jurisdiction='washington_water' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.2551732, "relation_name": "`analytics-prod-328313`.`utility_data`.`washington_water_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/washington_water_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `cal-water-pay.staging.complete`\n    WHERE jurisdiction = 'washington_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.baltimore_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "baltimore_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/baltimore_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/baltimore_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.baltimore_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "baltimore_complete_with_eligibility"], "alias": "baltimore_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "baltimore_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.baltimore_complete_with_eligibility WHERE jurisdiction='baltimore' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.baltimore_complete_with_eligibility WHERE jurisdiction='baltimore' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "baltimore_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["baltimore_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.baltimore_complete_with_eligibility WHERE jurisdiction='baltimore' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.baltimore_complete_with_eligibility WHERE jurisdiction='baltimore' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.258125, "relation_name": "`analytics-prod-328313`.`utility_data`.`baltimore_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/baltimore_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `baltimore-pay.staging.complete`\n    WHERE jurisdiction = 'baltimore'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.corona_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "corona_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/corona_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/corona_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.corona_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "corona_complete_with_eligibility"], "alias": "corona_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "e457ac468c420d2964378b24ea9e6a09207454306a11c9a5e4f8be26a37075e7"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "corona_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.corona_complete_with_eligibility WHERE jurisdiction='corona' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.corona_complete_with_eligibility WHERE jurisdiction='corona' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "corona_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["corona_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.corona_complete_with_eligibility WHERE jurisdiction='corona' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.corona_complete_with_eligibility WHERE jurisdiction='corona' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.910551, "relation_name": "`analytics-prod-328313`.`utility_data`.`corona_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/corona_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `corona-pay.staging.complete`\n    WHERE jurisdiction = 'corona'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        \n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.toledo_complete_with_eligibility": {"database": "analytics-prod-328313", "schema": "utility_data", "name": "toledo_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/toledo_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/toledo_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.toledo_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "toledo_complete_with_eligibility"], "alias": "toledo_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "3a8d807644b426c1813b0a94fceccebe2c6600af21baf05d7e0ad35a101b8e67"}, "config": {"enabled": true, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "toledo_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.toledo_complete_with_eligibility WHERE jurisdiction='toledo' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.toledo_complete_with_eligibility WHERE jurisdiction='toledo' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "toledo_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/utility_uploads/utility_uploads.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["toledo_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.toledo_complete_with_eligibility WHERE jurisdiction='toledo' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.toledo_complete_with_eligibility WHERE jurisdiction='toledo' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.909886, "relation_name": "`analytics-prod-328313`.`utility_data`.`toledo_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'compliance_past_due_balance'\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/toledo_complete_with_eligibility.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `toledo-pay.staging.complete`\n    WHERE jurisdiction = 'toledo'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        \n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN compliance_past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN compliance_past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN compliance_past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN compliance_past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN compliance_past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN compliance_past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.request_type": {"database": "analytics-prod-328313", "schema": "jira", "name": "request_type", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/request_type.sql", "original_file_path": "models/jira/request_type.sql", "unique_id": "model.promise_dwh.request_type", "fqn": ["promise_dwh", "jira", "request_type"], "alias": "request_type", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.267669, "relation_name": "`analytics-prod-328313`.`jira`.`request_type`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/request_type.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.request_type`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.request": {"database": "analytics-prod-328313", "schema": "jira", "name": "request", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/request.sql", "original_file_path": "models/jira/request.sql", "unique_id": "model.promise_dwh.request", "fqn": ["promise_dwh", "jira", "request"], "alias": "request", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.2702012, "relation_name": "`analytics-prod-328313`.`jira`.`request`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/request.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.request`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.project": {"database": "analytics-prod-328313", "schema": "jira", "name": "project", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/project.sql", "original_file_path": "models/jira/project.sql", "unique_id": "model.promise_dwh.project", "fqn": ["promise_dwh", "jira", "project"], "alias": "project", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.27343, "relation_name": "`analytics-prod-328313`.`jira`.`project`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/project.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.project`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.component": {"database": "analytics-prod-328313", "schema": "jira", "name": "component", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/component.sql", "original_file_path": "models/jira/component.sql", "unique_id": "model.promise_dwh.component", "fqn": ["promise_dwh", "jira", "component"], "alias": "component", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.276344, "relation_name": "`analytics-prod-328313`.`jira`.`component`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/component.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.component`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.status": {"database": "analytics-prod-328313", "schema": "jira", "name": "status", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/status.sql", "original_file_path": "models/jira/status.sql", "unique_id": "model.promise_dwh.status", "fqn": ["promise_dwh", "jira", "status"], "alias": "status", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.2792552, "relation_name": "`analytics-prod-328313`.`jira`.`status`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/status.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.status`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.issue_board": {"database": "analytics-prod-328313", "schema": "jira", "name": "issue_board", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/issue_board.sql", "original_file_path": "models/jira/issue_board.sql", "unique_id": "model.promise_dwh.issue_board", "fqn": ["promise_dwh", "jira", "issue_board"], "alias": "issue_board", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.283114, "relation_name": "`analytics-prod-328313`.`jira`.`issue_board`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/issue_board.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue_board`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.issue_watcher": {"database": "analytics-prod-328313", "schema": "jira", "name": "issue_watcher", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/issue_watcher.sql", "original_file_path": "models/jira/issue_watcher.sql", "unique_id": "model.promise_dwh.issue_watcher", "fqn": ["promise_dwh", "jira", "issue_watcher"], "alias": "issue_watcher", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.285565, "relation_name": "`analytics-prod-328313`.`jira`.`issue_watcher`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/issue_watcher.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue_watcher`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.user_group": {"database": "analytics-prod-328313", "schema": "jira", "name": "user_group", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/user_group.sql", "original_file_path": "models/jira/user_group.sql", "unique_id": "model.promise_dwh.user_group", "fqn": ["promise_dwh", "jira", "user_group"], "alias": "user_group", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.288566, "relation_name": "`analytics-prod-328313`.`jira`.`user_group`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/user_group.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.user_group`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.project_role": {"database": "analytics-prod-328313", "schema": "jira", "name": "project_role", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/project_role.sql", "original_file_path": "models/jira/project_role.sql", "unique_id": "model.promise_dwh.project_role", "fqn": ["promise_dwh", "jira", "project_role"], "alias": "project_role", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.291438, "relation_name": "`analytics-prod-328313`.`jira`.`project_role`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/project_role.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.project_role`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.comment": {"database": "analytics-prod-328313", "schema": "jira", "name": "comment", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/comment.sql", "original_file_path": "models/jira/comment.sql", "unique_id": "model.promise_dwh.comment", "fqn": ["promise_dwh", "jira", "comment"], "alias": "comment", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.2939851, "relation_name": "`analytics-prod-328313`.`jira`.`comment`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/comment.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.comment`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.issue_multiselect_history": {"database": "analytics-prod-328313", "schema": "jira", "name": "issue_multiselect_history", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/issue_multiselect_history.sql", "original_file_path": "models/jira/issue_multiselect_history.sql", "unique_id": "model.promise_dwh.issue_multiselect_history", "fqn": ["promise_dwh", "jira", "issue_multiselect_history"], "alias": "issue_multiselect_history", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.296502, "relation_name": "`analytics-prod-328313`.`jira`.`issue_multiselect_history`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/issue_multiselect_history.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue_multiselect_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.board": {"database": "analytics-prod-328313", "schema": "jira", "name": "board", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/board.sql", "original_file_path": "models/jira/board.sql", "unique_id": "model.promise_dwh.board", "fqn": ["promise_dwh", "jira", "board"], "alias": "board", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.2988648, "relation_name": "`analytics-prod-328313`.`jira`.`board`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/board.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.board`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.user_jira": {"database": "analytics-prod-328313", "schema": "jira", "name": "user_jira", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/user_jira.sql", "original_file_path": "models/jira/user_jira.sql", "unique_id": "model.promise_dwh.user_jira", "fqn": ["promise_dwh", "jira", "user_jira"], "alias": "user_jira", "checksum": {"name": "sha256", "checksum": "cde4e7244a80bab31d33cd3d1afb89c8918c104b07a1fe4bfd047bd11aa13762"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.30125, "relation_name": "`analytics-prod-328313`.`jira`.`user_jira`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name | replace('_jira', '') }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/user_jira.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.user`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.issue_type": {"database": "analytics-prod-328313", "schema": "jira", "name": "issue_type", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/issue_type.sql", "original_file_path": "models/jira/issue_type.sql", "unique_id": "model.promise_dwh.issue_type", "fqn": ["promise_dwh", "jira", "issue_type"], "alias": "issue_type", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.303818, "relation_name": "`analytics-prod-328313`.`jira`.`issue_type`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/issue_type.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue_type`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.issue_link": {"database": "analytics-prod-328313", "schema": "jira", "name": "issue_link", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/issue_link.sql", "original_file_path": "models/jira/issue_link.sql", "unique_id": "model.promise_dwh.issue_link", "fqn": ["promise_dwh", "jira", "issue_link"], "alias": "issue_link", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.307262, "relation_name": "`analytics-prod-328313`.`jira`.`issue_link`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/issue_link.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue_link`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.permission": {"database": "analytics-prod-328313", "schema": "jira", "name": "permission", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/permission.sql", "original_file_path": "models/jira/permission.sql", "unique_id": "model.promise_dwh.permission", "fqn": ["promise_dwh", "jira", "permission"], "alias": "permission", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.309608, "relation_name": "`analytics-prod-328313`.`jira`.`permission`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/permission.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.permission`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.organization": {"database": "analytics-prod-328313", "schema": "jira", "name": "organization", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/organization.sql", "original_file_path": "models/jira/organization.sql", "unique_id": "model.promise_dwh.organization", "fqn": ["promise_dwh", "jira", "organization"], "alias": "organization", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.311946, "relation_name": "`analytics-prod-328313`.`jira`.`organization`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/organization.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.organization`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.project_board": {"database": "analytics-prod-328313", "schema": "jira", "name": "project_board", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/project_board.sql", "original_file_path": "models/jira/project_board.sql", "unique_id": "model.promise_dwh.project_board", "fqn": ["promise_dwh", "jira", "project_board"], "alias": "project_board", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.314281, "relation_name": "`analytics-prod-328313`.`jira`.`project_board`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/project_board.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.project_board`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.issue_field_history": {"database": "analytics-prod-328313", "schema": "jira", "name": "issue_field_history", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/issue_field_history.sql", "original_file_path": "models/jira/issue_field_history.sql", "unique_id": "model.promise_dwh.issue_field_history", "fqn": ["promise_dwh", "jira", "issue_field_history"], "alias": "issue_field_history", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.3166962, "relation_name": "`analytics-prod-328313`.`jira`.`issue_field_history`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/issue_field_history.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue_field_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.priority": {"database": "analytics-prod-328313", "schema": "jira", "name": "priority", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/priority.sql", "original_file_path": "models/jira/priority.sql", "unique_id": "model.promise_dwh.priority", "fqn": ["promise_dwh", "jira", "priority"], "alias": "priority", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.319016, "relation_name": "`analytics-prod-328313`.`jira`.`priority`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/priority.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.priority`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.project_category": {"database": "analytics-prod-328313", "schema": "jira", "name": "project_category", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/project_category.sql", "original_file_path": "models/jira/project_category.sql", "unique_id": "model.promise_dwh.project_category", "fqn": ["promise_dwh", "jira", "project_category"], "alias": "project_category", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.321346, "relation_name": "`analytics-prod-328313`.`jira`.`project_category`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/project_category.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.project_category`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.sprint": {"database": "analytics-prod-328313", "schema": "jira", "name": "sprint", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/sprint.sql", "original_file_path": "models/jira/sprint.sql", "unique_id": "model.promise_dwh.sprint", "fqn": ["promise_dwh", "jira", "sprint"], "alias": "sprint", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.323772, "relation_name": "`analytics-prod-328313`.`jira`.`sprint`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/sprint.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.sprint`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.field_option": {"database": "analytics-prod-328313", "schema": "jira", "name": "field_option", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/field_option.sql", "original_file_path": "models/jira/field_option.sql", "unique_id": "model.promise_dwh.field_option", "fqn": ["promise_dwh", "jira", "field_option"], "alias": "field_option", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.326066, "relation_name": "`analytics-prod-328313`.`jira`.`field_option`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/field_option.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.field_option`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.project_role_actor": {"database": "analytics-prod-328313", "schema": "jira", "name": "project_role_actor", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/project_role_actor.sql", "original_file_path": "models/jira/project_role_actor.sql", "unique_id": "model.promise_dwh.project_role_actor", "fqn": ["promise_dwh", "jira", "project_role_actor"], "alias": "project_role_actor", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.328414, "relation_name": "`analytics-prod-328313`.`jira`.`project_role_actor`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/project_role_actor.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.project_role_actor`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.issue": {"database": "analytics-prod-328313", "schema": "jira", "name": "issue", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/issue.sql", "original_file_path": "models/jira/issue.sql", "unique_id": "model.promise_dwh.issue", "fqn": ["promise_dwh", "jira", "issue"], "alias": "issue", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.3316228, "relation_name": "`analytics-prod-328313`.`jira`.`issue`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/issue.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.field": {"database": "analytics-prod-328313", "schema": "jira", "name": "field", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/field.sql", "original_file_path": "models/jira/field.sql", "unique_id": "model.promise_dwh.field", "fqn": ["promise_dwh", "jira", "field"], "alias": "field", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.334053, "relation_name": "`analytics-prod-328313`.`jira`.`field`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/field.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.field`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.epic": {"database": "analytics-prod-328313", "schema": "jira", "name": "epic", "resource_type": "model", "package_name": "promise_dwh", "path": "jira/epic.sql", "original_file_path": "models/jira/epic.sql", "unique_id": "model.promise_dwh.epic", "fqn": ["promise_dwh", "jira", "epic"], "alias": "epic", "checksum": {"name": "sha256", "checksum": "2d3666613c93ad34200040df4013270a09ef170366a36fc4edc7a997a6ca5477"}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1715379616.336349, "relation_name": "`analytics-prod-328313`.`jira`.`epic`", "raw_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.{{ this.name }}`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/jira/epic.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.epic`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.conversation": {"database": "analytics-prod-328313", "schema": "kustomer", "name": "conversation", "resource_type": "model", "package_name": "promise_dwh", "path": "kustomer/conversation.sql", "original_file_path": "models/kustomer/conversation.sql", "unique_id": "model.promise_dwh.conversation", "fqn": ["promise_dwh", "kustomer", "conversation"], "alias": "conversation", "checksum": {"name": "sha256", "checksum": "dae828a5d72fc749181b7f4d8fe885bf6ac9366f654ad0223c99a6b79371a361"}, "config": {"enabled": true, "alias": null, "schema": "kustomer", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": "customer_id", "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "kustomer", "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": "customer_id", "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.338677, "relation_name": "`analytics-prod-328313`.`kustomer`.`conversation`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"created_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = \"customer_id\",\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\n\n\nSELECT\n    id,\n    created_at,\n    created_by,\n    `deleted`,\n    deleted_at,\n    deleted_by,\n    modified_at,\n    modified_by,\n    updated_at,\n    ended,\n    queue_id,\n    customer_id,\n    direction,\n    external_id,\n    message_count,\n    `name`, -- should we obfuscate?\n    note_count,\n    outbound_message_count,\n    reopen_count,\n    snooze_count,\n    `status`,\n    default_lang,\n    priority,\n    first_message_in_created_at,\n    first_message_in_id,\n    first_message_in_sent_at,\n    first_response_created_at,\n    first_response_id,\n    first_response_response_time,\n    first_response_sent_at,\n    last_activity_at,\n    last_message_at,\n    last_message_direction,\n    last_message_in_created_at,\n    last_message_in_message_id,\n    last_message_in_sent_at,\n    last_message_out_created_at,\n    last_message_out_message_id,\n    last_message_out_sent_at\nFROM\n    `analytics-dev-328216.kustomer.conversation`\n{% if is_incremental() %}\n\n    -- recalculate latest day's data + previous\n    WHERE created_at >= timestamp_sub(_dbt_max_partition, INTERVAL 1 DAY)\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/kustomer/conversation.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    id,\n    created_at,\n    created_by,\n    `deleted`,\n    deleted_at,\n    deleted_by,\n    modified_at,\n    modified_by,\n    updated_at,\n    ended,\n    queue_id,\n    customer_id,\n    direction,\n    external_id,\n    message_count,\n    `name`, -- should we obfuscate?\n    note_count,\n    outbound_message_count,\n    reopen_count,\n    snooze_count,\n    `status`,\n    default_lang,\n    priority,\n    first_message_in_created_at,\n    first_message_in_id,\n    first_message_in_sent_at,\n    first_response_created_at,\n    first_response_id,\n    first_response_response_time,\n    first_response_sent_at,\n    last_activity_at,\n    last_message_at,\n    last_message_direction,\n    last_message_in_created_at,\n    last_message_in_message_id,\n    last_message_in_sent_at,\n    last_message_out_created_at,\n    last_message_out_message_id,\n    last_message_out_sent_at\nFROM\n    `analytics-dev-328216.kustomer.conversation`\n\n\n    -- recalculate latest day's data + previous\n    WHERE created_at >= timestamp_sub(_dbt_max_partition, INTERVAL 1 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.message": {"database": "analytics-prod-328313", "schema": "kustomer", "name": "message", "resource_type": "model", "package_name": "promise_dwh", "path": "kustomer/message.sql", "original_file_path": "models/kustomer/message.sql", "unique_id": "model.promise_dwh.message", "fqn": ["promise_dwh", "kustomer", "message"], "alias": "message", "checksum": {"name": "sha256", "checksum": "0336289342a72542c5343ef3580d74689a38f7c9536265b7344fdea04b618971"}, "config": {"enabled": true, "alias": null, "schema": "kustomer", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["customer_id", "conversation_id"], "partition_by": {"field": "sent_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "kustomer", "partition_by": {"field": "sent_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["customer_id", "conversation_id"], "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.3417192, "relation_name": "`analytics-prod-328313`.`kustomer`.`message`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"sent_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"customer_id\", \"conversation_id\"],\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\nSELECT\n    id,\n    conversation_id,\n    created_at,\n    created_by,\n    sent_at,\n    customer_id,\n    modified_at,\n    modified_by,\n    app,\n    channel,\n    direction,\n    direction_type,\n    external_id,\n    size,\n    `status`,\n    `subject`,\n    `auto`,\n    preview,\n    updated_at\nFROM\n    `analytics-dev-328216.kustomer.message`\n\n{% if is_incremental() %}\n\n    -- recalculate latest day's data + previous\n    WHERE sent_at >= timestamp_sub(_dbt_max_partition, INTERVAL 1 DAY)\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/kustomer/message.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    id,\n    conversation_id,\n    created_at,\n    created_by,\n    sent_at,\n    customer_id,\n    modified_at,\n    modified_by,\n    app,\n    channel,\n    direction,\n    direction_type,\n    external_id,\n    size,\n    `status`,\n    `subject`,\n    `auto`,\n    preview,\n    updated_at\nFROM\n    `analytics-dev-328216.kustomer.message`\n\n\n\n    -- recalculate latest day's data + previous\n    WHERE sent_at >= timestamp_sub(_dbt_max_partition, INTERVAL 1 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.note": {"database": "analytics-prod-328313", "schema": "kustomer", "name": "note", "resource_type": "model", "package_name": "promise_dwh", "path": "kustomer/note.sql", "original_file_path": "models/kustomer/note.sql", "unique_id": "model.promise_dwh.note", "fqn": ["promise_dwh", "kustomer", "note"], "alias": "note", "checksum": {"name": "sha256", "checksum": "ef33492f33940e6ffd7602a81a0b87ac5bb6dc19ef77b0e2fa3f560fe1bfad89"}, "config": {"enabled": true, "alias": null, "schema": "kustomer", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["customer_id", "conversation_id"], "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "kustomer", "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["customer_id", "conversation_id"], "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.344766, "relation_name": "`analytics-prod-328313`.`kustomer`.`note`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"created_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = [\"customer_id\", \"conversation_id\"],\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\nSELECT\n    id,\n    created_at,\n    created_by,\n    deleted,\n    deleted_at,\n    deleted_by,\n    modified_at,\n    modified_by,\n    updated_at,\n    customer_id,\n    conversation_id,\n    body\nFROM\n    `analytics-dev-328216.kustomer.note`\n\n{% if is_incremental() %}\n\n    -- recalculate latest day's data + previous\n    WHERE created_at >= timestamp_sub(_dbt_max_partition, INTERVAL 1 DAY)\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/kustomer/note.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    id,\n    created_at,\n    created_by,\n    deleted,\n    deleted_at,\n    deleted_by,\n    modified_at,\n    modified_by,\n    updated_at,\n    customer_id,\n    conversation_id,\n    body\nFROM\n    `analytics-dev-328216.kustomer.note`\n\n\n\n    -- recalculate latest day's data + previous\n    WHERE created_at >= timestamp_sub(_dbt_max_partition, INTERVAL 1 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.customer_kustomer": {"database": "analytics-prod-328313", "schema": "kustomer", "name": "customer_kustomer", "resource_type": "model", "package_name": "promise_dwh", "path": "kustomer/customer_kustomer.sql", "original_file_path": "models/kustomer/customer_kustomer.sql", "unique_id": "model.promise_dwh.customer_kustomer", "fqn": ["promise_dwh", "kustomer", "customer_kustomer"], "alias": "customer_kustomer", "checksum": {"name": "sha256", "checksum": "38777f16bf008697162786cf993315626627d5b8b69d394d8eb1ff0a4003fc12"}, "config": {"enabled": true, "alias": "customer_kustomer", "schema": "kustomer", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "kustomer", "alias": "customer_kustomer"}, "created_at": 1715379616.3481758, "relation_name": "`analytics-prod-328313`.`kustomer`.`customer_kustomer`", "raw_code": "{{ config(alias='customer_kustomer') }}\n\nSELECT\n    id\n    , created_by\n    , modified_by\n    , created_at\n    , CASE\n        WHEN REGEXP_CONTAINS(display_name, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(display_name, r'[2-9][0-9]{9}$'))\n        ELSE SHA256(LOWER(TRIM(display_name)))\n    END AS display_name_hashed\n    , COALESCE(REGEXP_CONTAINS(display_name, r'^(?:\\+1)?[2-9][0-9]{9}$'), FALSE) AS display_name_is_phone\n    , external_id\n    , progressive_status\n    , verified\n    , modified_at\n    , deleted_at\n    , last_activity_at\n    , default_lang\n    , deleted\n    , CASE\n        WHEN REGEXP_CONTAINS(first_name, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(first_name, r'[0-9]{10}$'))\n        ELSE SHA256(LOWER(TRIM(first_name)))\n    END AS first_name_hashed\n    , {{ hash_string('last_name') }}\n    , CASE\n        WHEN REGEXP_CONTAINS(name, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(name, r'[0-9]{10}$'))\n        ELSE SHA256(LOWER(TRIM(name)))\n    END AS name_hashed\n    , last_message_at\n    , last_conversation_id\n    , last_message_out_sent_at\n    , conversation_counts_all\n    , conversation_counts_done\n    , conversation_counts_open\n    , conversation_counts_snoozed\n    , CASE\n        WHEN custom_client_external_id_str = 'multiple' OR custom_client_external_id_str IS NULL\n            THEN custom_client_external_id_str\n        ELSE TO_BASE64(SHA256(custom_client_external_id_str))\n    END AS client_external_id_hashed\n    , custom_client_verification_str AS client_verification_string\n    , custom_customer_name_str AS customer_name\n    , custom_enrolled_bool AS enrolled\n    , custom_relief_eligibility_str AS relief_eligible\nFROM\n    `analytics-dev-328216.kustomer.customer`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.hash_string"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/kustomer/customer_kustomer.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    id\n    , created_by\n    , modified_by\n    , created_at\n    , CASE\n        WHEN REGEXP_CONTAINS(display_name, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(display_name, r'[2-9][0-9]{9}$'))\n        ELSE SHA256(LOWER(TRIM(display_name)))\n    END AS display_name_hashed\n    , COALESCE(REGEXP_CONTAINS(display_name, r'^(?:\\+1)?[2-9][0-9]{9}$'), FALSE) AS display_name_is_phone\n    , external_id\n    , progressive_status\n    , verified\n    , modified_at\n    , deleted_at\n    , last_activity_at\n    , default_lang\n    , deleted\n    , CASE\n        WHEN REGEXP_CONTAINS(first_name, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(first_name, r'[0-9]{10}$'))\n        ELSE SHA256(LOWER(TRIM(first_name)))\n    END AS first_name_hashed\n    , \n    SHA256(TRIM(LOWER(last_name))) as last_name_hashed\n\n    , CASE\n        WHEN REGEXP_CONTAINS(name, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(name, r'[0-9]{10}$'))\n        ELSE SHA256(LOWER(TRIM(name)))\n    END AS name_hashed\n    , last_message_at\n    , last_conversation_id\n    , last_message_out_sent_at\n    , conversation_counts_all\n    , conversation_counts_done\n    , conversation_counts_open\n    , conversation_counts_snoozed\n    , CASE\n        WHEN custom_client_external_id_str = 'multiple' OR custom_client_external_id_str IS NULL\n            THEN custom_client_external_id_str\n        ELSE TO_BASE64(SHA256(custom_client_external_id_str))\n    END AS client_external_id_hashed\n    , custom_client_verification_str AS client_verification_string\n    , custom_customer_name_str AS customer_name\n    , custom_enrolled_bool AS enrolled\n    , custom_relief_eligibility_str AS relief_eligible\nFROM\n    `analytics-dev-328216.kustomer.customer`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.kustomer_emails_for_customer_communication": {"database": "analytics-prod-328313", "schema": "kustomer", "name": "kustomer_emails_for_customer_communication", "resource_type": "model", "package_name": "promise_dwh", "path": "kustomer/kustomer_emails_for_customer_communication.sql", "original_file_path": "models/kustomer/kustomer_emails_for_customer_communication.sql", "unique_id": "model.promise_dwh.kustomer_emails_for_customer_communication", "fqn": ["promise_dwh", "kustomer", "kustomer_emails_for_customer_communication"], "alias": "kustomer_emails_for_customer_communication", "checksum": {"name": "sha256", "checksum": "db9f87bf5e88ba342c3a26aec160414f7234afabbe8518cb005e23b4ebd461c3"}, "config": {"enabled": true, "alias": null, "schema": "kustomer", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "created_at", "data_type": "datetime", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "kustomer", "partition_by": {"field": "created_at", "data_type": "datetime", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.351579, "relation_name": "`analytics-prod-328313`.`kustomer`.`kustomer_emails_for_customer_communication`", "raw_code": "-- Ignore long lines for linting in this file\n-- noqa: disable=LT05\n{{\n  config(\n    partition_by={\n      \"field\": \"created_at\",\n      \"data_type\": \"datetime\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n{% raw %}\n    WITH\n    adj_template_text AS (\n        SELECT *\n        FROM\n            `analytics-prod-328313.template_service.template_text`\n\n        UNION ALL\n\n        SELECT\n            'veolia_welcome_email_20230603_template_version_id'\n                AS template_version_id,\n            CAST('2023-06-03' AS TIMESTAMP) AS created_at,\n            NULL AS deleted_at,\n            FALSE AS draft_default,\n            'veolia_welcome_email_20230603_reference'\n                AS human_readable_reference,\n            FALSE AS live_default,\n            'EN' AS locale,\n            'veolia_welcome_email_20230603_template_id' AS template_id,\n            NULL AS updated_at,\n            'Dear Loyal Veolia Customer,\\n\\nDon\u2019t wait to check out this opportunity to get your water account in good standing!\\n\\nVeolia is offering interest-free payment plans. Sign up for a flexible plan to pay your past due balance off over time. Click the link to choose a plan:\\n{{{signuplink}}}\\n\\n~ PromisePay for Veolia'\n                AS template_text\n\n        UNION ALL\n\n        SELECT\n            'veolia_welcome_email_20230614_at_risk_template_version_id'\n                AS template_version_id,\n            CAST('2023-06-14' AS TIMESTAMP) AS created_at,\n            NULL AS deleted_at,\n            FALSE AS draft_default,\n            'veolia_welcome_email_20230614_at_risk_reference'\n                AS human_readable_reference,\n            FALSE AS live_default,\n            'EN' AS locale,\n            'veolia_welcome_email_20230614_at_risk_template_id' AS template_id,\n            NULL AS updated_at,\n            'Dear Loyal Veolia Customer,\\n\\nYour Veolia water service is scheduled for disconnection due to lack of payment.\\n\\nPlease take action on your overdue water bills to avoid disconnection. Sign-up for a flexible payment plan today to keep your water on:\\n{{{signuplink}}}\\n\\n~ PromisePay for Veolia'\n                AS template_text\n    ),\n\n\n\n    -- Convert templates into regex we can match\n    cte AS (\n        SELECT\n            REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REPLACE(\n                            REPLACE(\n                                REPLACE(\n                                    -- parentheses and +'s need to be escaped\n                                    template_text, ')', '\\\\)'\n                                ),\n                                '(', '\\\\('\n                            ),\n                            '+', '\\\\+'\n                        ),\n\n                        -- convert templates to regex that matches names, URLs, emails, etc. of any length\n                        r'{{{[a-zA-Z\\.-]+}}}', r\"[\u00ed\u00e9a-zA-Z0-9@$'\u2019;._,=?: -\\\\/]+\"\n                    ),\n\n                    -- capture double line-breaks\n                    r'(\\S)\\s{2,}(\\S)', r'\\1\\\\s{2,}\\2'\n                ),\n\n                -- After converting double line-breaks, convert single line-breaks\n                r'(\\S)\\n(\\S)', r'\\1\\\\s{1,}\\2')\n                AS regex_to_check,\n            MAX(created_at) AS max_created_at,\n            template_text\n        FROM\n            adj_template_text\n        GROUP BY\n            1,\n            3\n    ),\n\n    -- Join the regexed templates to the template table  \n    -- This is necessary to remove duplicate versions and get the most recent template_version\n    regexed_template_text AS (\n        SELECT\n            cte.regex_to_check,\n            tt.*\n        FROM\n            cte\n        LEFT JOIN\n            adj_template_text tt\n            ON\n                cte.template_text = tt.template_text\n                AND max_created_at = created_at\n    ),\n\n    -- Pull out only the emails we want from Kustomer\n    -- Sorry about this\n    kustomer_emails AS (\n        SELECT\n            id AS kustomer_message_id,\n            created_at,\n            customer_id,\n            preview,\n            channel,\n            REGEXP_EXTRACT(preview, r'customer=([0-9]+)') AS customer_from_url,\n            REGEXP_EXTRACT(preview, r'external_id=([0-9-]+)')\n                AS external_id_from_url,\n            REGEXP_EXTRACT(preview, r'https://([a-z-]+).promise-pay.com')\n                AS jurisdiction_from_url\n        FROM\n            `analytics-dev-328216.kustomer.message`\n        WHERE\n            1 = 1\n            AND direction = 'out'\n            AND direction_type = 'initial-out'\n            AND auto\n            AND channel = 'email'\n            AND preview NOT LIKE '%appears to have come from court and is inquiring about making a payment.%'\n            AND preview NOT LIKE '%Remit report%'\n            AND NOT (\n                preview LIKE '%Successful payment made%'\n                AND preview LIKE '%See payments dashboard:%'\n            )\n            AND NOT (\n                preview LIKE '%Successful payment made%'\n                AND preview LIKE '%Offender number:%'\n            )\n            AND preview NOT LIKE '%To complete your login to Promise%'\n            AND preview NOT LIKE '%Could not fetch the balance and contacts files for%'\n            AND preview NOT LIKE '%Could not fetch the import file for%'\n            AND preview NOT LIKE '%Could not fetch the contacts file for%'\n            AND preview NOT LIKE '%Could not fetch the balance file for%'\n            AND preview NOT LIKE '%PROMISE PAY DETAIL REPORT%'\n            AND preview NOT LIKE '%Marin County Probation Department%'\n            AND preview NOT LIKE '%has been disputed%'\n            AND preview NOT LIKE '%has been refunded%'\n            AND preview NOT LIKE '%Test Email%'\n            AND preview NOT LIKE '%This is the email%'\n            AND preview NOT LIKE '%Tim B. did this :D%'\n            AND NOT (\n                preview LIKE '%Case ID:%'\n                AND (\n                    preview LIKE '%ARC payment made by%'\n                    OR preview LIKE '%CDL payment made by%'\n                )\n            )\n    ),\n\n    -- Join the table on the template regex to get emails that match our templates\n    joined_table AS (\n        SELECT\n            msg.*,\n            rtt.* EXCEPT (created_at),\n\n            -- this case statement might not be exhaustive\n            -- it only captures examples from the DB,\n            -- not the full list of URLs we use\n            CASE jurisdiction_from_url\n                WHEN 'veolia' THEN 'veoliany_water_pay'\n                WHEN 'veolia-ny' THEN 'veoliany_water_pay'\n                WHEN 'veoliany' THEN 'veoliany_water_pay'\n                WHEN 'louisvillewater' THEN 'louisville_water_pay'\n                WHEN 'buffalo-water' THEN 'buffalowater_pay'\n                WHEN 'alexrenew' THEN 'alexrenew_water_pay'\n                ELSE\n                    CONCAT(jurisdiction_from_url, '_pay')\n            END\n                AS jurisdiction_for_customer,\n            SHA256(TRIM(LOWER(external_id_from_url)))\n                AS external_id_from_url_hashed\n        FROM\n            kustomer_emails msg\n        LEFT JOIN\n            regexed_template_text rtt\n            ON\n                REGEXP_CONTAINS(msg.preview, rtt.regex_to_check)\n    ),\n\n    all_ids AS (\n        SELECT\n            id AS client_id_from_customer,\n            external_id_hashed,\n            jurisdiction\n        FROM\n            analytics-prod-328313.promisepay.customer\n    ),\n\n    -- In some cases we only get an external_id from the email\n    -- Get the client_id from promisepay.customer using a hashed version\n    stg_joined_table AS (\n        SELECT *\n        FROM\n            joined_table\n        LEFT JOIN all_ids cust\n            ON\n                joined_table.jurisdiction_for_customer = cust.jurisdiction\n                AND joined_table.external_id_from_url_hashed\n                = cust.external_id_hashed\n    )\n\n    -- And finally, we get to coalesce this into the format of customer_communication\n    SELECT\n        (ROW_NUMBER() OVER (ORDER BY emails.created_at ASC))\n        + 1000000000000 AS id,\n        COALESCE(CAST(customer_from_url AS INT64), client_id_from_customer)\n            AS customer_id,\n        CAST(NULL AS INT64) AS template_id, -- POSTGRES tables in the app have the wrong type, so we have to adapt here\n        template_version_id,\n        channel,\n        CAST(emails.created_at AS DATETIME) AS created_at,\n        CASE template_version_id\n            WHEN\n                'veolia_welcome_email_20230603_template_version_id'\n                THEN 'veolia_welcome_email_20230603'\n            WHEN\n                'veolia_welcome_email_20230614_at_risk_template_version_id'\n                THEN 'veolia_welcome_email_20230614_at_risk'\n            ELSE template_name\n        END AS template_name,\n        CASE template_version_id\n            WHEN\n                'veolia_welcome_email_20230603_template_version_id'\n                THEN 'welcome'\n            WHEN\n                'veolia_welcome_email_20230614_at_risk_template_version_id'\n                THEN 'welcome'\n            ELSE template_category\n        END AS template_type,\n        CAST(NULL AS STRING) AS payment_id,\n        CAST(NULL AS STRING) AS payment_key,\n        jurisdiction_for_customer AS jurisdiction\n    FROM\n        stg_joined_table emails\n    LEFT JOIN\n        `analytics-prod-328313.template_service.template` templates\n        ON\n            emails.template_id = templates.id\n{% endraw %}\n\n{% if is_incremental() %}\n\n    -- recalculate latest day's data + previous\n    WHERE\n        CAST(emails.created_at AS DATETIME)\n        >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/kustomer/kustomer_emails_for_customer_communication.sql", "compiled": true, "compiled_code": "-- Ignore long lines for linting in this file\n-- noqa: disable=LT05\n\n\n    WITH\n    adj_template_text AS (\n        SELECT *\n        FROM\n            `analytics-prod-328313.template_service.template_text`\n\n        UNION ALL\n\n        SELECT\n            'veolia_welcome_email_20230603_template_version_id'\n                AS template_version_id,\n            CAST('2023-06-03' AS TIMESTAMP) AS created_at,\n            NULL AS deleted_at,\n            FALSE AS draft_default,\n            'veolia_welcome_email_20230603_reference'\n                AS human_readable_reference,\n            FALSE AS live_default,\n            'EN' AS locale,\n            'veolia_welcome_email_20230603_template_id' AS template_id,\n            NULL AS updated_at,\n            'Dear Loyal Veolia Customer,\\n\\nDon\u2019t wait to check out this opportunity to get your water account in good standing!\\n\\nVeolia is offering interest-free payment plans. Sign up for a flexible plan to pay your past due balance off over time. Click the link to choose a plan:\\n{{{signuplink}}}\\n\\n~ PromisePay for Veolia'\n                AS template_text\n\n        UNION ALL\n\n        SELECT\n            'veolia_welcome_email_20230614_at_risk_template_version_id'\n                AS template_version_id,\n            CAST('2023-06-14' AS TIMESTAMP) AS created_at,\n            NULL AS deleted_at,\n            FALSE AS draft_default,\n            'veolia_welcome_email_20230614_at_risk_reference'\n                AS human_readable_reference,\n            FALSE AS live_default,\n            'EN' AS locale,\n            'veolia_welcome_email_20230614_at_risk_template_id' AS template_id,\n            NULL AS updated_at,\n            'Dear Loyal Veolia Customer,\\n\\nYour Veolia water service is scheduled for disconnection due to lack of payment.\\n\\nPlease take action on your overdue water bills to avoid disconnection. Sign-up for a flexible payment plan today to keep your water on:\\n{{{signuplink}}}\\n\\n~ PromisePay for Veolia'\n                AS template_text\n    ),\n\n\n\n    -- Convert templates into regex we can match\n    cte AS (\n        SELECT\n            REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REPLACE(\n                            REPLACE(\n                                REPLACE(\n                                    -- parentheses and +'s need to be escaped\n                                    template_text, ')', '\\\\)'\n                                ),\n                                '(', '\\\\('\n                            ),\n                            '+', '\\\\+'\n                        ),\n\n                        -- convert templates to regex that matches names, URLs, emails, etc. of any length\n                        r'{{{[a-zA-Z\\.-]+}}}', r\"[\u00ed\u00e9a-zA-Z0-9@$'\u2019;._,=?: -\\\\/]+\"\n                    ),\n\n                    -- capture double line-breaks\n                    r'(\\S)\\s{2,}(\\S)', r'\\1\\\\s{2,}\\2'\n                ),\n\n                -- After converting double line-breaks, convert single line-breaks\n                r'(\\S)\\n(\\S)', r'\\1\\\\s{1,}\\2')\n                AS regex_to_check,\n            MAX(created_at) AS max_created_at,\n            template_text\n        FROM\n            adj_template_text\n        GROUP BY\n            1,\n            3\n    ),\n\n    -- Join the regexed templates to the template table  \n    -- This is necessary to remove duplicate versions and get the most recent template_version\n    regexed_template_text AS (\n        SELECT\n            cte.regex_to_check,\n            tt.*\n        FROM\n            cte\n        LEFT JOIN\n            adj_template_text tt\n            ON\n                cte.template_text = tt.template_text\n                AND max_created_at = created_at\n    ),\n\n    -- Pull out only the emails we want from Kustomer\n    -- Sorry about this\n    kustomer_emails AS (\n        SELECT\n            id AS kustomer_message_id,\n            created_at,\n            customer_id,\n            preview,\n            channel,\n            REGEXP_EXTRACT(preview, r'customer=([0-9]+)') AS customer_from_url,\n            REGEXP_EXTRACT(preview, r'external_id=([0-9-]+)')\n                AS external_id_from_url,\n            REGEXP_EXTRACT(preview, r'https://([a-z-]+).promise-pay.com')\n                AS jurisdiction_from_url\n        FROM\n            `analytics-dev-328216.kustomer.message`\n        WHERE\n            1 = 1\n            AND direction = 'out'\n            AND direction_type = 'initial-out'\n            AND auto\n            AND channel = 'email'\n            AND preview NOT LIKE '%appears to have come from court and is inquiring about making a payment.%'\n            AND preview NOT LIKE '%Remit report%'\n            AND NOT (\n                preview LIKE '%Successful payment made%'\n                AND preview LIKE '%See payments dashboard:%'\n            )\n            AND NOT (\n                preview LIKE '%Successful payment made%'\n                AND preview LIKE '%Offender number:%'\n            )\n            AND preview NOT LIKE '%To complete your login to Promise%'\n            AND preview NOT LIKE '%Could not fetch the balance and contacts files for%'\n            AND preview NOT LIKE '%Could not fetch the import file for%'\n            AND preview NOT LIKE '%Could not fetch the contacts file for%'\n            AND preview NOT LIKE '%Could not fetch the balance file for%'\n            AND preview NOT LIKE '%PROMISE PAY DETAIL REPORT%'\n            AND preview NOT LIKE '%Marin County Probation Department%'\n            AND preview NOT LIKE '%has been disputed%'\n            AND preview NOT LIKE '%has been refunded%'\n            AND preview NOT LIKE '%Test Email%'\n            AND preview NOT LIKE '%This is the email%'\n            AND preview NOT LIKE '%Tim B. did this :D%'\n            AND NOT (\n                preview LIKE '%Case ID:%'\n                AND (\n                    preview LIKE '%ARC payment made by%'\n                    OR preview LIKE '%CDL payment made by%'\n                )\n            )\n    ),\n\n    -- Join the table on the template regex to get emails that match our templates\n    joined_table AS (\n        SELECT\n            msg.*,\n            rtt.* EXCEPT (created_at),\n\n            -- this case statement might not be exhaustive\n            -- it only captures examples from the DB,\n            -- not the full list of URLs we use\n            CASE jurisdiction_from_url\n                WHEN 'veolia' THEN 'veoliany_water_pay'\n                WHEN 'veolia-ny' THEN 'veoliany_water_pay'\n                WHEN 'veoliany' THEN 'veoliany_water_pay'\n                WHEN 'louisvillewater' THEN 'louisville_water_pay'\n                WHEN 'buffalo-water' THEN 'buffalowater_pay'\n                WHEN 'alexrenew' THEN 'alexrenew_water_pay'\n                ELSE\n                    CONCAT(jurisdiction_from_url, '_pay')\n            END\n                AS jurisdiction_for_customer,\n            SHA256(TRIM(LOWER(external_id_from_url)))\n                AS external_id_from_url_hashed\n        FROM\n            kustomer_emails msg\n        LEFT JOIN\n            regexed_template_text rtt\n            ON\n                REGEXP_CONTAINS(msg.preview, rtt.regex_to_check)\n    ),\n\n    all_ids AS (\n        SELECT\n            id AS client_id_from_customer,\n            external_id_hashed,\n            jurisdiction\n        FROM\n            analytics-prod-328313.promisepay.customer\n    ),\n\n    -- In some cases we only get an external_id from the email\n    -- Get the client_id from promisepay.customer using a hashed version\n    stg_joined_table AS (\n        SELECT *\n        FROM\n            joined_table\n        LEFT JOIN all_ids cust\n            ON\n                joined_table.jurisdiction_for_customer = cust.jurisdiction\n                AND joined_table.external_id_from_url_hashed\n                = cust.external_id_hashed\n    )\n\n    -- And finally, we get to coalesce this into the format of customer_communication\n    SELECT\n        (ROW_NUMBER() OVER (ORDER BY emails.created_at ASC))\n        + 1000000000000 AS id,\n        COALESCE(CAST(customer_from_url AS INT64), client_id_from_customer)\n            AS customer_id,\n        CAST(NULL AS INT64) AS template_id, -- POSTGRES tables in the app have the wrong type, so we have to adapt here\n        template_version_id,\n        channel,\n        CAST(emails.created_at AS DATETIME) AS created_at,\n        CASE template_version_id\n            WHEN\n                'veolia_welcome_email_20230603_template_version_id'\n                THEN 'veolia_welcome_email_20230603'\n            WHEN\n                'veolia_welcome_email_20230614_at_risk_template_version_id'\n                THEN 'veolia_welcome_email_20230614_at_risk'\n            ELSE template_name\n        END AS template_name,\n        CASE template_version_id\n            WHEN\n                'veolia_welcome_email_20230603_template_version_id'\n                THEN 'welcome'\n            WHEN\n                'veolia_welcome_email_20230614_at_risk_template_version_id'\n                THEN 'welcome'\n            ELSE template_category\n        END AS template_type,\n        CAST(NULL AS STRING) AS payment_id,\n        CAST(NULL AS STRING) AS payment_key,\n        jurisdiction_for_customer AS jurisdiction\n    FROM\n        stg_joined_table emails\n    LEFT JOIN\n        `analytics-prod-328313.template_service.template` templates\n        ON\n            emails.template_id = templates.id\n\n\n\n\n    -- recalculate latest day's data + previous\n    WHERE\n        CAST(emails.created_at AS DATETIME)\n        >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.user": {"database": "analytics-prod-328313", "schema": "kustomer", "name": "user", "resource_type": "model", "package_name": "promise_dwh", "path": "kustomer/user.sql", "original_file_path": "models/kustomer/user.sql", "unique_id": "model.promise_dwh.user", "fqn": ["promise_dwh", "kustomer", "user"], "alias": "user", "checksum": {"name": "sha256", "checksum": "6563b60cf74afaca057f8c84aaa2ed3eb3c59e9c055b4d4f2853533306a1687e"}, "config": {"enabled": true, "alias": null, "schema": "kustomer", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "kustomer"}, "created_at": 1715379616.3559282, "relation_name": "`analytics-prod-328313`.`kustomer`.`user`", "raw_code": "SELECT\n    id,\n    created_at,\n    created_by,\n    deleted,\n    deleted_at,\n    modified_at,\n    modified_by,\n    updated_at,\n    name,\n    display_name,\n    email,\n    mobile,\n    user_type\nFROM\n    `analytics-dev-328216.kustomer.user`", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/kustomer/user.sql", "compiled": true, "compiled_code": "SELECT\n    id,\n    created_at,\n    created_by,\n    deleted,\n    deleted_at,\n    modified_at,\n    modified_by,\n    updated_at,\n    name,\n    display_name,\n    email,\n    mobile,\n    user_type\nFROM\n    `analytics-dev-328216.kustomer.user`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.single_sided_entry": {"database": "analytics-prod-328313", "schema": "finance", "name": "single_sided_entry", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/single_sided_entry.sql", "original_file_path": "models/finance/single_sided_entry.sql", "unique_id": "model.promise_dwh.single_sided_entry", "fqn": ["promise_dwh", "finance", "single_sided_entry"], "alias": "single_sided_entry", "checksum": {"name": "sha256", "checksum": "27b0b09aee94e44e5c0421fe19f09c37b0c78dbb9d364b4c540fca9331e6f4ae"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT(event_id, \"|\", event_entry_id, \"|\", source_or_destination)", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["acct_identifier_jurisdiction_id", "acct_identifier_client_id"], "partition_by": {"field": "effective_at", "data_type": "timestamp", "granularity": "day"}}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/finance/finance.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": "utility_upload_trigger", "schema": "finance", "partition_by": {"field": "effective_at", "data_type": "timestamp", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "unique_key": "CONCAT(event_id, \"|\", event_entry_id, \"|\", source_or_destination)", "cluster_by": ["acct_identifier_jurisdiction_id", "acct_identifier_client_id"]}, "created_at": 1715379616.959998, "relation_name": "`analytics-prod-328313`.`finance`.`single_sided_entry`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"effective_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    incremental_strategy = 'insert_overwrite',\n    unique_key = 'CONCAT(event_id, \"|\", event_entry_id, \"|\", source_or_destination)',\n    cluster_by = ['acct_identifier_jurisdiction_id', 'acct_identifier_client_id']\n  )\n}}\n\nSELECT\n    evententryid AS event_entry_id\n    , eventid AS event_id\n    , sourceordestination AS source_or_destination\n    , acctidentifierclientid AS acct_identifier_client_id\n    , acctidentifierjurisdictionid AS acct_identifier_jurisdiction_id\n    , CONCAT(\n        REPLACE(REPLACE(acctidentifierjurisdictionid, \"_pay\", \"\"), \"_\", \"\"),\n        acctidentifierclientid\n    ) AS jurisdiction_x_client_id\n    , REPLACE(REPLACE(acctidentifierjurisdictionid, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    , acctidentifierobligationid AS acct_identifier_obligation_id\n    , acctidentifierpaidat AS acct_identifier_paid_at\n    , acctidentifierpaymentid AS acct_identifier_payment_id\n    , acctidentifierplanid AS acct_identifier_plan_id\n    , acctidentifierprovider AS acct_identifier_provider\n    , acctidentifierproviderpayoutid AS acct_identifier_provider_payout_id\n    , acctidentifierpurposetype AS acct_identifier_purpose_type\n    , acctidentifierremitid AS acct_identifier_remit_id\n    , acctidentifierscheduledfor AS acct_identifier_scheduled_for\n    , acctidentifierscheduledpaymentid AS acct_identifier_scheduled_payment_id\n    , acctkind AS acct_kind\n    , accttype AS acct_type\n    , amount\n    , effectiveat AS effective_at\n    , eventcreatedat AS event_created_at\n    , eventfinalizedat AS event_finalized_at\n    , eventkind AS event_kind\n    , eventstatus AS event_status\n\nFROM\n    {{ get_finance_source('ledger') }}\n{% if is_incremental() -%}\n    WHERE\n        eventcreatedat > {{ window_back_full_days('_dbt_max_partition', 10) }}\n        AND effectiveat > {{ window_back_full_days('_dbt_max_partition', 10) }}\n{%- endif %}", "language": "sql", "refs": [], "sources": [["finance", "ledger"]], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_finance_source", "macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": ["source.promise_dwh.finance.ledger"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/single_sided_entry.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    evententryid AS event_entry_id\n    , eventid AS event_id\n    , sourceordestination AS source_or_destination\n    , acctidentifierclientid AS acct_identifier_client_id\n    , acctidentifierjurisdictionid AS acct_identifier_jurisdiction_id\n    , CONCAT(\n        REPLACE(REPLACE(acctidentifierjurisdictionid, \"_pay\", \"\"), \"_\", \"\"),\n        acctidentifierclientid\n    ) AS jurisdiction_x_client_id\n    , REPLACE(REPLACE(acctidentifierjurisdictionid, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    , acctidentifierobligationid AS acct_identifier_obligation_id\n    , acctidentifierpaidat AS acct_identifier_paid_at\n    , acctidentifierpaymentid AS acct_identifier_payment_id\n    , acctidentifierplanid AS acct_identifier_plan_id\n    , acctidentifierprovider AS acct_identifier_provider\n    , acctidentifierproviderpayoutid AS acct_identifier_provider_payout_id\n    , acctidentifierpurposetype AS acct_identifier_purpose_type\n    , acctidentifierremitid AS acct_identifier_remit_id\n    , acctidentifierscheduledfor AS acct_identifier_scheduled_for\n    , acctidentifierscheduledpaymentid AS acct_identifier_scheduled_payment_id\n    , acctkind AS acct_kind\n    , accttype AS acct_type\n    , amount\n    , effectiveat AS effective_at\n    , eventcreatedat AS event_created_at\n    , eventfinalizedat AS event_finalized_at\n    , eventkind AS event_kind\n    , eventstatus AS event_status\n\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`singlesidedentry`\n\nWHERE\n        eventcreatedat > \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 10 DAY)\n\n        AND effectiveat > \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 10 DAY)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.upcoming_payments": {"database": "analytics-prod-328313", "schema": "finance", "name": "upcoming_payments", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/upcoming_payments.sql", "original_file_path": "models/finance/upcoming_payments.sql", "unique_id": "model.promise_dwh.upcoming_payments", "fqn": ["promise_dwh", "finance", "upcoming_payments"], "alias": "upcoming_payments", "checksum": {"name": "sha256", "checksum": "c757911692d292cfb9ef269881c148a52498bb9d7f107dc40f3d92dd21115716"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "utility_upload_trigger", "schema": "finance"}, "created_at": 1715379616.3635352, "relation_name": "`analytics-prod-328313`.`finance`.`upcoming_payments`", "raw_code": "WITH\nscheduled_payment_ids AS (\n    SELECT\n        REPLACE(acct_identifier_jurisdiction_id, \"_\", \"\") AS jurisdiction,\n        acct_identifier_client_id AS client_id,\n        acct_identifier_scheduled_payment_id AS scheduled_payment_id,\n        COALESCE(acct_identifier_scheduled_for) AS scheduled_for_date,\n\n        SUM(amount) AS amount,\n        SUM(\n            CASE\n                WHEN event_kind = \"PaymentSucceeded\" THEN 1\n                ELSE 0\n            END\n        ) AS num_payment_succeeded,\n        SUM(\n            CASE\n                WHEN event_kind = \"PaymentRefunded\" THEN 1\n                ELSE 0\n            END\n        ) AS num_payment_refunded,\n        SUM(\n            CASE\n                WHEN event_kind = \"ScheduledPaymentsCanceled\" THEN 1\n                ELSE 0\n            END\n        ) AS num_payment_canceled,\n        SUM(\n            CASE\n                WHEN event_kind = \"PaymentsScheduled\" THEN 1\n                ELSE 0\n            END\n        ) AS num_payment_scheduled\n    FROM\n        {{ ref('single_sided_entry') }}\n    WHERE\n        1 = 1\n        AND acct_kind = \"ScheduledPayment\"\n        AND event_status = \"Recorded\"\n        AND acct_identifier_purpose_type = \"Obligation\"\n    GROUP BY 1, 2, 3, 4\n)\n\nSELECT\n    CONCAT(jurisdiction, client_id) AS jurisdiction_x_client_id,\n    *\nFROM\n    scheduled_payment_ids\nWHERE\n    1 = 1\n    AND num_payment_canceled = 0\n    AND num_payment_succeeded = 0", "language": "sql", "refs": [{"name": "single_sided_entry", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.promise_dwh.single_sided_entry"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/upcoming_payments.sql", "compiled": true, "compiled_code": "WITH\nscheduled_payment_ids AS (\n    SELECT\n        REPLACE(acct_identifier_jurisdiction_id, \"_\", \"\") AS jurisdiction,\n        acct_identifier_client_id AS client_id,\n        acct_identifier_scheduled_payment_id AS scheduled_payment_id,\n        COALESCE(acct_identifier_scheduled_for) AS scheduled_for_date,\n\n        SUM(amount) AS amount,\n        SUM(\n            CASE\n                WHEN event_kind = \"PaymentSucceeded\" THEN 1\n                ELSE 0\n            END\n        ) AS num_payment_succeeded,\n        SUM(\n            CASE\n                WHEN event_kind = \"PaymentRefunded\" THEN 1\n                ELSE 0\n            END\n        ) AS num_payment_refunded,\n        SUM(\n            CASE\n                WHEN event_kind = \"ScheduledPaymentsCanceled\" THEN 1\n                ELSE 0\n            END\n        ) AS num_payment_canceled,\n        SUM(\n            CASE\n                WHEN event_kind = \"PaymentsScheduled\" THEN 1\n                ELSE 0\n            END\n        ) AS num_payment_scheduled\n    FROM\n        `analytics-prod-328313`.`finance`.`single_sided_entry`\n    WHERE\n        1 = 1\n        AND acct_kind = \"ScheduledPayment\"\n        AND event_status = \"Recorded\"\n        AND acct_identifier_purpose_type = \"Obligation\"\n    GROUP BY 1, 2, 3, 4\n)\n\nSELECT\n    CONCAT(jurisdiction, client_id) AS jurisdiction_x_client_id,\n    *\nFROM\n    scheduled_payment_ids\nWHERE\n    1 = 1\n    AND num_payment_canceled = 0\n    AND num_payment_succeeded = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.payment_attempt": {"database": "analytics-prod-328313", "schema": "finance", "name": "payment_attempt", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/payment_attempt.sql", "original_file_path": "models/finance/payment_attempt.sql", "unique_id": "model.promise_dwh.payment_attempt", "fqn": ["promise_dwh", "finance", "payment_attempt"], "alias": "payment_attempt", "checksum": {"name": "sha256", "checksum": "7607d5963c79d900e0675215313152e8c9053f6dc900f8d013d38624859aa6ef"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "attempted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/finance/finance.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": "utility_upload_trigger", "schema": "finance", "partition_by": {"field": "attempted_at", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.960432, "relation_name": "`analytics-prod-328313`.`finance`.`payment_attempt`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"attempted_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\n{% set provider_details = ['bankAccountDetails.bankName', 'bankAccountDetails.last4', 'cardDetails.brand', \n                           'cardDetails.expMonth', 'cardDetails.expYear', 'cardDetails.last4', 'dataSource', \n                           'humanReadablePaymentMethod', 'paidAt', 'paymentIntentId', 'provider', 'stripeChargeId',\n                          'stripeDeclineCode', 'stripeErrorCode' ] %}\n\nSELECT\n    id\n    , amount\n    , attemptedat AS attempted_at\n    , clientid AS client_id\n    , completedat AS completed_at\n    , declinemessage AS decline_message\n    , finalizedat AS finalized_at\n    , jurisdictionid AS jurisdiction_id\n    , paymentmethodid AS payment_method_id\n    , provider\n    , status\n    {{ flatten_json_fields(provider_details, 'providerdetails', 'provider_details') }}\nFROM\n    {{ get_finance_source('payment_attempt') }}\n{% if is_incremental() %}\n    -- recalculate latest day's data + previous\n    WHERE attemptedat >= {{ window_back_full_days('_dbt_max_partition', 10) }}\n{% endif %}", "language": "sql", "refs": [], "sources": [["finance", "payment_attempt"]], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.flatten_json_fields", "macro.promise_dwh.get_finance_source", "macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": ["source.promise_dwh.finance.payment_attempt"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/payment_attempt.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    id\n    , amount\n    , attemptedat AS attempted_at\n    , clientid AS client_id\n    , completedat AS completed_at\n    , declinemessage AS decline_message\n    , finalizedat AS finalized_at\n    , jurisdictionid AS jurisdiction_id\n    , paymentmethodid AS payment_method_id\n    , provider\n    , status\n    \n    , JSON_VALUE(providerdetails, '$.bankAccountDetails.bankName') as provider_details_bankAccountDetails_bankName\n    , JSON_VALUE(providerdetails, '$.bankAccountDetails.last4') as provider_details_bankAccountDetails_last4\n    , JSON_VALUE(providerdetails, '$.cardDetails.brand') as provider_details_cardDetails_brand\n    , JSON_VALUE(providerdetails, '$.cardDetails.expMonth') as provider_details_cardDetails_expMonth\n    , JSON_VALUE(providerdetails, '$.cardDetails.expYear') as provider_details_cardDetails_expYear\n    , JSON_VALUE(providerdetails, '$.cardDetails.last4') as provider_details_cardDetails_last4\n    , JSON_VALUE(providerdetails, '$.dataSource') as provider_details_dataSource\n    , JSON_VALUE(providerdetails, '$.humanReadablePaymentMethod') as provider_details_humanReadablePaymentMethod\n    , JSON_VALUE(providerdetails, '$.paidAt') as provider_details_paidAt\n    , JSON_VALUE(providerdetails, '$.paymentIntentId') as provider_details_paymentIntentId\n    , JSON_VALUE(providerdetails, '$.provider') as provider_details_provider\n    , JSON_VALUE(providerdetails, '$.stripeChargeId') as provider_details_stripeChargeId\n    , JSON_VALUE(providerdetails, '$.stripeDeclineCode') as provider_details_stripeDeclineCode\n    , JSON_VALUE(providerdetails, '$.stripeErrorCode') as provider_details_stripeErrorCode\n\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`paymentattempt`\n\n\n    -- recalculate latest day's data + previous\n    WHERE attemptedat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 10 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.finance_event": {"database": "analytics-prod-328313", "schema": "finance", "name": "finance_event", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/finance_event.sql", "original_file_path": "models/finance/finance_event.sql", "unique_id": "model.promise_dwh.finance_event", "fqn": ["promise_dwh", "finance", "finance_event"], "alias": "finance_event", "checksum": {"name": "sha256", "checksum": "ed8f397142c4a3f31bb04a3dd29a7361523068889b36efe22194fb6054b29c02"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction_id", "client_id", "plan_id"], "partition_by": {"field": "effective_at", "data_type": "timestamp", "granularity": "day"}}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/finance/finance.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": "utility_upload_trigger", "schema": "finance", "partition_by": {"field": "effective_at", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite", "cluster_by": ["jurisdiction_id", "client_id", "plan_id"]}, "created_at": 1715379616.959764, "relation_name": "`analytics-prod-328313`.`finance`.`finance_event`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"effective_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite',\n    cluster_by = ['jurisdiction_id', 'client_id', 'plan_id'],\n  )\n}}\n\nSELECT\n    id\n    , clientid AS client_id\n    , createdat AS created_at\n    , effectiveat AS effective_at\n    , eventkind AS event_kind\n    , finalizedat AS finalized_at\n    , jurisdictionid AS jurisdiction_id\n    , obligationid AS obligation_id\n    , paymentid AS payment_id\n    , payoutid AS payout_id\n    , planid AS plan_id\n    , refundid AS refund_id\n    , remitid AS remit_id\n    , status\nFROM\n    {{ get_finance_source('event') }}\n{% if is_incremental() %}\n    -- recalculate latest day's data + previous\n    WHERE effectiveat >= {{ window_back_full_days('_dbt_max_partition', 10) }}\n{% endif %}", "language": "sql", "refs": [], "sources": [["finance", "event"]], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_finance_source", "macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": ["source.promise_dwh.finance.event"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/finance_event.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    id\n    , clientid AS client_id\n    , createdat AS created_at\n    , effectiveat AS effective_at\n    , eventkind AS event_kind\n    , finalizedat AS finalized_at\n    , jurisdictionid AS jurisdiction_id\n    , obligationid AS obligation_id\n    , paymentid AS payment_id\n    , payoutid AS payout_id\n    , planid AS plan_id\n    , refundid AS refund_id\n    , remitid AS remit_id\n    , status\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`event`\n\n\n    -- recalculate latest day's data + previous\n    WHERE effectiveat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 10 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.payment_provider_balance": {"database": "analytics-prod-328313", "schema": "finance", "name": "payment_provider_balance", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/payment_provider_balance.sql", "original_file_path": "models/finance/payment_provider_balance.sql", "unique_id": "model.promise_dwh.payment_provider_balance", "fqn": ["promise_dwh", "finance", "payment_provider_balance"], "alias": "payment_provider_balance", "checksum": {"name": "sha256", "checksum": "57e999d3448422d38ceec07bb8888a7a0e6ab14887623a47c13ebab10bf9821f"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/finance/finance.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": "utility_upload_trigger", "schema": "finance", "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.9612741, "relation_name": "`analytics-prod-328313`.`finance`.`payment_provider_balance`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"created_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\nSELECT\n    id\n    , accountname AS account_name\n    , createdat AS created_at\n    , jurisdictionid AS jurisdiction_id\n    , paymentprovider\n    , JSON_VALUE(result, '$.object') AS `object`\n    , JSON_VALUE(result, '$.livemode') AS livemode\n    , JSON_VALUE(result, '$.pending[0].amount') AS pending_amount_total\n    , JSON_VALUE(result, '$.pending[0].source_types.card') AS pending_amount_card\n    , JSON_VALUE(result, '$.pending[0].source_types.bank_account') AS pending_amount_bank\n    , JSON_VALUE(result, '$.available[0].amount') AS available_amount_total\n    , JSON_VALUE(result, '$.available[0].source_types.card') AS available_amount_card\n    , JSON_VALUE(result, '$.available[0].source_types.bank_account') AS available_amount_bank\n    , JSON_VALUE(result, '$.instant_available[0].amount') AS instantavailable_amount_total\n    , JSON_VALUE(result, '$.instant_available[0].source_types.card') AS instantavailable_amount_card\n    , JSON_VALUE(result, '$.instant_available[0].source_types.bank_account') AS instantavailable_amount_bank\n    , JSON_VALUE(result, '$.issuing.available[0].amount') AS issuing_amount\n    , JSON_VALUE(result, '$.connect_reserved[0].amount') AS connect_reserved_amount\n    , `error`\nFROM\n    {{ get_finance_source('payment_provider_balance') }}\n{% if is_incremental() %}\n    -- recalculate latest day's data + previous\n    WHERE createdat >= {{ window_back_full_days('_dbt_max_partition', 10) }}\n{% endif %}", "language": "sql", "refs": [], "sources": [["finance", "payment_provider_balance"]], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_finance_source", "macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": ["source.promise_dwh.finance.payment_provider_balance"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/payment_provider_balance.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    id\n    , accountname AS account_name\n    , createdat AS created_at\n    , jurisdictionid AS jurisdiction_id\n    , paymentprovider\n    , JSON_VALUE(result, '$.object') AS `object`\n    , JSON_VALUE(result, '$.livemode') AS livemode\n    , JSON_VALUE(result, '$.pending[0].amount') AS pending_amount_total\n    , JSON_VALUE(result, '$.pending[0].source_types.card') AS pending_amount_card\n    , JSON_VALUE(result, '$.pending[0].source_types.bank_account') AS pending_amount_bank\n    , JSON_VALUE(result, '$.available[0].amount') AS available_amount_total\n    , JSON_VALUE(result, '$.available[0].source_types.card') AS available_amount_card\n    , JSON_VALUE(result, '$.available[0].source_types.bank_account') AS available_amount_bank\n    , JSON_VALUE(result, '$.instant_available[0].amount') AS instantavailable_amount_total\n    , JSON_VALUE(result, '$.instant_available[0].source_types.card') AS instantavailable_amount_card\n    , JSON_VALUE(result, '$.instant_available[0].source_types.bank_account') AS instantavailable_amount_bank\n    , JSON_VALUE(result, '$.issuing.available[0].amount') AS issuing_amount\n    , JSON_VALUE(result, '$.connect_reserved[0].amount') AS connect_reserved_amount\n    , `error`\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`paymentproviderbalance`\n\n\n    -- recalculate latest day's data + previous\n    WHERE createdat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 10 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.refund_attempt": {"database": "analytics-prod-328313", "schema": "finance", "name": "refund_attempt", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/refund_attempt.sql", "original_file_path": "models/finance/refund_attempt.sql", "unique_id": "model.promise_dwh.refund_attempt", "fqn": ["promise_dwh", "finance", "refund_attempt"], "alias": "refund_attempt", "checksum": {"name": "sha256", "checksum": "d7d1b16296e6335366bdf1f7b12fa8b9904868d698317e2fdea6f06094953592"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "attempted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/finance/finance.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": "utility_upload_trigger", "schema": "finance", "partition_by": {"field": "attempted_at", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.960858, "relation_name": "`analytics-prod-328313`.`finance`.`refund_attempt`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"attempted_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\n{% set provider_details = ['effectiveAt', 'provider', 'processor', 'internalNotes', 'processorRefundId' ] %}\n\nSELECT\n    id\n    , amount\n    , attemptedat AS attempted_at\n    , clientid AS client_id\n    , failuremessage AS failure_message\n    , jurisdictionid AS jurisdiction_id\n    , paymentattemptid AS payment_attempt_id\n    , paymentmethodid AS payment_method_id\n    , provider\n    , status\n    {{ flatten_json_fields(provider_details, 'providerdetails', 'provider_details') }}\nFROM\n    {{ get_finance_source('refund_attempt') }}\n{% if is_incremental() %}\n    -- recalculate latest day's data + previous\n    WHERE attemptedat >= {{ window_back_full_days('_dbt_max_partition') }}\n{% endif %}", "language": "sql", "refs": [], "sources": [["finance", "refund_attempt"]], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.flatten_json_fields", "macro.promise_dwh.get_finance_source", "macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": ["source.promise_dwh.finance.refund_attempt"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/refund_attempt.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    id\n    , amount\n    , attemptedat AS attempted_at\n    , clientid AS client_id\n    , failuremessage AS failure_message\n    , jurisdictionid AS jurisdiction_id\n    , paymentattemptid AS payment_attempt_id\n    , paymentmethodid AS payment_method_id\n    , provider\n    , status\n    \n    , JSON_VALUE(providerdetails, '$.effectiveAt') as provider_details_effectiveAt\n    , JSON_VALUE(providerdetails, '$.provider') as provider_details_provider\n    , JSON_VALUE(providerdetails, '$.processor') as provider_details_processor\n    , JSON_VALUE(providerdetails, '$.internalNotes') as provider_details_internalNotes\n    , JSON_VALUE(providerdetails, '$.processorRefundId') as provider_details_processorRefundId\n\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`refundattempt`\n\n\n    -- recalculate latest day's data + previous\n    WHERE attemptedat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.finance_plan": {"database": "analytics-prod-328313", "schema": "finance", "name": "finance_plan", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/finance_plan.sql", "original_file_path": "models/finance/finance_plan.sql", "unique_id": "model.promise_dwh.finance_plan", "fqn": ["promise_dwh", "finance", "finance_plan"], "alias": "finance_plan", "checksum": {"name": "sha256", "checksum": "b582231cb21156e2edfc79aae2259c42ce045e37560a580149f7aa1a2f92720d"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/finance/finance.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": "utility_upload_trigger", "schema": "finance", "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.960217, "relation_name": "`analytics-prod-328313`.`finance`.`finance_plan`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"created_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\nSELECT\n    id\n    , clientid AS client_id\n    , createdat AS created_at\n    , jurisdictionid AS jurisdiction_id\nFROM\n    {{ get_finance_source('plan') }}\n{% if is_incremental() %}\n    -- recalculate latest day's data + previous\n    WHERE createdat >= {{ window_back_full_days('_dbt_max_partition') }}\n{% endif %}", "language": "sql", "refs": [], "sources": [["finance", "plan"]], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_finance_source", "macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": ["source.promise_dwh.finance.plan"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/finance_plan.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    id\n    , clientid AS client_id\n    , createdat AS created_at\n    , jurisdictionid AS jurisdiction_id\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`plan`\n\n\n    -- recalculate latest day's data + previous\n    WHERE createdat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.remit_attempt": {"database": "analytics-prod-328313", "schema": "finance", "name": "remit_attempt", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/remit_attempt.sql", "original_file_path": "models/finance/remit_attempt.sql", "unique_id": "model.promise_dwh.remit_attempt", "fqn": ["promise_dwh", "finance", "remit_attempt"], "alias": "remit_attempt", "checksum": {"name": "sha256", "checksum": "a7b7ecac4c29bc8fd6af86a1d22b9725f1e761ea75a348f93bdbbbbc47d6fa83"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "attempted_at", "data_type": "timestamp", "granularity": "day"}}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/finance/finance.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": "utility_upload_trigger", "schema": "finance", "partition_by": {"field": "attempted_at", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.961067, "relation_name": "`analytics-prod-328313`.`finance`.`remit_attempt`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"attempted_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\n{% set provider_details = ['dataSource', 'internalNotes', 'processor', 'processorRemitId', 'provider', 'remittedAt',\n                           'stripeAccountId', 'stripePayoutId', 'stripeTransferId'] %}\n\nSELECT\n    id\n    , amount\n    , attemptedat AS attempted_at\n    , declinemessage AS decline_message\n    , jurisdictionid AS jurisdiction_id\n    , provider\n    , remittedat AS remitted_at\n    , status\n    {{ flatten_json_fields(provider_details, 'providerdetails', 'provider_details') }}\nFROM\n    {{ get_finance_source('remit_attempt') }}\n{% if is_incremental() %}\n    -- recalculate latest day's data + previous\n    WHERE attemptedat >= {{ window_back_full_days('_dbt_max_partition') }}\n{% endif %}", "language": "sql", "refs": [], "sources": [["finance", "remit_attempt"]], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.flatten_json_fields", "macro.promise_dwh.get_finance_source", "macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": ["source.promise_dwh.finance.remit_attempt"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/remit_attempt.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    id\n    , amount\n    , attemptedat AS attempted_at\n    , declinemessage AS decline_message\n    , jurisdictionid AS jurisdiction_id\n    , provider\n    , remittedat AS remitted_at\n    , status\n    \n    , JSON_VALUE(providerdetails, '$.dataSource') as provider_details_dataSource\n    , JSON_VALUE(providerdetails, '$.internalNotes') as provider_details_internalNotes\n    , JSON_VALUE(providerdetails, '$.processor') as provider_details_processor\n    , JSON_VALUE(providerdetails, '$.processorRemitId') as provider_details_processorRemitId\n    , JSON_VALUE(providerdetails, '$.provider') as provider_details_provider\n    , JSON_VALUE(providerdetails, '$.remittedAt') as provider_details_remittedAt\n    , JSON_VALUE(providerdetails, '$.stripeAccountId') as provider_details_stripeAccountId\n    , JSON_VALUE(providerdetails, '$.stripePayoutId') as provider_details_stripePayoutId\n    , JSON_VALUE(providerdetails, '$.stripeTransferId') as provider_details_stripeTransferId\n\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`remitattempt`\n\n\n    -- recalculate latest day's data + previous\n    WHERE attemptedat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.payment_method": {"database": "analytics-prod-328313", "schema": "finance", "name": "payment_method", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/payment_method.sql", "original_file_path": "models/finance/payment_method.sql", "unique_id": "model.promise_dwh.payment_method", "fqn": ["promise_dwh", "finance", "payment_method"], "alias": "payment_method", "checksum": {"name": "sha256", "checksum": "4cb932137299d11120f7c7fe4b9467cc084eb3a7538ee266b52c2d855dc5c357"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/finance/finance.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": "utility_upload_trigger", "schema": "finance", "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.960644, "relation_name": "`analytics-prod-328313`.`finance`.`payment_method`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"created_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\n{% set provider_details = ['dataSource', 'humanReadablePaymentMethod', 'provider', 'stripeBankAccountId',\n                           'stripeCustomerId', 'stripePaymentMethodId' ] %}\n\nSELECT\n    id\n    , active\n    , clientid AS client_id\n    , createdat AS created_at\n    , jurisdictionid AS jurisdiction_id\n    , provider\n    {{ flatten_json_fields(provider_details, 'providerdetails', 'provider_details') }}\nFROM\n    {{ get_finance_source('payment_method') }}\n{% if is_incremental() %}\n    -- recalculate latest day's data + previous\n    WHERE createdat >= {{ window_back_full_days('_dbt_max_partition') }}\n{% endif %}", "language": "sql", "refs": [], "sources": [["finance", "payment_method"]], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.flatten_json_fields", "macro.promise_dwh.get_finance_source", "macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": ["source.promise_dwh.finance.payment_method"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/payment_method.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    id\n    , active\n    , clientid AS client_id\n    , createdat AS created_at\n    , jurisdictionid AS jurisdiction_id\n    , provider\n    \n    , JSON_VALUE(providerdetails, '$.dataSource') as provider_details_dataSource\n    , JSON_VALUE(providerdetails, '$.humanReadablePaymentMethod') as provider_details_humanReadablePaymentMethod\n    , JSON_VALUE(providerdetails, '$.provider') as provider_details_provider\n    , JSON_VALUE(providerdetails, '$.stripeBankAccountId') as provider_details_stripeBankAccountId\n    , JSON_VALUE(providerdetails, '$.stripeCustomerId') as provider_details_stripeCustomerId\n    , JSON_VALUE(providerdetails, '$.stripePaymentMethodId') as provider_details_stripePaymentMethodId\n\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`paymentmethod`\n\n\n    -- recalculate latest day's data + previous\n    WHERE createdat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.upcoming_payments_client_level": {"database": "analytics-prod-328313", "schema": "finance", "name": "upcoming_payments_client_level", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/upcoming_payments_client_level.sql", "original_file_path": "models/finance/upcoming_payments_client_level.sql", "unique_id": "model.promise_dwh.upcoming_payments_client_level", "fqn": ["promise_dwh", "finance", "upcoming_payments_client_level"], "alias": "upcoming_payments_client_level", "checksum": {"name": "sha256", "checksum": "888592149801ef245d13a1bb96595bbe5e37e3666c8c31650b4005a7b35bcfd1"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "utility_upload_trigger", "schema": "finance"}, "created_at": 1715379616.3975139, "relation_name": "`analytics-prod-328313`.`finance`.`upcoming_payments_client_level`", "raw_code": "SELECT\n    jurisdiction,\n    client_id,\n    jurisdiction_x_client_id,\n    COUNT(*) AS num_scheduled_payments,\n    AVG(amount) AS avg_scheduled_amount\nFROM\n    {{ ref('upcoming_payments') }}\nGROUP BY ALL", "language": "sql", "refs": [{"name": "upcoming_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.promise_dwh.upcoming_payments"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/upcoming_payments_client_level.sql", "compiled": true, "compiled_code": "SELECT\n    jurisdiction,\n    client_id,\n    jurisdiction_x_client_id,\n    COUNT(*) AS num_scheduled_payments,\n    AVG(amount) AS avg_scheduled_amount\nFROM\n    `analytics-prod-328313`.`finance`.`upcoming_payments`\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.finance_api_request": {"database": "analytics-prod-328313", "schema": "finance", "name": "finance_api_request", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/finance_api_request.sql", "original_file_path": "models/finance/finance_api_request.sql", "unique_id": "model.promise_dwh.finance_api_request", "fqn": ["promise_dwh", "finance", "finance_api_request"], "alias": "finance_api_request", "checksum": {"name": "sha256", "checksum": "7d488cd5a0f468657b77ed0e138df6657ccae33866275f6b27ba904a8a855094"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "requested_at", "data_type": "timestamp", "granularity": "day"}}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": "utility_upload_trigger", "schema": "finance", "partition_by": {"field": "requested_at", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.3988469, "relation_name": "`analytics-prod-328313`.`finance`.`finance_api_request`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"requested_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\nSELECT\n    id\n    , clientid AS client_id\n    , failuremessage AS failure_message\n    , failuretype AS failure_type\n    , humanreadablereference AS human_readable_reference\n    , jurisdictionid AS jurisdiction_id\n    , paymentattemptid AS payment_attempt_id\n    , payoutattemptid AS payout_attempt_id\n    , planid AS plan_id\n    , refundattemptid AS refund_attempt_id\n    , remitattemptid AS remit_attempt_id\n    , requestedat AS requested_at\n    , requesttype AS request_type\n    , status\nFROM\n    {{ get_finance_source('api_request') }}\nWHERE\n    requesttype <> 'ProviderHealthCheck'\n    {% if is_incremental() %}\n        -- recalculate latest day's data + previous\n        AND requestedat >= {{ window_back_full_days('_dbt_max_partition', 10) }}\n    {% endif %}", "language": "sql", "refs": [], "sources": [["finance", "api_request"]], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.get_finance_source", "macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": ["source.promise_dwh.finance.api_request"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/finance_api_request.sql", "compiled": true, "compiled_code": "\nSELECT\n    id\n    , clientid AS client_id\n    , failuremessage AS failure_message\n    , failuretype AS failure_type\n    , humanreadablereference AS human_readable_reference\n    , jurisdictionid AS jurisdiction_id\n    , paymentattemptid AS payment_attempt_id\n    , payoutattemptid AS payout_attempt_id\n    , planid AS plan_id\n    , refundattemptid AS refund_attempt_id\n    , remitattemptid AS remit_attempt_id\n    , requestedat AS requested_at\n    , requesttype AS request_type\n    , status\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`financeapirequest`\n\nWHERE\n    requesttype <> 'ProviderHealthCheck'\n    \n        -- recalculate latest day's data + previous\n        AND requestedat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 10 DAY)\n\n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.sse_ids": {"database": "analytics-prod-328313", "schema": "finance", "name": "sse_ids", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/sse_ids.sql", "original_file_path": "models/finance/sse_ids.sql", "unique_id": "model.promise_dwh.sse_ids", "fqn": ["promise_dwh", "finance", "sse_ids"], "alias": "sse_ids", "checksum": {"name": "sha256", "checksum": "2cf0e9617f731c5fae375bc393d3d839be0840f4cc3e32c264ee1f618f790a0e"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "utility_upload_trigger", "schema": "finance"}, "created_at": 1715379616.4026618, "relation_name": "`analytics-prod-328313`.`finance`.`sse_ids`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\nSELECT\n    event_id,\n    acct_identifier_jurisdiction_id AS jurisdiction_id,\n    jurisdiction AS jurisdiction_clean,\n    MIN(acct_identifier_client_id) AS acct_identifier_client_id,\n    MIN(acct_identifier_provider) AS acct_identifier_provider,\n    MIN(acct_identifier_payment_id) AS acct_identifier_payment_id,\n    MIN(acct_identifier_obligation_id) AS acct_identifier_obligation_id,\n    CONCAT(jurisdiction, MIN(acct_identifier_client_id)) AS jurisdiction_x_client_id\nFROM {{ ref('single_sided_entry') }}\nGROUP BY 1, 2, 3", "language": "sql", "refs": [{"name": "single_sided_entry", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.promise_dwh.single_sided_entry"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/sse_ids.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    event_id,\n    acct_identifier_jurisdiction_id AS jurisdiction_id,\n    jurisdiction AS jurisdiction_clean,\n    MIN(acct_identifier_client_id) AS acct_identifier_client_id,\n    MIN(acct_identifier_provider) AS acct_identifier_provider,\n    MIN(acct_identifier_payment_id) AS acct_identifier_payment_id,\n    MIN(acct_identifier_obligation_id) AS acct_identifier_obligation_id,\n    CONCAT(jurisdiction, MIN(acct_identifier_client_id)) AS jurisdiction_x_client_id\nFROM `analytics-prod-328313`.`finance`.`single_sided_entry`\nGROUP BY 1, 2, 3", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.twilio_message": {"database": "analytics-prod-328313", "schema": "prod", "name": "twilio_message", "resource_type": "model", "package_name": "promise_dwh", "path": "twilio/twilio_message.sql", "original_file_path": "models/twilio/twilio_message.sql", "unique_id": "model.promise_dwh.twilio_message", "fqn": ["promise_dwh", "twilio", "twilio_message"], "alias": "twilio_message", "checksum": {"name": "sha256", "checksum": "f83af7750cb9a974cff57fc856c86c88ace979f69a3aec021b3963dd040ec641"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/twilio/tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.9880981, "relation_name": "`analytics-prod-328313`.`prod`.`twilio_message`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"created_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\nSELECT\n    id,\n    account_id,\n    created_at,\n    date_sent AS sent_at,\n    `from` AS from_number,\n    SHA256(REGEXP_EXTRACT(`to`, r'[2-9]{1}[0-9]{9}$')) AS to_hashed,\n    direction,\n    error_code,\n    error_message,\n    num_media,\n    num_segments,\n    price,\n    price_unit,\n    `status`,\n    updated_at\nFROM\n    `analytics-dev-328216.twilio_traffic.message`\n{% if is_incremental() %}\n    -- recalculate latest day's data + previous\n    WHERE created_at >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n{% endif %}\nUNION ALL\nSELECT\n    id,\n    account_id,\n    created_at,\n    date_sent AS sent_at,\n    `from` AS from_number,\n    SHA256(REGEXP_EXTRACT(`to`, r'[2-9]{1}[0-9]{9}$')) AS to_hashed,\n    direction,\n    error_code,\n    error_message,\n    num_media,\n    num_segments,\n    price,\n    price_unit,\n    `status`,\n    updated_at\nFROM\n    `analytics-dev-328216.twilio.message`\n{% if is_incremental() %}\n    -- recalculate latest day's data + previous\n    WHERE created_at >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/twilio/twilio_message.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    id,\n    account_id,\n    created_at,\n    date_sent AS sent_at,\n    `from` AS from_number,\n    SHA256(REGEXP_EXTRACT(`to`, r'[2-9]{1}[0-9]{9}$')) AS to_hashed,\n    direction,\n    error_code,\n    error_message,\n    num_media,\n    num_segments,\n    price,\n    price_unit,\n    `status`,\n    updated_at\nFROM\n    `analytics-dev-328216.twilio_traffic.message`\n\n    -- recalculate latest day's data + previous\n    WHERE created_at >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\nUNION ALL\nSELECT\n    id,\n    account_id,\n    created_at,\n    date_sent AS sent_at,\n    `from` AS from_number,\n    SHA256(REGEXP_EXTRACT(`to`, r'[2-9]{1}[0-9]{9}$')) AS to_hashed,\n    direction,\n    error_code,\n    error_message,\n    num_media,\n    num_segments,\n    price,\n    price_unit,\n    `status`,\n    updated_at\nFROM\n    `analytics-dev-328216.twilio.message`\n\n    -- recalculate latest day's data + previous\n    WHERE created_at >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.balance_transaction": {"database": "analytics-prod-328313", "schema": "stripe", "name": "balance_transaction", "resource_type": "model", "package_name": "promise_dwh", "path": "stripe/balance_transaction.sql", "original_file_path": "models/stripe/balance_transaction.sql", "unique_id": "model.promise_dwh.balance_transaction", "fqn": ["promise_dwh", "stripe", "balance_transaction"], "alias": "balance_transaction", "checksum": {"name": "sha256", "checksum": "443283f644f738eceb7a690e3cc5aeac52c6265a46a261474c55d76492a9df2b"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "created", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/stripe/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "stripe", "partition_by": {"field": "created", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.991091, "relation_name": "`analytics-prod-328313`.`stripe`.`balance_transaction`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"created\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\n{%- set stripe_accounts =  ['stripe', 'stripe_private_utilities'] -%}\n\n{%- for acct in stripe_accounts -%}\n    -- Get rows from {{ this.name }} for account {{ acct }}\n    SELECT\n        id\n        , connected_account_id\n        {% if stripe_accounts == 'stripe' %}\n    , payout_id\n  {% else %}\n            , NULL AS payout_id\n        {% endif %}\n        , amount\n        , available_on\n        , created\n        , currency\n        , description\n        , exchange_rate\n        , fee\n        , net\n        , source\n        , status\n        , type\n        , '{{ acct }}' AS source_account\n    FROM\n        `analytics-dev-328216`.`{{ acct }}`.`{{ this.name }}`\n    {% if is_incremental() %}\n        -- recalculate latest day's data + previous\n        WHERE created >= {{ window_back_full_days('_dbt_max_partition') }}\n    {%- endif -%}\n\n    {%- if not loop.last -%} \n        UNION ALL\n    {% endif %}\n\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/stripe/balance_transaction.sql", "compiled": true, "compiled_code": "-- Get rows from balance_transaction for account stripe\n    SELECT\n        id\n        , connected_account_id\n        \n            , NULL AS payout_id\n        \n        , amount\n        , available_on\n        , created\n        , currency\n        , description\n        , exchange_rate\n        , fee\n        , net\n        , source\n        , status\n        , type\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`balance_transaction`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\nUNION ALL\n    -- Get rows from balance_transaction for account stripe_private_utilities\n    SELECT\n        id\n        , connected_account_id\n        \n            , NULL AS payout_id\n        \n        , amount\n        , available_on\n        , created\n        , currency\n        , description\n        , exchange_rate\n        , fee\n        , net\n        , source\n        , status\n        , type\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`balance_transaction`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.dispute_balance_transaction": {"database": "analytics-prod-328313", "schema": "stripe", "name": "dispute_balance_transaction", "resource_type": "model", "package_name": "promise_dwh", "path": "stripe/dispute_balance_transaction.sql", "original_file_path": "models/stripe/dispute_balance_transaction.sql", "unique_id": "model.promise_dwh.dispute_balance_transaction", "fqn": ["promise_dwh", "stripe", "dispute_balance_transaction"], "alias": "dispute_balance_transaction", "checksum": {"name": "sha256", "checksum": "ee5c1c8b0dd4ed255bb6bbf030081007f20e1f6d9bae244266052c911386c2bd"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/stripe/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe"}, "created_at": 1715379616.99174, "relation_name": "`analytics-prod-328313`.`stripe`.`dispute_balance_transaction`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n\n{% set stripe_accounts =  ['stripe', 'stripe_private_utilities'] %}\n\n{% for acct in stripe_accounts %}\n    -- Get rows for {{ this.name }} for account {{ acct }}\n    SELECT\n        balance_transaction_id\n        , dispute_id\n        , '{{ acct }}' AS source_account\n    FROM\n        `analytics-dev-328216`.`{{ acct }}`.`{{ this.name }}`\n    {% if not loop.last %}\n        UNION ALL\n    {% endif %}\n\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/stripe/dispute_balance_transaction.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n    -- Get rows for dispute_balance_transaction for account stripe\n    SELECT\n        balance_transaction_id\n        , dispute_id\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`dispute_balance_transaction`\n    \n        UNION ALL\n    \n    -- Get rows for dispute_balance_transaction for account stripe_private_utilities\n    SELECT\n        balance_transaction_id\n        , dispute_id\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`dispute_balance_transaction`\n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.card": {"database": "analytics-prod-328313", "schema": "stripe", "name": "card", "resource_type": "model", "package_name": "promise_dwh", "path": "stripe/card.sql", "original_file_path": "models/stripe/card.sql", "unique_id": "model.promise_dwh.card", "fqn": ["promise_dwh", "stripe", "card"], "alias": "card", "checksum": {"name": "sha256", "checksum": "823cf19ff5cfbc5b9a951d9bd03250ad10f20acc81296fe133ba4ebf46820c59"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe"}, "created_at": 1715379616.416567, "relation_name": "`analytics-prod-328313`.`stripe`.`card`", "raw_code": "{%- set stripe_accounts =  ['stripe', 'stripe_private_utilities'] -%}\n\n{%- for acct in stripe_accounts -%}\n    -- Get rows from {{ this.name }} for account {{ acct }}\n    SELECT\n        id\n        --,_fivetran_synced\n        , account_id\n        --, address_city\n        --, address_country\n        --, address_line_1\n        --, address_line_1_check\n        --, address_line_2\n        --, address_state\n        --, address_zip\n        --, address_zip_check\n        , brand\n        , connected_account_id\n        , country\n        --, created\n        --, currency\n        , customer_id\n        --, cvc_check\n        --, dynamic_last_4\n        , exp_month\n        , exp_year\n        --, fingerprint\n        , funding\n        , is_deleted\n        --, last_4\n        --, metadata\n        --, name\n        , network\n        --, recipient\n        --, three_d_secure_usage_supported\n        --,  tokenization_method\n        , wallet_type\n        , '{{ acct }}' AS source_account\n    FROM\n        `analytics-dev-328216`.`{{ acct }}`.`{{ this.name }}`\n    {% if not loop.last %}\n        UNION ALL\n    {% endif %}\n\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/stripe/card.sql", "compiled": true, "compiled_code": "-- Get rows from card for account stripe\n    SELECT\n        id\n        --,_fivetran_synced\n        , account_id\n        --, address_city\n        --, address_country\n        --, address_line_1\n        --, address_line_1_check\n        --, address_line_2\n        --, address_state\n        --, address_zip\n        --, address_zip_check\n        , brand\n        , connected_account_id\n        , country\n        --, created\n        --, currency\n        , customer_id\n        --, cvc_check\n        --, dynamic_last_4\n        , exp_month\n        , exp_year\n        --, fingerprint\n        , funding\n        , is_deleted\n        --, last_4\n        --, metadata\n        --, name\n        , network\n        --, recipient\n        --, three_d_secure_usage_supported\n        --,  tokenization_method\n        , wallet_type\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`card`\n    \n        UNION ALL\n    -- Get rows from card for account stripe_private_utilities\n    SELECT\n        id\n        --,_fivetran_synced\n        , account_id\n        --, address_city\n        --, address_country\n        --, address_line_1\n        --, address_line_1_check\n        --, address_line_2\n        --, address_state\n        --, address_zip\n        --, address_zip_check\n        , brand\n        , connected_account_id\n        , country\n        --, created\n        --, currency\n        , customer_id\n        --, cvc_check\n        --, dynamic_last_4\n        , exp_month\n        , exp_year\n        --, fingerprint\n        , funding\n        , is_deleted\n        --, last_4\n        --, metadata\n        --, name\n        , network\n        --, recipient\n        --, three_d_secure_usage_supported\n        --,  tokenization_method\n        , wallet_type\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`card`\n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.refund": {"database": "analytics-prod-328313", "schema": "stripe", "name": "refund", "resource_type": "model", "package_name": "promise_dwh", "path": "stripe/refund.sql", "original_file_path": "models/stripe/refund.sql", "unique_id": "model.promise_dwh.refund", "fqn": ["promise_dwh", "stripe", "refund"], "alias": "refund", "checksum": {"name": "sha256", "checksum": "cca6beaeb74615e477b8042fe85b7c2551a8ac1108f17279f62f94c44159275e"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "created", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/stripe/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "stripe", "partition_by": {"field": "created", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.9921532, "relation_name": "`analytics-prod-328313`.`stripe`.`refund`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"created\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\n{%- set stripe_accounts =  ['stripe', 'stripe_private_utilities'] -%}\n\n\n{%- for acct in stripe_accounts -%}\n    -- Get rows for {{ this.name }} for account {{ acct }}\n    SELECT\n        id\n        , balance_transaction_id\n        -- , connected_account_id\n        , charge_id\n        , failure_balance_transaction_id\n        , payment_intent_id\n        , amount\n        , created\n        , currency\n        , description\n        , failure_reason\n        -- , metadata\n        , reason\n        -- , receipt_number\n        , status\n        , '{{ acct }}' AS source_account\n    FROM\n        `analytics-dev-328216`.`{{ acct }}`.`{{ this.name }}`\n    {%- if is_incremental() -%}\n        -- recalculate latest day's data + previous\n        WHERE created >= {{ window_back_full_days('_dbt_max_partition') }}\n    {%- endif -%}\n\n    {%- if not loop.last -%} \n        UNION ALL\n    {% endif %}\n\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/stripe/refund.sql", "compiled": true, "compiled_code": "-- Get rows for refund for account stripe\n    SELECT\n        id\n        , balance_transaction_id\n        -- , connected_account_id\n        , charge_id\n        , failure_balance_transaction_id\n        , payment_intent_id\n        , amount\n        , created\n        , currency\n        , description\n        , failure_reason\n        -- , metadata\n        , reason\n        -- , receipt_number\n        , status\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`refund`-- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\nUNION ALL\n    -- Get rows for refund for account stripe_private_utilities\n    SELECT\n        id\n        , balance_transaction_id\n        -- , connected_account_id\n        , charge_id\n        , failure_balance_transaction_id\n        , payment_intent_id\n        , amount\n        , created\n        , currency\n        , description\n        , failure_reason\n        -- , metadata\n        , reason\n        -- , receipt_number\n        , status\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`refund`-- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.transaction_fee_detail": {"database": "analytics-prod-328313", "schema": "stripe", "name": "transaction_fee_detail", "resource_type": "model", "package_name": "promise_dwh", "path": "stripe/transaction_fee_detail.sql", "original_file_path": "models/stripe/transaction_fee_detail.sql", "unique_id": "model.promise_dwh.transaction_fee_detail", "fqn": ["promise_dwh", "stripe", "transaction_fee_detail"], "alias": "transaction_fee_detail", "checksum": {"name": "sha256", "checksum": "432bfabb1895247efa52e40b0b44b57608275385fe5009e4f7eca5818ed521c3"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "incurred_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/stripe/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "stripe", "partition_by": {"field": "incurred_at", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.992353, "relation_name": "`analytics-prod-328313`.`stripe`.`transaction_fee_detail`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"incurred_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\n{%- set stripe_accounts =  ['stripe', 'stripe_private_utilities'] -%}\n\n{%- for acct in stripe_accounts -%}\n    -- Get rows for {{ this.name }} for account {{ acct }}\n    SELECT\n        incurred_at\n        , event_type\n        , charge_id\n        , refund_id\n        , dispute_id\n        , request_id\n        -- , destination_id\n        , customer_id\n        , card_brand\n        , card_funding\n        , card_country\n        , card_present\n        , fee_category\n        , fee_name\n        , fee_currency\n        , plan_name\n        , additional_explanation\n        , variable_rate\n        , fixed_per_item_amount\n        , variable_volume_amount\n        , fixed_per_item_count\n        , min_amount\n        , max_amount\n        , subtotal_amount\n        , tax_rate\n        , tax_amount\n        , total_amount\n        , fx_rate\n        , billing_currency\n        , billing_amount\n        , balance_transaction_id\n        , balance_debited_at\n        , attribution_start_date\n        , attribution_end_date\n        , fee_id\n        , network\n        , bin\n        , issuing_bank\n        -- , connected_account_id\n        -- , connected_account_name\n        -- , connected_account_country\n        , '{{ acct }}' AS source_account\n    FROM\n        `analytics-dev-328216`.`{{ acct }}`.`{{ this.name }}`\n    {% if is_incremental() %}\n        -- recalculate latest day's data + previous\n        WHERE incurred_at >= {{ window_back_full_days('_dbt_max_partition') }}\n    {%- endif -%}\n\n    {%- if not loop.last -%} \n        UNION ALL\n    {% endif %}\n\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/stripe/transaction_fee_detail.sql", "compiled": true, "compiled_code": "-- Get rows for transaction_fee_detail for account stripe\n    SELECT\n        incurred_at\n        , event_type\n        , charge_id\n        , refund_id\n        , dispute_id\n        , request_id\n        -- , destination_id\n        , customer_id\n        , card_brand\n        , card_funding\n        , card_country\n        , card_present\n        , fee_category\n        , fee_name\n        , fee_currency\n        , plan_name\n        , additional_explanation\n        , variable_rate\n        , fixed_per_item_amount\n        , variable_volume_amount\n        , fixed_per_item_count\n        , min_amount\n        , max_amount\n        , subtotal_amount\n        , tax_rate\n        , tax_amount\n        , total_amount\n        , fx_rate\n        , billing_currency\n        , billing_amount\n        , balance_transaction_id\n        , balance_debited_at\n        , attribution_start_date\n        , attribution_end_date\n        , fee_id\n        , network\n        , bin\n        , issuing_bank\n        -- , connected_account_id\n        -- , connected_account_name\n        -- , connected_account_country\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`transaction_fee_detail`\n    \n        -- recalculate latest day's data + previous\n        WHERE incurred_at >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\nUNION ALL\n    -- Get rows for transaction_fee_detail for account stripe_private_utilities\n    SELECT\n        incurred_at\n        , event_type\n        , charge_id\n        , refund_id\n        , dispute_id\n        , request_id\n        -- , destination_id\n        , customer_id\n        , card_brand\n        , card_funding\n        , card_country\n        , card_present\n        , fee_category\n        , fee_name\n        , fee_currency\n        , plan_name\n        , additional_explanation\n        , variable_rate\n        , fixed_per_item_amount\n        , variable_volume_amount\n        , fixed_per_item_count\n        , min_amount\n        , max_amount\n        , subtotal_amount\n        , tax_rate\n        , tax_amount\n        , total_amount\n        , fx_rate\n        , billing_currency\n        , billing_amount\n        , balance_transaction_id\n        , balance_debited_at\n        , attribution_start_date\n        , attribution_end_date\n        , fee_id\n        , network\n        , bin\n        , issuing_bank\n        -- , connected_account_id\n        -- , connected_account_name\n        -- , connected_account_country\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`transaction_fee_detail`\n    \n        -- recalculate latest day's data + previous\n        WHERE incurred_at >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.payment_intent": {"database": "analytics-prod-328313", "schema": "stripe", "name": "payment_intent", "resource_type": "model", "package_name": "promise_dwh", "path": "stripe/payment_intent.sql", "original_file_path": "models/stripe/payment_intent.sql", "unique_id": "model.promise_dwh.payment_intent", "fqn": ["promise_dwh", "stripe", "payment_intent"], "alias": "payment_intent", "checksum": {"name": "sha256", "checksum": "60341600ce2d8343312f6e658c7aafc4a53a27f14a1784c3a82f33cfb2edea54"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "created", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "stripe", "partition_by": {"field": "created", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.427891, "relation_name": "`analytics-prod-328313`.`stripe`.`payment_intent`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"created\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\n\n{% set stripe_accounts =  ['stripe', 'stripe_private_utilities'] %}\n\n{%- for acct in stripe_accounts -%}\n    -- Get rows for {{ this.name }} for account {{ acct }}\n    SELECT\n        id\n        , customer_id\n        -- , connected_account_id \n        , last_payment_error_charge_id\n        -- , last_payment_error_source_id \u27a4 SOURCE\n        -- , on_behalf_of\n        -- , source_id\n        -- , transfer_data_destination\n        , amount\n        , amount_capturable\n        , amount_received\n        -- , application\n        -- , application_fee_amount\n        , canceled_at\n        , cancellation_reason\n        , capture_method\n        , confirmation_method\n        , created\n        , currency\n        , description\n        , livemode\n        -- , metadata\n        , payment_method_types\n        -- , receipt_email\n        , statement_descriptor\n        , status\n        -- , transfer_group\n        , last_payment_error_code\n        , last_payment_error_decline_code\n        , last_payment_error_doc_url\n        , last_payment_error_message\n        , last_payment_error_param\n        , last_payment_error_source_id\n        , last_payment_error_type\n        , '{{ acct }}' AS source_account\n    FROM\n        `analytics-dev-328216`.`{{ acct }}`.`{{ this.name }}`\n    {% if is_incremental() %}\n        -- recalculate latest day's data + previous\n        WHERE created >= {{ window_back_full_days('_dbt_max_partition') }}\n    {%- endif -%}\n\n    {%- if not loop.last -%} \n        UNION ALL\n    {% endif %}\n\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/stripe/payment_intent.sql", "compiled": true, "compiled_code": "\n\n\n-- Get rows for payment_intent for account stripe\n    SELECT\n        id\n        , customer_id\n        -- , connected_account_id \n        , last_payment_error_charge_id\n        -- , last_payment_error_source_id \u27a4 SOURCE\n        -- , on_behalf_of\n        -- , source_id\n        -- , transfer_data_destination\n        , amount\n        , amount_capturable\n        , amount_received\n        -- , application\n        -- , application_fee_amount\n        , canceled_at\n        , cancellation_reason\n        , capture_method\n        , confirmation_method\n        , created\n        , currency\n        , description\n        , livemode\n        -- , metadata\n        , payment_method_types\n        -- , receipt_email\n        , statement_descriptor\n        , status\n        -- , transfer_group\n        , last_payment_error_code\n        , last_payment_error_decline_code\n        , last_payment_error_doc_url\n        , last_payment_error_message\n        , last_payment_error_param\n        , last_payment_error_source_id\n        , last_payment_error_type\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`payment_intent`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\nUNION ALL\n    -- Get rows for payment_intent for account stripe_private_utilities\n    SELECT\n        id\n        , customer_id\n        -- , connected_account_id \n        , last_payment_error_charge_id\n        -- , last_payment_error_source_id \u27a4 SOURCE\n        -- , on_behalf_of\n        -- , source_id\n        -- , transfer_data_destination\n        , amount\n        , amount_capturable\n        , amount_received\n        -- , application\n        -- , application_fee_amount\n        , canceled_at\n        , cancellation_reason\n        , capture_method\n        , confirmation_method\n        , created\n        , currency\n        , description\n        , livemode\n        -- , metadata\n        , payment_method_types\n        -- , receipt_email\n        , statement_descriptor\n        , status\n        -- , transfer_group\n        , last_payment_error_code\n        , last_payment_error_decline_code\n        , last_payment_error_doc_url\n        , last_payment_error_message\n        , last_payment_error_param\n        , last_payment_error_source_id\n        , last_payment_error_type\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`payment_intent`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.charge": {"database": "analytics-prod-328313", "schema": "stripe", "name": "charge", "resource_type": "model", "package_name": "promise_dwh", "path": "stripe/charge.sql", "original_file_path": "models/stripe/charge.sql", "unique_id": "model.promise_dwh.charge", "fqn": ["promise_dwh", "stripe", "charge"], "alias": "charge", "checksum": {"name": "sha256", "checksum": "fbb00a2b3d97037c63f3a6030427f338097ce1ec65ec6d6eaaa7d0e71b353c31"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "created", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/stripe/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "stripe", "partition_by": {"field": "created", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite"}, "created_at": 1715379616.991316, "relation_name": "`analytics-prod-328313`.`stripe`.`charge`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"created\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite'\n  )\n}}\n\n{%- set stripe_accounts =  ['stripe', 'stripe_private_utilities'] -%}\n\n{%- for acct in stripe_accounts -%}\n    -- Get rows for {{ this.name }} for account {{ acct }}\n    SELECT\n        id\n        , balance_transaction_id\n        , card_id\n        , bank_account_id\n        -- , connected_account_id\n        , customer_id\n        -- , destination\n        -- , invoice_id\n        -- , on_behalf_of\n        , payment_intent_id\n        , payment_method_id\n        -- , source_transfer\n        -- , transfer_id\n        -- , transfer_data_destination\n        -- , application\n        , amount\n        , amount_refunded\n        -- , application_fee_amount\n        -- , billing_detail_name\n        -- , billing_detail_address_line_1\n        -- , billing_detail_address_line_1\n        , billing_detail_address_city\n        , billing_detail_address_state\n        , billing_detail_address_postal_code\n        , billing_detail_address_country\n        -- , billing_detail_email\n        -- , billing_detail_phone\n        , calculated_statement_descriptor\n        , captured\n        , created\n        , currency\n        , description\n        , failure_code\n        , failure_message\n        , fraud_details_stripe_report\n        , fraud_details_user_report\n        , livemode\n        -- , metadata\n        , paid\n        -- , receipt_email\n        -- , receipt_number\n        -- , receipt_url\n        , refunded\n        -- , source_id\n        , statement_descriptor\n        , status\n        -- , transfer_data_destination\n        -- , transfer_group\n        , outcome_network_status\n        , outcome_reason\n        , outcome_risk_level\n        , outcome_risk_score\n        , outcome_seller_message\n        , outcome_type\n        -- , shipping_address_*\n        , '{{ acct }}' AS source_account\n    FROM\n        `analytics-dev-328216`.`{{ acct }}`.`{{ this.name }}`\n    {% if is_incremental() %}\n        -- recalculate latest day's data + previous\n        WHERE created >= {{ window_back_full_days('_dbt_max_partition') }}\n    {%- endif -%}\n\n    {%- if not loop.last -%} \n        UNION ALL\n    {% endif %}\n\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/stripe/charge.sql", "compiled": true, "compiled_code": "-- Get rows for charge for account stripe\n    SELECT\n        id\n        , balance_transaction_id\n        , card_id\n        , bank_account_id\n        -- , connected_account_id\n        , customer_id\n        -- , destination\n        -- , invoice_id\n        -- , on_behalf_of\n        , payment_intent_id\n        , payment_method_id\n        -- , source_transfer\n        -- , transfer_id\n        -- , transfer_data_destination\n        -- , application\n        , amount\n        , amount_refunded\n        -- , application_fee_amount\n        -- , billing_detail_name\n        -- , billing_detail_address_line_1\n        -- , billing_detail_address_line_1\n        , billing_detail_address_city\n        , billing_detail_address_state\n        , billing_detail_address_postal_code\n        , billing_detail_address_country\n        -- , billing_detail_email\n        -- , billing_detail_phone\n        , calculated_statement_descriptor\n        , captured\n        , created\n        , currency\n        , description\n        , failure_code\n        , failure_message\n        , fraud_details_stripe_report\n        , fraud_details_user_report\n        , livemode\n        -- , metadata\n        , paid\n        -- , receipt_email\n        -- , receipt_number\n        -- , receipt_url\n        , refunded\n        -- , source_id\n        , statement_descriptor\n        , status\n        -- , transfer_data_destination\n        -- , transfer_group\n        , outcome_network_status\n        , outcome_reason\n        , outcome_risk_level\n        , outcome_risk_score\n        , outcome_seller_message\n        , outcome_type\n        -- , shipping_address_*\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`charge`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\nUNION ALL\n    -- Get rows for charge for account stripe_private_utilities\n    SELECT\n        id\n        , balance_transaction_id\n        , card_id\n        , bank_account_id\n        -- , connected_account_id\n        , customer_id\n        -- , destination\n        -- , invoice_id\n        -- , on_behalf_of\n        , payment_intent_id\n        , payment_method_id\n        -- , source_transfer\n        -- , transfer_id\n        -- , transfer_data_destination\n        -- , application\n        , amount\n        , amount_refunded\n        -- , application_fee_amount\n        -- , billing_detail_name\n        -- , billing_detail_address_line_1\n        -- , billing_detail_address_line_1\n        , billing_detail_address_city\n        , billing_detail_address_state\n        , billing_detail_address_postal_code\n        , billing_detail_address_country\n        -- , billing_detail_email\n        -- , billing_detail_phone\n        , calculated_statement_descriptor\n        , captured\n        , created\n        , currency\n        , description\n        , failure_code\n        , failure_message\n        , fraud_details_stripe_report\n        , fraud_details_user_report\n        , livemode\n        -- , metadata\n        , paid\n        -- , receipt_email\n        -- , receipt_number\n        -- , receipt_url\n        , refunded\n        -- , source_id\n        , statement_descriptor\n        , status\n        -- , transfer_data_destination\n        -- , transfer_group\n        , outcome_network_status\n        , outcome_reason\n        , outcome_risk_level\n        , outcome_risk_score\n        , outcome_seller_message\n        , outcome_type\n        -- , shipping_address_*\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`charge`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.stripe_customer": {"database": "analytics-prod-328313", "schema": "stripe", "name": "stripe_customer", "resource_type": "model", "package_name": "promise_dwh", "path": "stripe/stripe_customer.sql", "original_file_path": "models/stripe/stripe_customer.sql", "unique_id": "model.promise_dwh.stripe_customer", "fqn": ["promise_dwh", "stripe", "stripe_customer"], "alias": "customer", "checksum": {"name": "sha256", "checksum": "fe09cbf690c9fcd9a498b00316f6a141824c87db4737adabbabddeeab74e8927"}, "config": {"enabled": true, "alias": "customer", "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "created", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/stripe/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "stripe", "partition_by": {"field": "created", "data_type": "timestamp", "granularity": "day"}, "unique_key": "id", "incremental_strategy": "insert_overwrite", "alias": "customer"}, "created_at": 1715379616.991531, "relation_name": "`analytics-prod-328313`.`stripe`.`customer`", "raw_code": "{{\n  config(\n    partition_by={\n      \"field\": \"created\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    unique_key = 'id',\n    incremental_strategy = 'insert_overwrite',\n    alias='customer'\n  )\n}}\n{%- if target.name == 'dev' %}\n    {{ config(\n    enabled=false,\n    ) }}\n{% endif %}\n{%- set stripe_accounts =  ['stripe', 'stripe_private_utilities'] -%}\n{%- for acct in stripe_accounts -%}\n    -- Get rows for {{ this.name }} for account {{ acct }}\n    SELECT\n        id\n        , default_card_id\n        , bank_account_id\n        -- , source_id\n        , account_balance\n        , balance\n        , created\n        , currency\n        , delinquent\n        , description\n        -- , email\n        -- , invoice_prefix\n        -- , invoice_settings_footer\n        -- , invoice_settings_footer_default_payment_method\n        , is_deleted\n        , livemode\n        -- , metadata\n        , {{ hash_string('name') }}\n        , {{ hash_string('phone') }}\n        -- , tax_exempt\n        -- , tax_info_tax_id\n        -- , tax_info_type\n        -- , tax_info_verification_status\n        -- , tax_info_verification_verified_name\n        -- , address_line_1\n        -- , address_line_2\n        -- , address_city\n        -- , address_state\n        -- , address_postal_code\n        -- , address_country\n        -- , shipping_address_line_1\n        -- , shipping_address_line_2\n        -- , shipping_address_city\n        -- , shipping_address_state\n        -- , shipping_address_postal_code\n        -- , shipping_address_country\n        , '{{ acct }}' AS source_account\n    FROM\n        `analytics-dev-328216`.`{{ acct }}`.`{{ this.name }}`\n    {% if is_incremental() %}\n        -- recalculate latest day's data + previous\n        WHERE created >= {{ window_back_full_days('_dbt_max_partition') }}\n    {%- endif -%}\n\n    {%- if not loop.last -%} \n        UNION ALL\n    {% endif %}\n\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.hash_string", "macro.dbt.is_incremental", "macro.promise_dwh.window_back_full_days"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/stripe/stripe_customer.sql", "compiled": true, "compiled_code": "-- Get rows for customer for account stripe\n    SELECT\n        id\n        , default_card_id\n        , bank_account_id\n        -- , source_id\n        , account_balance\n        , balance\n        , created\n        , currency\n        , delinquent\n        , description\n        -- , email\n        -- , invoice_prefix\n        -- , invoice_settings_footer\n        -- , invoice_settings_footer_default_payment_method\n        , is_deleted\n        , livemode\n        -- , metadata\n        , \n    SHA256(TRIM(LOWER(name))) as name_hashed\n\n        , \n    SHA256(TRIM(LOWER(phone))) as phone_hashed\n\n        -- , tax_exempt\n        -- , tax_info_tax_id\n        -- , tax_info_type\n        -- , tax_info_verification_status\n        -- , tax_info_verification_verified_name\n        -- , address_line_1\n        -- , address_line_2\n        -- , address_city\n        -- , address_state\n        -- , address_postal_code\n        -- , address_country\n        -- , shipping_address_line_1\n        -- , shipping_address_line_2\n        -- , shipping_address_city\n        -- , shipping_address_state\n        -- , shipping_address_postal_code\n        -- , shipping_address_country\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`customer`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\nUNION ALL\n    -- Get rows for customer for account stripe_private_utilities\n    SELECT\n        id\n        , default_card_id\n        , bank_account_id\n        -- , source_id\n        , account_balance\n        , balance\n        , created\n        , currency\n        , delinquent\n        , description\n        -- , email\n        -- , invoice_prefix\n        -- , invoice_settings_footer\n        -- , invoice_settings_footer_default_payment_method\n        , is_deleted\n        , livemode\n        -- , metadata\n        , \n    SHA256(TRIM(LOWER(name))) as name_hashed\n\n        , \n    SHA256(TRIM(LOWER(phone))) as phone_hashed\n\n        -- , tax_exempt\n        -- , tax_info_tax_id\n        -- , tax_info_type\n        -- , tax_info_verification_status\n        -- , tax_info_verification_verified_name\n        -- , address_line_1\n        -- , address_line_2\n        -- , address_city\n        -- , address_state\n        -- , address_postal_code\n        -- , address_country\n        -- , shipping_address_line_1\n        -- , shipping_address_line_2\n        -- , shipping_address_city\n        -- , shipping_address_state\n        -- , shipping_address_postal_code\n        -- , shipping_address_country\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`customer`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.dispute": {"database": "analytics-prod-328313", "schema": "stripe", "name": "dispute", "resource_type": "model", "package_name": "promise_dwh", "path": "stripe/dispute.sql", "original_file_path": "models/stripe/dispute.sql", "unique_id": "model.promise_dwh.dispute", "fqn": ["promise_dwh", "stripe", "dispute"], "alias": "dispute", "checksum": {"name": "sha256", "checksum": "f5274cae8a1ed4144089e3da896125156443f791ea59dbd896383006a82d55dc"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://models/stripe/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe"}, "created_at": 1715379616.991949, "relation_name": "`analytics-prod-328313`.`stripe`.`dispute`", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n{% set stripe_accounts =  ['stripe', 'stripe_private_utilities'] %}\n\n{% for acct in stripe_accounts %}\n-- Get rows from {{ this.name }} for account {{ acct }}\n    SELECT\n        id\n        , _fivetran_synced\n        , amount\n        , balance_transaction\n        , charge_id\n        , connected_account_id\n        , created\n        , currency\n        , evidence_access_activity_log\n        , evidence_billing_address\n        , evidence_cancellation_policy\n        , evidence_cancellation_policy_disclosure\n        , evidence_cancellation_rebuttal\n        , evidence_customer_communication\n        , evidence_customer_email_address\n        , evidence_customer_name\n        , evidence_customer_purchase_ip\n        , evidence_customer_signature\n        , evidence_details_due_by\n        , evidence_details_has_evidence\n        , evidence_details_past_due\n        , evidence_details_submission_count\n        , evidence_duplicate_charge_documentation\n        , evidence_duplicate_charge_explanation\n        , evidence_duplicate_charge_id\n        , evidence_product_description\n        , evidence_receipt\n        , evidence_refund_policy\n        , evidence_refund_policy_disclosure\n        , evidence_refund_refusal_explanation\n        , evidence_service_date\n        , evidence_service_documentation\n        -- , evidence_shipping_address\n        -- , evidence_shipping_carrier\n        -- , evidence_shipping_date\n        -- , evidence_shipping_documentation\n        -- , evidence_shipping_tracking_number\n        , evidence_uncategorized_file\n        , evidence_uncategorized_text\n        , is_charge_refundable\n        , livemode\n        , metadata\n        , reason\n        , status\n        , '{{ acct }}' AS source_account\n    FROM\n        `analytics-dev-328216`.`{{ acct }}`.`{{ this.name }}`\n    {% if not loop.last %}\n        UNION ALL\n    {% endif %}\n\n{%- endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/stripe/dispute.sql", "compiled": true, "compiled_code": "\n\n\n\n\n-- Get rows from dispute for account stripe\n    SELECT\n        id\n        , _fivetran_synced\n        , amount\n        , balance_transaction\n        , charge_id\n        , connected_account_id\n        , created\n        , currency\n        , evidence_access_activity_log\n        , evidence_billing_address\n        , evidence_cancellation_policy\n        , evidence_cancellation_policy_disclosure\n        , evidence_cancellation_rebuttal\n        , evidence_customer_communication\n        , evidence_customer_email_address\n        , evidence_customer_name\n        , evidence_customer_purchase_ip\n        , evidence_customer_signature\n        , evidence_details_due_by\n        , evidence_details_has_evidence\n        , evidence_details_past_due\n        , evidence_details_submission_count\n        , evidence_duplicate_charge_documentation\n        , evidence_duplicate_charge_explanation\n        , evidence_duplicate_charge_id\n        , evidence_product_description\n        , evidence_receipt\n        , evidence_refund_policy\n        , evidence_refund_policy_disclosure\n        , evidence_refund_refusal_explanation\n        , evidence_service_date\n        , evidence_service_documentation\n        -- , evidence_shipping_address\n        -- , evidence_shipping_carrier\n        -- , evidence_shipping_date\n        -- , evidence_shipping_documentation\n        -- , evidence_shipping_tracking_number\n        , evidence_uncategorized_file\n        , evidence_uncategorized_text\n        , is_charge_refundable\n        , livemode\n        , metadata\n        , reason\n        , status\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`dispute`\n    \n        UNION ALL\n    \n-- Get rows from dispute for account stripe_private_utilities\n    SELECT\n        id\n        , _fivetran_synced\n        , amount\n        , balance_transaction\n        , charge_id\n        , connected_account_id\n        , created\n        , currency\n        , evidence_access_activity_log\n        , evidence_billing_address\n        , evidence_cancellation_policy\n        , evidence_cancellation_policy_disclosure\n        , evidence_cancellation_rebuttal\n        , evidence_customer_communication\n        , evidence_customer_email_address\n        , evidence_customer_name\n        , evidence_customer_purchase_ip\n        , evidence_customer_signature\n        , evidence_details_due_by\n        , evidence_details_has_evidence\n        , evidence_details_past_due\n        , evidence_details_submission_count\n        , evidence_duplicate_charge_documentation\n        , evidence_duplicate_charge_explanation\n        , evidence_duplicate_charge_id\n        , evidence_product_description\n        , evidence_receipt\n        , evidence_refund_policy\n        , evidence_refund_policy_disclosure\n        , evidence_refund_refusal_explanation\n        , evidence_service_date\n        , evidence_service_documentation\n        -- , evidence_shipping_address\n        -- , evidence_shipping_carrier\n        -- , evidence_shipping_date\n        -- , evidence_shipping_documentation\n        -- , evidence_shipping_tracking_number\n        , evidence_uncategorized_file\n        , evidence_uncategorized_text\n        , is_charge_refundable\n        , livemode\n        , metadata\n        , reason\n        , status\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`dispute`\n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.stg__template": {"database": "analytics-prod-328313", "schema": "template_service", "name": "stg__template", "resource_type": "model", "package_name": "promise_dwh", "path": "template_service/stg__template.sql", "original_file_path": "models/template_service/stg__template.sql", "unique_id": "model.promise_dwh.stg__template", "fqn": ["promise_dwh", "template_service", "stg__template"], "alias": "stg__template", "checksum": {"name": "sha256", "checksum": "e6bc2dd5b1763499756b8d0d8c5aee983840a0e85d9979087ca21a44239e164c"}, "config": {"enabled": true, "alias": null, "schema": "template_service", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ inject_template_text() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "template_service", "pre-hook": "{{ inject_template_text() }}"}, "created_at": 1715379616.445131, "relation_name": "`analytics-prod-328313`.`template_service`.`stg__template`", "raw_code": "SELECT -- noqa\n    *\nFROM\n    EXTERNAL_QUERY(\n        \"promise-pay-api.us.templatesvc-bq-connection\",\n        \"\"\"\n        SELECT\n            CAST(id AS VARCHAR) as id,\n            channel_type,\n            created_at,\n            template_category,\n            template_name,\n            updated_at\n        FROM template.template\n        \"\"\"\n    )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.inject_template_text"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/template_service/stg__template.sql", "compiled": true, "compiled_code": "SELECT -- noqa\n    *\nFROM\n    EXTERNAL_QUERY(\n        \"promise-pay-api.us.templatesvc-bq-connection\",\n        \"\"\"\n        SELECT\n            CAST(id AS VARCHAR) as id,\n            channel_type,\n            created_at,\n            template_category,\n            template_name,\n            updated_at\n        FROM template.template\n        \"\"\"\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.template": {"database": "analytics-prod-328313", "schema": "template_service", "name": "template", "resource_type": "model", "package_name": "promise_dwh", "path": "template_service/template.sql", "original_file_path": "models/template_service/template.sql", "unique_id": "model.promise_dwh.template", "fqn": ["promise_dwh", "template_service", "template"], "alias": "template", "checksum": {"name": "sha256", "checksum": "1e090cc6d33f12c0dded79668d89f2dead634c1c254296b301073a891bfd1116"}, "config": {"enabled": true, "alias": null, "schema": "template_service", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ inject_template_text() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "template_service", "pre-hook": "{{ inject_template_text() }}"}, "created_at": 1715379616.4480588, "relation_name": "`analytics-prod-328313`.`template_service`.`template`", "raw_code": "SELECT *\nFROM\n    {{ ref(\"stg__template\") }}", "language": "sql", "refs": [{"name": "stg__template", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.inject_template_text"], "nodes": ["model.promise_dwh.stg__template"]}, "compiled_path": "target/compiled/promise_dwh/models/template_service/template.sql", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-prod-328313`.`template_service`.`stg__template`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.stg__template_version_field": {"database": "analytics-prod-328313", "schema": "template_service", "name": "stg__template_version_field", "resource_type": "model", "package_name": "promise_dwh", "path": "template_service/stg__template_version_field.sql", "original_file_path": "models/template_service/stg__template_version_field.sql", "unique_id": "model.promise_dwh.stg__template_version_field", "fqn": ["promise_dwh", "template_service", "stg__template_version_field"], "alias": "stg__template_version_field", "checksum": {"name": "sha256", "checksum": "9e7f83584e8a32a111c6378b8a89e7f4e701fb1f4af61a8ace8c48fb5bda9bd4"}, "config": {"enabled": true, "alias": null, "schema": "template_service", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ inject_template_text() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "template_service", "pre-hook": "{{ inject_template_text() }}"}, "created_at": 1715379616.4505548, "relation_name": "`analytics-prod-328313`.`template_service`.`stg__template_version_field`", "raw_code": "SELECT -- noqa\n    *\nFROM\n    EXTERNAL_QUERY(\n        \"promise-pay-api.us.templatesvc-bq-connection\",\n        \"\"\"\n        SELECT\n            CAST(id AS VARCHAR) AS id,\n            created_at,\n            field_index,\n            field_name,\n            template_version_id,\n            updated_at\n        FROM template.template_version_field;\"\"\"\n    )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.inject_template_text"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/template_service/stg__template_version_field.sql", "compiled": true, "compiled_code": "SELECT -- noqa\n    *\nFROM\n    EXTERNAL_QUERY(\n        \"promise-pay-api.us.templatesvc-bq-connection\",\n        \"\"\"\n        SELECT\n            CAST(id AS VARCHAR) AS id,\n            created_at,\n            field_index,\n            field_name,\n            template_version_id,\n            updated_at\n        FROM template.template_version_field;\"\"\"\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.template_text": {"database": "analytics-prod-328313", "schema": "template_service", "name": "template_text", "resource_type": "model", "package_name": "promise_dwh", "path": "template_service/template_text.sql", "original_file_path": "models/template_service/template_text.sql", "unique_id": "model.promise_dwh.template_text", "fqn": ["promise_dwh", "template_service", "template_text"], "alias": "template_text", "checksum": {"name": "sha256", "checksum": "5437bc514a40dd0c6f889ce615ab5d842a36a8469905c5e7e5f981b51e7db54c"}, "config": {"enabled": true, "alias": null, "schema": "template_service", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ inject_template_text() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "template_service", "pre-hook": "{{ inject_template_text() }}"}, "created_at": 1715379616.453113, "relation_name": "`analytics-prod-328313`.`template_service`.`template_text`", "raw_code": "WITH template_field_values AS (\n    SELECT\n        template_version_id,\n        ARRAY_AGG(field_name ORDER BY field_index) AS field_array\n    FROM {{ ref(\"stg__template_version_field\") }}\n    GROUP BY 1\n)\n\nSELECT\n    id AS template_version_id,\n    created_at,\n    deleted_at,\n    draft_default,\n    human_readable_reference,\n    live_default,\n    locale,\n    template_id,\n    updated_at,\n    {{ this.schema }}.insert_fields(template_text, field_array) AS template_text\nFROM\n    {{ ref(\"stg__template_version\") }} tv\nLEFT JOIN template_field_values ON template_version_id = tv.id", "language": "sql", "refs": [{"name": "stg__template_version_field", "package": null, "version": null}, {"name": "stg__template_version", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.inject_template_text"], "nodes": ["model.promise_dwh.stg__template_version_field", "model.promise_dwh.stg__template_version"]}, "compiled_path": "target/compiled/promise_dwh/models/template_service/template_text.sql", "compiled": true, "compiled_code": "WITH template_field_values AS (\n    SELECT\n        template_version_id,\n        ARRAY_AGG(field_name ORDER BY field_index) AS field_array\n    FROM `analytics-prod-328313`.`template_service`.`stg__template_version_field`\n    GROUP BY 1\n)\n\nSELECT\n    id AS template_version_id,\n    created_at,\n    deleted_at,\n    draft_default,\n    human_readable_reference,\n    live_default,\n    locale,\n    template_id,\n    updated_at,\n    template_service.insert_fields(template_text, field_array) AS template_text\nFROM\n    `analytics-prod-328313`.`template_service`.`stg__template_version` tv\nLEFT JOIN template_field_values ON template_version_id = tv.id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.stg__template_version": {"database": "analytics-prod-328313", "schema": "template_service", "name": "stg__template_version", "resource_type": "model", "package_name": "promise_dwh", "path": "template_service/stg__template_version.sql", "original_file_path": "models/template_service/stg__template_version.sql", "unique_id": "model.promise_dwh.stg__template_version", "fqn": ["promise_dwh", "template_service", "stg__template_version"], "alias": "stg__template_version", "checksum": {"name": "sha256", "checksum": "374786030051b9901753c1b7f9fbb3915703f3b1489f8c8883bcbcca31c1e8d4"}, "config": {"enabled": true, "alias": null, "schema": "template_service", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ inject_template_text() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "template_service", "pre-hook": "{{ inject_template_text() }}"}, "created_at": 1715379616.45629, "relation_name": "`analytics-prod-328313`.`template_service`.`stg__template_version`", "raw_code": "SELECT * -- noqa\nFROM\n    EXTERNAL_QUERY(\n        \"promise-pay-api.us.templatesvc-bq-connection\",\n        \"\"\"\n        SELECT\n          CAST(id AS VARCHAR) as id,\n          created_at,\n          deleted_at,\n          draft_default,\n          human_readable_reference,\n          live_default,\n          locale,\n          template_id,\n          template_text,\n          updated_at\n        FROM template.template_version;\"\"\"\n    )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.inject_template_text"], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/models/template_service/stg__template_version.sql", "compiled": true, "compiled_code": "SELECT * -- noqa\nFROM\n    EXTERNAL_QUERY(\n        \"promise-pay-api.us.templatesvc-bq-connection\",\n        \"\"\"\n        SELECT\n          CAST(id AS VARCHAR) as id,\n          created_at,\n          deleted_at,\n          draft_default,\n          human_readable_reference,\n          live_default,\n          locale,\n          template_id,\n          template_text,\n          updated_at\n        FROM template.template_version;\"\"\"\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "snapshot.promise_dwh.transaction_fee_configs_snapshot": {"database": "analytics-prod-328313", "schema": "snapshots", "name": "transaction_fee_configs_snapshot", "resource_type": "snapshot", "package_name": "promise_dwh", "path": "transaction_fee_configs.sql", "original_file_path": "snapshots/transaction_fee_configs.sql", "unique_id": "snapshot.promise_dwh.transaction_fee_configs_snapshot", "fqn": ["promise_dwh", "transaction_fee_configs", "transaction_fee_configs_snapshot"], "alias": "transaction_fee_configs_snapshot", "checksum": {"name": "sha256", "checksum": "84958ab26d143ea0b72602cd162d19d41092d8bad9f5f9420da93cbd31c8c32e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["biz_rules"], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fee_config_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "check", "target_schema": "snapshots", "target_database": null, "updated_at": null, "check_cols": ["calculator_type", "fee_fixed_amount_cents", "fee_variable_rate"]}, "tags": ["biz_rules"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "target_schema": "snapshots", "strategy": "check", "unique_key": "fee_config_id", "check_cols": ["calculator_type", "fee_fixed_amount_cents", "fee_variable_rate"], "tags": ["biz_rules"]}, "created_at": 1715379616.505134, "relation_name": "`analytics-prod-328313`.`snapshots`.`transaction_fee_configs_snapshot`", "raw_code": "\n\n    {{\n        config(\n          enabled = true,\n          target_schema='snapshots',\n          strategy='check',\n          unique_key='fee_config_id',\n          check_cols = ['calculator_type', 'fee_fixed_amount_cents', 'fee_variable_rate'],\n          tags = [\"biz_rules\"],\n        )\n    }}\n\nselect * FROM {{ref ('transaction_fee_configs')}}\n\n", "language": "sql", "refs": [{"name": "transaction_fee_configs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.promise_dwh.transaction_fee_configs"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\n    \n\nselect * FROM `analytics-prod-328313`.`promisepay`.`transaction_fee_configs`\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.promise_dwh.customer_config_snapshot": {"database": "analytics-prod-328313", "schema": "snapshots", "name": "customer_config_snapshot", "resource_type": "snapshot", "package_name": "promise_dwh", "path": "customer_config_long.sql", "original_file_path": "snapshots/customer_config_long.sql", "unique_id": "snapshot.promise_dwh.customer_config_snapshot", "fqn": ["promise_dwh", "customer_config_long", "customer_config_snapshot"], "alias": "customer_config_snapshot", "checksum": {"name": "sha256", "checksum": "63a3aa3a69c1bd8f3e9474dba4c2aa0a89c9ff6caee07f502b7a91eeb58f4127"}, "config": {"enabled": true, "alias": "customer_config_snapshot", "schema": null, "database": null, "tags": ["biz_rules"], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "rule_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "check", "target_schema": "snapshots", "target_database": null, "updated_at": null, "check_cols": "all"}, "tags": ["biz_rules"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "customer_config_snapshot", "target_schema": "snapshots", "strategy": "check", "unique_key": "rule_id", "check_cols": "all", "tags": ["biz_rules"]}, "created_at": 1715379616.52427, "relation_name": "`analytics-prod-328313`.`snapshots`.`customer_config_snapshot`", "raw_code": "\n\n    {{\n        config(\n          alias='customer_config_snapshot',\n          target_schema='snapshots',\n          strategy='check',\n          unique_key='rule_id',\n          check_cols = 'all',\n          tags = [\"biz_rules\"],\n        )\n    }}\n{% if target.name == \"dev\" %}\n{{ config(enabled=false) }}\n{% endif %}\n\nselect * FROM {{ref ('customer_config_long')}}\n\n", "language": "sql", "refs": [{"name": "customer_config_long", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.promise_dwh.customer_config_long"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\n    \n\n\nselect * FROM `analytics-prod-328313`.`promisepay`.`customer_config_long`\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.promise_dwh.airflow_prod_dag_list_snapshot": {"database": "analytics-prod-328313", "schema": "snapshots", "name": "airflow_prod_dag_list_snapshot", "resource_type": "snapshot", "package_name": "promise_dwh", "path": "airflow/airflow_dag_list_snapshot.sql", "original_file_path": "snapshots/airflow/airflow_dag_list_snapshot.sql", "unique_id": "snapshot.promise_dwh.airflow_prod_dag_list_snapshot", "fqn": ["promise_dwh", "airflow", "airflow_dag_list_snapshot", "airflow_prod_dag_list_snapshot"], "alias": "airflow_prod_dag_list_snapshot", "checksum": {"name": "sha256", "checksum": "fc7ade3dc1cc1ba3827a9aee864a1e508f702bac181291cfcb2a025bfb10164c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dag_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "check", "target_schema": "snapshots", "target_database": null, "updated_at": null, "check_cols": ["last_parsed_time"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "target_schema": "snapshots", "strategy": "check", "unique_key": "dag_id", "check_cols": ["last_parsed_time"]}, "created_at": 1715379616.530762, "relation_name": "`analytics-prod-328313`.`snapshots`.`airflow_prod_dag_list_snapshot`", "raw_code": "\n\n    {{\n        config(\n          enabled = true,\n          target_schema='snapshots',\n          strategy='check',\n          unique_key='dag_id',\n          check_cols = ['last_parsed_time'],\n        )\n    }}\n\nSELECT * FROM {{ref ('prod_dag_list')}}\n\n", "language": "sql", "refs": [{"name": "prod_dag_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.promise_dwh.prod_dag_list"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\n    \n\nSELECT * FROM `analytics-prod-328313`.`astro_airflow_logs`.`prod_dag_list`\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.promise_dwh.airflow_prod_all_dag_runs_snapshot": {"database": "analytics-prod-328313", "schema": "snapshots", "name": "airflow_prod_all_dag_runs_snapshot", "resource_type": "snapshot", "package_name": "promise_dwh", "path": "airflow/airflow_all_dag_runs_snapshot.sql", "original_file_path": "snapshots/airflow/airflow_all_dag_runs_snapshot.sql", "unique_id": "snapshot.promise_dwh.airflow_prod_all_dag_runs_snapshot", "fqn": ["promise_dwh", "airflow", "airflow_all_dag_runs_snapshot", "airflow_prod_all_dag_runs_snapshot"], "alias": "airflow_prod_all_dag_runs_snapshot", "checksum": {"name": "sha256", "checksum": "9ddf6e3b73c481fde00304b0c258df9377d3b2aff8c682b106ac947271aa29fc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "pk_dag_id_dag_run_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "check", "target_schema": "snapshots", "target_database": null, "updated_at": null, "check_cols": ["state"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "target_schema": "snapshots", "strategy": "check", "unique_key": "pk_dag_id_dag_run_id", "check_cols": ["state"]}, "created_at": 1715379616.533539, "relation_name": "`analytics-prod-328313`.`snapshots`.`airflow_prod_all_dag_runs_snapshot`", "raw_code": "\n\n    {{\n        config(\n          enabled = true,\n          target_schema='snapshots',\n          strategy='check',\n          unique_key='pk_dag_id_dag_run_id',\n          check_cols = ['state'],\n        )\n    }}\n\nSELECT * FROM {{ref ('prod_all_dag_runs')}}\n\n", "language": "sql", "refs": [{"name": "prod_all_dag_runs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.promise_dwh.prod_all_dag_runs"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\n    \n\nSELECT * FROM `analytics-prod-328313`.`astro_airflow_logs`.`prod_all_dag_runs`\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.fraud_check_vdss": {"database": "analytics-prod-328313", "schema": "prod", "name": "fraud_check_vdss", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/fraud_check_vdss.sql", "original_file_path": "analysis/fraud_check_vdss.sql", "unique_id": "analysis.promise_dwh.fraud_check_vdss", "fqn": ["promise_dwh", "analysis", "fraud_check_vdss"], "alias": "fraud_check_vdss", "checksum": {"name": "sha256", "checksum": "cda0245ac758b3acad6fead79a3812ea5c7dd710d6f9ae290a42fe7cd0113285"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.5704231, "relation_name": null, "raw_code": "with approved_apps AS (\n    SELECT\n        ra.id as id,\n        customer_id\n    FROM\n        `virginia-lihwap-pay.analytics_promisepay_prod.relief_processing_state` rps\n        LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` ra ON ra.id = rps.relief_application_id\n    WHERE\n        rps.status in ('Approved', 'ReliefTransferred', 'ReliefGranted')\n),\nhousehold_members as (\n    SELECT\n        id,\n        JSON_QUERY_ARRAY(data, '$.clientProvided.householdMembers') as hh_array\n    FROM\n        EXTERNAL_QUERY(\n            \"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n            \"SELECT * FROM relief_application;\"\n        ) as apps\n    JOIN approved_apps USING (id)\n),\nhousehold_member_name_dob AS (\n    SELECT\n        household_members.id as relief_application_id,\n        `virginia-lihwap-pay.analytics_promisepay_prod.parseName`(JSON_VALUE(hh_member, '$.fullName')) as parsed_name,\n        JSON_VALUE(hh_member, '$.id') as hh_memberid,\n        DATE(JSON_VALUE(hh_member, '$.dateOfBirth')) as hh_member_dateOfBirth\n    FROM\n        household_members\n        LEFT JOIN UNNEST(hh_array) as hh_member\n        LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.dss_post_application_matches` AS dss_post_application_matches ON \n            dss_post_application_matches.id = CONCAT(household_members.id,'#',JSON_VALUE(hh_member, '$.id'))\n    WHERE\n        JSON_VALUE(hh_member, '$.id') IS NOT NULL\n        AND (\n        dss_post_application_matches.match_in_liheap\n        OR dss_post_application_matches.match_in_snap\n        OR dss_post_application_matches.match_in_tanf )\n),\nparsed_addresses AS (\n    SELECT\n        c.id as customer_id,\n        JSON_VALUE(external_data, '$.serviceAddresses[0]') as unparsed_address,\n        `virginia-lihwap-pay.analytics_promisepay_prod.parseLocation`(\n            CONCAT(\n                INITCAP(\n                    JSON_VALUE(external_data, '$.serviceAddresses[0]')\n                ),\n                ' ',\n                -- For data from utilities, we're not requesting city, so we get that based on the ZIP\n                IF(data_source_id != 2, zc.city, ''),\n                ' VA ',\n                -- The ZIP gets saved separately in the customer table\n                c.pii_to_verify\n            )\n        ) as parsed_address,\n        `virginia-lihwap-pay.analytics_promisepay_prod.parseName`(\n                          JSON_VALUE(external_data, '$.accountName')) as parsed_name,\n        JSON_VALUE(external_data, '$.accountName') as unparsed_account_name,\n        c.pii_to_verify AS raw_zip\n    FROM\n        EXTERNAL_QUERY(\n            \"projects/virginia-lihwap-pay/locations/us/connections/virginia_lihwap_pay\",\n            '''\n                      SELECT\n                          *\n                      FROM obligation'''\n        ) as obligation\n        JOIN `virginia-lihwap-pay.analytics_promisepay_prod.customer` c on c.id = customer_id\n        JOIN `virginia-lihwap-pay.staging.va_zipcodes` zc on c.pii_to_verify = zc.zip\n        JOIN approved_apps aa ON aa.customer_id = c.id\n    WHERE\n        CONCAT(\n            JSON_VALUE(external_data, '$.serviceAddresses[0]'),\n            ' ',\n            pii_to_verify\n        ) is not null\n),\nlihwap_service_address_unhashed AS (\n    SELECT\n        customer_id,\n        parsed_address.number AS street_number,\n        parsed_address.street AS street_name,\n        COALESCE(parsed_address.zip, raw_zip) as zip_code,\n        unparsed_account_name,\n        CONCAT(parsed_address.number, parsed_name.last, COALESCE(parsed_address.zip, raw_zip)) as household_identifier\n    FROM\n        parsed_addresses\n)\n,multiple_households AS (\nSELECT\n    household_member_name_dob.parsed_name.first AS first_name,\n    household_member_name_dob.parsed_name.last AS last_name,\n    DATE(household_member_name_dob.hh_member_dateOfBirth) AS dob,\n    COUNT(DISTINCT lihwap_relief_application.id) AS count_of_applications,\n    COUNT(DISTINCT household_identifier) as count_of_households\nFROM\n    household_member_name_dob\n    LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS lihwap_relief_application \n        ON household_member_name_dob.relief_application_id = lihwap_relief_application.id\n    LEFT JOIN lihwap_service_address_unhashed ON lihwap_relief_application.customer_id = lihwap_service_address_unhashed.customer_id\nGROUP BY 1,2,3\nHAVING COUNT(DISTINCT household_identifier) > 1 OR COUNT(DISTINCT lihwap_relief_application.id) > 1\n)\nSELECT\n  first_name,\n  last_name,\n  dob,\n  household_identifier,\n  lihwap_relief_application.id\nFROM\n    household_member_name_dob\n    JOIN multiple_households ON household_member_name_dob.parsed_name.first = first_name \n      AND  household_member_name_dob.parsed_name.last = last_name\n      AND DATE(household_member_name_dob.hh_member_dateOfBirth) = dob\n    LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS lihwap_relief_application \n        ON household_member_name_dob.relief_application_id = lihwap_relief_application.id\n    LEFT JOIN lihwap_service_address_unhashed ON lihwap_relief_application.customer_id = lihwap_service_address_unhashed.customer_id\nGROUP BY 1,2,3,4,5", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/fraud_check_vdss.sql", "compiled": true, "compiled_code": "with approved_apps AS (\n    SELECT\n        ra.id as id,\n        customer_id\n    FROM\n        `virginia-lihwap-pay.analytics_promisepay_prod.relief_processing_state` rps\n        LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` ra ON ra.id = rps.relief_application_id\n    WHERE\n        rps.status in ('Approved', 'ReliefTransferred', 'ReliefGranted')\n),\nhousehold_members as (\n    SELECT\n        id,\n        JSON_QUERY_ARRAY(data, '$.clientProvided.householdMembers') as hh_array\n    FROM\n        EXTERNAL_QUERY(\n            \"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n            \"SELECT * FROM relief_application;\"\n        ) as apps\n    JOIN approved_apps USING (id)\n),\nhousehold_member_name_dob AS (\n    SELECT\n        household_members.id as relief_application_id,\n        `virginia-lihwap-pay.analytics_promisepay_prod.parseName`(JSON_VALUE(hh_member, '$.fullName')) as parsed_name,\n        JSON_VALUE(hh_member, '$.id') as hh_memberid,\n        DATE(JSON_VALUE(hh_member, '$.dateOfBirth')) as hh_member_dateOfBirth\n    FROM\n        household_members\n        LEFT JOIN UNNEST(hh_array) as hh_member\n        LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.dss_post_application_matches` AS dss_post_application_matches ON \n            dss_post_application_matches.id = CONCAT(household_members.id,'#',JSON_VALUE(hh_member, '$.id'))\n    WHERE\n        JSON_VALUE(hh_member, '$.id') IS NOT NULL\n        AND (\n        dss_post_application_matches.match_in_liheap\n        OR dss_post_application_matches.match_in_snap\n        OR dss_post_application_matches.match_in_tanf )\n),\nparsed_addresses AS (\n    SELECT\n        c.id as customer_id,\n        JSON_VALUE(external_data, '$.serviceAddresses[0]') as unparsed_address,\n        `virginia-lihwap-pay.analytics_promisepay_prod.parseLocation`(\n            CONCAT(\n                INITCAP(\n                    JSON_VALUE(external_data, '$.serviceAddresses[0]')\n                ),\n                ' ',\n                -- For data from utilities, we're not requesting city, so we get that based on the ZIP\n                IF(data_source_id != 2, zc.city, ''),\n                ' VA ',\n                -- The ZIP gets saved separately in the customer table\n                c.pii_to_verify\n            )\n        ) as parsed_address,\n        `virginia-lihwap-pay.analytics_promisepay_prod.parseName`(\n                          JSON_VALUE(external_data, '$.accountName')) as parsed_name,\n        JSON_VALUE(external_data, '$.accountName') as unparsed_account_name,\n        c.pii_to_verify AS raw_zip\n    FROM\n        EXTERNAL_QUERY(\n            \"projects/virginia-lihwap-pay/locations/us/connections/virginia_lihwap_pay\",\n            '''\n                      SELECT\n                          *\n                      FROM obligation'''\n        ) as obligation\n        JOIN `virginia-lihwap-pay.analytics_promisepay_prod.customer` c on c.id = customer_id\n        JOIN `virginia-lihwap-pay.staging.va_zipcodes` zc on c.pii_to_verify = zc.zip\n        JOIN approved_apps aa ON aa.customer_id = c.id\n    WHERE\n        CONCAT(\n            JSON_VALUE(external_data, '$.serviceAddresses[0]'),\n            ' ',\n            pii_to_verify\n        ) is not null\n),\nlihwap_service_address_unhashed AS (\n    SELECT\n        customer_id,\n        parsed_address.number AS street_number,\n        parsed_address.street AS street_name,\n        COALESCE(parsed_address.zip, raw_zip) as zip_code,\n        unparsed_account_name,\n        CONCAT(parsed_address.number, parsed_name.last, COALESCE(parsed_address.zip, raw_zip)) as household_identifier\n    FROM\n        parsed_addresses\n)\n,multiple_households AS (\nSELECT\n    household_member_name_dob.parsed_name.first AS first_name,\n    household_member_name_dob.parsed_name.last AS last_name,\n    DATE(household_member_name_dob.hh_member_dateOfBirth) AS dob,\n    COUNT(DISTINCT lihwap_relief_application.id) AS count_of_applications,\n    COUNT(DISTINCT household_identifier) as count_of_households\nFROM\n    household_member_name_dob\n    LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS lihwap_relief_application \n        ON household_member_name_dob.relief_application_id = lihwap_relief_application.id\n    LEFT JOIN lihwap_service_address_unhashed ON lihwap_relief_application.customer_id = lihwap_service_address_unhashed.customer_id\nGROUP BY 1,2,3\nHAVING COUNT(DISTINCT household_identifier) > 1 OR COUNT(DISTINCT lihwap_relief_application.id) > 1\n)\nSELECT\n  first_name,\n  last_name,\n  dob,\n  household_identifier,\n  lihwap_relief_application.id\nFROM\n    household_member_name_dob\n    JOIN multiple_households ON household_member_name_dob.parsed_name.first = first_name \n      AND  household_member_name_dob.parsed_name.last = last_name\n      AND DATE(household_member_name_dob.hh_member_dateOfBirth) = dob\n    LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS lihwap_relief_application \n        ON household_member_name_dob.relief_application_id = lihwap_relief_application.id\n    LEFT JOIN lihwap_service_address_unhashed ON lihwap_relief_application.customer_id = lihwap_service_address_unhashed.customer_id\nGROUP BY 1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.finance_not_stripe": {"database": "analytics-prod-328313", "schema": "prod", "name": "finance_not_stripe", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/finance_reconciliation/finance_not_stripe.sql", "original_file_path": "analysis/finance_reconciliation/finance_not_stripe.sql", "unique_id": "analysis.promise_dwh.finance_not_stripe", "fqn": ["promise_dwh", "analysis", "finance_reconciliation", "finance_not_stripe"], "alias": "finance_not_stripe", "checksum": {"name": "sha256", "checksum": "09b187d99631b84f0f728b89e9267a8ad4a950d5e9e87788dd1dcbe719ad34bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.572468, "relation_name": null, "raw_code": "WITH stripe_transactions AS (SELECT\n  *\nFROM (\n  WITH\n    charge_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.charge_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.charge_id IS NOT NULL\n      AND td.dispute_id IS NULL\n      AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    GROUP BY\n      td.charge_id ),\n    dispute_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.dispute_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.dispute_id IS NOT NULL\n      AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    GROUP BY\n      td.dispute_id ),\n    jurisdictions AS (\n    SELECT\n      c.id AS charge_id,\n      c.balance_transaction_id,\n      CASE\n        WHEN c.statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.statement_descriptor, (STRPOS(c.statement_descriptor, '-') + 1), (LENGTH(c.statement_descriptor) - STRPOS(c.statement_descriptor, '-')) ) ) )\n        WHEN c.calculated_statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.calculated_statement_descriptor, (STRPOS(c.calculated_statement_descriptor, '*') + 1), (LENGTH(c.calculated_statement_descriptor) - STRPOS(c.calculated_statement_descriptor, '*')) ) ) )\n      ELSE\n      NULL\n    END\n      AS jurisdiction\n    FROM\n      `analytics-prod-328313.stripe.charge` c )\n    -- Captured Charge + Payment Transactions Plus Associated Refunds\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN bt.type = 'charge' THEN 'Credit Card'\n      WHEN bt.type = 'payment' THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    bt.amount / 100.0 AS charge_amount,\n    r.amount /100.0 AS refund_amount,\n    (COALESCE(bt.amount,\n        0) - COALESCE(r.amount,\n        0)) / 100.0 AS total_revenue_CALCULATED,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(bt.fee,\n      0)\n  END\n    / 100.0 AS ach_fee,\n    cf.ic_flat AS ic_flat,\n    cf.ic_pct AS ic_pct,\n    cf.stripe_flat AS stripe_flat,\n    cf.stripe_pct AS stripe_pct,\n    COALESCE(cf.total_fees,\n      0) AS total_stripe_ic_fees,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(rbt.fee,\n      0)\n  END\n    / 100.0 AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    (CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(bt.fee,\n        0)\n    END\n      + COALESCE(cf.total_fees,\n        0) +\n      CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(rbt.fee,\n        0)\n    END\n      + 5) / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Captured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    bt.source = c.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    bt.id = j.balance_transaction_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` rbt\n  ON\n    r.balance_transaction_id = rbt.id\n  WHERE\n    bt.type IN ('payment',\n      'charge')\n  UNION ALL\n    -- Uncaptured Charge Transactions\n  SELECT\n    COALESCE(j.jurisdiction,\n      'UNKNOWN'),\n    'Credit Card' AS payment_method,\n    'charge - unsuccessful' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    .05 AS total_fees_CALCULATED,\n    NULL AS balance_transaction_id,\n    NULL AS balance_transaction_created,\n    NULL AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Uncaptured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    jurisdictions j\n  ON\n    c.id = j.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  WHERE\n    c.captured IS FALSE\n  UNION ALL\n    -- Dispute Data\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN cbt.type = 'charge' THEN 'Credit Card'\n      WHEN cbt.type IN ('payment_failure_refund',\n      'payment') THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    'dispute' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", d.created, \"America/Los_Angeles\") AS transaction_date,\n    -d.amount / 100.0 AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    df.ic_flat AS ic_flat,\n    df.ic_pct AS ic_pct,\n    df.stripe_flat AS stripe_flat,\n    df.stripe_pct AS stripe_pct,\n    COALESCE(df.total_fees,\n      0) AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    bt.fee / 100.0 AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    COALESCE(df.total_fees,\n        0) + (bt.fee / 100.0) AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    NULL AS fee_explanation,\n    'Disputes' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.dispute` d\n  JOIN\n    `analytics-prod-328313.stripe.dispute_balance_transaction` dbt\n  ON\n    d.id = dbt.dispute_id\n  JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    dbt.balance_transaction_id = bt.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.charge` c\n  ON\n    d.charge_id = c.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` cbt\n  ON\n    c.balance_transaction_id = cbt.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    d.charge_id = j.charge_id\n  LEFT JOIN\n    dispute_ic_fees df\n  ON\n    d.id = df.dispute_id\n  UNION ALL\n      -- Sigma + Connect Fees\n  SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    -- Unlike other transactions, we invoice for sigma/connect fees that are charged after the month they're incurred. \n    -- That is: Fees charged in July should be on the reconciliation reports for June.\n    -- Fudging the date stamp below to include them automatically. \n    FORMAT_TIMESTAMP(\"%F %T\", CAST(DATE_SUB(DATE(bt.created), INTERVAL 1 MONTH) as TIMESTAMP), \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - ConnectSigma' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description NOT LIKE 'Radar%'\n    AND bt.description NOT LIKE 'Card payments (%'\n    AND bt.description NOT LIKE 'Card Account Updater (CAU)%'\n    AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount \n    UNION ALL\n      -- Card Account Updater Fees\n   SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - CAU' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    AND bt.description LIKE 'Card Account Updater (CAU)%'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount)\nWHERE\n  transaction_date >= '2021-12-01'\n  AND transaction_date < '2022-01-01'\nORDER BY\n  transaction_date\n),\nfinance_transactions AS (\nSELECT\n    (FORMAT_TIMESTAMP('%F %T', finance.effective_at , 'America/Los_Angeles')) AS finance_effective_time,\n        (FORMAT_TIMESTAMP('%F %T', finance.event_finalized_at , 'America/Los_Angeles')) AS finance_finalized_time,\n    finance.acct_identifier_jurisdiction_id  AS finance_jurisdiction_id,\n    sse_ids.acct_identifier_client_id  AS sse_ids_client_id,\n    finance.acct_identifier_obligation_id AS obligation_id,\n    sse_ids.acct_identifier_payment_id AS sse_ids_payment_id,\n    far.human_readable_reference  AS far_human_readable_reference,\n    sse_ids.acct_identifier_provider AS sse_ids_provider,\n    CASE\n          WHEN finance_event.refund_id IS NOT NULL\n          THEN refund_attempt.provider_details_processorRefundId\n          ELSE (CASE\n          WHEN sse_ids.acct_identifier_provider in ('Stripe', 'StripePlaidAch')\n          THEN payment_attempt.provider_details_stripeChargeId\n          WHEN sse_ids.acct_identifier_provider = 'StripePaymentIntents'\n          THEN payment_attempt.provider_details_paymentIntentId\n          ELSE far.human_readable_reference\n        END)\n        END AS sse_events_provider_details,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'PaidCollection') THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_obligation_amount,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'ClientPaidFees') THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_client_paid_fee,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'PaymentProviderHeldFunds') THEN ( finance.amount/100  )  ELSE NULL END), 0) AS finance_net_payment,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'AccountsReceivable') THEN ( finance.amount/100  )  ELSE NULL END), 0) AS finance_jurisdiction_paid_fee,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind  IN ('AccountsReceivable', 'PaidCollection')) THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_remit_amount\nFROM `analytics-prod-328313.finance.single_sided_entry`\n     AS finance\n\nLEFT JOIN `analytics-prod-328313.looker_scratch.LR_T48641641489734855_sse_ids` AS sse_ids ON finance.event_id = sse_ids.event_id\nLEFT JOIN `analytics-prod-328313.finance.finance_event`\n     AS finance_event ON finance.event_id = finance_event.id\nLEFT JOIN `analytics-prod-328313.finance.payment_attempt`\n     AS payment_attempt ON payment_attempt.id = COALESCE(sse_ids.acct_identifier_payment_id, finance.acct_identifier_scheduled_payment_id)\nLEFT JOIN `analytics-prod-328313.finance.refund_attempt`\n     AS refund_attempt ON refund_attempt.id = finance_event.refund_id\nLEFT JOIN `analytics-prod-328313.finance.finance_api_request`\n     AS far ON far.payment_attempt_id = payment_attempt.id\nWHERE ((( finance.effective_at  ) >= (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND ( finance.effective_at  ) < (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles')))) AND ((( finance.event_finalized_at  ) >= (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND ( finance.event_finalized_at  ) < (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles')))) AND (finance.event_kind ) IN ('PaymentRefunded', 'PaymentSucceeded') AND (finance.event_status ) = 'Recorded'\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\nSELECT \n  ft.*\nFROM\n  finance_transactions ft \n  LEFT JOIN stripe_transactions s ON\n    s.charge_id = ft.sse_events_provider_details OR\n    s.charge_payment_intent_id = ft.sse_events_provider_details OR\n    s.refund_id = ft.sse_events_provider_details\nWHERE \n  ft.sse_events_provider_details is NOT null\n  AND s.transaction_type IS NULL", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/finance_reconciliation/finance_not_stripe.sql", "compiled": true, "compiled_code": "WITH stripe_transactions AS (SELECT\n  *\nFROM (\n  WITH\n    charge_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.charge_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.charge_id IS NOT NULL\n      AND td.dispute_id IS NULL\n      AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    GROUP BY\n      td.charge_id ),\n    dispute_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.dispute_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.dispute_id IS NOT NULL\n      AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    GROUP BY\n      td.dispute_id ),\n    jurisdictions AS (\n    SELECT\n      c.id AS charge_id,\n      c.balance_transaction_id,\n      CASE\n        WHEN c.statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.statement_descriptor, (STRPOS(c.statement_descriptor, '-') + 1), (LENGTH(c.statement_descriptor) - STRPOS(c.statement_descriptor, '-')) ) ) )\n        WHEN c.calculated_statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.calculated_statement_descriptor, (STRPOS(c.calculated_statement_descriptor, '*') + 1), (LENGTH(c.calculated_statement_descriptor) - STRPOS(c.calculated_statement_descriptor, '*')) ) ) )\n      ELSE\n      NULL\n    END\n      AS jurisdiction\n    FROM\n      `analytics-prod-328313.stripe.charge` c )\n    -- Captured Charge + Payment Transactions Plus Associated Refunds\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN bt.type = 'charge' THEN 'Credit Card'\n      WHEN bt.type = 'payment' THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    bt.amount / 100.0 AS charge_amount,\n    r.amount /100.0 AS refund_amount,\n    (COALESCE(bt.amount,\n        0) - COALESCE(r.amount,\n        0)) / 100.0 AS total_revenue_CALCULATED,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(bt.fee,\n      0)\n  END\n    / 100.0 AS ach_fee,\n    cf.ic_flat AS ic_flat,\n    cf.ic_pct AS ic_pct,\n    cf.stripe_flat AS stripe_flat,\n    cf.stripe_pct AS stripe_pct,\n    COALESCE(cf.total_fees,\n      0) AS total_stripe_ic_fees,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(rbt.fee,\n      0)\n  END\n    / 100.0 AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    (CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(bt.fee,\n        0)\n    END\n      + COALESCE(cf.total_fees,\n        0) +\n      CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(rbt.fee,\n        0)\n    END\n      + 5) / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Captured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    bt.source = c.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    bt.id = j.balance_transaction_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` rbt\n  ON\n    r.balance_transaction_id = rbt.id\n  WHERE\n    bt.type IN ('payment',\n      'charge')\n  UNION ALL\n    -- Uncaptured Charge Transactions\n  SELECT\n    COALESCE(j.jurisdiction,\n      'UNKNOWN'),\n    'Credit Card' AS payment_method,\n    'charge - unsuccessful' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    .05 AS total_fees_CALCULATED,\n    NULL AS balance_transaction_id,\n    NULL AS balance_transaction_created,\n    NULL AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Uncaptured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    jurisdictions j\n  ON\n    c.id = j.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  WHERE\n    c.captured IS FALSE\n  UNION ALL\n    -- Dispute Data\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN cbt.type = 'charge' THEN 'Credit Card'\n      WHEN cbt.type IN ('payment_failure_refund',\n      'payment') THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    'dispute' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", d.created, \"America/Los_Angeles\") AS transaction_date,\n    -d.amount / 100.0 AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    df.ic_flat AS ic_flat,\n    df.ic_pct AS ic_pct,\n    df.stripe_flat AS stripe_flat,\n    df.stripe_pct AS stripe_pct,\n    COALESCE(df.total_fees,\n      0) AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    bt.fee / 100.0 AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    COALESCE(df.total_fees,\n        0) + (bt.fee / 100.0) AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    NULL AS fee_explanation,\n    'Disputes' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.dispute` d\n  JOIN\n    `analytics-prod-328313.stripe.dispute_balance_transaction` dbt\n  ON\n    d.id = dbt.dispute_id\n  JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    dbt.balance_transaction_id = bt.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.charge` c\n  ON\n    d.charge_id = c.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` cbt\n  ON\n    c.balance_transaction_id = cbt.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    d.charge_id = j.charge_id\n  LEFT JOIN\n    dispute_ic_fees df\n  ON\n    d.id = df.dispute_id\n  UNION ALL\n      -- Sigma + Connect Fees\n  SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    -- Unlike other transactions, we invoice for sigma/connect fees that are charged after the month they're incurred. \n    -- That is: Fees charged in July should be on the reconciliation reports for June.\n    -- Fudging the date stamp below to include them automatically. \n    FORMAT_TIMESTAMP(\"%F %T\", CAST(DATE_SUB(DATE(bt.created), INTERVAL 1 MONTH) as TIMESTAMP), \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - ConnectSigma' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description NOT LIKE 'Radar%'\n    AND bt.description NOT LIKE 'Card payments (%'\n    AND bt.description NOT LIKE 'Card Account Updater (CAU)%'\n    AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount \n    UNION ALL\n      -- Card Account Updater Fees\n   SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - CAU' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    AND bt.description LIKE 'Card Account Updater (CAU)%'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount)\nWHERE\n  transaction_date >= '2021-12-01'\n  AND transaction_date < '2022-01-01'\nORDER BY\n  transaction_date\n),\nfinance_transactions AS (\nSELECT\n    (FORMAT_TIMESTAMP('%F %T', finance.effective_at , 'America/Los_Angeles')) AS finance_effective_time,\n        (FORMAT_TIMESTAMP('%F %T', finance.event_finalized_at , 'America/Los_Angeles')) AS finance_finalized_time,\n    finance.acct_identifier_jurisdiction_id  AS finance_jurisdiction_id,\n    sse_ids.acct_identifier_client_id  AS sse_ids_client_id,\n    finance.acct_identifier_obligation_id AS obligation_id,\n    sse_ids.acct_identifier_payment_id AS sse_ids_payment_id,\n    far.human_readable_reference  AS far_human_readable_reference,\n    sse_ids.acct_identifier_provider AS sse_ids_provider,\n    CASE\n          WHEN finance_event.refund_id IS NOT NULL\n          THEN refund_attempt.provider_details_processorRefundId\n          ELSE (CASE\n          WHEN sse_ids.acct_identifier_provider in ('Stripe', 'StripePlaidAch')\n          THEN payment_attempt.provider_details_stripeChargeId\n          WHEN sse_ids.acct_identifier_provider = 'StripePaymentIntents'\n          THEN payment_attempt.provider_details_paymentIntentId\n          ELSE far.human_readable_reference\n        END)\n        END AS sse_events_provider_details,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'PaidCollection') THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_obligation_amount,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'ClientPaidFees') THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_client_paid_fee,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'PaymentProviderHeldFunds') THEN ( finance.amount/100  )  ELSE NULL END), 0) AS finance_net_payment,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'AccountsReceivable') THEN ( finance.amount/100  )  ELSE NULL END), 0) AS finance_jurisdiction_paid_fee,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind  IN ('AccountsReceivable', 'PaidCollection')) THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_remit_amount\nFROM `analytics-prod-328313.finance.single_sided_entry`\n     AS finance\n\nLEFT JOIN `analytics-prod-328313.looker_scratch.LR_T48641641489734855_sse_ids` AS sse_ids ON finance.event_id = sse_ids.event_id\nLEFT JOIN `analytics-prod-328313.finance.finance_event`\n     AS finance_event ON finance.event_id = finance_event.id\nLEFT JOIN `analytics-prod-328313.finance.payment_attempt`\n     AS payment_attempt ON payment_attempt.id = COALESCE(sse_ids.acct_identifier_payment_id, finance.acct_identifier_scheduled_payment_id)\nLEFT JOIN `analytics-prod-328313.finance.refund_attempt`\n     AS refund_attempt ON refund_attempt.id = finance_event.refund_id\nLEFT JOIN `analytics-prod-328313.finance.finance_api_request`\n     AS far ON far.payment_attempt_id = payment_attempt.id\nWHERE ((( finance.effective_at  ) >= (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND ( finance.effective_at  ) < (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles')))) AND ((( finance.event_finalized_at  ) >= (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND ( finance.event_finalized_at  ) < (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles')))) AND (finance.event_kind ) IN ('PaymentRefunded', 'PaymentSucceeded') AND (finance.event_status ) = 'Recorded'\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\nSELECT \n  ft.*\nFROM\n  finance_transactions ft \n  LEFT JOIN stripe_transactions s ON\n    s.charge_id = ft.sse_events_provider_details OR\n    s.charge_payment_intent_id = ft.sse_events_provider_details OR\n    s.refund_id = ft.sse_events_provider_details\nWHERE \n  ft.sse_events_provider_details is NOT null\n  AND s.transaction_type IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.stripe_transactions": {"database": "analytics-prod-328313", "schema": "prod", "name": "stripe_transactions", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/finance_reconciliation/stripe_transactions.sql", "original_file_path": "analysis/finance_reconciliation/stripe_transactions.sql", "unique_id": "analysis.promise_dwh.stripe_transactions", "fqn": ["promise_dwh", "analysis", "finance_reconciliation", "stripe_transactions"], "alias": "stripe_transactions", "checksum": {"name": "sha256", "checksum": "c3633e67b720bd3a60670162a92e4d7c1e98e73e1004e60f9968d282561f8a85"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.574497, "relation_name": null, "raw_code": "SELECT\n  *\nFROM (\n  WITH\n    charge_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.charge_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.charge_id IS NOT NULL\n      AND td.dispute_id IS NULL\n      AND td.incurred_at BETWEEN (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles'))\n    GROUP BY\n      td.charge_id ),\n    dispute_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.dispute_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.dispute_id IS NOT NULL\n      AND td.incurred_at BETWEEN (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles'))\n    GROUP BY\n      td.dispute_id ),\n    jurisdictions AS (\n    SELECT\n      c.id AS charge_id,\n      c.balance_transaction_id,\n      CASE\n        WHEN c.statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.statement_descriptor, (STRPOS(c.statement_descriptor, '-') + 1), (LENGTH(c.statement_descriptor) - STRPOS(c.statement_descriptor, '-')) ) ) )\n        WHEN c.calculated_statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.calculated_statement_descriptor, (STRPOS(c.calculated_statement_descriptor, '*') + 1), (LENGTH(c.calculated_statement_descriptor) - STRPOS(c.calculated_statement_descriptor, '*')) ) ) )\n      ELSE\n      NULL\n    END\n      AS jurisdiction\n    FROM\n      `analytics-prod-328313.stripe.charge` c )\n    -- Captured Charge + Payment Transactions Plus Associated Refunds\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN bt.type = 'charge' THEN 'Credit Card'\n      WHEN bt.type = 'payment' THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    bt.amount / 100.0 AS charge_amount,\n    r.amount /100.0 AS refund_amount,\n    (COALESCE(bt.amount,\n        0) - COALESCE(r.amount,\n        0)) / 100.0 AS total_revenue_CALCULATED,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(bt.fee,\n      0)\n  END\n    / 100.0 AS ach_fee,\n    cf.ic_flat AS ic_flat,\n    cf.ic_pct AS ic_pct,\n    cf.stripe_flat AS stripe_flat,\n    cf.stripe_pct AS stripe_pct,\n    COALESCE(cf.total_fees,\n      0) AS total_stripe_ic_fees,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(rbt.fee,\n      0)\n  END\n    / 100.0 AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    (CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(bt.fee,\n        0)\n    END\n      + COALESCE(cf.total_fees,\n        0) +\n      CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(rbt.fee,\n        0)\n    END\n      + 5) / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Captured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    bt.source = c.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    bt.id = j.balance_transaction_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` rbt\n  ON\n    r.balance_transaction_id = rbt.id\n  WHERE\n    bt.type IN ('payment',\n      'charge')\n  UNION ALL\n    -- Uncaptured Charge Transactions\n  SELECT\n    COALESCE(j.jurisdiction,\n      'UNKNOWN'),\n    'Credit Card' AS payment_method,\n    'charge - unsuccessful' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    .05 AS total_fees_CALCULATED,\n    NULL AS balance_transaction_id,\n    NULL AS balance_transaction_created,\n    NULL AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Uncaptured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    jurisdictions j\n  ON\n    c.id = j.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  WHERE\n    c.captured IS FALSE\n  UNION ALL\n    -- Dispute Data\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN cbt.type = 'charge' THEN 'Credit Card'\n      WHEN cbt.type IN ('payment_failure_refund',\n      'payment') THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    'dispute' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", d.created, \"America/Los_Angeles\") AS transaction_date,\n    -d.amount / 100.0 AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    df.ic_flat AS ic_flat,\n    df.ic_pct AS ic_pct,\n    df.stripe_flat AS stripe_flat,\n    df.stripe_pct AS stripe_pct,\n    COALESCE(df.total_fees,\n      0) AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    bt.fee / 100.0 AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    COALESCE(df.total_fees,\n        0) + (bt.fee / 100.0) AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    NULL AS fee_explanation,\n    'Disputes' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.dispute` d\n  JOIN\n    `analytics-prod-328313.stripe.dispute_balance_transaction` dbt\n  ON\n    d.id = dbt.dispute_id\n  JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    dbt.balance_transaction_id = bt.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.charge` c\n  ON\n    d.charge_id = c.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` cbt\n  ON\n    c.balance_transaction_id = cbt.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    d.charge_id = j.charge_id\n  LEFT JOIN\n    dispute_ic_fees df\n  ON\n    d.id = df.dispute_id\n  UNION ALL\n      -- Sigma + Connect Fees\n  SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    -- Unlike other transactions, we invoice for sigma/connect fees that are charged after the month they're incurred. \n    -- That is: Fees charged in July should be on the reconciliation reports for June.\n    -- Fudging the date stamp below to include them automatically. \n    FORMAT_TIMESTAMP(\"%F %T\", CAST(DATE_SUB(DATE(bt.created), INTERVAL 1 MONTH) as TIMESTAMP), \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - ConnectSigma' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description NOT LIKE 'Radar%'\n    AND bt.description NOT LIKE 'Card payments (%'\n    AND bt.description NOT LIKE 'Card Account Updater (CAU)%'\n    AND bt.description LIKE '%2021-12%'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount \n    UNION ALL\n      -- Card Account Updater Fees\n   SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - CAU' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description LIKE '%2021-12%'\n    AND bt.description LIKE 'Card Account Updater (CAU)%'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount)\nWHERE\n  transaction_date >= '2021-12-01'\n  AND transaction_date < '2022-01-01'\nORDER BY\n  transaction_date", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/finance_reconciliation/stripe_transactions.sql", "compiled": true, "compiled_code": "SELECT\n  *\nFROM (\n  WITH\n    charge_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.charge_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.charge_id IS NOT NULL\n      AND td.dispute_id IS NULL\n      AND td.incurred_at BETWEEN (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles'))\n    GROUP BY\n      td.charge_id ),\n    dispute_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.dispute_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.dispute_id IS NOT NULL\n      AND td.incurred_at BETWEEN (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles'))\n    GROUP BY\n      td.dispute_id ),\n    jurisdictions AS (\n    SELECT\n      c.id AS charge_id,\n      c.balance_transaction_id,\n      CASE\n        WHEN c.statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.statement_descriptor, (STRPOS(c.statement_descriptor, '-') + 1), (LENGTH(c.statement_descriptor) - STRPOS(c.statement_descriptor, '-')) ) ) )\n        WHEN c.calculated_statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.calculated_statement_descriptor, (STRPOS(c.calculated_statement_descriptor, '*') + 1), (LENGTH(c.calculated_statement_descriptor) - STRPOS(c.calculated_statement_descriptor, '*')) ) ) )\n      ELSE\n      NULL\n    END\n      AS jurisdiction\n    FROM\n      `analytics-prod-328313.stripe.charge` c )\n    -- Captured Charge + Payment Transactions Plus Associated Refunds\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN bt.type = 'charge' THEN 'Credit Card'\n      WHEN bt.type = 'payment' THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    bt.amount / 100.0 AS charge_amount,\n    r.amount /100.0 AS refund_amount,\n    (COALESCE(bt.amount,\n        0) - COALESCE(r.amount,\n        0)) / 100.0 AS total_revenue_CALCULATED,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(bt.fee,\n      0)\n  END\n    / 100.0 AS ach_fee,\n    cf.ic_flat AS ic_flat,\n    cf.ic_pct AS ic_pct,\n    cf.stripe_flat AS stripe_flat,\n    cf.stripe_pct AS stripe_pct,\n    COALESCE(cf.total_fees,\n      0) AS total_stripe_ic_fees,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(rbt.fee,\n      0)\n  END\n    / 100.0 AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    (CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(bt.fee,\n        0)\n    END\n      + COALESCE(cf.total_fees,\n        0) +\n      CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(rbt.fee,\n        0)\n    END\n      + 5) / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Captured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    bt.source = c.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    bt.id = j.balance_transaction_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` rbt\n  ON\n    r.balance_transaction_id = rbt.id\n  WHERE\n    bt.type IN ('payment',\n      'charge')\n  UNION ALL\n    -- Uncaptured Charge Transactions\n  SELECT\n    COALESCE(j.jurisdiction,\n      'UNKNOWN'),\n    'Credit Card' AS payment_method,\n    'charge - unsuccessful' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    .05 AS total_fees_CALCULATED,\n    NULL AS balance_transaction_id,\n    NULL AS balance_transaction_created,\n    NULL AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Uncaptured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    jurisdictions j\n  ON\n    c.id = j.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  WHERE\n    c.captured IS FALSE\n  UNION ALL\n    -- Dispute Data\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN cbt.type = 'charge' THEN 'Credit Card'\n      WHEN cbt.type IN ('payment_failure_refund',\n      'payment') THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    'dispute' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", d.created, \"America/Los_Angeles\") AS transaction_date,\n    -d.amount / 100.0 AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    df.ic_flat AS ic_flat,\n    df.ic_pct AS ic_pct,\n    df.stripe_flat AS stripe_flat,\n    df.stripe_pct AS stripe_pct,\n    COALESCE(df.total_fees,\n      0) AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    bt.fee / 100.0 AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    COALESCE(df.total_fees,\n        0) + (bt.fee / 100.0) AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    NULL AS fee_explanation,\n    'Disputes' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.dispute` d\n  JOIN\n    `analytics-prod-328313.stripe.dispute_balance_transaction` dbt\n  ON\n    d.id = dbt.dispute_id\n  JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    dbt.balance_transaction_id = bt.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.charge` c\n  ON\n    d.charge_id = c.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` cbt\n  ON\n    c.balance_transaction_id = cbt.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    d.charge_id = j.charge_id\n  LEFT JOIN\n    dispute_ic_fees df\n  ON\n    d.id = df.dispute_id\n  UNION ALL\n      -- Sigma + Connect Fees\n  SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    -- Unlike other transactions, we invoice for sigma/connect fees that are charged after the month they're incurred. \n    -- That is: Fees charged in July should be on the reconciliation reports for June.\n    -- Fudging the date stamp below to include them automatically. \n    FORMAT_TIMESTAMP(\"%F %T\", CAST(DATE_SUB(DATE(bt.created), INTERVAL 1 MONTH) as TIMESTAMP), \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - ConnectSigma' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description NOT LIKE 'Radar%'\n    AND bt.description NOT LIKE 'Card payments (%'\n    AND bt.description NOT LIKE 'Card Account Updater (CAU)%'\n    AND bt.description LIKE '%2021-12%'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount \n    UNION ALL\n      -- Card Account Updater Fees\n   SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - CAU' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description LIKE '%2021-12%'\n    AND bt.description LIKE 'Card Account Updater (CAU)%'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount)\nWHERE\n  transaction_date >= '2021-12-01'\n  AND transaction_date < '2022-01-01'\nORDER BY\n  transaction_date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.unattributed_stripe_fees": {"database": "analytics-prod-328313", "schema": "prod", "name": "unattributed_stripe_fees", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/finance_reconciliation/unattributed_stripe_fees.sql", "original_file_path": "analysis/finance_reconciliation/unattributed_stripe_fees.sql", "unique_id": "analysis.promise_dwh.unattributed_stripe_fees", "fqn": ["promise_dwh", "analysis", "finance_reconciliation", "unattributed_stripe_fees"], "alias": "unattributed_stripe_fees", "checksum": {"name": "sha256", "checksum": "fa6614e4bc8871134e8b6c925c180c0ed2c30e109cc39c4d70099bf448e03b79"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.576462, "relation_name": null, "raw_code": "-- Sigma + Connect Fees\n  SELECT\n    bt.description AS balance_transaction_description,\n    bt.amount / 100.0 AS total_fees_CALCULATED\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description NOT LIKE 'Radar%'\n    AND bt.description NOT LIKE 'Card payments (%'\n    AND bt.description NOT LIKE 'Card Account Updater (CAU)%'\n    AND bt.description LIKE '%2021-12%'\n  GROUP BY\n    1,2\n    UNION ALL\n      -- Card Account Updater Fees\n   SELECT\n    bt.description AS balance_transaction_description,\n    bt.amount / 100.0 AS total_fees_CALCULATED\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description LIKE '%2021-12%'\n    AND bt.description LIKE 'Card Account Updater (CAU)%'\n  GROUP BY\n    1,2", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/finance_reconciliation/unattributed_stripe_fees.sql", "compiled": true, "compiled_code": "-- Sigma + Connect Fees\n  SELECT\n    bt.description AS balance_transaction_description,\n    bt.amount / 100.0 AS total_fees_CALCULATED\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description NOT LIKE 'Radar%'\n    AND bt.description NOT LIKE 'Card payments (%'\n    AND bt.description NOT LIKE 'Card Account Updater (CAU)%'\n    AND bt.description LIKE '%2021-12%'\n  GROUP BY\n    1,2\n    UNION ALL\n      -- Card Account Updater Fees\n   SELECT\n    bt.description AS balance_transaction_description,\n    bt.amount / 100.0 AS total_fees_CALCULATED\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description LIKE '%2021-12%'\n    AND bt.description LIKE 'Card Account Updater (CAU)%'\n  GROUP BY\n    1,2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.stripe_not_finance": {"database": "analytics-prod-328313", "schema": "prod", "name": "stripe_not_finance", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/finance_reconciliation/stripe_not_finance.sql", "original_file_path": "analysis/finance_reconciliation/stripe_not_finance.sql", "unique_id": "analysis.promise_dwh.stripe_not_finance", "fqn": ["promise_dwh", "analysis", "finance_reconciliation", "stripe_not_finance"], "alias": "stripe_not_finance", "checksum": {"name": "sha256", "checksum": "5b83393ba8455a7ba1b1cb959fca1f508874935adcd48c8456a686947dee202b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.5783029, "relation_name": null, "raw_code": "WITH stripe_transactions AS (SELECT\n  *\nFROM (\n  WITH\n    charge_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.charge_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.charge_id IS NOT NULL\n      AND td.dispute_id IS NULL\n      AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    GROUP BY\n      td.charge_id ),\n    dispute_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.dispute_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.dispute_id IS NOT NULL\n      AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    GROUP BY\n      td.dispute_id ),\n    jurisdictions AS (\n    SELECT\n      c.id AS charge_id,\n      c.balance_transaction_id,\n      CASE\n        WHEN c.statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.statement_descriptor, (STRPOS(c.statement_descriptor, '-') + 1), (LENGTH(c.statement_descriptor) - STRPOS(c.statement_descriptor, '-')) ) ) )\n        WHEN c.calculated_statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.calculated_statement_descriptor, (STRPOS(c.calculated_statement_descriptor, '*') + 1), (LENGTH(c.calculated_statement_descriptor) - STRPOS(c.calculated_statement_descriptor, '*')) ) ) )\n      ELSE\n      NULL\n    END\n      AS jurisdiction\n    FROM\n      `analytics-prod-328313.stripe.charge` c )\n    -- Captured Charge + Payment Transactions Plus Associated Refunds\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN bt.type = 'charge' THEN 'Credit Card'\n      WHEN bt.type = 'payment' THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    bt.amount / 100.0 AS charge_amount,\n    r.amount /100.0 AS refund_amount,\n    (COALESCE(bt.amount,\n        0) - COALESCE(r.amount,\n        0)) / 100.0 AS total_revenue_CALCULATED,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(bt.fee,\n      0)\n  END\n    / 100.0 AS ach_fee,\n    cf.ic_flat AS ic_flat,\n    cf.ic_pct AS ic_pct,\n    cf.stripe_flat AS stripe_flat,\n    cf.stripe_pct AS stripe_pct,\n    COALESCE(cf.total_fees,\n      0) AS total_stripe_ic_fees,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(rbt.fee,\n      0)\n  END\n    / 100.0 AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    (CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(bt.fee,\n        0)\n    END\n      + COALESCE(cf.total_fees,\n        0) +\n      CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(rbt.fee,\n        0)\n    END\n      + 5) / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Captured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    bt.source = c.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    bt.id = j.balance_transaction_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` rbt\n  ON\n    r.balance_transaction_id = rbt.id\n  WHERE\n    bt.type IN ('payment',\n      'charge')\n  UNION ALL\n    -- Uncaptured Charge Transactions\n  SELECT\n    COALESCE(j.jurisdiction,\n      'UNKNOWN'),\n    'Credit Card' AS payment_method,\n    'charge - unsuccessful' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    .05 AS total_fees_CALCULATED,\n    NULL AS balance_transaction_id,\n    NULL AS balance_transaction_created,\n    NULL AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Uncaptured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    jurisdictions j\n  ON\n    c.id = j.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  WHERE\n    c.captured IS FALSE\n  UNION ALL\n    -- Dispute Data\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN cbt.type = 'charge' THEN 'Credit Card'\n      WHEN cbt.type IN ('payment_failure_refund',\n      'payment') THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    'dispute' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", d.created, \"America/Los_Angeles\") AS transaction_date,\n    -d.amount / 100.0 AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    df.ic_flat AS ic_flat,\n    df.ic_pct AS ic_pct,\n    df.stripe_flat AS stripe_flat,\n    df.stripe_pct AS stripe_pct,\n    COALESCE(df.total_fees,\n      0) AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    bt.fee / 100.0 AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    COALESCE(df.total_fees,\n        0) + (bt.fee / 100.0) AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    NULL AS fee_explanation,\n    'Disputes' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.dispute` d\n  JOIN\n    `analytics-prod-328313.stripe.dispute_balance_transaction` dbt\n  ON\n    d.id = dbt.dispute_id\n  JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    dbt.balance_transaction_id = bt.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.charge` c\n  ON\n    d.charge_id = c.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` cbt\n  ON\n    c.balance_transaction_id = cbt.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    d.charge_id = j.charge_id\n  LEFT JOIN\n    dispute_ic_fees df\n  ON\n    d.id = df.dispute_id\n  UNION ALL\n      -- Sigma + Connect Fees\n  SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    -- Unlike other transactions, we invoice for sigma/connect fees that are charged after the month they're incurred. \n    -- That is: Fees charged in July should be on the reconciliation reports for June.\n    -- Fudging the date stamp below to include them automatically. \n    FORMAT_TIMESTAMP(\"%F %T\", CAST(DATE_SUB(DATE(bt.created), INTERVAL 1 MONTH) as TIMESTAMP), \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - ConnectSigma' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description NOT LIKE 'Radar%'\n    AND bt.description NOT LIKE 'Card payments (%'\n    AND bt.description NOT LIKE 'Card Account Updater (CAU)%'\n    AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount \n    UNION ALL\n      -- Card Account Updater Fees\n   SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - CAU' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    AND bt.description LIKE 'Card Account Updater (CAU)%'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount)\nWHERE\n  transaction_date >= '2021-12-01'\n  AND transaction_date < '2022-01-01'\nORDER BY\n  transaction_date\n),\nfinance_transactions AS (\nSELECT\n    (FORMAT_TIMESTAMP('%F %T', finance.effective_at , 'America/Los_Angeles')) AS finance_effective_time,\n        (FORMAT_TIMESTAMP('%F %T', finance.event_finalized_at , 'America/Los_Angeles')) AS finance_finalized_time,\n    finance.acct_identifier_jurisdiction_id  AS finance_jurisdiction_id,\n    sse_ids.acct_identifier_client_id  AS sse_ids_client_id,\n    finance.acct_identifier_obligation_id AS obligation_id,\n    sse_ids.acct_identifier_payment_id AS sse_ids_payment_id,\n    far.human_readable_reference  AS far_human_readable_reference,\n    sse_ids.acct_identifier_provider AS sse_ids_provider,\n    CASE\n          WHEN finance_event.refund_id IS NOT NULL\n          THEN refund_attempt.provider_details_processorRefundId\n          ELSE (CASE\n          WHEN sse_ids.acct_identifier_provider in ('Stripe', 'StripePlaidAch')\n          THEN payment_attempt.provider_details_stripeChargeId\n          WHEN sse_ids.acct_identifier_provider = 'StripePaymentIntents'\n          THEN payment_attempt.provider_details_paymentIntentId\n          ELSE far.human_readable_reference\n        END)\n        END AS sse_events_provider_details,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'PaidCollection') THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_obligation_amount,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'ClientPaidFees') THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_client_paid_fee,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'PaymentProviderHeldFunds') THEN ( finance.amount/100  )  ELSE NULL END), 0) AS finance_net_payment,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'AccountsReceivable') THEN ( finance.amount/100  )  ELSE NULL END), 0) AS finance_jurisdiction_paid_fee,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind  IN ('AccountsReceivable', 'PaidCollection')) THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_remit_amount\nFROM `analytics-prod-328313.finance.single_sided_entry`\n     AS finance\n\nLEFT JOIN `analytics-prod-328313.looker_scratch.LR_T48641641489734855_sse_ids` AS sse_ids ON finance.event_id = sse_ids.event_id\nLEFT JOIN `analytics-prod-328313.finance.finance_event`\n     AS finance_event ON finance.event_id = finance_event.id\nLEFT JOIN `analytics-prod-328313.finance.payment_attempt`\n     AS payment_attempt ON payment_attempt.id = COALESCE(sse_ids.acct_identifier_payment_id, finance.acct_identifier_scheduled_payment_id)\nLEFT JOIN `analytics-prod-328313.finance.refund_attempt`\n     AS refund_attempt ON refund_attempt.id = finance_event.refund_id\nLEFT JOIN `analytics-prod-328313.finance.finance_api_request`\n     AS far ON far.payment_attempt_id = payment_attempt.id\nWHERE ((( finance.effective_at  ) >= (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND ( finance.effective_at  ) < (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles')))) AND ((( finance.event_finalized_at  ) >= (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND ( finance.event_finalized_at  ) < (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles')))) AND (finance.event_kind ) IN ('PaymentRefunded', 'PaymentSucceeded') AND (finance.event_status ) = 'Recorded'\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\nSELECT \n  s.*\nFROM\n  stripe_transactions s\n  LEFT JOIN finance_transactions ch ON s.charge_id = ch.sse_events_provider_details\n  LEFT JOIN finance_transactions pi ON s.charge_payment_intent_id = pi.sse_events_provider_details\n  LEFT JOIN finance_transactions re ON s.refund_id = re.sse_events_provider_details\nWHERE \n  ch.sse_events_provider_details is null AND pi.sse_events_provider_details is null AND re.sse_events_provider_details is NULL\n  AND transaction_type in ('charge', 'dispute', 'payment', 'refund')", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/finance_reconciliation/stripe_not_finance.sql", "compiled": true, "compiled_code": "WITH stripe_transactions AS (SELECT\n  *\nFROM (\n  WITH\n    charge_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.charge_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.charge_id IS NOT NULL\n      AND td.dispute_id IS NULL\n      AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    GROUP BY\n      td.charge_id ),\n    dispute_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.dispute_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.dispute_id IS NOT NULL\n      AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    GROUP BY\n      td.dispute_id ),\n    jurisdictions AS (\n    SELECT\n      c.id AS charge_id,\n      c.balance_transaction_id,\n      CASE\n        WHEN c.statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.statement_descriptor, (STRPOS(c.statement_descriptor, '-') + 1), (LENGTH(c.statement_descriptor) - STRPOS(c.statement_descriptor, '-')) ) ) )\n        WHEN c.calculated_statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.calculated_statement_descriptor, (STRPOS(c.calculated_statement_descriptor, '*') + 1), (LENGTH(c.calculated_statement_descriptor) - STRPOS(c.calculated_statement_descriptor, '*')) ) ) )\n      ELSE\n      NULL\n    END\n      AS jurisdiction\n    FROM\n      `analytics-prod-328313.stripe.charge` c )\n    -- Captured Charge + Payment Transactions Plus Associated Refunds\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN bt.type = 'charge' THEN 'Credit Card'\n      WHEN bt.type = 'payment' THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    bt.amount / 100.0 AS charge_amount,\n    r.amount /100.0 AS refund_amount,\n    (COALESCE(bt.amount,\n        0) - COALESCE(r.amount,\n        0)) / 100.0 AS total_revenue_CALCULATED,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(bt.fee,\n      0)\n  END\n    / 100.0 AS ach_fee,\n    cf.ic_flat AS ic_flat,\n    cf.ic_pct AS ic_pct,\n    cf.stripe_flat AS stripe_flat,\n    cf.stripe_pct AS stripe_pct,\n    COALESCE(cf.total_fees,\n      0) AS total_stripe_ic_fees,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(rbt.fee,\n      0)\n  END\n    / 100.0 AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    (CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(bt.fee,\n        0)\n    END\n      + COALESCE(cf.total_fees,\n        0) +\n      CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(rbt.fee,\n        0)\n    END\n      + 5) / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Captured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    bt.source = c.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    bt.id = j.balance_transaction_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` rbt\n  ON\n    r.balance_transaction_id = rbt.id\n  WHERE\n    bt.type IN ('payment',\n      'charge')\n  UNION ALL\n    -- Uncaptured Charge Transactions\n  SELECT\n    COALESCE(j.jurisdiction,\n      'UNKNOWN'),\n    'Credit Card' AS payment_method,\n    'charge - unsuccessful' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    .05 AS total_fees_CALCULATED,\n    NULL AS balance_transaction_id,\n    NULL AS balance_transaction_created,\n    NULL AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Uncaptured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    jurisdictions j\n  ON\n    c.id = j.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  WHERE\n    c.captured IS FALSE\n  UNION ALL\n    -- Dispute Data\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN cbt.type = 'charge' THEN 'Credit Card'\n      WHEN cbt.type IN ('payment_failure_refund',\n      'payment') THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    'dispute' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", d.created, \"America/Los_Angeles\") AS transaction_date,\n    -d.amount / 100.0 AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    df.ic_flat AS ic_flat,\n    df.ic_pct AS ic_pct,\n    df.stripe_flat AS stripe_flat,\n    df.stripe_pct AS stripe_pct,\n    COALESCE(df.total_fees,\n      0) AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    bt.fee / 100.0 AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    COALESCE(df.total_fees,\n        0) + (bt.fee / 100.0) AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    NULL AS fee_explanation,\n    'Disputes' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.dispute` d\n  JOIN\n    `analytics-prod-328313.stripe.dispute_balance_transaction` dbt\n  ON\n    d.id = dbt.dispute_id\n  JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    dbt.balance_transaction_id = bt.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.charge` c\n  ON\n    d.charge_id = c.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` cbt\n  ON\n    c.balance_transaction_id = cbt.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    d.charge_id = j.charge_id\n  LEFT JOIN\n    dispute_ic_fees df\n  ON\n    d.id = df.dispute_id\n  UNION ALL\n      -- Sigma + Connect Fees\n  SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    -- Unlike other transactions, we invoice for sigma/connect fees that are charged after the month they're incurred. \n    -- That is: Fees charged in July should be on the reconciliation reports for June.\n    -- Fudging the date stamp below to include them automatically. \n    FORMAT_TIMESTAMP(\"%F %T\", CAST(DATE_SUB(DATE(bt.created), INTERVAL 1 MONTH) as TIMESTAMP), \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - ConnectSigma' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description NOT LIKE 'Radar%'\n    AND bt.description NOT LIKE 'Card payments (%'\n    AND bt.description NOT LIKE 'Card Account Updater (CAU)%'\n    AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount \n    UNION ALL\n      -- Card Account Updater Fees\n   SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - CAU' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    AND bt.description LIKE 'Card Account Updater (CAU)%'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount)\nWHERE\n  transaction_date >= '2021-12-01'\n  AND transaction_date < '2022-01-01'\nORDER BY\n  transaction_date\n),\nfinance_transactions AS (\nSELECT\n    (FORMAT_TIMESTAMP('%F %T', finance.effective_at , 'America/Los_Angeles')) AS finance_effective_time,\n        (FORMAT_TIMESTAMP('%F %T', finance.event_finalized_at , 'America/Los_Angeles')) AS finance_finalized_time,\n    finance.acct_identifier_jurisdiction_id  AS finance_jurisdiction_id,\n    sse_ids.acct_identifier_client_id  AS sse_ids_client_id,\n    finance.acct_identifier_obligation_id AS obligation_id,\n    sse_ids.acct_identifier_payment_id AS sse_ids_payment_id,\n    far.human_readable_reference  AS far_human_readable_reference,\n    sse_ids.acct_identifier_provider AS sse_ids_provider,\n    CASE\n          WHEN finance_event.refund_id IS NOT NULL\n          THEN refund_attempt.provider_details_processorRefundId\n          ELSE (CASE\n          WHEN sse_ids.acct_identifier_provider in ('Stripe', 'StripePlaidAch')\n          THEN payment_attempt.provider_details_stripeChargeId\n          WHEN sse_ids.acct_identifier_provider = 'StripePaymentIntents'\n          THEN payment_attempt.provider_details_paymentIntentId\n          ELSE far.human_readable_reference\n        END)\n        END AS sse_events_provider_details,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'PaidCollection') THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_obligation_amount,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'ClientPaidFees') THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_client_paid_fee,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'PaymentProviderHeldFunds') THEN ( finance.amount/100  )  ELSE NULL END), 0) AS finance_net_payment,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'AccountsReceivable') THEN ( finance.amount/100  )  ELSE NULL END), 0) AS finance_jurisdiction_paid_fee,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind  IN ('AccountsReceivable', 'PaidCollection')) THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_remit_amount\nFROM `analytics-prod-328313.finance.single_sided_entry`\n     AS finance\n\nLEFT JOIN `analytics-prod-328313.looker_scratch.LR_T48641641489734855_sse_ids` AS sse_ids ON finance.event_id = sse_ids.event_id\nLEFT JOIN `analytics-prod-328313.finance.finance_event`\n     AS finance_event ON finance.event_id = finance_event.id\nLEFT JOIN `analytics-prod-328313.finance.payment_attempt`\n     AS payment_attempt ON payment_attempt.id = COALESCE(sse_ids.acct_identifier_payment_id, finance.acct_identifier_scheduled_payment_id)\nLEFT JOIN `analytics-prod-328313.finance.refund_attempt`\n     AS refund_attempt ON refund_attempt.id = finance_event.refund_id\nLEFT JOIN `analytics-prod-328313.finance.finance_api_request`\n     AS far ON far.payment_attempt_id = payment_attempt.id\nWHERE ((( finance.effective_at  ) >= (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND ( finance.effective_at  ) < (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles')))) AND ((( finance.event_finalized_at  ) >= (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND ( finance.event_finalized_at  ) < (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles')))) AND (finance.event_kind ) IN ('PaymentRefunded', 'PaymentSucceeded') AND (finance.event_status ) = 'Recorded'\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\nSELECT \n  s.*\nFROM\n  stripe_transactions s\n  LEFT JOIN finance_transactions ch ON s.charge_id = ch.sse_events_provider_details\n  LEFT JOIN finance_transactions pi ON s.charge_payment_intent_id = pi.sse_events_provider_details\n  LEFT JOIN finance_transactions re ON s.refund_id = re.sse_events_provider_details\nWHERE \n  ch.sse_events_provider_details is null AND pi.sse_events_provider_details is null AND re.sse_events_provider_details is NULL\n  AND transaction_type in ('charge', 'dispute', 'payment', 'refund')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.flow_for_month_as_of_now": {"database": "analytics-prod-328313", "schema": "prod", "name": "flow_for_month_as_of_now", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/old_finance_report_templates/flow_for_month_as_of_now.sql", "original_file_path": "analysis/old_finance_report_templates/flow_for_month_as_of_now.sql", "unique_id": "analysis.promise_dwh.flow_for_month_as_of_now", "fqn": ["promise_dwh", "analysis", "old_finance_report_templates", "flow_for_month_as_of_now"], "alias": "flow_for_month_as_of_now", "checksum": {"name": "sha256", "checksum": "97858c7a9e9778a0af07189519a99770af886ab1c5a71a0e5362c0c0d9b6369a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.580367, "relation_name": null, "raw_code": "set local time zone 'America/Los_Angeles';\n\n\nwith flow as (\nselect \n  acctidentifierjurisdictionid as jurisdiction_id,\n  accttype, \n  acctkind, \n  case \n  when accttype in ('Revenue', 'Expense')\n    or acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n  then 'Actual'\n  else 'Hypothetical'\n  end as status,\n  eventkind,\n  sum(amount) as amount\nfrom singlesidedentry\nwhere eventstatus = 'Recorded'\n  and effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n  and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\ngroup by 1, 2, 3, 4, 5\norder by 1, 2, 3, 4, 5\n)\nselect \n  jurisdiction_id, accttype, acctkind, status, eventkind, amount,\n  (case when accttype in ('Revenue', 'Liability') then -1 else 1 end) * \n  cast (amount/100.0 as decimal(18, 2)) as human_readable_amount\nfrom flow\norder by 1, 2, 3, 4, 5", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/old_finance_report_templates/flow_for_month_as_of_now.sql", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\n\nwith flow as (\nselect \n  acctidentifierjurisdictionid as jurisdiction_id,\n  accttype, \n  acctkind, \n  case \n  when accttype in ('Revenue', 'Expense')\n    or acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n  then 'Actual'\n  else 'Hypothetical'\n  end as status,\n  eventkind,\n  sum(amount) as amount\nfrom singlesidedentry\nwhere eventstatus = 'Recorded'\n  and effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n  and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\ngroup by 1, 2, 3, 4, 5\norder by 1, 2, 3, 4, 5\n)\nselect \n  jurisdiction_id, accttype, acctkind, status, eventkind, amount,\n  (case when accttype in ('Revenue', 'Liability') then -1 else 1 end) * \n  cast (amount/100.0 as decimal(18, 2)) as human_readable_amount\nfrom flow\norder by 1, 2, 3, 4, 5", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.payments_this_month_for_other_months": {"database": "analytics-prod-328313", "schema": "prod", "name": "payments_this_month_for_other_months", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/old_finance_report_templates/payments_this_month_for_other_months.sql", "original_file_path": "analysis/old_finance_report_templates/payments_this_month_for_other_months.sql", "unique_id": "analysis.promise_dwh.payments_this_month_for_other_months", "fqn": ["promise_dwh", "analysis", "old_finance_report_templates", "payments_this_month_for_other_months"], "alias": "payments_this_month_for_other_months", "checksum": {"name": "sha256", "checksum": "17ad909a5798cc96509256afeb132939bc26898ff2b27cb13364302df22bea42"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.582158, "relation_name": null, "raw_code": "set local time zone 'America/Los_Angeles';\n\nwith summarized_events as (\n        select \n    sse.effectiveat as paid_at,\n    eventcreatedat as created_at,\n        eventfinalizedat as finalized_at,\n    min(acctidentifierpaymentid) as payment_id,\n    min(event.refundid) as refund_id,\n    min(acctidentifierjurisdictionid) as jurisdiction_id,\n    min(acctidentifierclientid) as client_id,\n    min(acctidentifierobligationid) as obligation_id,\n    min(acctidentifierprovider) as payment_provider,\n          sum(\n                  case when acctkind = 'PaidCollection' then -1 * amount else 0 end\n          ) as obligation_amount,\n          sum(\n                  case when acctkind = 'ClientPaidFees' then -1 * amount else 0 end\n          )  as client_paid_fee,\n          sum(\n                  case when acctkind = 'PaymentProviderHeldFunds' then amount else 0 end\n          ) as net_payment,\n    sum(\n      case when acctkind = 'AccountsReceivable' then amount else 0 end\n    )  as jurisdiction_paid_fee,\n    sum(\n      case when acctkind in ('AccountsReceivable', 'PaidCollection')  then -1 * amount else 0 end\n    )  as remit_amount\n        from singlesidedentry sse left join event\non sse.eventid = event.id\n    where (\n       sse.effectiveat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n       or sse.effectiveat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\n    )\n    and eventfinalizedat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n    and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        and sse.eventkind in ('PaymentSucceeded', 'PaymentRefunded')\n        and eventstatus = 'Recorded'\n        group by 1, 2, 3\n)\nselect \n  to_char(summarized_events.paid_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as paid_at,\n--  to_char(summarized_events.created_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as created_at,\n  to_char(summarized_events.finalized_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as recorded_at,\n  summarized_events.jurisdiction_id,\n  summarized_events.client_id,\n  summarized_events.obligation_id,\n  summarized_events.payment_id,\n  far.humanreadablereference,\n  summarized_events.payment_provider,  \ncase\nwhen summarized_events.refund_id is not null\nthen\n  ra.provideranddetails ->> 'processorRefundId'\nelse\n  (pa.provideranddetails #>> '{}')::jsonb->>(\n    case \n    when summarized_events.payment_provider = 'Stripe'\n        then 'stripeChargeId'\n    when summarized_events.payment_provider = 'StripePlaidAch'\n        then 'stripeChargeId'\n    when summarized_events.payment_provider = 'StripePaymentIntents'\n        then 'paymentIntentId'\n    else 'humanReadablePaymentMethod'\n    end\n  )\nend\n  as provider_details,\n  cast(obligation_amount/100.00 as decimal(18, 2)) as obligation_amount,\n  cast(client_paid_fee/100.00 as decimal(18, 2)) as client_paid_fee,\n  cast(net_payment/100.00 as decimal(18, 2)) as net_payment,\n  cast(jurisdiction_paid_fee/100.00 as decimal(18, 2)) as jurisdiction_paid_fee,\n  cast(remit_amount/100.00 as decimal(18, 2)) as remit_amount\nfrom summarized_events\nleft join financeapirequest as far\non summarized_events.payment_id = far.paymentattemptid\nleft join financeapirequest as far_re\non summarized_events.refund_id = far_re.refundattemptid\nleft join paymentattempt as pa\non summarized_events.payment_id = pa.id\nleft join refundattempt as ra\non summarized_events.refund_id = ra.id\norder by recorded_at, 1, 2", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/old_finance_report_templates/payments_this_month_for_other_months.sql", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\nwith summarized_events as (\n        select \n    sse.effectiveat as paid_at,\n    eventcreatedat as created_at,\n        eventfinalizedat as finalized_at,\n    min(acctidentifierpaymentid) as payment_id,\n    min(event.refundid) as refund_id,\n    min(acctidentifierjurisdictionid) as jurisdiction_id,\n    min(acctidentifierclientid) as client_id,\n    min(acctidentifierobligationid) as obligation_id,\n    min(acctidentifierprovider) as payment_provider,\n          sum(\n                  case when acctkind = 'PaidCollection' then -1 * amount else 0 end\n          ) as obligation_amount,\n          sum(\n                  case when acctkind = 'ClientPaidFees' then -1 * amount else 0 end\n          )  as client_paid_fee,\n          sum(\n                  case when acctkind = 'PaymentProviderHeldFunds' then amount else 0 end\n          ) as net_payment,\n    sum(\n      case when acctkind = 'AccountsReceivable' then amount else 0 end\n    )  as jurisdiction_paid_fee,\n    sum(\n      case when acctkind in ('AccountsReceivable', 'PaidCollection')  then -1 * amount else 0 end\n    )  as remit_amount\n        from singlesidedentry sse left join event\non sse.eventid = event.id\n    where (\n       sse.effectiveat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n       or sse.effectiveat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\n    )\n    and eventfinalizedat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n    and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        and sse.eventkind in ('PaymentSucceeded', 'PaymentRefunded')\n        and eventstatus = 'Recorded'\n        group by 1, 2, 3\n)\nselect \n  to_char(summarized_events.paid_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as paid_at,\n--  to_char(summarized_events.created_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as created_at,\n  to_char(summarized_events.finalized_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as recorded_at,\n  summarized_events.jurisdiction_id,\n  summarized_events.client_id,\n  summarized_events.obligation_id,\n  summarized_events.payment_id,\n  far.humanreadablereference,\n  summarized_events.payment_provider,  \ncase\nwhen summarized_events.refund_id is not null\nthen\n  ra.provideranddetails ->> 'processorRefundId'\nelse\n  (pa.provideranddetails #>> '{}')::jsonb->>(\n    case \n    when summarized_events.payment_provider = 'Stripe'\n        then 'stripeChargeId'\n    when summarized_events.payment_provider = 'StripePlaidAch'\n        then 'stripeChargeId'\n    when summarized_events.payment_provider = 'StripePaymentIntents'\n        then 'paymentIntentId'\n    else 'humanReadablePaymentMethod'\n    end\n  )\nend\n  as provider_details,\n  cast(obligation_amount/100.00 as decimal(18, 2)) as obligation_amount,\n  cast(client_paid_fee/100.00 as decimal(18, 2)) as client_paid_fee,\n  cast(net_payment/100.00 as decimal(18, 2)) as net_payment,\n  cast(jurisdiction_paid_fee/100.00 as decimal(18, 2)) as jurisdiction_paid_fee,\n  cast(remit_amount/100.00 as decimal(18, 2)) as remit_amount\nfrom summarized_events\nleft join financeapirequest as far\non summarized_events.payment_id = far.paymentattemptid\nleft join financeapirequest as far_re\non summarized_events.refund_id = far_re.refundattemptid\nleft join paymentattempt as pa\non summarized_events.payment_id = pa.id\nleft join refundattempt as ra\non summarized_events.refund_id = ra.id\norder by recorded_at, 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.flow_diff_since_month_end": {"database": "analytics-prod-328313", "schema": "prod", "name": "flow_diff_since_month_end", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/old_finance_report_templates/flow_diff_since_month_end.sql", "original_file_path": "analysis/old_finance_report_templates/flow_diff_since_month_end.sql", "unique_id": "analysis.promise_dwh.flow_diff_since_month_end", "fqn": ["promise_dwh", "analysis", "old_finance_report_templates", "flow_diff_since_month_end"], "alias": "flow_diff_since_month_end", "checksum": {"name": "sha256", "checksum": "bd63e02de6c80939f077f06c64a6fda8df028333be053030ebb26dea4043e18c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.583989, "relation_name": null, "raw_code": "set local time zone 'America/Los_Angeles';\n\n\nwith flow as (\nselect \n  acctidentifierjurisdictionid as jurisdiction_id,\n  accttype, \n  acctkind, \n  case \n  when accttype in ('Revenue', 'Expense')\n    or acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n  then 'Actual'\n  else 'Hypothetical'\n  end as status,\n  eventkind,\n  sum(amount) as amount_diff\nfrom singlesidedentry\nwhere eventstatus = 'Recorded'\n  and effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n  and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n  and eventfinalizedat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\ngroup by 1, 2, 3, 4, 5\norder by 1, 2, 3, 4, 5\n)\nselect \n  jurisdiction_id, accttype, acctkind, status, eventkind, amount_diff,\n  (case when accttype in ('Revenue', 'Liability') then -1 else 1 end) * \n  cast (amount_diff/100.0 as decimal(18, 2)) as amount_diff_dollars\nfrom flow\norder by 1, 2, 3, 4, 5", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/old_finance_report_templates/flow_diff_since_month_end.sql", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\n\nwith flow as (\nselect \n  acctidentifierjurisdictionid as jurisdiction_id,\n  accttype, \n  acctkind, \n  case \n  when accttype in ('Revenue', 'Expense')\n    or acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n  then 'Actual'\n  else 'Hypothetical'\n  end as status,\n  eventkind,\n  sum(amount) as amount_diff\nfrom singlesidedentry\nwhere eventstatus = 'Recorded'\n  and effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n  and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n  and eventfinalizedat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\ngroup by 1, 2, 3, 4, 5\norder by 1, 2, 3, 4, 5\n)\nselect \n  jurisdiction_id, accttype, acctkind, status, eventkind, amount_diff,\n  (case when accttype in ('Revenue', 'Liability') then -1 else 1 end) * \n  cast (amount_diff/100.0 as decimal(18, 2)) as amount_diff_dollars\nfrom flow\norder by 1, 2, 3, 4, 5", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.flow_as_of_month_end": {"database": "analytics-prod-328313", "schema": "prod", "name": "flow_as_of_month_end", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/old_finance_report_templates/flow_as_of_month_end.sql", "original_file_path": "analysis/old_finance_report_templates/flow_as_of_month_end.sql", "unique_id": "analysis.promise_dwh.flow_as_of_month_end", "fqn": ["promise_dwh", "analysis", "old_finance_report_templates", "flow_as_of_month_end"], "alias": "flow_as_of_month_end", "checksum": {"name": "sha256", "checksum": "4881c48912ee5bebdf8305a51cc0509678c0225647a14ea15ef9a408eddb836a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.585804, "relation_name": null, "raw_code": "set local time zone 'America/Los_Angeles';\n\n\nwith flow as (\nselect \n  acctidentifierjurisdictionid as jurisdiction_id,\n  accttype, \n  acctkind, \n  case \n  when accttype in ('Revenue', 'Expense')\n    or acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n  then 'Actual'\n  else 'Hypothetical'\n  end as status,\n  eventkind,\n  sum(amount) as amount\nfrom singlesidedentry\nwhere eventstatus = 'Recorded'\n  and effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n  and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n  and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\ngroup by 1, 2, 3, 4, 5\norder by 1, 2, 3, 4, 5\n)\nselect \n  jurisdiction_id, accttype, acctkind, status, eventkind, amount,\n  (case when accttype in ('Revenue', 'Liability') then -1 else 1 end) * \n  cast (amount/100.0 as decimal(18, 2)) as human_readable_amount\nfrom flow\norder by 1, 2, 3, 4, 5", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/old_finance_report_templates/flow_as_of_month_end.sql", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\n\nwith flow as (\nselect \n  acctidentifierjurisdictionid as jurisdiction_id,\n  accttype, \n  acctkind, \n  case \n  when accttype in ('Revenue', 'Expense')\n    or acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n  then 'Actual'\n  else 'Hypothetical'\n  end as status,\n  eventkind,\n  sum(amount) as amount\nfrom singlesidedentry\nwhere eventstatus = 'Recorded'\n  and effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n  and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n  and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\ngroup by 1, 2, 3, 4, 5\norder by 1, 2, 3, 4, 5\n)\nselect \n  jurisdiction_id, accttype, acctkind, status, eventkind, amount,\n  (case when accttype in ('Revenue', 'Liability') then -1 else 1 end) * \n  cast (amount/100.0 as decimal(18, 2)) as human_readable_amount\nfrom flow\norder by 1, 2, 3, 4, 5", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.balance_diff_since_month_end": {"database": "analytics-prod-328313", "schema": "prod", "name": "balance_diff_since_month_end", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/old_finance_report_templates/balance_diff_since_month_end.sql", "original_file_path": "analysis/old_finance_report_templates/balance_diff_since_month_end.sql", "unique_id": "analysis.promise_dwh.balance_diff_since_month_end", "fqn": ["promise_dwh", "analysis", "old_finance_report_templates", "balance_diff_since_month_end"], "alias": "balance_diff_since_month_end", "checksum": {"name": "sha256", "checksum": "ab6a1e96da4fb5530b20d2894197d009db1c64d50c7b7476cd3a634163cf8f68"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.58762, "relation_name": null, "raw_code": "set local time zone 'America/Los_Angeles';\n\nwith ending_balances_diff as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'ending' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance_diff\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n          and eventfinalizedat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_balances_diff as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'starting' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance_diff\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n          and eventfinalizedat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_and_ending_balances as (\n        select * from starting_balances_diff\n        union \n        select * from ending_balances_diff\n)\nselect \n  jurisdiction_id, period, accttype, acctkind, status, balance_diff,\n  (case when accttype = 'Liability' then -1 else 1 end) * \n  cast (balance_diff/100.0 as decimal(18, 2)) as balance_diff_dollars\nfrom starting_and_ending_balances\norder by 1, 2, 3, 4, 5 desc", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/old_finance_report_templates/balance_diff_since_month_end.sql", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\nwith ending_balances_diff as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'ending' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance_diff\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n          and eventfinalizedat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_balances_diff as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'starting' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance_diff\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n          and eventfinalizedat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_and_ending_balances as (\n        select * from starting_balances_diff\n        union \n        select * from ending_balances_diff\n)\nselect \n  jurisdiction_id, period, accttype, acctkind, status, balance_diff,\n  (case when accttype = 'Liability' then -1 else 1 end) * \n  cast (balance_diff/100.0 as decimal(18, 2)) as balance_diff_dollars\nfrom starting_and_ending_balances\norder by 1, 2, 3, 4, 5 desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.payments_this_month_for_this_month": {"database": "analytics-prod-328313", "schema": "prod", "name": "payments_this_month_for_this_month", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/old_finance_report_templates/payments_this_month_for_this_month.sql", "original_file_path": "analysis/old_finance_report_templates/payments_this_month_for_this_month.sql", "unique_id": "analysis.promise_dwh.payments_this_month_for_this_month", "fqn": ["promise_dwh", "analysis", "old_finance_report_templates", "payments_this_month_for_this_month"], "alias": "payments_this_month_for_this_month", "checksum": {"name": "sha256", "checksum": "6ce3ec508288a1bd0f854737adbae525d8d0ea957f4c4047ff17c357575283bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.5903628, "relation_name": null, "raw_code": "set local time zone 'America/Los_Angeles';\n\nwith summarized_events as (\n        select \n    sse.effectiveat as paid_at,\n    eventcreatedat as created_at,\n        eventfinalizedat as finalized_at,\n    min(acctidentifierpaymentid) as payment_id,\n    min(event.refundid) as refund_id,\n    min(acctidentifierjurisdictionid) as jurisdiction_id,\n    min(acctidentifierclientid) as client_id,\n    min(acctidentifierobligationid) as obligation_id,\n    min(acctidentifierprovider) as payment_provider,\n          sum(\n                  case when acctkind = 'PaidCollection' then -1 * amount else 0 end\n          ) as obligation_amount,\n          sum(\n                  case when acctkind = 'ClientPaidFees' then -1 * amount else 0 end\n          )  as client_paid_fee,\n          sum(\n                  case when acctkind = 'PaymentProviderHeldFunds' then amount else 0 end\n          ) as net_payment,\n    sum(\n      case when acctkind = 'AccountsReceivable' then amount else 0 end\n    )  as jurisdiction_paid_fee,\n    sum(\n      case when acctkind in ('AccountsReceivable', 'PaidCollection')  then -1 * amount else 0 end\n    )  as remit_amount\n        from singlesidedentry sse left join event on sse.eventid = event.id\n    where sse.effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n    and sse.effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n    and eventfinalizedat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n    and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        and sse.eventkind in ('PaymentSucceeded', 'PaymentRefunded')\n        and eventstatus = 'Recorded'\n        group by 1, 2, 3\n)\nselect --count(*) from summarized_events /*\n  to_char(summarized_events.paid_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as paid_at,\n--  to_char(summarized_events.created_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as created_at,\n  to_char(summarized_events.finalized_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as recorded_at,\n  summarized_events.jurisdiction_id,\n  summarized_events.client_id,\n  summarized_events.obligation_id,\n  summarized_events.payment_id,\n  far.humanreadablereference,\n  summarized_events.payment_provider,\n  case\n    when summarized_events.refund_id is not null\n    then\n      ra.provideranddetails ->> 'processorRefundId'\n    else  \n      (pa.provideranddetails #>> '{}')::jsonb->>(\n        case \n        when summarized_events.payment_provider = 'Stripe'\n            then 'stripeChargeId'\n        when summarized_events.payment_provider = 'StripePlaidAch'\n            then 'stripeChargeId'\n        when summarized_events.payment_provider = 'StripePaymentIntents'\n            then 'paymentIntentId'\n        else 'humanReadablePaymentMethod'\n        end\n      )\n  end\n  as provider_details,\n  cast(obligation_amount/100.00 as decimal(18, 2)) as obligation_amount,\n  cast(client_paid_fee/100.00 as decimal(18, 2)) as client_paid_fee,\n  cast(net_payment/100.00 as decimal(18, 2)) as net_payment,\n  cast(jurisdiction_paid_fee/100.00 as decimal(18, 2)) as jurisdiction_paid_fee,\n  cast(remit_amount/100.00 as decimal(18, 2)) as remit_amount\nfrom summarized_events --*/\nleft join financeapirequest as far\non summarized_events.payment_id = far.paymentattemptid\nleft join financeapirequest as far_re\non summarized_events.refund_id = far_re.refundattemptid\nleft join paymentattempt as pa\non summarized_events.payment_id = pa.id\nleft join refundattempt as ra\non summarized_events.refund_id = ra.id\norder by recorded_at, 1, 2", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/old_finance_report_templates/payments_this_month_for_this_month.sql", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\nwith summarized_events as (\n        select \n    sse.effectiveat as paid_at,\n    eventcreatedat as created_at,\n        eventfinalizedat as finalized_at,\n    min(acctidentifierpaymentid) as payment_id,\n    min(event.refundid) as refund_id,\n    min(acctidentifierjurisdictionid) as jurisdiction_id,\n    min(acctidentifierclientid) as client_id,\n    min(acctidentifierobligationid) as obligation_id,\n    min(acctidentifierprovider) as payment_provider,\n          sum(\n                  case when acctkind = 'PaidCollection' then -1 * amount else 0 end\n          ) as obligation_amount,\n          sum(\n                  case when acctkind = 'ClientPaidFees' then -1 * amount else 0 end\n          )  as client_paid_fee,\n          sum(\n                  case when acctkind = 'PaymentProviderHeldFunds' then amount else 0 end\n          ) as net_payment,\n    sum(\n      case when acctkind = 'AccountsReceivable' then amount else 0 end\n    )  as jurisdiction_paid_fee,\n    sum(\n      case when acctkind in ('AccountsReceivable', 'PaidCollection')  then -1 * amount else 0 end\n    )  as remit_amount\n        from singlesidedentry sse left join event on sse.eventid = event.id\n    where sse.effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n    and sse.effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n    and eventfinalizedat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n    and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        and sse.eventkind in ('PaymentSucceeded', 'PaymentRefunded')\n        and eventstatus = 'Recorded'\n        group by 1, 2, 3\n)\nselect --count(*) from summarized_events /*\n  to_char(summarized_events.paid_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as paid_at,\n--  to_char(summarized_events.created_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as created_at,\n  to_char(summarized_events.finalized_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as recorded_at,\n  summarized_events.jurisdiction_id,\n  summarized_events.client_id,\n  summarized_events.obligation_id,\n  summarized_events.payment_id,\n  far.humanreadablereference,\n  summarized_events.payment_provider,\n  case\n    when summarized_events.refund_id is not null\n    then\n      ra.provideranddetails ->> 'processorRefundId'\n    else  \n      (pa.provideranddetails #>> '{}')::jsonb->>(\n        case \n        when summarized_events.payment_provider = 'Stripe'\n            then 'stripeChargeId'\n        when summarized_events.payment_provider = 'StripePlaidAch'\n            then 'stripeChargeId'\n        when summarized_events.payment_provider = 'StripePaymentIntents'\n            then 'paymentIntentId'\n        else 'humanReadablePaymentMethod'\n        end\n      )\n  end\n  as provider_details,\n  cast(obligation_amount/100.00 as decimal(18, 2)) as obligation_amount,\n  cast(client_paid_fee/100.00 as decimal(18, 2)) as client_paid_fee,\n  cast(net_payment/100.00 as decimal(18, 2)) as net_payment,\n  cast(jurisdiction_paid_fee/100.00 as decimal(18, 2)) as jurisdiction_paid_fee,\n  cast(remit_amount/100.00 as decimal(18, 2)) as remit_amount\nfrom summarized_events --*/\nleft join financeapirequest as far\non summarized_events.payment_id = far.paymentattemptid\nleft join financeapirequest as far_re\non summarized_events.refund_id = far_re.refundattemptid\nleft join paymentattempt as pa\non summarized_events.payment_id = pa.id\nleft join refundattempt as ra\non summarized_events.refund_id = ra.id\norder by recorded_at, 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.balance_for_month_as_of_now": {"database": "analytics-prod-328313", "schema": "prod", "name": "balance_for_month_as_of_now", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/old_finance_report_templates/balance_for_month_as_of_now.sql", "original_file_path": "analysis/old_finance_report_templates/balance_for_month_as_of_now.sql", "unique_id": "analysis.promise_dwh.balance_for_month_as_of_now", "fqn": ["promise_dwh", "analysis", "old_finance_report_templates", "balance_for_month_as_of_now"], "alias": "balance_for_month_as_of_now", "checksum": {"name": "sha256", "checksum": "6b4476ef1819c1fcafc0a62a3e6f7bc2fb593ab946aa9aae5679194583eb70cf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.5922172, "relation_name": null, "raw_code": "set local time zone 'America/Los_Angeles';\n\nwith ending_balances as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'ending' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_balances as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'starting' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_and_ending_balances as (\n        select * from starting_balances\n        union \n        select * from ending_balances\n)\nselect \n  jurisdiction_id, period, accttype, acctkind, status, balance,\n  (case when accttype = 'Liability' then -1 else 1 end) * \n  cast (balance/100.0 as decimal(18, 2)) as human_readable_balance\nfrom starting_and_ending_balances\norder by 1, 2, 3, 4, 5 desc", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/old_finance_report_templates/balance_for_month_as_of_now.sql", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\nwith ending_balances as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'ending' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_balances as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'starting' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_and_ending_balances as (\n        select * from starting_balances\n        union \n        select * from ending_balances\n)\nselect \n  jurisdiction_id, period, accttype, acctkind, status, balance,\n  (case when accttype = 'Liability' then -1 else 1 end) * \n  cast (balance/100.0 as decimal(18, 2)) as human_readable_balance\nfrom starting_and_ending_balances\norder by 1, 2, 3, 4, 5 desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.payments_in_other_months_for_this_month": {"database": "analytics-prod-328313", "schema": "prod", "name": "payments_in_other_months_for_this_month", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/old_finance_report_templates/payments_in_other_months_for_this_month.sql", "original_file_path": "analysis/old_finance_report_templates/payments_in_other_months_for_this_month.sql", "unique_id": "analysis.promise_dwh.payments_in_other_months_for_this_month", "fqn": ["promise_dwh", "analysis", "old_finance_report_templates", "payments_in_other_months_for_this_month"], "alias": "payments_in_other_months_for_this_month", "checksum": {"name": "sha256", "checksum": "0983223245557f2561055631ddca4d5b2da17250191e85bbc29dd77481d742d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.594038, "relation_name": null, "raw_code": "set local time zone 'America/Los_Angeles';\n\nwith summarized_events as (\n        select \n    sse.effectiveat as paid_at,\n    eventcreatedat as created_at,\n        eventfinalizedat as finalized_at,\n    min(acctidentifierpaymentid) as payment_id,\n    min(event.refundid) as refund_id,\n    min(acctidentifierjurisdictionid) as jurisdiction_id,\n    min(acctidentifierclientid) as client_id,\n    min(acctidentifierobligationid) as obligation_id,\n    min(acctidentifierprovider) as payment_provider,\n          sum(\n                  case when acctkind = 'PaidCollection' then -1 * amount else 0 end\n          ) as obligation_amount,\n          sum(\n                  case when acctkind = 'ClientPaidFees' then -1 * amount else 0 end\n          )  as client_paid_fee,\n          sum(\n                  case when acctkind = 'PaymentProviderHeldFunds' then amount else 0 end\n          ) as net_payment,\n    sum(\n      case when acctkind = 'AccountsReceivable' then amount else 0 end\n    )  as jurisdiction_paid_fee,\n    sum(\n      case when acctkind in ('AccountsReceivable', 'PaidCollection')  then -1 * amount else 0 end\n    )  as remit_amount\n        from singlesidedentry sse left join event\non sse.eventid = event.id\n    where (\n       sse.effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n       and sse.effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n    )\n    and (\n        eventfinalizedat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n        or eventfinalizedat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\n    )\n    and sse.eventkind in ('PaymentSucceeded', 'PaymentRefunded')\n    and eventstatus = 'Recorded'\n        group by 1, 2, 3\n)\nselect \n  to_char(summarized_events.paid_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as paid_at,\n--  to_char(summarized_events.created_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as created_at,\n  to_char(summarized_events.finalized_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as recorded_at,\n  summarized_events.jurisdiction_id,\n  summarized_events.client_id,\n  summarized_events.obligation_id,\n  summarized_events.payment_id,\n  far.humanreadablereference,\n  summarized_events.payment_provider,  \ncase\nwhen summarized_events.refund_id is not null\nthen\n  ra.provideranddetails ->> 'processorRefundId'\nelse\n  (pa.provideranddetails #>> '{}')::jsonb->>(\n    case \n    when summarized_events.payment_provider = 'Stripe'\n        then 'stripeChargeId'\n    when summarized_events.payment_provider = 'StripePlaidAch'\n        then 'stripeChargeId'\n    when summarized_events.payment_provider = 'StripePaymentIntents'\n        then 'paymentIntentId'\n    else 'humanReadablePaymentMethod'\n    end\n  )\nend\n  as provider_details,\n  cast(obligation_amount/100.00 as decimal(18, 2)) as obligation_amount,\n  cast(client_paid_fee/100.00 as decimal(18, 2)) as client_paid_fee,\n  cast(net_payment/100.00 as decimal(18, 2)) as net_payment,\n  cast(jurisdiction_paid_fee/100.00 as decimal(18, 2)) as jurisdiction_paid_fee,\n  cast(remit_amount/100.00 as decimal(18, 2)) as remit_amount\nfrom summarized_events\nleft join financeapirequest as far\non summarized_events.payment_id = far.paymentattemptid\nleft join financeapirequest as far_re\non summarized_events.refund_id = far_re.refundattemptid\nleft join paymentattempt as pa\non summarized_events.payment_id = pa.id\nleft join refundattempt as ra\non summarized_events.refund_id = ra.id\norder by recorded_at, 1, 2", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/old_finance_report_templates/payments_in_other_months_for_this_month.sql", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\nwith summarized_events as (\n        select \n    sse.effectiveat as paid_at,\n    eventcreatedat as created_at,\n        eventfinalizedat as finalized_at,\n    min(acctidentifierpaymentid) as payment_id,\n    min(event.refundid) as refund_id,\n    min(acctidentifierjurisdictionid) as jurisdiction_id,\n    min(acctidentifierclientid) as client_id,\n    min(acctidentifierobligationid) as obligation_id,\n    min(acctidentifierprovider) as payment_provider,\n          sum(\n                  case when acctkind = 'PaidCollection' then -1 * amount else 0 end\n          ) as obligation_amount,\n          sum(\n                  case when acctkind = 'ClientPaidFees' then -1 * amount else 0 end\n          )  as client_paid_fee,\n          sum(\n                  case when acctkind = 'PaymentProviderHeldFunds' then amount else 0 end\n          ) as net_payment,\n    sum(\n      case when acctkind = 'AccountsReceivable' then amount else 0 end\n    )  as jurisdiction_paid_fee,\n    sum(\n      case when acctkind in ('AccountsReceivable', 'PaidCollection')  then -1 * amount else 0 end\n    )  as remit_amount\n        from singlesidedentry sse left join event\non sse.eventid = event.id\n    where (\n       sse.effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n       and sse.effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n    )\n    and (\n        eventfinalizedat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n        or eventfinalizedat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\n    )\n    and sse.eventkind in ('PaymentSucceeded', 'PaymentRefunded')\n    and eventstatus = 'Recorded'\n        group by 1, 2, 3\n)\nselect \n  to_char(summarized_events.paid_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as paid_at,\n--  to_char(summarized_events.created_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as created_at,\n  to_char(summarized_events.finalized_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as recorded_at,\n  summarized_events.jurisdiction_id,\n  summarized_events.client_id,\n  summarized_events.obligation_id,\n  summarized_events.payment_id,\n  far.humanreadablereference,\n  summarized_events.payment_provider,  \ncase\nwhen summarized_events.refund_id is not null\nthen\n  ra.provideranddetails ->> 'processorRefundId'\nelse\n  (pa.provideranddetails #>> '{}')::jsonb->>(\n    case \n    when summarized_events.payment_provider = 'Stripe'\n        then 'stripeChargeId'\n    when summarized_events.payment_provider = 'StripePlaidAch'\n        then 'stripeChargeId'\n    when summarized_events.payment_provider = 'StripePaymentIntents'\n        then 'paymentIntentId'\n    else 'humanReadablePaymentMethod'\n    end\n  )\nend\n  as provider_details,\n  cast(obligation_amount/100.00 as decimal(18, 2)) as obligation_amount,\n  cast(client_paid_fee/100.00 as decimal(18, 2)) as client_paid_fee,\n  cast(net_payment/100.00 as decimal(18, 2)) as net_payment,\n  cast(jurisdiction_paid_fee/100.00 as decimal(18, 2)) as jurisdiction_paid_fee,\n  cast(remit_amount/100.00 as decimal(18, 2)) as remit_amount\nfrom summarized_events\nleft join financeapirequest as far\non summarized_events.payment_id = far.paymentattemptid\nleft join financeapirequest as far_re\non summarized_events.refund_id = far_re.refundattemptid\nleft join paymentattempt as pa\non summarized_events.payment_id = pa.id\nleft join refundattempt as ra\non summarized_events.refund_id = ra.id\norder by recorded_at, 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.balance_as_of_month_end": {"database": "analytics-prod-328313", "schema": "prod", "name": "balance_as_of_month_end", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/old_finance_report_templates/balance_as_of_month_end.sql", "original_file_path": "analysis/old_finance_report_templates/balance_as_of_month_end.sql", "unique_id": "analysis.promise_dwh.balance_as_of_month_end", "fqn": ["promise_dwh", "analysis", "old_finance_report_templates", "balance_as_of_month_end"], "alias": "balance_as_of_month_end", "checksum": {"name": "sha256", "checksum": "f783d7e7804335e8666675c05f630c0b40ba91af5b74d0887301a4567b3e008b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.595876, "relation_name": null, "raw_code": "set local time zone 'America/Los_Angeles';\n\nwith ending_balances as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'ending' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n          and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_balances as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'starting' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n          and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_and_ending_balances as (\n        select * from starting_balances\n        union \n        select * from ending_balances\n)\nselect \n  jurisdiction_id, period, accttype, acctkind, status, balance,\n  (case when accttype = 'Liability' then -1 else 1 end) * \n  cast (balance/100.0 as decimal(18, 2)) as human_readable_balance\nfrom starting_and_ending_balances\norder by 1, 2, 3, 4, 5 desc", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/old_finance_report_templates/balance_as_of_month_end.sql", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\nwith ending_balances as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'ending' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n          and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_balances as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'starting' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n          and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_and_ending_balances as (\n        select * from starting_balances\n        union \n        select * from ending_balances\n)\nselect \n  jurisdiction_id, period, accttype, acctkind, status, balance,\n  (case when accttype = 'Liability' then -1 else 1 end) * \n  cast (balance/100.0 as decimal(18, 2)) as human_readable_balance\nfrom starting_and_ending_balances\norder by 1, 2, 3, 4, 5 desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.insert_new_accountholder_records": {"database": "analytics-prod-328313", "schema": "prod", "name": "insert_new_accountholder_records", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/vdss_matching/insert_new_accountholder_records.sql", "original_file_path": "analysis/vdss_matching/insert_new_accountholder_records.sql", "unique_id": "analysis.promise_dwh.insert_new_accountholder_records", "fqn": ["promise_dwh", "analysis", "vdss_matching", "insert_new_accountholder_records"], "alias": "insert_new_accountholder_records", "checksum": {"name": "sha256", "checksum": "fab3dbedf07d558217c8c849b0917a512e6c67c79ca81064484ff324588382cb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.5977652, "relation_name": null, "raw_code": "-- For inserting new rows for account holders we send to DSS for pre-enrollment matching\n-- Sets values for matches as NULL since we don't know the values when we send them\n\nINSERT INTO\n    `virginia-lihwap-pay.dss_matching.account_holder_complete`\nSELECT\n    id, \n    first_name, \n    last_name, \n    street_number, \n    pre_direction,\n    street_name,\n    street_type,\n    post_direction,\n    address1,\n    city,\n    state,\n    dwelling_number,\n    CAST(zip_code AS STRING) as zip_code,\n    filename,\n    PARSE_DATE(\"%m/%d/%Y\", load) as load,\n    CAST(NULL as boolean) AS match,\nFROM\n    `virginia-lihwap-pay.dss_matching.Promise_AcctHolder_DSS_Account_Holder_Name_W_20221031_104500000`\n    WHERE id NOT IN (SELECT id FROM `virginia-lihwap-pay.dss_matching.account_holder_complete`)", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/vdss_matching/insert_new_accountholder_records.sql", "compiled": true, "compiled_code": "-- For inserting new rows for account holders we send to DSS for pre-enrollment matching\n-- Sets values for matches as NULL since we don't know the values when we send them\n\nINSERT INTO\n    `virginia-lihwap-pay.dss_matching.account_holder_complete`\nSELECT\n    id, \n    first_name, \n    last_name, \n    street_number, \n    pre_direction,\n    street_name,\n    street_type,\n    post_direction,\n    address1,\n    city,\n    state,\n    dwelling_number,\n    CAST(zip_code AS STRING) as zip_code,\n    filename,\n    PARSE_DATE(\"%m/%d/%Y\", load) as load,\n    CAST(NULL as boolean) AS match,\nFROM\n    `virginia-lihwap-pay.dss_matching.Promise_AcctHolder_DSS_Account_Holder_Name_W_20221031_104500000`\n    WHERE id NOT IN (SELECT id FROM `virginia-lihwap-pay.dss_matching.account_holder_complete`)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.update_new_hh_matches": {"database": "analytics-prod-328313", "schema": "prod", "name": "update_new_hh_matches", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/vdss_matching/update_new_hh_matches.sql", "original_file_path": "analysis/vdss_matching/update_new_hh_matches.sql", "unique_id": "analysis.promise_dwh.update_new_hh_matches", "fqn": ["promise_dwh", "analysis", "vdss_matching", "update_new_hh_matches"], "alias": "update_new_hh_matches", "checksum": {"name": "sha256", "checksum": "0e52faf9b51b0d9e9f450d9358524bac3a93d2a8abaa013cd93dfd09f1f0e071"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.599526, "relation_name": null, "raw_code": "-- For UPDATEing the values of the matches we get back from DSS\n-- Requires setting the FROM each time\n\nUPDATE\n    `virginia-lihwap-pay.dss_matching.household_members_complete` p\nSET\n    match_in_snap = dss.MATCH_IN_SNAP,\n    match_in_tanf = dss.MATCH_IN_TANF,\n    match_in_liheap = dss.MATCH_IN_LIHEAP\nFROM\n    (SELECT\n        id\n        , MAX(MATCH_IN_SNAP) AS MATCH_IN_SNAP\n        , MAX(MATCH_IN_TANF) AS MATCH_IN_TANF\n        , MAX(MATCH_IN_LIHEAP) AS MATCH_IN_LIHEAP\n     FROM `virginia-lihwap-pay.dss_matching.DSS_HHMembers_Promise_Household_Members_Match_*`\n     GROUP BY 1) AS dss\nWHERE\n    dss.id = p.id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/vdss_matching/update_new_hh_matches.sql", "compiled": true, "compiled_code": "-- For UPDATEing the values of the matches we get back from DSS\n-- Requires setting the FROM each time\n\nUPDATE\n    `virginia-lihwap-pay.dss_matching.household_members_complete` p\nSET\n    match_in_snap = dss.MATCH_IN_SNAP,\n    match_in_tanf = dss.MATCH_IN_TANF,\n    match_in_liheap = dss.MATCH_IN_LIHEAP\nFROM\n    (SELECT\n        id\n        , MAX(MATCH_IN_SNAP) AS MATCH_IN_SNAP\n        , MAX(MATCH_IN_TANF) AS MATCH_IN_TANF\n        , MAX(MATCH_IN_LIHEAP) AS MATCH_IN_LIHEAP\n     FROM `virginia-lihwap-pay.dss_matching.DSS_HHMembers_Promise_Household_Members_Match_*`\n     GROUP BY 1) AS dss\nWHERE\n    dss.id = p.id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.converted_app_hh_matches": {"database": "analytics-prod-328313", "schema": "prod", "name": "converted_app_hh_matches", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/vdss_matching/converted_app_hh_matches.sql", "original_file_path": "analysis/vdss_matching/converted_app_hh_matches.sql", "unique_id": "analysis.promise_dwh.converted_app_hh_matches", "fqn": ["promise_dwh", "analysis", "vdss_matching", "converted_app_hh_matches"], "alias": "converted_app_hh_matches", "checksum": {"name": "sha256", "checksum": "bc58d9ce6293242b8a2380e5036e37e9653b27b4d6644adb3de63e47055bc250"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.6013088, "relation_name": null, "raw_code": "-- First get processing state because that's where the note about old-to-new lives\nWITH\n  lihwap_relief_processing_state AS (\n  SELECT\n    rps.*,\n    ra.customer_id,\n    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY rps.created_at DESC) AS state_number_desc,\n    LEAD(rps.created_at) OVER (PARTITION BY customer_id ORDER BY rps.created_at) AS next_transition_ts\n  FROM\n    `virginia-lihwap-pay.analytics_promisepay_prod.relief_processing_state` rps\n  LEFT JOIN\n    `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` ra\n  ON\n    ra.id = rps.relief_application_id),\n -- Then get the mapping from client_id to their current app \n  lihwap_applicant_current_app AS (\n  SELECT\n    stg__lihwap_applicants_applications.customer_id AS client_id,\n    COALESCE(MAX(CASE\n          WHEN stg__lihwap_applicants_applications.active THEN stg__lihwap_applicants_applications.id\n        ELSE\n        NULL\n      END\n        ), MAX(stg__lihwap_applicants_applications.id )) AS current_lihwap_app_id\n  FROM\n    `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS stg__lihwap_applicants_applications\n  GROUP BY\n    1),\n  -- Query applications (with the notes) to find what client owned the app that was converted  \n  old_to_new AS (\n  SELECT\n    lihwap_relief_application.customer_id AS new_client_id,\n    CAST(CASE\n        WHEN current_application_state.notes LIKE 'resubmitted from nonintegrated application%' THEN REGEXP_EXTRACT(current_application_state.notes, r'^.* client id: ([0-9]*), UpdateSource')\n      ELSE\n      NULL\n    END\n      AS INT64) AS old_client_id\n  FROM\n    `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS lihwap_relief_application\n  LEFT JOIN\n    lihwap_relief_processing_state AS current_application_state\n  ON\n    lihwap_relief_application.customer_id = current_application_state.customer_id\n    AND current_application_state.state_number_desc = 1\n  WHERE\n    ((current_application_state.reason_codes) <> 'TestAccount'\n      OR (current_application_state.reason_codes) IS NULL)\n    AND (current_application_state.notes) LIKE 'resubmitted from nonintegrated%'\n  GROUP BY\n    1,\n    2),\n  -- Convert the client_id mapping from above to an application-to-application id mapping using each\n  -- client's current application  \n  old_app_to_new_app AS (\n  SELECT\n    old.current_lihwap_app_id AS old_id,\n    new_peeps.current_lihwap_app_id AS new_id\n  FROM\n    old_to_new\n  LEFT JOIN\n    lihwap_applicant_current_app old\n  ON\n    old_client_id = old.client_id\n  LEFT JOIN\n    lihwap_applicant_current_app new_peeps\n  ON\n    new_client_id = new_peeps.client_id)\n-- Finally, take the matches we have, and see if any have new_ids\nSELECT\n-- Pull apart the id we send to DSS (which is {application_id}#{hh_member_id})\n  DISTINCT\n  REGEXP_EXTRACT(hmc.id, r'([0-9]*)#.*') AS application_id,\n  REGEXP_EXTRACT(hmc.id, r'[0-9]*#(.*)') AS hh_member_id,\n  -- Look to make sure we have reasonable matches\n  old_id,\n  new_id,\n  -- These will be the new ids we insert into the household_matches table\n  CONCAT(new_id, '#', REGEXP_EXTRACT(hmc.id, r'[0-9]*#(.*)')) AS additional_match\nFROM\n  `virginia-lihwap-pay.dss_matching.household_members_complete` hmc\nJOIN\n  old_app_to_new_app\nON\n  CAST(REGEXP_EXTRACT(hmc.id, r'([0-9]*)#.*') AS INT64) = old_id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/vdss_matching/converted_app_hh_matches.sql", "compiled": true, "compiled_code": "-- First get processing state because that's where the note about old-to-new lives\nWITH\n  lihwap_relief_processing_state AS (\n  SELECT\n    rps.*,\n    ra.customer_id,\n    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY rps.created_at DESC) AS state_number_desc,\n    LEAD(rps.created_at) OVER (PARTITION BY customer_id ORDER BY rps.created_at) AS next_transition_ts\n  FROM\n    `virginia-lihwap-pay.analytics_promisepay_prod.relief_processing_state` rps\n  LEFT JOIN\n    `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` ra\n  ON\n    ra.id = rps.relief_application_id),\n -- Then get the mapping from client_id to their current app \n  lihwap_applicant_current_app AS (\n  SELECT\n    stg__lihwap_applicants_applications.customer_id AS client_id,\n    COALESCE(MAX(CASE\n          WHEN stg__lihwap_applicants_applications.active THEN stg__lihwap_applicants_applications.id\n        ELSE\n        NULL\n      END\n        ), MAX(stg__lihwap_applicants_applications.id )) AS current_lihwap_app_id\n  FROM\n    `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS stg__lihwap_applicants_applications\n  GROUP BY\n    1),\n  -- Query applications (with the notes) to find what client owned the app that was converted  \n  old_to_new AS (\n  SELECT\n    lihwap_relief_application.customer_id AS new_client_id,\n    CAST(CASE\n        WHEN current_application_state.notes LIKE 'resubmitted from nonintegrated application%' THEN REGEXP_EXTRACT(current_application_state.notes, r'^.* client id: ([0-9]*), UpdateSource')\n      ELSE\n      NULL\n    END\n      AS INT64) AS old_client_id\n  FROM\n    `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS lihwap_relief_application\n  LEFT JOIN\n    lihwap_relief_processing_state AS current_application_state\n  ON\n    lihwap_relief_application.customer_id = current_application_state.customer_id\n    AND current_application_state.state_number_desc = 1\n  WHERE\n    ((current_application_state.reason_codes) <> 'TestAccount'\n      OR (current_application_state.reason_codes) IS NULL)\n    AND (current_application_state.notes) LIKE 'resubmitted from nonintegrated%'\n  GROUP BY\n    1,\n    2),\n  -- Convert the client_id mapping from above to an application-to-application id mapping using each\n  -- client's current application  \n  old_app_to_new_app AS (\n  SELECT\n    old.current_lihwap_app_id AS old_id,\n    new_peeps.current_lihwap_app_id AS new_id\n  FROM\n    old_to_new\n  LEFT JOIN\n    lihwap_applicant_current_app old\n  ON\n    old_client_id = old.client_id\n  LEFT JOIN\n    lihwap_applicant_current_app new_peeps\n  ON\n    new_client_id = new_peeps.client_id)\n-- Finally, take the matches we have, and see if any have new_ids\nSELECT\n-- Pull apart the id we send to DSS (which is {application_id}#{hh_member_id})\n  DISTINCT\n  REGEXP_EXTRACT(hmc.id, r'([0-9]*)#.*') AS application_id,\n  REGEXP_EXTRACT(hmc.id, r'[0-9]*#(.*)') AS hh_member_id,\n  -- Look to make sure we have reasonable matches\n  old_id,\n  new_id,\n  -- These will be the new ids we insert into the household_matches table\n  CONCAT(new_id, '#', REGEXP_EXTRACT(hmc.id, r'[0-9]*#(.*)')) AS additional_match\nFROM\n  `virginia-lihwap-pay.dss_matching.household_members_complete` hmc\nJOIN\n  old_app_to_new_app\nON\n  CAST(REGEXP_EXTRACT(hmc.id, r'([0-9]*)#.*') AS INT64) = old_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.prequals_to_sms": {"database": "analytics-prod-328313", "schema": "prod", "name": "prequals_to_sms", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/vdss_matching/prequals_to_sms.sql", "original_file_path": "analysis/vdss_matching/prequals_to_sms.sql", "unique_id": "analysis.promise_dwh.prequals_to_sms", "fqn": ["promise_dwh", "analysis", "vdss_matching", "prequals_to_sms"], "alias": "prequals_to_sms", "checksum": {"name": "sha256", "checksum": "81fb216d153dbc8df3ac02a903aa86f2b9351d09c5070facf48fd6873c280269"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.6031208, "relation_name": null, "raw_code": "SELECT\n  ds.friendly_name,\n  customer_id,\n  past_due_value\nFROM\n  `virginia-lihwap-pay.dss_matching.account_holder_complete` ahc\n-- Join of live federated data from PP customer\nLEFT JOIN (\n  SELECT\n    *\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM customer;\")) customer\nON\n  customer.id = ahc.id\n-- Data sources so we know which jurisdiction they're in\nLEFT JOIN\n  virginia-lihwap-pay.analytics_promisepay_prod.data_source ds\nON\n  ds.id = data_source_id\n-- Join of live federated data from PP obligation\nLEFT JOIN (\n  SELECT\n    customer_id,\n    JSON_VALUE(external_data, '$.pastDueBalance.value') AS past_due_value\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM obligation;\") ) obligation\nON\n  ahc.id = obligation.customer_id\nWHERE\n  JSON_VALUE(external_data, '$.accountType') = 'residential'\n  AND\n  -- Only include people who DSS matched\n  ahc.MATCH\n  -- Exclude people where phone_verified is true (about 2100 customers so far)\n  AND ahc.id NOT IN (\n  SELECT\n    id\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM customer;\")\n  WHERE\n    phone_verified)\n  -- Exclude people who we've sent any SMS to from the app (about 2700 customers so far)\n  AND ahc.id NOT IN (\n  SELECT\n    customer_id\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM customer_communication;\"))\n  -- Exclude anyone with no past due balance\n  AND SAFE_CAST(past_due_value AS INT64) > 0\n  -- Exclude anyone with a phone number that's been verified (for any customer)\n  AND customer.phone_number NOT IN (\n    SELECT\n    phone_number\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM customer;\")\n  WHERE\n    phone_verified\n  )\n  ORDER BY RAND()\n  LIMIT 300", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/vdss_matching/prequals_to_sms.sql", "compiled": true, "compiled_code": "SELECT\n  ds.friendly_name,\n  customer_id,\n  past_due_value\nFROM\n  `virginia-lihwap-pay.dss_matching.account_holder_complete` ahc\n-- Join of live federated data from PP customer\nLEFT JOIN (\n  SELECT\n    *\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM customer;\")) customer\nON\n  customer.id = ahc.id\n-- Data sources so we know which jurisdiction they're in\nLEFT JOIN\n  virginia-lihwap-pay.analytics_promisepay_prod.data_source ds\nON\n  ds.id = data_source_id\n-- Join of live federated data from PP obligation\nLEFT JOIN (\n  SELECT\n    customer_id,\n    JSON_VALUE(external_data, '$.pastDueBalance.value') AS past_due_value\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM obligation;\") ) obligation\nON\n  ahc.id = obligation.customer_id\nWHERE\n  JSON_VALUE(external_data, '$.accountType') = 'residential'\n  AND\n  -- Only include people who DSS matched\n  ahc.MATCH\n  -- Exclude people where phone_verified is true (about 2100 customers so far)\n  AND ahc.id NOT IN (\n  SELECT\n    id\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM customer;\")\n  WHERE\n    phone_verified)\n  -- Exclude people who we've sent any SMS to from the app (about 2700 customers so far)\n  AND ahc.id NOT IN (\n  SELECT\n    customer_id\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM customer_communication;\"))\n  -- Exclude anyone with no past due balance\n  AND SAFE_CAST(past_due_value AS INT64) > 0\n  -- Exclude anyone with a phone number that's been verified (for any customer)\n  AND customer.phone_number NOT IN (\n    SELECT\n    phone_number\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM customer;\")\n  WHERE\n    phone_verified\n  )\n  ORDER BY RAND()\n  LIMIT 300", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.load_Promise_AcctHolder_DSS_Account_Holder_Name": {"database": "analytics-prod-328313", "schema": "prod", "name": "load_Promise_AcctHolder_DSS_Account_Holder_Name", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/vdss_matching/load_Promise_AcctHolder_DSS_Account_Holder_Name.sql", "original_file_path": "analysis/vdss_matching/load_Promise_AcctHolder_DSS_Account_Holder_Name.sql", "unique_id": "analysis.promise_dwh.load_Promise_AcctHolder_DSS_Account_Holder_Name", "fqn": ["promise_dwh", "analysis", "vdss_matching", "load_Promise_AcctHolder_DSS_Account_Holder_Name"], "alias": "load_Promise_AcctHolder_DSS_Account_Holder_Name", "checksum": {"name": "sha256", "checksum": "80c987d5a1caf10ff5f0272abcf785f5260beaf180b4329d0df726eea4bc0ef6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.604934, "relation_name": null, "raw_code": "LOAD DATA INTO dss_matching.Promise_AcctHolder_DSS_Account_Holder_Name_W_20221106_201800000(\n  id INT64, \n  first_name STRING, \n  last_name STRING, \n  street_number STRING, \n  pre_direction\tSTRING,\n  street_name\tSTRING,\n  street_type\tSTRING,\n  post_direction\tSTRING,\n  address1\tSTRING,\n  city\tSTRING,\n  state\tSTRING,\n  dwelling_number\tSTRING,\n  zip_code\tINT64,\n  filename\tSTRING,\n  `load`\tSTRING)\n  FROM FILES(\n    skip_leading_rows=1,\n    format='CSV',\n    field_delimiter='|',\n    allow_jagged_rows=TRUE,\n    uris = ['gs://vdss_files/Promise_AcctHolder_DSS_Account_Holder_Name_W_20221106_201800000.csv']\n  )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/vdss_matching/load_Promise_AcctHolder_DSS_Account_Holder_Name.sql", "compiled": true, "compiled_code": "LOAD DATA INTO dss_matching.Promise_AcctHolder_DSS_Account_Holder_Name_W_20221106_201800000(\n  id INT64, \n  first_name STRING, \n  last_name STRING, \n  street_number STRING, \n  pre_direction\tSTRING,\n  street_name\tSTRING,\n  street_type\tSTRING,\n  post_direction\tSTRING,\n  address1\tSTRING,\n  city\tSTRING,\n  state\tSTRING,\n  dwelling_number\tSTRING,\n  zip_code\tINT64,\n  filename\tSTRING,\n  `load`\tSTRING)\n  FROM FILES(\n    skip_leading_rows=1,\n    format='CSV',\n    field_delimiter='|',\n    allow_jagged_rows=TRUE,\n    uris = ['gs://vdss_files/Promise_AcctHolder_DSS_Account_Holder_Name_W_20221106_201800000.csv']\n  )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.load_Promise_HHMembers_DSS_Household_Members": {"database": "analytics-prod-328313", "schema": "prod", "name": "load_Promise_HHMembers_DSS_Household_Members", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/vdss_matching/load_Promise_HHMembers_DSS_Household_Members.sql", "original_file_path": "analysis/vdss_matching/load_Promise_HHMembers_DSS_Household_Members.sql", "unique_id": "analysis.promise_dwh.load_Promise_HHMembers_DSS_Household_Members", "fqn": ["promise_dwh", "analysis", "vdss_matching", "load_Promise_HHMembers_DSS_Household_Members"], "alias": "load_Promise_HHMembers_DSS_Household_Members", "checksum": {"name": "sha256", "checksum": "b3fe8ba04815b803d0d4dc05462f4c335edda1a3801d36f949baf6dd97daf16a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.6076312, "relation_name": null, "raw_code": "LOAD DATA INTO dss_matching.Promise_HHMembers_DSS_Household_Members_W_20221031_091300000(\n  id STRING, \n  first_name STRING, \n  last_name STRING, \n  street_number STRING, \n  pre_direction\tSTRING,\n  street_name\tSTRING,\n  street_type\tSTRING,\n  post_direction\tSTRING,\n  address1\tSTRING,\n  city\tSTRING,\n  state\tSTRING,\n  dwelling_number\tSTRING,\n  zip_code\tINT64,\n  date_of_birth STRING,\n  snap BOOLEAN,\n  tanf BOOLEAN,\n  liheap BOOLEAN,\n  filename\tSTRING,\n  `load`\tSTRING)\n  FROM FILES(\n    skip_leading_rows=1,\n    format='CSV',\n    field_delimiter='|',\n    allow_jagged_rows=TRUE,\n    uris = ['gs://vdss_files/Promise_HHMembers_DSS_Household_Members_W_20221031_091300000.csv']\n  )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/vdss_matching/load_Promise_HHMembers_DSS_Household_Members.sql", "compiled": true, "compiled_code": "LOAD DATA INTO dss_matching.Promise_HHMembers_DSS_Household_Members_W_20221031_091300000(\n  id STRING, \n  first_name STRING, \n  last_name STRING, \n  street_number STRING, \n  pre_direction\tSTRING,\n  street_name\tSTRING,\n  street_type\tSTRING,\n  post_direction\tSTRING,\n  address1\tSTRING,\n  city\tSTRING,\n  state\tSTRING,\n  dwelling_number\tSTRING,\n  zip_code\tINT64,\n  date_of_birth STRING,\n  snap BOOLEAN,\n  tanf BOOLEAN,\n  liheap BOOLEAN,\n  filename\tSTRING,\n  `load`\tSTRING)\n  FROM FILES(\n    skip_leading_rows=1,\n    format='CSV',\n    field_delimiter='|',\n    allow_jagged_rows=TRUE,\n    uris = ['gs://vdss_files/Promise_HHMembers_DSS_Household_Members_W_20221031_091300000.csv']\n  )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.insert_new_hh_records": {"database": "analytics-prod-328313", "schema": "prod", "name": "insert_new_hh_records", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/vdss_matching/insert_new_hh_records.sql", "original_file_path": "analysis/vdss_matching/insert_new_hh_records.sql", "unique_id": "analysis.promise_dwh.insert_new_hh_records", "fqn": ["promise_dwh", "analysis", "vdss_matching", "insert_new_hh_records"], "alias": "insert_new_hh_records", "checksum": {"name": "sha256", "checksum": "274da34af93587805c8fc841b1e7e32e403bfd605f8178c42fc7768c899847f2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.609421, "relation_name": null, "raw_code": "-- For inserting new rows for household members we send to DSS for matching\n-- Sets values for matches as NULL since we don't know the values when we send them\n\nINSERT INTO\n    `virginia-lihwap-pay.dss_matching.household_members_complete`\nSELECT\n    DISTINCT\n    id, \n    first_name, \n    last_name, \n    street_number, \n    pre_direction,\n    street_name,\n    street_type,\n    post_direction,\n    address1,\n    city,\n    state,\n    dwelling_number,\n    CAST(zip_code AS STRING),\n    PARSE_DATE(\"%m/%d/%y\", date_of_birth) as date_of_birth,\n    snap,\n    tanf,\n    liheap,\n    filename,\n    PARSE_DATE(\"%m/%d/%Y\", load) as load,\n    CAST(NULL as boolean) AS match_in_snap,\n    CAST(NULL as boolean) AS match_in_tanf,\n    CAST(NULL as boolean) AS match_in_liheap\nFROM `virginia-lihwap-pay.dss_matching.Promise_HHMembers_DSS_Household_Members_W_20221128_211552`\nWHERE id NOT IN (SELECT id FROM `virginia-lihwap-pay.dss_matching.household_members_complete`)", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/vdss_matching/insert_new_hh_records.sql", "compiled": true, "compiled_code": "-- For inserting new rows for household members we send to DSS for matching\n-- Sets values for matches as NULL since we don't know the values when we send them\n\nINSERT INTO\n    `virginia-lihwap-pay.dss_matching.household_members_complete`\nSELECT\n    DISTINCT\n    id, \n    first_name, \n    last_name, \n    street_number, \n    pre_direction,\n    street_name,\n    street_type,\n    post_direction,\n    address1,\n    city,\n    state,\n    dwelling_number,\n    CAST(zip_code AS STRING),\n    PARSE_DATE(\"%m/%d/%y\", date_of_birth) as date_of_birth,\n    snap,\n    tanf,\n    liheap,\n    filename,\n    PARSE_DATE(\"%m/%d/%Y\", load) as load,\n    CAST(NULL as boolean) AS match_in_snap,\n    CAST(NULL as boolean) AS match_in_tanf,\n    CAST(NULL as boolean) AS match_in_liheap\nFROM `virginia-lihwap-pay.dss_matching.Promise_HHMembers_DSS_Household_Members_W_20221128_211552`\nWHERE id NOT IN (SELECT id FROM `virginia-lihwap-pay.dss_matching.household_members_complete`)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.convert_unintegrated_utilities": {"database": "analytics-prod-328313", "schema": "prod", "name": "convert_unintegrated_utilities", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/vdss_matching/convert_unintegrated_utilities.sql", "original_file_path": "analysis/vdss_matching/convert_unintegrated_utilities.sql", "unique_id": "analysis.promise_dwh.convert_unintegrated_utilities", "fqn": ["promise_dwh", "analysis", "vdss_matching", "convert_unintegrated_utilities"], "alias": "convert_unintegrated_utilities", "checksum": {"name": "sha256", "checksum": "d6203fcf1b0d7faf21e58d5168064ed25529062232b3ec9f98ce1e632d8a081c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.611222, "relation_name": null, "raw_code": "WITH lihwap_relief_processing_state AS (\n  SELECT\n          rps.*,\n          ra.customer_id,\n         row_number() OVER (PARTITION BY customer_id ORDER BY rps.created_at DESC) as state_number_desc,\n         lead(rps.created_at) OVER (PARTITION BY customer_id ORDER BY rps.created_at) as next_transition_ts\n         FROM\n           `virginia-lihwap-pay.analytics_promisepay_prod.relief_processing_state` rps\n         LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` ra ON ra.id = rps.relief_application_id\n         ),\n-- First find all the applications\npre AS (\n  SELECT\n    DATE(pre_ra.created_at) as app_created,\n    JSON_VALUE(external_data, '$.metadata.values[0].utilityName') as utility_name,\n    JSON_VALUE(external_data, '$.accountNumber') as account_number,\n    JSON_VALUE(external_data, '$.accountName') as account_name,\n    JSON_VALUE(external_data, '$.serviceAddresses[0]') as address,\n    analytics_promisepay_prod.parseLocation(JSON_VALUE(external_data, '$.serviceAddresses[0]')) as parsed_address,\n    pii_to_verify as zip,\n    pre.phone_number as phone_number,\n    pre.name as name,\n    pre_ra.id as old_relief_application_id,\n    pre.id as old_customer_id\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\", \"SELECT * FROM customer;\") AS pre\n  LEFT JOIN\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\", \"SELECT * FROM obligation;\") pre_ob\n  ON\n    pre.id = pre_ob.customer_id\n  LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.service_address` pre_address\n    ON pre_ob.id = pre_address.id\n  LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` pre_ra\n    ON pre.id = pre_ra.customer_id\n  LEFT JOIN lihwap_relief_processing_state AS current_application_state ON \n      pre_ra.id = current_application_state.relief_application_id\n      AND current_application_state.state_number_desc = 1\n  -- Where their data source was unintegrated\n  WHERE data_source_id = 2 \n    -- It's not a test application\n    AND current_application_state.reason_codes <> 'TestAccount' \n    -- And they're still in the errored state\n    AND current_application_state.reason_codes = 'NonintegratedUtility'\n    AND pre_ra.active),\n\n-- Then find all accounts at integrated utilities\npost AS (\n  SELECT\n    post_ds.friendly_name as utility_name,\n    JSON_VALUE(external_data, '$.accountNumber') as account_number,\n    JSON_VALUE(external_data, '$.accountName') as account_name,\n    JSON_VALUE(external_data, '$.serviceAddresses[0]') as address,\n    analytics_promisepay_prod.parseLocation(JSON_VALUE(external_data, '$.serviceAddresses[0]')) as parsed_address,\n    SAFE_CAST(JSON_VALUE(external_data, '$.pastDueBalance.value') AS INT64)/100 as past_due_balance,\n    pii_to_verify as zip,\n    post.phone_number as phone_number,\n    post.name as name,\n    post.id as new_customer_id,\n    current_application_state.status as integrated_status\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\", \"SELECT * FROM customer;\") AS post\n  LEFT JOIN\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\", \"SELECT * FROM obligation;\") post_ob\n  ON\n    post.id = post_ob.customer_id\n  LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.service_address` post_address\n  ON post_ob.id = post_address.id\n  JOIN `virginia-lihwap-pay.analytics_promisepay_prod.data_source` post_ds\n    ON post_ds.id = post.data_source_id\n  LEFT JOIN lihwap_relief_processing_state AS current_application_state ON \n      post.id = current_application_state.customer_id\n      AND current_application_state.state_number_desc = 1\n  WHERE data_source_id != 2),\nall_flat AS (\n\nSELECT\n  app_created ni_app_created,\n  pre.old_relief_application_id ni_relief_application_id,\n  pre.old_customer_id AS nonintegrated_client_id,\n  LTRIM(REGEXP_REPLACE(pre.account_number, r'[^0-9]', \"\"), '0') AS  ni_account_number, \n  pre.utility_name ni_utility_name, \n  pre.address ni_address,\n  analytics_promisepay_prod.parseName(pre.name).first as ni_first_name,\n  analytics_promisepay_prod.parseName(pre.name).last as ni_last_name,\n  post.new_customer_id AS integrated_client_id,\n  integrated_status,\n  past_due_balance,\n  analytics_promisepay_prod.parseName(post.name).first as first_name_post,\n  analytics_promisepay_prod.parseName(post.name).last as last_name_post,\n  LOWER(analytics_promisepay_prod.parseName(pre.name).last) = LOWER(analytics_promisepay_prod.parseName(post.name).last) as last_names_match,\n  LTRIM(REGEXP_REPLACE(post.account_number, r'[^0-9]', \"\"), '0') AS  i_account_number, \n  LTRIM(REGEXP_REPLACE(pre.account_number, r'[^0-9]', \"\"), '0') = LTRIM(REGEXP_REPLACE(post.account_number, r'[^0-9]', \"\"), '0') AS account_numbers_match,\n  post.utility_name,\n  pre.phone_number = post.phone_number AS phone_numbers_match,\n  post.address,\n  CONCAT(pre.parsed_address.number, LEFT(pre.parsed_address.street, 2), pre.zip) = \n    CONCAT(post.parsed_address.number, LEFT(post.parsed_address.street, 2), post.zip) as addresses_match\n-- Then join any where the account number, account name, address, phone number or name match\nFROM\n  pre\n  LEFT JOIN post ON LTRIM(REGEXP_REPLACE(pre.account_number, r'[^0-9]', \"\"), '0') = LTRIM(REGEXP_REPLACE(post.account_number, r'[^0-9]', \"\"), '0')\n  OR CONCAT(pre.parsed_address.number, LEFT(pre.parsed_address.street, 2), pre.zip) = \n    CONCAT(post.parsed_address.number, LEFT(post.parsed_address.street, 2), post.zip)\n  OR pre.phone_number = post.phone_number\n  OR pre.name = post.name\nORDER BY 2)\nSELECT\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), NULL, ni_app_created) AS ni_app_created,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), NULL, ni_relief_application_id) AS ni_relief_application_id,\n  nonintegrated_client_id,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_account_number) AS ni_account_number,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_utility_name) AS ni_utility_name,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_address) AS ni_address,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_first_name) AS ni_first_name,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_last_name) AS ni_last_name,\n  * except (ni_app_created, ni_relief_application_id, nonintegrated_client_id, ni_account_number, ni_utility_name, ni_address,\n  ni_first_name, ni_last_name)\n\nFROM\n  all_flat\nORDER BY nonintegrated_client_id, integrated_client_id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/vdss_matching/convert_unintegrated_utilities.sql", "compiled": true, "compiled_code": "WITH lihwap_relief_processing_state AS (\n  SELECT\n          rps.*,\n          ra.customer_id,\n         row_number() OVER (PARTITION BY customer_id ORDER BY rps.created_at DESC) as state_number_desc,\n         lead(rps.created_at) OVER (PARTITION BY customer_id ORDER BY rps.created_at) as next_transition_ts\n         FROM\n           `virginia-lihwap-pay.analytics_promisepay_prod.relief_processing_state` rps\n         LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` ra ON ra.id = rps.relief_application_id\n         ),\n-- First find all the applications\npre AS (\n  SELECT\n    DATE(pre_ra.created_at) as app_created,\n    JSON_VALUE(external_data, '$.metadata.values[0].utilityName') as utility_name,\n    JSON_VALUE(external_data, '$.accountNumber') as account_number,\n    JSON_VALUE(external_data, '$.accountName') as account_name,\n    JSON_VALUE(external_data, '$.serviceAddresses[0]') as address,\n    analytics_promisepay_prod.parseLocation(JSON_VALUE(external_data, '$.serviceAddresses[0]')) as parsed_address,\n    pii_to_verify as zip,\n    pre.phone_number as phone_number,\n    pre.name as name,\n    pre_ra.id as old_relief_application_id,\n    pre.id as old_customer_id\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\", \"SELECT * FROM customer;\") AS pre\n  LEFT JOIN\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\", \"SELECT * FROM obligation;\") pre_ob\n  ON\n    pre.id = pre_ob.customer_id\n  LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.service_address` pre_address\n    ON pre_ob.id = pre_address.id\n  LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` pre_ra\n    ON pre.id = pre_ra.customer_id\n  LEFT JOIN lihwap_relief_processing_state AS current_application_state ON \n      pre_ra.id = current_application_state.relief_application_id\n      AND current_application_state.state_number_desc = 1\n  -- Where their data source was unintegrated\n  WHERE data_source_id = 2 \n    -- It's not a test application\n    AND current_application_state.reason_codes <> 'TestAccount' \n    -- And they're still in the errored state\n    AND current_application_state.reason_codes = 'NonintegratedUtility'\n    AND pre_ra.active),\n\n-- Then find all accounts at integrated utilities\npost AS (\n  SELECT\n    post_ds.friendly_name as utility_name,\n    JSON_VALUE(external_data, '$.accountNumber') as account_number,\n    JSON_VALUE(external_data, '$.accountName') as account_name,\n    JSON_VALUE(external_data, '$.serviceAddresses[0]') as address,\n    analytics_promisepay_prod.parseLocation(JSON_VALUE(external_data, '$.serviceAddresses[0]')) as parsed_address,\n    SAFE_CAST(JSON_VALUE(external_data, '$.pastDueBalance.value') AS INT64)/100 as past_due_balance,\n    pii_to_verify as zip,\n    post.phone_number as phone_number,\n    post.name as name,\n    post.id as new_customer_id,\n    current_application_state.status as integrated_status\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\", \"SELECT * FROM customer;\") AS post\n  LEFT JOIN\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\", \"SELECT * FROM obligation;\") post_ob\n  ON\n    post.id = post_ob.customer_id\n  LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.service_address` post_address\n  ON post_ob.id = post_address.id\n  JOIN `virginia-lihwap-pay.analytics_promisepay_prod.data_source` post_ds\n    ON post_ds.id = post.data_source_id\n  LEFT JOIN lihwap_relief_processing_state AS current_application_state ON \n      post.id = current_application_state.customer_id\n      AND current_application_state.state_number_desc = 1\n  WHERE data_source_id != 2),\nall_flat AS (\n\nSELECT\n  app_created ni_app_created,\n  pre.old_relief_application_id ni_relief_application_id,\n  pre.old_customer_id AS nonintegrated_client_id,\n  LTRIM(REGEXP_REPLACE(pre.account_number, r'[^0-9]', \"\"), '0') AS  ni_account_number, \n  pre.utility_name ni_utility_name, \n  pre.address ni_address,\n  analytics_promisepay_prod.parseName(pre.name).first as ni_first_name,\n  analytics_promisepay_prod.parseName(pre.name).last as ni_last_name,\n  post.new_customer_id AS integrated_client_id,\n  integrated_status,\n  past_due_balance,\n  analytics_promisepay_prod.parseName(post.name).first as first_name_post,\n  analytics_promisepay_prod.parseName(post.name).last as last_name_post,\n  LOWER(analytics_promisepay_prod.parseName(pre.name).last) = LOWER(analytics_promisepay_prod.parseName(post.name).last) as last_names_match,\n  LTRIM(REGEXP_REPLACE(post.account_number, r'[^0-9]', \"\"), '0') AS  i_account_number, \n  LTRIM(REGEXP_REPLACE(pre.account_number, r'[^0-9]', \"\"), '0') = LTRIM(REGEXP_REPLACE(post.account_number, r'[^0-9]', \"\"), '0') AS account_numbers_match,\n  post.utility_name,\n  pre.phone_number = post.phone_number AS phone_numbers_match,\n  post.address,\n  CONCAT(pre.parsed_address.number, LEFT(pre.parsed_address.street, 2), pre.zip) = \n    CONCAT(post.parsed_address.number, LEFT(post.parsed_address.street, 2), post.zip) as addresses_match\n-- Then join any where the account number, account name, address, phone number or name match\nFROM\n  pre\n  LEFT JOIN post ON LTRIM(REGEXP_REPLACE(pre.account_number, r'[^0-9]', \"\"), '0') = LTRIM(REGEXP_REPLACE(post.account_number, r'[^0-9]', \"\"), '0')\n  OR CONCAT(pre.parsed_address.number, LEFT(pre.parsed_address.street, 2), pre.zip) = \n    CONCAT(post.parsed_address.number, LEFT(post.parsed_address.street, 2), post.zip)\n  OR pre.phone_number = post.phone_number\n  OR pre.name = post.name\nORDER BY 2)\nSELECT\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), NULL, ni_app_created) AS ni_app_created,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), NULL, ni_relief_application_id) AS ni_relief_application_id,\n  nonintegrated_client_id,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_account_number) AS ni_account_number,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_utility_name) AS ni_utility_name,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_address) AS ni_address,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_first_name) AS ni_first_name,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_last_name) AS ni_last_name,\n  * except (ni_app_created, ni_relief_application_id, nonintegrated_client_id, ni_account_number, ni_utility_name, ni_address,\n  ni_first_name, ni_last_name)\n\nFROM\n  all_flat\nORDER BY nonintegrated_client_id, integrated_client_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.update_new_accountholder_matches": {"database": "analytics-prod-328313", "schema": "prod", "name": "update_new_accountholder_matches", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/vdss_matching/update_new_accountholder_matches.sql", "original_file_path": "analysis/vdss_matching/update_new_accountholder_matches.sql", "unique_id": "analysis.promise_dwh.update_new_accountholder_matches", "fqn": ["promise_dwh", "analysis", "vdss_matching", "update_new_accountholder_matches"], "alias": "update_new_accountholder_matches", "checksum": {"name": "sha256", "checksum": "c18bb830b136c07c2c029accd2d596cbb8f8b5106ac32f08e280b63c543b2de0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.613081, "relation_name": null, "raw_code": "-- For UPDATEing the values of the matches we get back from DSS\n-- Requires setting the FROM each time\n\nUPDATE\n    `virginia-lihwap-pay.dss_matching.account_holder_complete` p\nSET\n    match = dss.MATCH\nFROM\n    (SELECT ID, MAX(MATCH) as MATCH FROM`virginia-lihwap-pay.dss_matching.DSS_AcctHolder_Promise_Account_Holder_Name_Match_W_*` GROUP BY 1) dss\nWHERE\n    dss.id = p.id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/vdss_matching/update_new_accountholder_matches.sql", "compiled": true, "compiled_code": "-- For UPDATEing the values of the matches we get back from DSS\n-- Requires setting the FROM each time\n\nUPDATE\n    `virginia-lihwap-pay.dss_matching.account_holder_complete` p\nSET\n    match = dss.MATCH\nFROM\n    (SELECT ID, MAX(MATCH) as MATCH FROM`virginia-lihwap-pay.dss_matching.DSS_AcctHolder_Promise_Account_Holder_Name_Match_W_*` GROUP BY 1) dss\nWHERE\n    dss.id = p.id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.find_prequal_to_qual_people": {"database": "analytics-prod-328313", "schema": "prod", "name": "find_prequal_to_qual_people", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/vdss_matching/find_prequal_to_qual_people.sql", "original_file_path": "analysis/vdss_matching/find_prequal_to_qual_people.sql", "unique_id": "analysis.promise_dwh.find_prequal_to_qual_people", "fqn": ["promise_dwh", "analysis", "vdss_matching", "find_prequal_to_qual_people"], "alias": "find_prequal_to_qual_people", "checksum": {"name": "sha256", "checksum": "d99da391acc463775edabd225e72a97842727e3841706823ad7380481045eac6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.61486, "relation_name": null, "raw_code": "-- This is for finding pre-qualified applications that now have been CatEl\n-- matched by DSS for producing the file that we use with the CLI to move \n-- them to the next stage\n-- We check if _any_ household member for the application matched on any of the 3 CatEl programs\nWITH approvals AS (\n  SELECT\n    SPLIT(id, '#') [SAFE_OFFSET(0)] as application_id,\n    -- Check if there's a TRUE for ANY program for ANY HH member\n    MAX(\n      match_in_snap\n      OR match_in_tanf\n      OR match_in_liheap\n    ) as approved\n  FROM\n    `virginia-lihwap-pay.dss_matching.household_members_complete`\n  GROUP BY\n    1\n),\nWITH lihwap_relief_processing_state AS (\n  SELECT\n          rps.*,\n          ra.customer_id,\n         row_number() OVER (PARTITION BY customer_id ORDER BY rps.created_at DESC) as state_number_desc,\n         lead(rps.created_at) OVER (PARTITION BY customer_id ORDER BY rps.created_at) as next_transition_ts\n         FROM\n           `virginia-lihwap-pay.analytics_promisepay_prod.relief_processing_state` rps\n         LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` ra ON ra.id = rps.relief_application_id\n         )\nSELECT\n  lihwap_relief_application.customer_id AS client_id,\n  approved\nFROM\n  `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS lihwap_relief_application\n  LEFT JOIN lihwap_relief_processing_state AS current_application_state ON lihwap_relief_application.id = current_application_state.relief_application_id\n  AND current_application_state.state_number_desc = 1\n  LEFT JOIN approvals ON CAST(application_id AS INT64) = lihwap_relief_application.id\nWHERE\n  current_application_state.reason_codes <> 'TestAccount'\n  AND current_application_state.status = 'PreQualified'\n  AND approved is not null", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/vdss_matching/find_prequal_to_qual_people.sql", "compiled": true, "compiled_code": "-- This is for finding pre-qualified applications that now have been CatEl\n-- matched by DSS for producing the file that we use with the CLI to move \n-- them to the next stage\n-- We check if _any_ household member for the application matched on any of the 3 CatEl programs\nWITH approvals AS (\n  SELECT\n    SPLIT(id, '#') [SAFE_OFFSET(0)] as application_id,\n    -- Check if there's a TRUE for ANY program for ANY HH member\n    MAX(\n      match_in_snap\n      OR match_in_tanf\n      OR match_in_liheap\n    ) as approved\n  FROM\n    `virginia-lihwap-pay.dss_matching.household_members_complete`\n  GROUP BY\n    1\n),\nWITH lihwap_relief_processing_state AS (\n  SELECT\n          rps.*,\n          ra.customer_id,\n         row_number() OVER (PARTITION BY customer_id ORDER BY rps.created_at DESC) as state_number_desc,\n         lead(rps.created_at) OVER (PARTITION BY customer_id ORDER BY rps.created_at) as next_transition_ts\n         FROM\n           `virginia-lihwap-pay.analytics_promisepay_prod.relief_processing_state` rps\n         LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` ra ON ra.id = rps.relief_application_id\n         )\nSELECT\n  lihwap_relief_application.customer_id AS client_id,\n  approved\nFROM\n  `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS lihwap_relief_application\n  LEFT JOIN lihwap_relief_processing_state AS current_application_state ON lihwap_relief_application.id = current_application_state.relief_application_id\n  AND current_application_state.state_number_desc = 1\n  LEFT JOIN approvals ON CAST(application_id AS INT64) = lihwap_relief_application.id\nWHERE\n  current_application_state.reason_codes <> 'TestAccount'\n  AND current_application_state.status = 'PreQualified'\n  AND approved is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.oc_cleaning": {"database": "analytics-prod-328313", "schema": "prod", "name": "oc_cleaning", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/fl_lihwap/oc_cleaning.sql", "original_file_path": "analysis/fl_lihwap/oc_cleaning.sql", "unique_id": "analysis.promise_dwh.oc_cleaning", "fqn": ["promise_dwh", "analysis", "fl_lihwap", "oc_cleaning"], "alias": "oc_cleaning", "checksum": {"name": "sha256", "checksum": "633ded0179e1f591bcd5637479465a9b256c3dddd57399f9107f0380da7e2b44"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.616707, "relation_name": null, "raw_code": "/*\nDe-duping Orange County Utilities data based on Max's original JEA de-duping query.\n\nMax's aforementioned query: https://github.com/PromiseNetwork/dbtPromise/blob/main/analysis/fl_lihwap/jea_cleaning.sql\n*/\n\nWITH\n\n-- first_pass = data from utility + minor formatting, data casing\n  first_pass AS (\n  SELECT\n    DISTINCT\n    LPAD(CAST(acct_no AS STRING), 10, '0') AS acct_number_padded,\n    CAST(total_balance_cents AS INT64) AS total_balance_cents,\n    CAST(past_due_balance_cents AS INT64) AS past_due_balance_cents,\n    * EXCEPT (\n      total_balance_cents,\n      past_due_balance_cents,\n      phone_10,\n      disconnected )\n  FROM\n    oc_restricted.oc_upload),\n\n-- dupe_accounts checks for any account number that shows up more than once in the file\n  dupe_accounts AS(\n  SELECT\n    acct_number_padded,\n    COUNT(1) AS num_rows\n  FROM\n    first_pass\n  GROUP BY\n    1\n  HAVING\n    (num_rows > 1) )\n\n-- get the fields we actually want, handles balance NULLs, check against NULLs\n-- and drops duplicates\nSELECT\n  DISTINCT\n  acct_number_padded AS acct_no,\n  IF(total_balance_cents IS NULL, 0, total_balance_cents) AS total_balance_cents,\n  IF(past_due_balance_cents IS NULL, 0, past_due_balance_cents) AS past_due_balance_cents,\n  acct_name,\n  acct_name AS contact_name,\n  acct_type,\n  svc_address_street,\n  svc_address_zip,\n  disconnect_risk,\n  mailing_address_street,\n  mailing_address_zip,\n  phone,\n  email,\n  NULL AS lihwap_amount_applied_cents\nFROM\n  first_pass\nWHERE\n  -- not duplicate account numbers\n  acct_number_padded NOT IN (\n    SELECT\n      acct_number_padded\n    FROM\n      dupe_accounts )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/fl_lihwap/oc_cleaning.sql", "compiled": true, "compiled_code": "/*\nDe-duping Orange County Utilities data based on Max's original JEA de-duping query.\n\nMax's aforementioned query: https://github.com/PromiseNetwork/dbtPromise/blob/main/analysis/fl_lihwap/jea_cleaning.sql\n*/\n\nWITH\n\n-- first_pass = data from utility + minor formatting, data casing\n  first_pass AS (\n  SELECT\n    DISTINCT\n    LPAD(CAST(acct_no AS STRING), 10, '0') AS acct_number_padded,\n    CAST(total_balance_cents AS INT64) AS total_balance_cents,\n    CAST(past_due_balance_cents AS INT64) AS past_due_balance_cents,\n    * EXCEPT (\n      total_balance_cents,\n      past_due_balance_cents,\n      phone_10,\n      disconnected )\n  FROM\n    oc_restricted.oc_upload),\n\n-- dupe_accounts checks for any account number that shows up more than once in the file\n  dupe_accounts AS(\n  SELECT\n    acct_number_padded,\n    COUNT(1) AS num_rows\n  FROM\n    first_pass\n  GROUP BY\n    1\n  HAVING\n    (num_rows > 1) )\n\n-- get the fields we actually want, handles balance NULLs, check against NULLs\n-- and drops duplicates\nSELECT\n  DISTINCT\n  acct_number_padded AS acct_no,\n  IF(total_balance_cents IS NULL, 0, total_balance_cents) AS total_balance_cents,\n  IF(past_due_balance_cents IS NULL, 0, past_due_balance_cents) AS past_due_balance_cents,\n  acct_name,\n  acct_name AS contact_name,\n  acct_type,\n  svc_address_street,\n  svc_address_zip,\n  disconnect_risk,\n  mailing_address_street,\n  mailing_address_zip,\n  phone,\n  email,\n  NULL AS lihwap_amount_applied_cents\nFROM\n  first_pass\nWHERE\n  -- not duplicate account numbers\n  acct_number_padded NOT IN (\n    SELECT\n      acct_number_padded\n    FROM\n      dupe_accounts )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.load_new_coastal_cloud": {"database": "analytics-prod-328313", "schema": "prod", "name": "load_new_coastal_cloud", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/fl_lihwap/load_new_coastal_cloud.sql", "original_file_path": "analysis/fl_lihwap/load_new_coastal_cloud.sql", "unique_id": "analysis.promise_dwh.load_new_coastal_cloud", "fqn": ["promise_dwh", "analysis", "fl_lihwap", "load_new_coastal_cloud"], "alias": "load_new_coastal_cloud", "checksum": {"name": "sha256", "checksum": "eb5dee1a8b29d12f294b64f00168728544fde52e43eea86f2794147d152bd55a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.6184928, "relation_name": null, "raw_code": "LOAD DATA OVERWRITE florida-lihwap-pay.coastal_cloud_lihwap_data.combined_lihwap_data_20231110 (\n    case_name STRING,\n    application_name STRING,\n    applicant_name STRING,\n    applicant_address STRING,\n    applicant_phone STRING,\n    county_name STRING,\n    submitted_date STRING,\n    applicant_date_of_birth STRING,\n    applicant_age STRING,\n    community_action_agency_name STRING,\n    case_status STRING,\n    case_closed_reason STRING,\n    funds_committed_date STRING,\n    award_period_from_batch STRING,\n    number_hh_members STRING,\n    elderly_benefit STRING,\n    disability_benefit STRING,\n    child_benefit STRING,\n    hh_income STRING,\n    case_last_modified_date STRING,\n    utility_provider_name STRING,\n    name_of_utility_company STRING,\n    name_on_account STRING,\n    account_number STRING,\n    award_amount_to_utility_provider STRING,\n    actual_amount STRING,\n    utility_provider_status STRING\n) FROM FILES (\n    skip_leading_rows=1,\n    format='CSV',\n    uris = ['gs://coastal_cloud_lihwap_data/SQL Promise Results-11-10-2023012442284Z.csv']\n)", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/fl_lihwap/load_new_coastal_cloud.sql", "compiled": true, "compiled_code": "LOAD DATA OVERWRITE florida-lihwap-pay.coastal_cloud_lihwap_data.combined_lihwap_data_20231110 (\n    case_name STRING,\n    application_name STRING,\n    applicant_name STRING,\n    applicant_address STRING,\n    applicant_phone STRING,\n    county_name STRING,\n    submitted_date STRING,\n    applicant_date_of_birth STRING,\n    applicant_age STRING,\n    community_action_agency_name STRING,\n    case_status STRING,\n    case_closed_reason STRING,\n    funds_committed_date STRING,\n    award_period_from_batch STRING,\n    number_hh_members STRING,\n    elderly_benefit STRING,\n    disability_benefit STRING,\n    child_benefit STRING,\n    hh_income STRING,\n    case_last_modified_date STRING,\n    utility_provider_name STRING,\n    name_of_utility_company STRING,\n    name_on_account STRING,\n    account_number STRING,\n    award_amount_to_utility_provider STRING,\n    actual_amount STRING,\n    utility_provider_status STRING\n) FROM FILES (\n    skip_leading_rows=1,\n    format='CSV',\n    uris = ['gs://coastal_cloud_lihwap_data/SQL Promise Results-11-10-2023012442284Z.csv']\n)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.toho_exclude_accounts": {"database": "analytics-prod-328313", "schema": "prod", "name": "toho_exclude_accounts", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/fl_lihwap/toho_exclude_accounts.sql", "original_file_path": "analysis/fl_lihwap/toho_exclude_accounts.sql", "unique_id": "analysis.promise_dwh.toho_exclude_accounts", "fqn": ["promise_dwh", "analysis", "fl_lihwap", "toho_exclude_accounts"], "alias": "toho_exclude_accounts", "checksum": {"name": "sha256", "checksum": "cee88c56e6db592357a11b6a191555e6d5308a2dab51173bb946ad8f487fb6ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.62028, "relation_name": null, "raw_code": "/*\nCleaning TOHO data & separating the two data sources.\n\nThis query returns the 785 accounts which can not be imported due to data issues & are not included in the two cleaning queries.\n*/\n\n SELECT * EXCEPT(past_due_balance_cents), 0 as past_due_balance_cents\n FROM `florida-lihwap-pay.toho_restricted.toho_upload`\n where svc_address_zip is null\n or acct_no = 'acct_no'\n or svc_address_zip in ('Move', '0', 'Fl', '347', '3474', '3475', '3655', '3896', 'COURT')", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/fl_lihwap/toho_exclude_accounts.sql", "compiled": true, "compiled_code": "/*\nCleaning TOHO data & separating the two data sources.\n\nThis query returns the 785 accounts which can not be imported due to data issues & are not included in the two cleaning queries.\n*/\n\n SELECT * EXCEPT(past_due_balance_cents), 0 as past_due_balance_cents\n FROM `florida-lihwap-pay.toho_restricted.toho_upload`\n where svc_address_zip is null\n or acct_no = 'acct_no'\n or svc_address_zip in ('Move', '0', 'Fl', '347', '3474', '3475', '3655', '3896', 'COURT')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.toho_stcloud_cleaning": {"database": "analytics-prod-328313", "schema": "prod", "name": "toho_stcloud_cleaning", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/fl_lihwap/toho_stcloud_cleaning.sql", "original_file_path": "analysis/fl_lihwap/toho_stcloud_cleaning.sql", "unique_id": "analysis.promise_dwh.toho_stcloud_cleaning", "fqn": ["promise_dwh", "analysis", "fl_lihwap", "toho_stcloud_cleaning"], "alias": "toho_stcloud_cleaning", "checksum": {"name": "sha256", "checksum": "dd069f6ab88190436ae41c6623093aa500d0281d0771e4997e617bf050922fbd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.622109, "relation_name": null, "raw_code": "/*\nCleaning TOHO data & separating the two data sources.\n\nKissimmee data is that with a 8-digit account no (including leading 0s).\nThis query filters for those accounts & removes accounts which we know cannot be imported. \n\nThis query returns 33680 results.\n*/\n\nSELECT * EXCEPT(past_due_balance_cents, mailing_address_zip, mailing_address_street)\n    , 0 as past_due_balance_cents\n    , IF(NOT REGEXP_CONTAINS(TRIM(mailing_address_zip), \"^[0-9\\\\-]+$\"),\n        svc_address_zip,\n        mailing_address_zip) as mailing_address_zip\n    -- perform same zip code check but replace street address:\n    -- if mailing_zip contains anything other than numbers and hypens after trim\n    -- then replace the mailing_address_ZIP with svc_address_ZIP\n    , IF(NOT REGEXP_CONTAINS(TRIM(mailing_address_zip), \"^[0-9\\\\-]+$\"),\n        svc_address_street,\n        mailing_address_street) as mailing_address_street\nFROM `florida-lihwap-pay.toho_restricted.toho_upload`\nwhere svc_address_zip is not null\nand acct_no <> 'acct_no'\nand svc_address_zip not in ('Move', '0', 'Fl', '347', '3474', '3475', '3655', '3896', 'COURT')\nand length(acct_no) = 8", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/fl_lihwap/toho_stcloud_cleaning.sql", "compiled": true, "compiled_code": "/*\nCleaning TOHO data & separating the two data sources.\n\nKissimmee data is that with a 8-digit account no (including leading 0s).\nThis query filters for those accounts & removes accounts which we know cannot be imported. \n\nThis query returns 33680 results.\n*/\n\nSELECT * EXCEPT(past_due_balance_cents, mailing_address_zip, mailing_address_street)\n    , 0 as past_due_balance_cents\n    , IF(NOT REGEXP_CONTAINS(TRIM(mailing_address_zip), \"^[0-9\\\\-]+$\"),\n        svc_address_zip,\n        mailing_address_zip) as mailing_address_zip\n    -- perform same zip code check but replace street address:\n    -- if mailing_zip contains anything other than numbers and hypens after trim\n    -- then replace the mailing_address_ZIP with svc_address_ZIP\n    , IF(NOT REGEXP_CONTAINS(TRIM(mailing_address_zip), \"^[0-9\\\\-]+$\"),\n        svc_address_street,\n        mailing_address_street) as mailing_address_street\nFROM `florida-lihwap-pay.toho_restricted.toho_upload`\nwhere svc_address_zip is not null\nand acct_no <> 'acct_no'\nand svc_address_zip not in ('Move', '0', 'Fl', '347', '3474', '3475', '3655', '3896', 'COURT')\nand length(acct_no) = 8", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.load_full_liheap": {"database": "analytics-prod-328313", "schema": "prod", "name": "load_full_liheap", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/fl_lihwap/load_full_liheap.sql", "original_file_path": "analysis/fl_lihwap/load_full_liheap.sql", "unique_id": "analysis.promise_dwh.load_full_liheap", "fqn": ["promise_dwh", "analysis", "fl_lihwap", "load_full_liheap"], "alias": "load_full_liheap", "checksum": {"name": "sha256", "checksum": "053d93e9b5f985d8ad2d06a9c5d634967c467bd079c684d2c25a1f96b557fa1a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.6239731, "relation_name": null, "raw_code": "LOAD DATA OVERWRITE florida-lihwap-pay.liheap_restricted.full_list (\n    CID STRING,\n    HouseholdID STRING,\n    ApplicationDate STRING,\n    Firstname STRING,\n    MI STRING,\n    Lastname STRING,\n    FamilyMembers INT64,\n    Email STRING,\n    HldEmail STRING,\n    Phone STRING,\n    HomePhone STRING,\n    CellPhone STRING,\n    WorkPhone STRING, \n    AnnualFamilyIncome STRING,\n    County STRING,\n    DOB STRING,\n    Gender STRING,\n    Disabled STRING,\n    Race STRING,\n    Ethnicity STRING,\n    FoodStampsBenefit STRING,\n    ElectricAcctName STRING,\n    ElectricAccNo STRING,\n    ElectricVendor STRING,\n    CreatedOn STRING ,\n    IsHeadOfFamily STRING ,\n    Age STRING ,\n    MailAddr1 STRING ,\n    MailCity STRING ,\n    HousingType STRING ,\n    PovertyLevel STRING ,\n    MailState STRING ,\n    Landlord_Addr1 STRING ,\n    Landlord_City STRING ,\n    Landlord_Name STRING ,\n    Landlord_Phone STRING ,\n    Landlord_Zip STRING ,\n    MailAddr2 STRING ,\n    MailCounty STRING ,\n    MailZipcode STRING ,\n    NonCashBenefits_Snap STRING ,\n    NonCashBenefits_LIHEAP STRING ,\n    NonCashBenefits_ChildcareVoucher STRING ,\n    OtherIncomeSource_PrivateDisabilityInsurance STRING ,\n    OtherIncomeSource_SSI STRING ,\n    OtherIncomeSource_TANF STRING ,\n    SocialSecurityBenefit STRING ,\n    SSIBenefit STRING ,\n    OwnHouseType STRING ,\n    Veteran STRING ,\n    Rent STRING ,\n    TANFBenefit STRING,\n    WaterAccNo STRING,\n    WaterAcctName STRING,\n    WaterVendor STRING,\n    HouseHoldType STRING,\n    GenderDD STRING ,\n    BLANK STRING)\n  FROM FILES(\n    skip_leading_rows=1,\n    format='CSV',\n    uris = ['gs://liheap_data/LIHEAP CLIENT LISTINGS_UPDATED_07.14.2023.csv']\n  )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/fl_lihwap/load_full_liheap.sql", "compiled": true, "compiled_code": "LOAD DATA OVERWRITE florida-lihwap-pay.liheap_restricted.full_list (\n    CID STRING,\n    HouseholdID STRING,\n    ApplicationDate STRING,\n    Firstname STRING,\n    MI STRING,\n    Lastname STRING,\n    FamilyMembers INT64,\n    Email STRING,\n    HldEmail STRING,\n    Phone STRING,\n    HomePhone STRING,\n    CellPhone STRING,\n    WorkPhone STRING, \n    AnnualFamilyIncome STRING,\n    County STRING,\n    DOB STRING,\n    Gender STRING,\n    Disabled STRING,\n    Race STRING,\n    Ethnicity STRING,\n    FoodStampsBenefit STRING,\n    ElectricAcctName STRING,\n    ElectricAccNo STRING,\n    ElectricVendor STRING,\n    CreatedOn STRING ,\n    IsHeadOfFamily STRING ,\n    Age STRING ,\n    MailAddr1 STRING ,\n    MailCity STRING ,\n    HousingType STRING ,\n    PovertyLevel STRING ,\n    MailState STRING ,\n    Landlord_Addr1 STRING ,\n    Landlord_City STRING ,\n    Landlord_Name STRING ,\n    Landlord_Phone STRING ,\n    Landlord_Zip STRING ,\n    MailAddr2 STRING ,\n    MailCounty STRING ,\n    MailZipcode STRING ,\n    NonCashBenefits_Snap STRING ,\n    NonCashBenefits_LIHEAP STRING ,\n    NonCashBenefits_ChildcareVoucher STRING ,\n    OtherIncomeSource_PrivateDisabilityInsurance STRING ,\n    OtherIncomeSource_SSI STRING ,\n    OtherIncomeSource_TANF STRING ,\n    SocialSecurityBenefit STRING ,\n    SSIBenefit STRING ,\n    OwnHouseType STRING ,\n    Veteran STRING ,\n    Rent STRING ,\n    TANFBenefit STRING,\n    WaterAccNo STRING,\n    WaterAcctName STRING,\n    WaterVendor STRING,\n    HouseHoldType STRING,\n    GenderDD STRING ,\n    BLANK STRING)\n  FROM FILES(\n    skip_leading_rows=1,\n    format='CSV',\n    uris = ['gs://liheap_data/LIHEAP CLIENT LISTINGS_UPDATED_07.14.2023.csv']\n  )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.manatee_cleanup": {"database": "analytics-prod-328313", "schema": "prod", "name": "manatee_cleanup", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/fl_lihwap/manatee_cleanup.sql", "original_file_path": "analysis/fl_lihwap/manatee_cleanup.sql", "unique_id": "analysis.promise_dwh.manatee_cleanup", "fqn": ["promise_dwh", "analysis", "fl_lihwap", "manatee_cleanup"], "alias": "manatee_cleanup", "checksum": {"name": "sha256", "checksum": "e51bc0864b4e39905557e8f04950aa43be4861d6d44278d3561ab46bd155583a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.626622, "relation_name": null, "raw_code": "with manatee_combined_data as (\n  select *\nfrom `florida-lihwap-pay.manatee_restricted.manatee_upload_1`\nUNION ALL\nselect *\nfrom `florida-lihwap-pay.manatee_restricted.manatee_upload_2`\n)\nselect\n  string_field_0 as acct_no,\n  string_field_1 as acct_name,\n  string_field_1 as contact_name,\n  string_field_2 as acct_type,\n  string_field_3 as svc_address_street,\n  string_field_4 as svc_address_zip,\n  string_field_5 as phone,\n  string_field_6 as email,\n  -- if mailing_zip contains anything other than numbers and hypens after trim\n  -- then replace the mailing_address_ZIP with svc_address_ZIP\n  COALESCE(REGEXP_EXTRACT(string_field_8, \"[0-9]{5}\"), string_field_4) as mailing_address_zip,\n  -- perform same zip code check but replace street address:\n  -- if mailing_zip contains anything other than numbers and hypens after trim\n  -- then replace the mailing_address_ZIP with svc_address_ZIP\n  IF(REGEXP_EXTRACT(string_field_8, \"[0-9]{5}\") IS NULL,\n      string_field_3,\n      string_field_7) as mailing_address_street,\n  0 as total_balance_cents,\n  0 as past_due_balance_cents,\n  null as lihwap_amount_applied_cents\nfrom manatee_combined_data \nwhere string_field_0 != 'string_field_0'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/fl_lihwap/manatee_cleanup.sql", "compiled": true, "compiled_code": "with manatee_combined_data as (\n  select *\nfrom `florida-lihwap-pay.manatee_restricted.manatee_upload_1`\nUNION ALL\nselect *\nfrom `florida-lihwap-pay.manatee_restricted.manatee_upload_2`\n)\nselect\n  string_field_0 as acct_no,\n  string_field_1 as acct_name,\n  string_field_1 as contact_name,\n  string_field_2 as acct_type,\n  string_field_3 as svc_address_street,\n  string_field_4 as svc_address_zip,\n  string_field_5 as phone,\n  string_field_6 as email,\n  -- if mailing_zip contains anything other than numbers and hypens after trim\n  -- then replace the mailing_address_ZIP with svc_address_ZIP\n  COALESCE(REGEXP_EXTRACT(string_field_8, \"[0-9]{5}\"), string_field_4) as mailing_address_zip,\n  -- perform same zip code check but replace street address:\n  -- if mailing_zip contains anything other than numbers and hypens after trim\n  -- then replace the mailing_address_ZIP with svc_address_ZIP\n  IF(REGEXP_EXTRACT(string_field_8, \"[0-9]{5}\") IS NULL,\n      string_field_3,\n      string_field_7) as mailing_address_street,\n  0 as total_balance_cents,\n  0 as past_due_balance_cents,\n  null as lihwap_amount_applied_cents\nfrom manatee_combined_data \nwhere string_field_0 != 'string_field_0'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.toho_kissimmee_cleaning": {"database": "analytics-prod-328313", "schema": "prod", "name": "toho_kissimmee_cleaning", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/fl_lihwap/toho_kissimmee_cleaning.sql", "original_file_path": "analysis/fl_lihwap/toho_kissimmee_cleaning.sql", "unique_id": "analysis.promise_dwh.toho_kissimmee_cleaning", "fqn": ["promise_dwh", "analysis", "fl_lihwap", "toho_kissimmee_cleaning"], "alias": "toho_kissimmee_cleaning", "checksum": {"name": "sha256", "checksum": "01fadd79234f4328b44053e9739397b3ff398a20db1d9292ff30d2343895c761"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.628404, "relation_name": null, "raw_code": "/*\nCleaning TOHO data & separating the two data sources.\n\nKissimmee data is that with a 9-digit account no (including leading 0s).\nThis query filters for those accounts & removes accounts which we know cannot be imported.\n\nThis query returns 124548 results.\n*/\n\nSELECT * EXCEPT(past_due_balance_cents, mailing_address_zip, mailing_address_street)\n    , 0 as past_due_balance_cents\n    , IF(NOT REGEXP_CONTAINS(TRIM(mailing_address_zip), \"^[0-9\\\\-]+$\"),\n        svc_address_zip,\n        mailing_address_zip) as mailing_address_zip\n    -- perform same zip code check but replace street address:\n    -- if mailing_zip contains anything other than numbers and hypens after trim\n    -- then replace the mailing_address_ZIP with svc_address_ZIP\n    , IF(NOT REGEXP_CONTAINS(TRIM(mailing_address_zip), \"^[0-9\\\\-]+$\"),\n        svc_address_street,\n        mailing_address_street) as mailing_address_street\nFROM `florida-lihwap-pay.toho_restricted.toho_upload`\nwhere svc_address_zip is not null\nand acct_no <> 'acct_no'\nand svc_address_zip not in ('Move', '0', 'Fl', '347', '3474', '3475', '3655', '3896', 'COURT')\nand length(acct_no) = 9", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/fl_lihwap/toho_kissimmee_cleaning.sql", "compiled": true, "compiled_code": "/*\nCleaning TOHO data & separating the two data sources.\n\nKissimmee data is that with a 9-digit account no (including leading 0s).\nThis query filters for those accounts & removes accounts which we know cannot be imported.\n\nThis query returns 124548 results.\n*/\n\nSELECT * EXCEPT(past_due_balance_cents, mailing_address_zip, mailing_address_street)\n    , 0 as past_due_balance_cents\n    , IF(NOT REGEXP_CONTAINS(TRIM(mailing_address_zip), \"^[0-9\\\\-]+$\"),\n        svc_address_zip,\n        mailing_address_zip) as mailing_address_zip\n    -- perform same zip code check but replace street address:\n    -- if mailing_zip contains anything other than numbers and hypens after trim\n    -- then replace the mailing_address_ZIP with svc_address_ZIP\n    , IF(NOT REGEXP_CONTAINS(TRIM(mailing_address_zip), \"^[0-9\\\\-]+$\"),\n        svc_address_street,\n        mailing_address_street) as mailing_address_street\nFROM `florida-lihwap-pay.toho_restricted.toho_upload`\nwhere svc_address_zip is not null\nand acct_no <> 'acct_no'\nand svc_address_zip not in ('Move', '0', 'Fl', '347', '3474', '3475', '3655', '3896', 'COURT')\nand length(acct_no) = 9", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.load_snap_data": {"database": "analytics-prod-328313", "schema": "prod", "name": "load_snap_data", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/fl_lihwap/load_snap_data.sql", "original_file_path": "analysis/fl_lihwap/load_snap_data.sql", "unique_id": "analysis.promise_dwh.load_snap_data", "fqn": ["promise_dwh", "analysis", "fl_lihwap", "load_snap_data"], "alias": "load_snap_data", "checksum": {"name": "sha256", "checksum": "9cd7da2efce6a57c6a2816efff7fd5cea8ad10a5a4b042fee6b97deb68aa2440"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.6301959, "relation_name": null, "raw_code": "LOAD DATA OVERWRITE florida-lihwap-pay.snap_restricted.snap_20230912 (\n  casenum STRING,\n  receiving_firstname STRING,\n  receiving_lastname STRING,\n  receiving_citizenship STRING,\n  receiving_white STRING,\n  receiving_black STRING,\n  receiving_a_indian STRING,\n  receiving_asian STRING,\n  receiving_hawaiian STRING,\n  receiving_other STRING,\n  receiving_unknown STRING,\n  receiving_hispanic STRING,\n  receiving_sheltercost STRING,\n  payee_firstname STRING,\n  payee_lastname STRING,\n  payee_citizenship STRING,\n  payee_white STRING,\n  payee_black STRING,\n  payee_a_indian STRING,\n  payee_asian STRING,\n  payee_hawaiian STRING,\n  payee_other STRING,\n  payee_unknown STRING,\n  payee_hispanic STRING,\n  payee_sheltercost STRING,\n  street_number_living STRING,\n  address_unit_number_living STRING,\n  address_direction_living STRING,\n  street_living STRING,\n  address_line_2_living STRING,\n  address_suffix_living STRING,\n  address_quadrant_living STRING,\n  apartment_number_living STRING,\n  city_living STRING,\n  state_living STRING,\n  zip_code_living STRING,\n  county STRING,\n  phone_number STRING,\n)\n  FROM FILES(\n    skip_leading_rows=1,\n    format='CSV',\n    field_delimiter='|',\n    quote='',\n    max_bad_records=1,\n    uris = ['gs://liheap_data/SNAP Oct22 - Aug23.txt']\n  )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/fl_lihwap/load_snap_data.sql", "compiled": true, "compiled_code": "LOAD DATA OVERWRITE florida-lihwap-pay.snap_restricted.snap_20230912 (\n  casenum STRING,\n  receiving_firstname STRING,\n  receiving_lastname STRING,\n  receiving_citizenship STRING,\n  receiving_white STRING,\n  receiving_black STRING,\n  receiving_a_indian STRING,\n  receiving_asian STRING,\n  receiving_hawaiian STRING,\n  receiving_other STRING,\n  receiving_unknown STRING,\n  receiving_hispanic STRING,\n  receiving_sheltercost STRING,\n  payee_firstname STRING,\n  payee_lastname STRING,\n  payee_citizenship STRING,\n  payee_white STRING,\n  payee_black STRING,\n  payee_a_indian STRING,\n  payee_asian STRING,\n  payee_hawaiian STRING,\n  payee_other STRING,\n  payee_unknown STRING,\n  payee_hispanic STRING,\n  payee_sheltercost STRING,\n  street_number_living STRING,\n  address_unit_number_living STRING,\n  address_direction_living STRING,\n  street_living STRING,\n  address_line_2_living STRING,\n  address_suffix_living STRING,\n  address_quadrant_living STRING,\n  apartment_number_living STRING,\n  city_living STRING,\n  state_living STRING,\n  zip_code_living STRING,\n  county STRING,\n  phone_number STRING,\n)\n  FROM FILES(\n    skip_leading_rows=1,\n    format='CSV',\n    field_delimiter='|',\n    quote='',\n    max_bad_records=1,\n    uris = ['gs://liheap_data/SNAP Oct22 - Aug23.txt']\n  )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.jea_cleaning": {"database": "analytics-prod-328313", "schema": "prod", "name": "jea_cleaning", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/fl_lihwap/jea_cleaning.sql", "original_file_path": "analysis/fl_lihwap/jea_cleaning.sql", "unique_id": "analysis.promise_dwh.jea_cleaning", "fqn": ["promise_dwh", "analysis", "fl_lihwap", "jea_cleaning"], "alias": "jea_cleaning", "checksum": {"name": "sha256", "checksum": "afd8cf0d40b87e742921f64e52deb31f020372bc937bc9e8467f01c688b7b0a2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.6319869, "relation_name": null, "raw_code": "/*\nJEA sent us their data in three distinct files, and there were a lot of rows, \nwhich made it challenging to clean in Excel. So we did it here instead.\n\nAlso, we wanted the people they believe to be LIHEAP recipients at the top of the file so they get integrated first\n*/\n\nDECLARE liheap_accts ARRAY<STRING>;\n\nSET liheap_accts = ['0105009213','0133054200','0145597856','0209205725','0255575564','0347785752','0425010731','0427633419','0433430347','0480234200','0493479972','0500018190','0719328227','0769410902','0810198971','0836239033','0897944200','0931514200','1093144200','1106780068','1308310476','1367734200','1404644979','1650354200','1704554148','1719907746','1774244200','1880954200','1946944200','1964654200','2143538129','2300924200','2375724200','2560937061','2564892551','2583680729','2622924200','2787638775','3010751290','3036334200','3055724200','3075754200','3076634200','3101544200','3160514200','3170136532','3251918286','3253545432','3309424200','3440395533','3660803296','3690554200','3797314008','3870534453','3915957321','3939314200','3957621386','3963134200','4153807995','4197778436','4263604671','4263834200','4298622740','4410132196','4581741943','4598067854','4628444200','4707832828','4802144200','4921001519','5003954200','5134144329','5164883326','5234963339','5255977230','5329654200','5434526931','5461486316','5678944200','5862714200','5867256648','5914452202','5938324200','5948661395','6222834200','6483754200','6604144200','6673924200','6714944200','6840854200','7177514200','7239262019','7813539276','8039154200','8295834200','8363275959','8449809021','8709359374','8796542687','8938951556','8949944200','8994829616','9363997214','9555990089','9870831896','9912514200','9989414200','0063703622','0126824200','0144593289','0161944882','0214000224','0226834200','0285314228','0308678656','0317522899','0322134200','0390313227','0422653662','0445875248','0609928966','0671064200','0692247701','0772334200','0789234200','0902755145','0931996793','0958010878','0970244200','1123514200','1150339389','1197514200','1238751827','1275134200','1286880919','1458710381','1460020206','1507195020','1660798375','1663854200','1755024200','1920611689','1969844892','1973082788','2330661293','2380981296','2408478942','2499954200','2604754200','2697434200','2729115850','2790744200','2804880544','3078628941','3086466975','3127824200','3283802256','3309924200','3336344200','3360404858','3360823362','3380634200','3399343808','3405493724','3481405372','3556110543','3723025842','3740921559','3978834200','4051444200','4059734200','4083439092','4195414200','4456155807','4491414200','4556785300','4593564396','4746330672','4854665368','4976018770','5039628664','5100193065','5272414200','5294306497','5709737163','5764440894','5936558735','5942654200','6000061656','6009615457','6230792591','6273944200','6384200007','6399104229','6650924857','6653899959','6731238318','6754154200','6805938292','6932231770','7024444200','7089254200','7259314200','7329499279','7561834200','7864344200','7981573004','8192309752','8205144200','8552154200','8622895100','8970614200','9067514200','9181947019','9238445610','9300754200','9361212532','9411514200','9537117545','9723124200','9734579849','9755634200','9774349094','9785039469','0004233032','0009514200','0022134200','0022452868','0079307000','0124973088','0227824200','0286624200','0330230484','0350619048','0425579667','0440824200','0498334200','0512268909','0568968758','0645555952','0733824200','0798525799','0807414200','0809317091','0858744200','0909042582','1186463140','1198724200','1215564327','1297514200','1369028156','1501330501','1642867914','1659153881','1678661306','1712531723','1807414200','1833634200','1894018612','1914605974','1994607816','2040991501','2083810639','2163047219','2199754200','2285520315','2314434200','2456346962','2750878425','2793460847','2842824200','2869243209','2890414200','2897148100','2919738475','3236318257','3255024200','3259314200','3290454200','3424944953','3438624200','3444408332','3452297748','3486547087','3488893471','3739738836','3939994640','4190614096','4363474124','4416925018','4450738155','4487367333','4611998524','4771371333','4878914020','5020614200','5097724200','5120239571','5135977480','5280615549','5440889085','5447724200','5573444200','5615744200','5647344200','5703071408','5730794411','5837707776','5876514200','5994153343','6001344200','6012354200','6041375246','6169333967','6333017993','6362409580','6583893850','6635429621','6792337478','6870876332','6913290671','7083401085','7423094656','7445496111','7463131848','7555834200','7789557960','7836444200','7860890182','7928821055','7949514200','7969434200','8020254200','8061361086','8087434200','8118973985','8188709250','8219624200','8252734200','8261935147','8400405221','8475634200','8703554200','8798814200','8811093990','8865724200','8892273100','8988995856','9080811162','9336740944','9394834200','9609224200','9614303261','9770331299','9787157418','9800690276','9818224200','9833834200','9859242207','9966261858','0045334200','0124350489','0138994719','0139425757','0162360321','0390844200','0487398794','0538434200','0615179085','0651373885','0687134200','0738514200','0774191179','0859491085','1016564921','1031154200','1201213736','1274321729','1288156692','1329435539','1361428154','1410255168','1470492629','1472054200','1527181269','1889051427','1979052123','2019037220','2057254200','2065250043','2082836734','2150710248','2297738737','2298634200','2333769142','2641293465','2771830220','2895064200','3020134200','3308775701','3320154200','3333452480','3408414200','3418528962','3477254200','3512414200','3670164987','3869857457','4190392719','4261224200','4615154037','4627924200','4681240148','4767659829','4814767613','5178944200','5196064200','5281154200','5346024200','5579607677','5591431399','5615809031','5656219816','5667434200','5798343291','5877724200','5906924200','6337579088','6497154200','6577730544','6596514200','6798805298','6807244200','6877302523','6905624200','6910414200','7137315201','7325134200','7409829057','7413897416','7437724931','7506679716','7517872751','7888634200','7910514200','7939725520','8001946848','8034143459','8112352684','8184273957','8639463346','8696178846','8874458056','9250906968','9324700280','9366494985','9570608582','9656944200','9748439306','9799434948','0101134200','0116331451','0128302871','0206172455','0273514200','0361944200','0464995661','0471344200','0554545278','0684854200','0859447628','0919944200','0945072007','1293634200','1414324200','1431326078','1522924200','1591634200','1689885531','1690544200','1762354200','1910724200','1995254200','2080885742','2166154200','2211258461','2454279419','2593654200','2717890499','2762069645','2922819625','2998060417','3128092331','3299465090','3300318256','3413054200','3629514200','3635106295','3651134200','3657140117','4103754200','4118043995','4236934200','4261354200','4313434200','4321759417','4403147721','4415424200','4680244200','4685400557','4686407616','4902119085','4997434200','5197566897','5241424200','5274139426','5378254200','5437490839','5666717271','5698774110','5718109032','5916875329','5988724200','6043424200','6048396632','6069283645','6225750451','6232686701','6316514200','6369555213','6522260419','6572414200','6668524979','6780645291','6780982646','6969434200','7008150641','7020414200','7030044200','7150087169','7224642080','7488445240','7552093151','7729144200','7757577233','7831713948','7838534200','7864514200','7966340998','8005272198','8162703301','8448644200','8466585263','8487244200','8936598121','9064620721','9140334200','9352896343','9400514200','9470224200','9693582869','9854434200','9902169693','0063724200','0145914200','0189508623','0200654709','0307724200','0356724200','0357694299','0374044200','0439676884','0712134200','0943754200','1055414200','1335708512','1346224874','1365514200','1418282305','1547234200','1613054200','1707554200','1743924200','1780411775','1823692729','1869775259','1994744200','2247634200','2251424200','2252754590','2331209186','2333319519','2364844691','2445358148','2449501539','2568314200','2788034200','2914064200','2931454200','2983754200','2986778386','3205144200','3309534200','3320924200','3344333987','3527154200','3540295331','3611088218','3616470312','3683754200','3697183869','3809934032','3937403829','3990334200','4113414200','4123738486','4185044200','4209934200','4261445066','4345924200','4381450283','4463034200','4585369389','4618315451','4625042707','4667634200','4690544200','4749713787','4970452969','5019834200','5326375603','5326886511','5455223314','5484187044','5558686153','5585934200','5637634200','5683383205','5765813082','5945414200','6133789869','6247469610','6371926957','6445724200','6493037877','6497534200','6524514200','6651396109','6672824200','6788951117','7004144237','7007444200','7021934200','7252610967','7369805283','7388460606','7427103463','7650017335','7793144200','7816824200','7858354200','7923984980','7930897135','8013734200','8036834200','8096914200','8119944231','8127721723','8289558577','8325151877','8434552309','8569683213','8588625355','8738824200','8802924200','8819961933','8972073224','8982858898','9096854200','9136997334','9415934178','9447224200','9635814200','9790414200','9821019103','9877370125','9895336130','0050524183','0086653161','0112433055','0139323200','0144113301','0202938268','0236517313','0377081532','0423044200','0459920332','0484066018','0530919176','0531154200','0610434200','0747537365','1005549229','1261249435','1308047061','1318563390','1407227451','1410509452','1536944200','1592821967','1596181953','1621876612','1655015308','1702603049','1717334200','1879314200','1895134200','1901524200','1906187168','1977734200','1999834200','2020614200','2029861100','2192741710','2291064200','2299112328','2300354200','2387724200','2534121251','2587736600','2719075930','2767092128','2974930025','2988436382','3107164534','3151697506','3265944200','3295893433','3377907974','3405144200','3515424200','3589432613','3655101860','3812428763','3926740651','4001024200','4046144200','4113734200','4282701115','4494135028','4583439214','4594064200','4655212794','4720925599','4964954200','5072324200','5136442259','5173434200','5348527661','5385044200','5428634200','5431044200','5559908148','5577744200','5680614200','5796830124','5868314200','5985452726','6012534200','6076423783','6120503388','6141944200','6142154200','6201092403','6207424200','6267433388','6343358723','6360134689','6382572072','6421834200','6424622154','6463527980','6543634200','6563234200','6730532208','6903244562','6912414200','7059688485','7307254200','7448127917','7547034200','7572388708','7585144186','7857567423','7859829450','7929718685','7936020972','7981144200','8265734200','8315118722','8368314200','8380131768','8440244200','8485479106','8620726273','8634781348','8702724200','8862854200','8864934200','9077169158','9101003078','9160454200','9196799453','9241658139','9630244200','9920944007','0020602509','0140744200','0158514200','0212434200','0239579523','0290344200','0291915261','0303941113','0391242543','0452344200','0461534200','0473249865','0481624200','0492414200','0496648401','0498154200','0531170855','0591880887','0805710501','0865074557','0926725945','1045934200','1145414200','1218581367','1218856680','1369149180','1746784589','1787514200','1793144200','1956834200','1989814200','2012947768','2199734200','2211134200','2321834200','2433493431','2488514200','2572201465','2760221526','2927034200','2982762047','3058234200','3090026831','3106514200','3260064200','3286533845','3364754252','3473839174','3615030660','3655834200','3663581294','3666504078','3863060554','3870244200','3913943995','3961955241','3982414200','4180234200','4212634200','4246144200','4288414200','4289003272','4342834200','4403382552','4530044200','4737824200','4770224200','4934944200','4943634200','4962665981','5090176554','5131321430','5267211480','5307234200','5347154200','5367444200','5400514200','5528854200','5572235785','5703894634','5834975797','5875724200','5888414200','6040934200','6113648281','6125987570','6185814649','6317987362','6322002173','6384615810','6456895272','6493514200','6529225921','6543524200','6552734200','6644698816','6648434200','6790830025','7022372927','7297154200','7362411424','7502912520','7783447903','7787454200','8095114002','8236238004','8256342507','8394634200','8397219775','8478454200','8481367747','8526344200','8534623233','8609534200','8659814200','8688775088','8852734200','8916940368','8940079722','9091317432','9236123765','9258554200','9344707198','9399914943','9510044200','9527279189','9560334200','9727276532','9792185086','9887119985'];\n\n\nWITH\n  first_pass AS (\n  SELECT\n    DISTINCT LPAD(acct_no, 10, '0') AS acct_number_padded,\n    CAST(CAST(total_w_balance_cents AS NUMERIC)*100 AS INT64) AS total_w_balance_cents,\n    CAST(CAST(w_past_due_balance_cents AS NUMERIC)*100 AS INT64) AS w_past_due_balance_cents,\n    * EXCEPT ( sp_type,\n      total_w_balance_cents,\n      w_past_due_balance_cents,\n      total_balance_cents,\n      past_due_balance_cents )\n  FROM\n    jea_restricted.jea_upload_1),\n  second_pass AS (\n  SELECT\n    CONCAT(acct_number_padded, CAST(total_w_balance_cents AS STRING)) AS acct_plus_balance,\n    *\n  FROM\n    first_pass ),\n  dupe_balances AS (\n  SELECT\n    acct_number_padded,\n    COUNT(DISTINCT acct_plus_balance) AS num_rows\n  FROM\n    second_pass\n  GROUP BY\n    1\n  HAVING\n    (num_rows > 1) ),\n  other_dupes AS(\n  SELECT\n    acct_number_padded,\n    COUNT(1) AS num_rows\n  FROM\n    second_pass\n  GROUP BY\n    1\n  HAVING\n    (num_rows > 1) ),\n  base_table AS (\n  SELECT\n    DISTINCT * EXCEPT (acct_plus_balance)\n  FROM\n    second_pass\n  WHERE\n    acct_number_padded NOT IN (\n    SELECT\n      acct_number_padded\n    FROM\n      dupe_balances)\n    AND acct_number_padded NOT IN (\n    SELECT\n      acct_number_padded\n    FROM\n      other_dupes )),\n  query_table AS (\n  SELECT\n    acct_number_padded AS acct_no,\n    IF(total_w_balance_cents IS NULL, 0, total_w_balance_cents) AS total_balance_cents,\n    IF(w_past_due_balance_cents IS NULL, 0, w_past_due_balance_cents) AS past_due_balance_cents,\n    acct_name,\n    acct_name AS contact_name,\n    'R' AS acct_type,\n    svc_address_street,\n    svc_address_zip,\n    mailing_address_street,\n    mailing_address_zip,\n    phone,\n    email,\n    NULL AS lihwap_amount_applied_cents,\n    disconnect_risk,\n    disconnected\n  FROM\n    base_table\n  -- exclude three accounts with invalid mailing zip codes\n  WHERE acct_number_padded NOT IN ('6516978610','9706914200','1319882092'))\nSELECT\n  *\nFROM\n  query_table\nWHERE acct_no IN UNNEST(liheap_accts)\n\nUNION ALL\n\nSELECT\n  *\nFROM\n  query_table\nWHERE acct_no NOT IN UNNEST(liheap_accts)\n\n\n;", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/fl_lihwap/jea_cleaning.sql", "compiled": true, "compiled_code": "/*\nJEA sent us their data in three distinct files, and there were a lot of rows, \nwhich made it challenging to clean in Excel. So we did it here instead.\n\nAlso, we wanted the people they believe to be LIHEAP recipients at the top of the file so they get integrated first\n*/\n\nDECLARE liheap_accts ARRAY<STRING>;\n\nSET liheap_accts = ['0105009213','0133054200','0145597856','0209205725','0255575564','0347785752','0425010731','0427633419','0433430347','0480234200','0493479972','0500018190','0719328227','0769410902','0810198971','0836239033','0897944200','0931514200','1093144200','1106780068','1308310476','1367734200','1404644979','1650354200','1704554148','1719907746','1774244200','1880954200','1946944200','1964654200','2143538129','2300924200','2375724200','2560937061','2564892551','2583680729','2622924200','2787638775','3010751290','3036334200','3055724200','3075754200','3076634200','3101544200','3160514200','3170136532','3251918286','3253545432','3309424200','3440395533','3660803296','3690554200','3797314008','3870534453','3915957321','3939314200','3957621386','3963134200','4153807995','4197778436','4263604671','4263834200','4298622740','4410132196','4581741943','4598067854','4628444200','4707832828','4802144200','4921001519','5003954200','5134144329','5164883326','5234963339','5255977230','5329654200','5434526931','5461486316','5678944200','5862714200','5867256648','5914452202','5938324200','5948661395','6222834200','6483754200','6604144200','6673924200','6714944200','6840854200','7177514200','7239262019','7813539276','8039154200','8295834200','8363275959','8449809021','8709359374','8796542687','8938951556','8949944200','8994829616','9363997214','9555990089','9870831896','9912514200','9989414200','0063703622','0126824200','0144593289','0161944882','0214000224','0226834200','0285314228','0308678656','0317522899','0322134200','0390313227','0422653662','0445875248','0609928966','0671064200','0692247701','0772334200','0789234200','0902755145','0931996793','0958010878','0970244200','1123514200','1150339389','1197514200','1238751827','1275134200','1286880919','1458710381','1460020206','1507195020','1660798375','1663854200','1755024200','1920611689','1969844892','1973082788','2330661293','2380981296','2408478942','2499954200','2604754200','2697434200','2729115850','2790744200','2804880544','3078628941','3086466975','3127824200','3283802256','3309924200','3336344200','3360404858','3360823362','3380634200','3399343808','3405493724','3481405372','3556110543','3723025842','3740921559','3978834200','4051444200','4059734200','4083439092','4195414200','4456155807','4491414200','4556785300','4593564396','4746330672','4854665368','4976018770','5039628664','5100193065','5272414200','5294306497','5709737163','5764440894','5936558735','5942654200','6000061656','6009615457','6230792591','6273944200','6384200007','6399104229','6650924857','6653899959','6731238318','6754154200','6805938292','6932231770','7024444200','7089254200','7259314200','7329499279','7561834200','7864344200','7981573004','8192309752','8205144200','8552154200','8622895100','8970614200','9067514200','9181947019','9238445610','9300754200','9361212532','9411514200','9537117545','9723124200','9734579849','9755634200','9774349094','9785039469','0004233032','0009514200','0022134200','0022452868','0079307000','0124973088','0227824200','0286624200','0330230484','0350619048','0425579667','0440824200','0498334200','0512268909','0568968758','0645555952','0733824200','0798525799','0807414200','0809317091','0858744200','0909042582','1186463140','1198724200','1215564327','1297514200','1369028156','1501330501','1642867914','1659153881','1678661306','1712531723','1807414200','1833634200','1894018612','1914605974','1994607816','2040991501','2083810639','2163047219','2199754200','2285520315','2314434200','2456346962','2750878425','2793460847','2842824200','2869243209','2890414200','2897148100','2919738475','3236318257','3255024200','3259314200','3290454200','3424944953','3438624200','3444408332','3452297748','3486547087','3488893471','3739738836','3939994640','4190614096','4363474124','4416925018','4450738155','4487367333','4611998524','4771371333','4878914020','5020614200','5097724200','5120239571','5135977480','5280615549','5440889085','5447724200','5573444200','5615744200','5647344200','5703071408','5730794411','5837707776','5876514200','5994153343','6001344200','6012354200','6041375246','6169333967','6333017993','6362409580','6583893850','6635429621','6792337478','6870876332','6913290671','7083401085','7423094656','7445496111','7463131848','7555834200','7789557960','7836444200','7860890182','7928821055','7949514200','7969434200','8020254200','8061361086','8087434200','8118973985','8188709250','8219624200','8252734200','8261935147','8400405221','8475634200','8703554200','8798814200','8811093990','8865724200','8892273100','8988995856','9080811162','9336740944','9394834200','9609224200','9614303261','9770331299','9787157418','9800690276','9818224200','9833834200','9859242207','9966261858','0045334200','0124350489','0138994719','0139425757','0162360321','0390844200','0487398794','0538434200','0615179085','0651373885','0687134200','0738514200','0774191179','0859491085','1016564921','1031154200','1201213736','1274321729','1288156692','1329435539','1361428154','1410255168','1470492629','1472054200','1527181269','1889051427','1979052123','2019037220','2057254200','2065250043','2082836734','2150710248','2297738737','2298634200','2333769142','2641293465','2771830220','2895064200','3020134200','3308775701','3320154200','3333452480','3408414200','3418528962','3477254200','3512414200','3670164987','3869857457','4190392719','4261224200','4615154037','4627924200','4681240148','4767659829','4814767613','5178944200','5196064200','5281154200','5346024200','5579607677','5591431399','5615809031','5656219816','5667434200','5798343291','5877724200','5906924200','6337579088','6497154200','6577730544','6596514200','6798805298','6807244200','6877302523','6905624200','6910414200','7137315201','7325134200','7409829057','7413897416','7437724931','7506679716','7517872751','7888634200','7910514200','7939725520','8001946848','8034143459','8112352684','8184273957','8639463346','8696178846','8874458056','9250906968','9324700280','9366494985','9570608582','9656944200','9748439306','9799434948','0101134200','0116331451','0128302871','0206172455','0273514200','0361944200','0464995661','0471344200','0554545278','0684854200','0859447628','0919944200','0945072007','1293634200','1414324200','1431326078','1522924200','1591634200','1689885531','1690544200','1762354200','1910724200','1995254200','2080885742','2166154200','2211258461','2454279419','2593654200','2717890499','2762069645','2922819625','2998060417','3128092331','3299465090','3300318256','3413054200','3629514200','3635106295','3651134200','3657140117','4103754200','4118043995','4236934200','4261354200','4313434200','4321759417','4403147721','4415424200','4680244200','4685400557','4686407616','4902119085','4997434200','5197566897','5241424200','5274139426','5378254200','5437490839','5666717271','5698774110','5718109032','5916875329','5988724200','6043424200','6048396632','6069283645','6225750451','6232686701','6316514200','6369555213','6522260419','6572414200','6668524979','6780645291','6780982646','6969434200','7008150641','7020414200','7030044200','7150087169','7224642080','7488445240','7552093151','7729144200','7757577233','7831713948','7838534200','7864514200','7966340998','8005272198','8162703301','8448644200','8466585263','8487244200','8936598121','9064620721','9140334200','9352896343','9400514200','9470224200','9693582869','9854434200','9902169693','0063724200','0145914200','0189508623','0200654709','0307724200','0356724200','0357694299','0374044200','0439676884','0712134200','0943754200','1055414200','1335708512','1346224874','1365514200','1418282305','1547234200','1613054200','1707554200','1743924200','1780411775','1823692729','1869775259','1994744200','2247634200','2251424200','2252754590','2331209186','2333319519','2364844691','2445358148','2449501539','2568314200','2788034200','2914064200','2931454200','2983754200','2986778386','3205144200','3309534200','3320924200','3344333987','3527154200','3540295331','3611088218','3616470312','3683754200','3697183869','3809934032','3937403829','3990334200','4113414200','4123738486','4185044200','4209934200','4261445066','4345924200','4381450283','4463034200','4585369389','4618315451','4625042707','4667634200','4690544200','4749713787','4970452969','5019834200','5326375603','5326886511','5455223314','5484187044','5558686153','5585934200','5637634200','5683383205','5765813082','5945414200','6133789869','6247469610','6371926957','6445724200','6493037877','6497534200','6524514200','6651396109','6672824200','6788951117','7004144237','7007444200','7021934200','7252610967','7369805283','7388460606','7427103463','7650017335','7793144200','7816824200','7858354200','7923984980','7930897135','8013734200','8036834200','8096914200','8119944231','8127721723','8289558577','8325151877','8434552309','8569683213','8588625355','8738824200','8802924200','8819961933','8972073224','8982858898','9096854200','9136997334','9415934178','9447224200','9635814200','9790414200','9821019103','9877370125','9895336130','0050524183','0086653161','0112433055','0139323200','0144113301','0202938268','0236517313','0377081532','0423044200','0459920332','0484066018','0530919176','0531154200','0610434200','0747537365','1005549229','1261249435','1308047061','1318563390','1407227451','1410509452','1536944200','1592821967','1596181953','1621876612','1655015308','1702603049','1717334200','1879314200','1895134200','1901524200','1906187168','1977734200','1999834200','2020614200','2029861100','2192741710','2291064200','2299112328','2300354200','2387724200','2534121251','2587736600','2719075930','2767092128','2974930025','2988436382','3107164534','3151697506','3265944200','3295893433','3377907974','3405144200','3515424200','3589432613','3655101860','3812428763','3926740651','4001024200','4046144200','4113734200','4282701115','4494135028','4583439214','4594064200','4655212794','4720925599','4964954200','5072324200','5136442259','5173434200','5348527661','5385044200','5428634200','5431044200','5559908148','5577744200','5680614200','5796830124','5868314200','5985452726','6012534200','6076423783','6120503388','6141944200','6142154200','6201092403','6207424200','6267433388','6343358723','6360134689','6382572072','6421834200','6424622154','6463527980','6543634200','6563234200','6730532208','6903244562','6912414200','7059688485','7307254200','7448127917','7547034200','7572388708','7585144186','7857567423','7859829450','7929718685','7936020972','7981144200','8265734200','8315118722','8368314200','8380131768','8440244200','8485479106','8620726273','8634781348','8702724200','8862854200','8864934200','9077169158','9101003078','9160454200','9196799453','9241658139','9630244200','9920944007','0020602509','0140744200','0158514200','0212434200','0239579523','0290344200','0291915261','0303941113','0391242543','0452344200','0461534200','0473249865','0481624200','0492414200','0496648401','0498154200','0531170855','0591880887','0805710501','0865074557','0926725945','1045934200','1145414200','1218581367','1218856680','1369149180','1746784589','1787514200','1793144200','1956834200','1989814200','2012947768','2199734200','2211134200','2321834200','2433493431','2488514200','2572201465','2760221526','2927034200','2982762047','3058234200','3090026831','3106514200','3260064200','3286533845','3364754252','3473839174','3615030660','3655834200','3663581294','3666504078','3863060554','3870244200','3913943995','3961955241','3982414200','4180234200','4212634200','4246144200','4288414200','4289003272','4342834200','4403382552','4530044200','4737824200','4770224200','4934944200','4943634200','4962665981','5090176554','5131321430','5267211480','5307234200','5347154200','5367444200','5400514200','5528854200','5572235785','5703894634','5834975797','5875724200','5888414200','6040934200','6113648281','6125987570','6185814649','6317987362','6322002173','6384615810','6456895272','6493514200','6529225921','6543524200','6552734200','6644698816','6648434200','6790830025','7022372927','7297154200','7362411424','7502912520','7783447903','7787454200','8095114002','8236238004','8256342507','8394634200','8397219775','8478454200','8481367747','8526344200','8534623233','8609534200','8659814200','8688775088','8852734200','8916940368','8940079722','9091317432','9236123765','9258554200','9344707198','9399914943','9510044200','9527279189','9560334200','9727276532','9792185086','9887119985'];\n\n\nWITH\n  first_pass AS (\n  SELECT\n    DISTINCT LPAD(acct_no, 10, '0') AS acct_number_padded,\n    CAST(CAST(total_w_balance_cents AS NUMERIC)*100 AS INT64) AS total_w_balance_cents,\n    CAST(CAST(w_past_due_balance_cents AS NUMERIC)*100 AS INT64) AS w_past_due_balance_cents,\n    * EXCEPT ( sp_type,\n      total_w_balance_cents,\n      w_past_due_balance_cents,\n      total_balance_cents,\n      past_due_balance_cents )\n  FROM\n    jea_restricted.jea_upload_1),\n  second_pass AS (\n  SELECT\n    CONCAT(acct_number_padded, CAST(total_w_balance_cents AS STRING)) AS acct_plus_balance,\n    *\n  FROM\n    first_pass ),\n  dupe_balances AS (\n  SELECT\n    acct_number_padded,\n    COUNT(DISTINCT acct_plus_balance) AS num_rows\n  FROM\n    second_pass\n  GROUP BY\n    1\n  HAVING\n    (num_rows > 1) ),\n  other_dupes AS(\n  SELECT\n    acct_number_padded,\n    COUNT(1) AS num_rows\n  FROM\n    second_pass\n  GROUP BY\n    1\n  HAVING\n    (num_rows > 1) ),\n  base_table AS (\n  SELECT\n    DISTINCT * EXCEPT (acct_plus_balance)\n  FROM\n    second_pass\n  WHERE\n    acct_number_padded NOT IN (\n    SELECT\n      acct_number_padded\n    FROM\n      dupe_balances)\n    AND acct_number_padded NOT IN (\n    SELECT\n      acct_number_padded\n    FROM\n      other_dupes )),\n  query_table AS (\n  SELECT\n    acct_number_padded AS acct_no,\n    IF(total_w_balance_cents IS NULL, 0, total_w_balance_cents) AS total_balance_cents,\n    IF(w_past_due_balance_cents IS NULL, 0, w_past_due_balance_cents) AS past_due_balance_cents,\n    acct_name,\n    acct_name AS contact_name,\n    'R' AS acct_type,\n    svc_address_street,\n    svc_address_zip,\n    mailing_address_street,\n    mailing_address_zip,\n    phone,\n    email,\n    NULL AS lihwap_amount_applied_cents,\n    disconnect_risk,\n    disconnected\n  FROM\n    base_table\n  -- exclude three accounts with invalid mailing zip codes\n  WHERE acct_number_padded NOT IN ('6516978610','9706914200','1319882092'))\nSELECT\n  *\nFROM\n  query_table\nWHERE acct_no IN UNNEST(liheap_accts)\n\nUNION ALL\n\nSELECT\n  *\nFROM\n  query_table\nWHERE acct_no NOT IN UNNEST(liheap_accts)\n\n\n;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.load_full_eheap": {"database": "analytics-prod-328313", "schema": "prod", "name": "load_full_eheap", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/fl_lihwap/load_full_eheap.sql", "original_file_path": "analysis/fl_lihwap/load_full_eheap.sql", "unique_id": "analysis.promise_dwh.load_full_eheap", "fqn": ["promise_dwh", "analysis", "fl_lihwap", "load_full_eheap"], "alias": "load_full_eheap", "checksum": {"name": "sha256", "checksum": "f639a174f157da94822bbe7f0263f0cda64d3e8defdde35e2b497db06c3145a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.633995, "relation_name": null, "raw_code": "LOAD DATA OVERWRITE florida-lihwap-pay.catel_source_restricted.test_2_eheap_2022_data (\n\n  Unique_Identifier_for_HH\tINT64, \n  HH_First_Name\tSTRING\t, \n  HH_Last_Name\tSTRING\t, \n  Street_Address_1\tSTRING, \t\n  Street_Address_2\tSTRING\t, \n  City\tSTRING\t, \n  ZIP\tINT64\t, \n  Num_in_HH\tINT64, \t\n  Annual_Income\tSTRING\t, \n  Elderly__60\tBOOLEAN\t, \n  Disabled\tBOOLEAN\t, \n  Child___6\tBOOLEAN\t, \n  Payment_Date\tSTRING\t, \n  Benefit_Type__Crisis_or_Home_Energy\tSTRING\t, \n  Funding_Source_utilized_for_benefit\tSTRING\t, \n  Benefit_Amount\tSTRING\t, \n  Fuel_type__where_benefit_was_applied\tSTRING\t, \n  Main_Heating_Fuel_Type\tSTRING\t, \n  Account_Holder_Name\tSTRING\t, \n  Vendor\tSTRING\t, \n  Acct_Number\tSTRING\t, \n  Electric_Account_Holder_Name__if_diff__from_main_heating_fuel\tSTRING\t, \n  Electric_Vendor\tSTRING\t, \n  Electric_Acct_Number\tSTRING\t, \n  Disconnected_or_Out_of_Fuel___Y_N_\tBOOLEAN\t, \n  Past_Due__Shut_off_Notice__Nearly_Out_of_Fuel___Y_N_\tBOOLEAN\t, \n  Restored_Home_Energy___Y_N_\tBOOLEAN\t, \n  Necessary_to_prevent_home_energy_loss___Y_N_\tBOOLEAN\t\n\n)\n  FROM FILES(\n    skip_leading_rows=1,\n    allow_quoted_newlines=true,\n    format='CSV',\n    uris = ['gs://liheap_data/Elder Affairs LIHEAP Client Listing (Annual Performance Data 2022) (1).csv']\n  )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/fl_lihwap/load_full_eheap.sql", "compiled": true, "compiled_code": "LOAD DATA OVERWRITE florida-lihwap-pay.catel_source_restricted.test_2_eheap_2022_data (\n\n  Unique_Identifier_for_HH\tINT64, \n  HH_First_Name\tSTRING\t, \n  HH_Last_Name\tSTRING\t, \n  Street_Address_1\tSTRING, \t\n  Street_Address_2\tSTRING\t, \n  City\tSTRING\t, \n  ZIP\tINT64\t, \n  Num_in_HH\tINT64, \t\n  Annual_Income\tSTRING\t, \n  Elderly__60\tBOOLEAN\t, \n  Disabled\tBOOLEAN\t, \n  Child___6\tBOOLEAN\t, \n  Payment_Date\tSTRING\t, \n  Benefit_Type__Crisis_or_Home_Energy\tSTRING\t, \n  Funding_Source_utilized_for_benefit\tSTRING\t, \n  Benefit_Amount\tSTRING\t, \n  Fuel_type__where_benefit_was_applied\tSTRING\t, \n  Main_Heating_Fuel_Type\tSTRING\t, \n  Account_Holder_Name\tSTRING\t, \n  Vendor\tSTRING\t, \n  Acct_Number\tSTRING\t, \n  Electric_Account_Holder_Name__if_diff__from_main_heating_fuel\tSTRING\t, \n  Electric_Vendor\tSTRING\t, \n  Electric_Acct_Number\tSTRING\t, \n  Disconnected_or_Out_of_Fuel___Y_N_\tBOOLEAN\t, \n  Past_Due__Shut_off_Notice__Nearly_Out_of_Fuel___Y_N_\tBOOLEAN\t, \n  Restored_Home_Energy___Y_N_\tBOOLEAN\t, \n  Necessary_to_prevent_home_energy_loss___Y_N_\tBOOLEAN\t\n\n)\n  FROM FILES(\n    skip_leading_rows=1,\n    allow_quoted_newlines=true,\n    format='CSV',\n    uris = ['gs://liheap_data/Elder Affairs LIHEAP Client Listing (Annual Performance Data 2022) (1).csv']\n  )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.stripe_transaction_fee_details_insert": {"database": "analytics-prod-328313", "schema": "prod", "name": "stripe_transaction_fee_details_insert", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/stripe/stripe_transaction_fee_details_insert.sql", "original_file_path": "analysis/stripe/stripe_transaction_fee_details_insert.sql", "unique_id": "analysis.promise_dwh.stripe_transaction_fee_details_insert", "fqn": ["promise_dwh", "analysis", "stripe", "stripe_transaction_fee_details_insert"], "alias": "stripe_transaction_fee_details_insert", "checksum": {"name": "sha256", "checksum": "098aff0ab3324c6d3829b49a65372901c23cf428f550448a7bc9295321c3ef07"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.635757, "relation_name": null, "raw_code": "-- This is for loading in the new transaction-level fee report each month that gets downloaded\n--from Stripe and then uploaded to GCS. You need to update the table name and GS link each time\n\nLOAD DATA into `analytics-dev-328216.stripe_private_utilities.transaction_fee_details_202302`\nFROM FILES(\n    format='CSV',\n    uris = ['gs://promise-stripe-reports/stripe_private_utilities/Transaction-level_report_of_payments_fees_2023-02-01_to_2023-02-28.csv'],\n    skip_leading_rows=1\n  )\n\n-- DELETE FROM stripe.transaction_fee_detail t\n-- WHERE t.fee_id IN (SELECT fee_id FROM `analytics-dev-328216.stripe.transaction_fee_details_dec` );\n\nINSERT INTO `analytics-dev-328216.stripe.transaction_fee_detail` \nSELECT \n    incurred_at\n    , event_type\n    , charge_id\n    , refund_id\n    , dispute_id\n    , request_id\n    , customer_id\n    , card_brand\n    , card_funding\n    , card_country\n    , card_present\n    , fee_category\n    , fee_name\n    , fee_currency\n    , plan_name\n    , additional_explanation\n    , variable_rate\n    , fixed_per_item_amount\n    , variable_volume_amount\n    , fixed_per_item_count\n    , CAST(min_amount as STRING) AS min_amount\n    , CAST(max_amount as STRING) AS max_amount\n    , subtotal_amount\n    , tax_rate\n    , tax_amount\n    , total_amount\n    , fx_rate\n    , billing_currency\n    , billing_amount\n    , balance_transaction_id\n    , balance_debited_at\n    , attribution_start_date\n    , attribution_end_date\n    , fee_id\n    , network\n    , bin\n    , issuing_bank\n FROM `analytics-dev-328216.stripe.transaction_fee_details_2022*`;", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/stripe/stripe_transaction_fee_details_insert.sql", "compiled": true, "compiled_code": "-- This is for loading in the new transaction-level fee report each month that gets downloaded\n--from Stripe and then uploaded to GCS. You need to update the table name and GS link each time\n\nLOAD DATA into `analytics-dev-328216.stripe_private_utilities.transaction_fee_details_202302`\nFROM FILES(\n    format='CSV',\n    uris = ['gs://promise-stripe-reports/stripe_private_utilities/Transaction-level_report_of_payments_fees_2023-02-01_to_2023-02-28.csv'],\n    skip_leading_rows=1\n  )\n\n-- DELETE FROM stripe.transaction_fee_detail t\n-- WHERE t.fee_id IN (SELECT fee_id FROM `analytics-dev-328216.stripe.transaction_fee_details_dec` );\n\nINSERT INTO `analytics-dev-328216.stripe.transaction_fee_detail` \nSELECT \n    incurred_at\n    , event_type\n    , charge_id\n    , refund_id\n    , dispute_id\n    , request_id\n    , customer_id\n    , card_brand\n    , card_funding\n    , card_country\n    , card_present\n    , fee_category\n    , fee_name\n    , fee_currency\n    , plan_name\n    , additional_explanation\n    , variable_rate\n    , fixed_per_item_amount\n    , variable_volume_amount\n    , fixed_per_item_count\n    , CAST(min_amount as STRING) AS min_amount\n    , CAST(max_amount as STRING) AS max_amount\n    , subtotal_amount\n    , tax_rate\n    , tax_amount\n    , total_amount\n    , fx_rate\n    , billing_currency\n    , billing_amount\n    , balance_transaction_id\n    , balance_debited_at\n    , attribution_start_date\n    , attribution_end_date\n    , fee_id\n    , network\n    , bin\n    , issuing_bank\n FROM `analytics-dev-328216.stripe.transaction_fee_details_2022*`;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.promise_dwh.stripe_transaction_insert": {"database": "analytics-prod-328313", "schema": "prod", "name": "stripe_transaction_insert", "resource_type": "analysis", "package_name": "promise_dwh", "path": "analysis/stripe/stripe_transaction_insert.sql", "original_file_path": "analysis/stripe/stripe_transaction_insert.sql", "unique_id": "analysis.promise_dwh.stripe_transaction_insert", "fqn": ["promise_dwh", "analysis", "stripe", "stripe_transaction_insert"], "alias": "stripe_transaction_insert", "checksum": {"name": "sha256", "checksum": "187fb3a1b4ef30ff6033f654cfe0432b20fd01ead1df75812baf1e8866d56479"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1715379616.637544, "relation_name": null, "raw_code": "DELETE FROM `analytics-dev-328216`.stripe.transaction_details T\nWHERE T.id IN (SELECT fee_id FROM `analytics-dev-328216`.stripe.transaction_details_new);\nINSERT INTO `analytics-dev-328216`.stripe.transaction_details\nSELECT incurred_at, event_type, charge_id, refund_id, dispute_id, request_id, destination_id, customer_id, card_brand, card_funding, card_country, card_present, fee_category, fee_name, fee_currency, plan_name, additional_explanation, variable_rate, fixed_per_item_amount, variable_volume_amount, fixed_per_item_count, min_amount, max_amount, subtotal_amount, tax_rate, tax_amount, total_amount, fx_rate, billing_currency, billing_amount, balance_transaction_id, balance_transaction_created_at, attribution_start_time, attribution_end_time, id, network, bin, issuing_bank, connected_account_id, connected_account_name, connected_account_country\nFROM\n(SELECT new_td.*, FORMAT_DATETIME('%F %T', attribution_start_date) as attribution_start_time, FORMAT_DATETIME('%F %T', attribution_end_date) as attribution_end_time, new_td.fee_id as id, bt.created as balance_transaction_created_at FROM `analytics-dev-328216`.stripe.transaction_details_new new_td LEFT JOIN `analytics-dev-328216`.stripe.balance_transaction bt ON new_td.balance_transaction_id = bt.id) as S;", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/analysis/stripe/stripe_transaction_insert.sql", "compiled": true, "compiled_code": "DELETE FROM `analytics-dev-328216`.stripe.transaction_details T\nWHERE T.id IN (SELECT fee_id FROM `analytics-dev-328216`.stripe.transaction_details_new);\nINSERT INTO `analytics-dev-328216`.stripe.transaction_details\nSELECT incurred_at, event_type, charge_id, refund_id, dispute_id, request_id, destination_id, customer_id, card_brand, card_funding, card_country, card_present, fee_category, fee_name, fee_currency, plan_name, additional_explanation, variable_rate, fixed_per_item_amount, variable_volume_amount, fixed_per_item_count, min_amount, max_amount, subtotal_amount, tax_rate, tax_amount, total_amount, fx_rate, billing_currency, billing_amount, balance_transaction_id, balance_transaction_created_at, attribution_start_time, attribution_end_time, id, network, bin, issuing_bank, connected_account_id, connected_account_name, connected_account_country\nFROM\n(SELECT new_td.*, FORMAT_DATETIME('%F %T', attribution_start_date) as attribution_start_time, FORMAT_DATETIME('%F %T', attribution_end_date) as attribution_end_time, new_td.fee_id as id, bt.created as balance_transaction_created_at FROM `analytics-dev-328216`.stripe.transaction_details_new new_td LEFT JOIN `analytics-dev-328216`.stripe.balance_transaction bt ON new_td.balance_transaction_id = bt.id) as S;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.promise_dwh.utility_deltas_one_current_at_a_time": {"database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "utility_deltas_one_current_at_a_time", "resource_type": "test", "package_name": "promise_dwh", "path": "utility_deltas_one_current_at_a_time.sql", "original_file_path": "tests/utility_deltas_one_current_at_a_time.sql", "unique_id": "test.promise_dwh.utility_deltas_one_current_at_a_time", "fqn": ["promise_dwh", "utility_deltas_one_current_at_a_time"], "alias": "utility_deltas_one_current_at_a_time", "checksum": {"name": "sha256", "checksum": "f680882f47111c9e8228f10ecf7a10247d5f898ae44394e839889c8e3bb42511"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1715379616.679934, "relation_name": null, "raw_code": "-- Utility deltas are supposed to track changes.\n-- There should never be more than one \"current\" row per account number (in a jurisdiction).\n\nSELECT\n    account_history.account_number_hashed  AS account_history_account_number_hashed,\n    account_history.jurisdiction  AS account_history_jurisdiction,\n    COUNT(*) AS count_of_account_number_hashed\nFROM `{{ target.project }}.utility_data.account_history`\n     AS account_history\nWHERE (account_history.is_current ) \nGROUP BY\n    1,\n    2\nHAVING COUNT(*) > 1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/promise_dwh/tests/utility_deltas_one_current_at_a_time.sql", "compiled": true, "compiled_code": "-- Utility deltas are supposed to track changes.\n-- There should never be more than one \"current\" row per account number (in a jurisdiction).\n\nSELECT\n    account_history.account_number_hashed  AS account_history_account_number_hashed,\n    account_history.jurisdiction  AS account_history_jurisdiction,\n    COUNT(*) AS count_of_account_number_hashed\nFROM `analytics-prod-328313.utility_data.account_history`\n     AS account_history\nWHERE (account_history.is_current ) \nGROUP BY\n    1,\n    2\nHAVING COUNT(*) > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.promise_dwh.jurisdiction_metadata": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "jurisdiction_metadata", "resource_type": "seed", "package_name": "promise_dwh", "path": "promisepay/jurisdiction_metadata.csv", "original_file_path": "data/promisepay/jurisdiction_metadata.csv", "unique_id": "seed.promise_dwh.jurisdiction_metadata", "fqn": ["promise_dwh", "promisepay", "jurisdiction_metadata"], "alias": "jurisdiction_metadata", "checksum": {"name": "sha256", "checksum": "249365e6158e94d1dcec65d70027a17aff3c3bc2f4d12e6a96a63a222b936403"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {"jurisdiction": {"name": "jurisdiction", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "promise_dwh://data/promisepay/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "promisepay"}, "created_at": 1715379617.018403, "relation_name": "`analytics-prod-328313`.`promisepay`.`jurisdiction_metadata`", "raw_code": "", "root_path": "/Users/maxf/projects/dbtPromise", "depends_on": {"macros": []}}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_event_attributes_attributes.21b06fb34c": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["attributes"], "model": "{{ get_where_subquery(ref('event_attributes')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_event_attributes_attributes", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_85cf66e8aab99a46da00f49e0b2876bc.sql", "original_file_path": "models/amplitude/amplitude.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_event_attributes_attributes.21b06fb34c", "fqn": ["promise_dwh", "amplitude", "dbt_utils_unique_combination_of_columns_event_attributes_attributes"], "alias": "dbt_utils_unique_combination_o_85cf66e8aab99a46da00f49e0b2876bc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_85cf66e8aab99a46da00f49e0b2876bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_85cf66e8aab99a46da00f49e0b2876bc"}, "created_at": 1715379616.890193, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_85cf66e8aab99a46da00f49e0b2876bc\") }}", "language": "sql", "refs": [{"name": "event_attributes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.event_attributes"]}, "compiled_path": "target/compiled/promise_dwh/models/amplitude/amplitude.yml/dbt_utils_unique_combination_o_85cf66e8aab99a46da00f49e0b2876bc.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        attributes\n    from `analytics-prod-328313`.`amplitude`.`event_attributes`\n    group by attributes\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.event_attributes", "attached_node": "model.promise_dwh.event_attributes"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_user_attributes_attributes.079d587c1d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["attributes"], "model": "{{ get_where_subquery(ref('user_attributes')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_user_attributes_attributes", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_d63523f1c8382f4a04965503e97ae816.sql", "original_file_path": "models/amplitude/amplitude.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_user_attributes_attributes.079d587c1d", "fqn": ["promise_dwh", "amplitude", "dbt_utils_unique_combination_of_columns_user_attributes_attributes"], "alias": "dbt_utils_unique_combination_o_d63523f1c8382f4a04965503e97ae816", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d63523f1c8382f4a04965503e97ae816", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d63523f1c8382f4a04965503e97ae816"}, "created_at": 1715379616.8973062, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d63523f1c8382f4a04965503e97ae816\") }}", "language": "sql", "refs": [{"name": "user_attributes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.user_attributes"]}, "compiled_path": "target/compiled/promise_dwh/models/amplitude/amplitude.yml/dbt_utils_unique_combination_o_d63523f1c8382f4a04965503e97ae816.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        attributes\n    from `analytics-prod-328313`.`amplitude`.`user_attributes`\n    group by attributes\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.user_attributes", "attached_node": "model.promise_dwh.user_attributes"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_other_attributes_attributes.1a01332839": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["attributes"], "model": "{{ get_where_subquery(ref('other_attributes')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_other_attributes_attributes", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_271c4c317eee44b8804958c03525faab.sql", "original_file_path": "models/amplitude/amplitude.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_other_attributes_attributes.1a01332839", "fqn": ["promise_dwh", "amplitude", "dbt_utils_unique_combination_of_columns_other_attributes_attributes"], "alias": "dbt_utils_unique_combination_o_271c4c317eee44b8804958c03525faab", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_271c4c317eee44b8804958c03525faab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_271c4c317eee44b8804958c03525faab"}, "created_at": 1715379616.89946, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_271c4c317eee44b8804958c03525faab\") }}", "language": "sql", "refs": [{"name": "other_attributes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.other_attributes"]}, "compiled_path": "target/compiled/promise_dwh/models/amplitude/amplitude.yml/dbt_utils_unique_combination_o_271c4c317eee44b8804958c03525faab.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        attributes\n    from `analytics-prod-328313`.`amplitude`.`other_attributes`\n    group by attributes\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.other_attributes", "attached_node": "model.promise_dwh.other_attributes"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_device_user_map_device_id__last_user_id.5e3156e4f6": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["device_id", "last_user_id"], "model": "{{ get_where_subquery(ref('device_user_map')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_device_user_map_device_id__last_user_id", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_5acb44dc10be7109b5fc66207eebb3b0.sql", "original_file_path": "models/amplitude/amplitude.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_device_user_map_device_id__last_user_id.5e3156e4f6", "fqn": ["promise_dwh", "amplitude", "dbt_utils_unique_combination_of_columns_device_user_map_device_id__last_user_id"], "alias": "dbt_utils_unique_combination_o_5acb44dc10be7109b5fc66207eebb3b0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5acb44dc10be7109b5fc66207eebb3b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5acb44dc10be7109b5fc66207eebb3b0"}, "created_at": 1715379616.901707, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5acb44dc10be7109b5fc66207eebb3b0\") }}", "language": "sql", "refs": [{"name": "device_user_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.device_user_map"]}, "compiled_path": "target/compiled/promise_dwh/models/amplitude/amplitude.yml/dbt_utils_unique_combination_o_5acb44dc10be7109b5fc66207eebb3b0.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        device_id, last_user_id\n    from `analytics-prod-328313`.`amplitude`.`device_user_map`\n    group by device_id, last_user_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.device_user_map", "attached_node": "model.promise_dwh.device_user_map"}, "test.promise_dwh.accepted_values_account_history_combined_account_type__R__I__C__M.2ffae00bec": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["R", "I", "C", "M"], "column_name": "account_type", "model": "{{ get_where_subquery(ref('account_history_combined')) }}"}, "namespace": null}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "accepted_values_account_history_combined_account_type__R__I__C__M", "resource_type": "test", "package_name": "promise_dwh", "path": "accepted_values_account_histor_ce67731a2aabb55fdd8a360b1ec50523.sql", "original_file_path": "models/utilities/schema.yml", "unique_id": "test.promise_dwh.accepted_values_account_history_combined_account_type__R__I__C__M.2ffae00bec", "fqn": ["promise_dwh", "utilities", "accepted_values_account_history_combined_account_type__R__I__C__M"], "alias": "accepted_values_account_histor_ce67731a2aabb55fdd8a360b1ec50523", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_account_histor_ce67731a2aabb55fdd8a360b1ec50523", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_account_histor_ce67731a2aabb55fdd8a360b1ec50523"}, "created_at": 1715379616.904896, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_account_histor_ce67731a2aabb55fdd8a360b1ec50523\") }}", "language": "sql", "refs": [{"name": "account_history_combined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.account_history_combined"]}, "compiled_path": "target/compiled/promise_dwh/models/utilities/schema.yml/accepted_values_account_histor_ce67731a2aabb55fdd8a360b1ec50523.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        account_type as value_field,\n        count(*) as n_records\n\n    from `analytics-prod-328313`.`utilities`.`account_history_combined`\n    group by account_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'R','I','C','M'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_type", "file_key_name": "models.account_history_combined", "attached_node": "model.promise_dwh.account_history_combined"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_gcww_delta_rows_account_number_hashed__UPLOAD_DATE.dede6fe02b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "UPLOAD_DATE"], "model": "{{ get_where_subquery(ref('gcww_delta_rows')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_gcww_delta_rows_account_number_hashed__UPLOAD_DATE", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_ace26a8413faac749b05a3c704314646.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_gcww_delta_rows_account_number_hashed__UPLOAD_DATE.dede6fe02b", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_gcww_delta_rows_account_number_hashed__UPLOAD_DATE"], "alias": "dbt_utils_unique_combination_o_ace26a8413faac749b05a3c704314646", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ace26a8413faac749b05a3c704314646", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ace26a8413faac749b05a3c704314646"}, "created_at": 1715379616.914285, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ace26a8413faac749b05a3c704314646\") }}", "language": "sql", "refs": [{"name": "gcww_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.gcww_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_ace26a8413faac749b05a3c704314646.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`gcww_delta_rows`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gcww_delta_rows", "attached_node": "model.promise_dwh.gcww_delta_rows"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_alexrenew_water_delta_rows_account_number_hashed__UPLOAD_DATE.c4e89b4db7": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "UPLOAD_DATE"], "model": "{{ get_where_subquery(ref('alexrenew_water_delta_rows')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_alexrenew_water_delta_rows_account_number_hashed__UPLOAD_DATE", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_b71cc5cf32e868d7ae0adc93c506466b.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_alexrenew_water_delta_rows_account_number_hashed__UPLOAD_DATE.c4e89b4db7", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_alexrenew_water_delta_rows_account_number_hashed__UPLOAD_DATE"], "alias": "dbt_utils_unique_combination_o_b71cc5cf32e868d7ae0adc93c506466b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b71cc5cf32e868d7ae0adc93c506466b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b71cc5cf32e868d7ae0adc93c506466b"}, "created_at": 1715379616.91681, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b71cc5cf32e868d7ae0adc93c506466b\") }}", "language": "sql", "refs": [{"name": "alexrenew_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.alexrenew_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_b71cc5cf32e868d7ae0adc93c506466b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`alexrenew_water_delta_rows`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.alexrenew_water_delta_rows", "attached_node": "model.promise_dwh.alexrenew_water_delta_rows"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.2a17cb52b3": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "UPLOAD_DATE"], "model": "{{ get_where_subquery(ref('toledo_complete_with_eligibility')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_toledo_complete_with_eligibility_account_number_hashed__UPLOAD_DATE", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_9008d9168f2babbbd2a36078d9ce7d46.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.2a17cb52b3", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_toledo_complete_with_eligibility_account_number_hashed__UPLOAD_DATE"], "alias": "dbt_utils_unique_combination_o_9008d9168f2babbbd2a36078d9ce7d46", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9008d9168f2babbbd2a36078d9ce7d46", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9008d9168f2babbbd2a36078d9ce7d46"}, "created_at": 1715379616.9188669, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9008d9168f2babbbd2a36078d9ce7d46\") }}", "language": "sql", "refs": [{"name": "toledo_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.toledo_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_9008d9168f2babbbd2a36078d9ce7d46.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`toledo_complete_with_eligibility`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.toledo_complete_with_eligibility", "attached_node": "model.promise_dwh.toledo_complete_with_eligibility"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_delta_rows_account_number_hashed__UPLOAD_DATE.b4d51c14ef": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "UPLOAD_DATE"], "model": "{{ get_where_subquery(ref('toledo_delta_rows')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_toledo_delta_rows_account_number_hashed__UPLOAD_DATE", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_cb1a71eab6e02400c88d7dbbc2acdb39.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_delta_rows_account_number_hashed__UPLOAD_DATE.b4d51c14ef", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_toledo_delta_rows_account_number_hashed__UPLOAD_DATE"], "alias": "dbt_utils_unique_combination_o_cb1a71eab6e02400c88d7dbbc2acdb39", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cb1a71eab6e02400c88d7dbbc2acdb39", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cb1a71eab6e02400c88d7dbbc2acdb39"}, "created_at": 1715379616.921056, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cb1a71eab6e02400c88d7dbbc2acdb39\") }}", "language": "sql", "refs": [{"name": "toledo_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.toledo_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_cb1a71eab6e02400c88d7dbbc2acdb39.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`toledo_delta_rows`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.toledo_delta_rows", "attached_node": "model.promise_dwh.toledo_delta_rows"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.37162f93b7": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "UPLOAD_DATE"], "model": "{{ get_where_subquery(ref('hrsd_complete_with_eligibility')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_hrsd_complete_with_eligibility_account_number_hashed__UPLOAD_DATE", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_cc67f531cd6d985de42f6157d0b27aa0.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.37162f93b7", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_hrsd_complete_with_eligibility_account_number_hashed__UPLOAD_DATE"], "alias": "dbt_utils_unique_combination_o_cc67f531cd6d985de42f6157d0b27aa0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cc67f531cd6d985de42f6157d0b27aa0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cc67f531cd6d985de42f6157d0b27aa0"}, "created_at": 1715379616.9231, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cc67f531cd6d985de42f6157d0b27aa0\") }}", "language": "sql", "refs": [{"name": "hrsd_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.hrsd_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_cc67f531cd6d985de42f6157d0b27aa0.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`hrsd_complete_with_eligibility`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.hrsd_complete_with_eligibility", "attached_node": "model.promise_dwh.hrsd_complete_with_eligibility"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_complete_with_eligibility_account_number_hashed__account_status__UPLOAD_DATE.e81242254a": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "account_status", "UPLOAD_DATE"], "model": "{{ get_where_subquery(ref('corona_complete_with_eligibility')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_corona_complete_with_eligibility_account_number_hashed__account_status__UPLOAD_DATE", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_b1e06cc304dbbca6445a14b5d3bffb61.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_complete_with_eligibility_account_number_hashed__account_status__UPLOAD_DATE.e81242254a", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_corona_complete_with_eligibility_account_number_hashed__account_status__UPLOAD_DATE"], "alias": "dbt_utils_unique_combination_o_b1e06cc304dbbca6445a14b5d3bffb61", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b1e06cc304dbbca6445a14b5d3bffb61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b1e06cc304dbbca6445a14b5d3bffb61"}, "created_at": 1715379616.925291, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b1e06cc304dbbca6445a14b5d3bffb61\") }}", "language": "sql", "refs": [{"name": "corona_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.corona_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_b1e06cc304dbbca6445a14b5d3bffb61.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, account_status, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`corona_complete_with_eligibility`\n    group by account_number_hashed, account_status, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.corona_complete_with_eligibility", "attached_node": "model.promise_dwh.corona_complete_with_eligibility"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_buffalo_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.9113f63092": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "UPLOAD_DATE"], "model": "{{ get_where_subquery(ref('buffalo_water_complete_with_eligibility')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_buffalo_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_16dda3613be0cef7f5bd79848e164883.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_buffalo_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.9113f63092", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_buffalo_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE"], "alias": "dbt_utils_unique_combination_o_16dda3613be0cef7f5bd79848e164883", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_16dda3613be0cef7f5bd79848e164883", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_16dda3613be0cef7f5bd79848e164883"}, "created_at": 1715379616.9276412, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_16dda3613be0cef7f5bd79848e164883\") }}", "language": "sql", "refs": [{"name": "buffalo_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.buffalo_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_16dda3613be0cef7f5bd79848e164883.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`buffalo_water_complete_with_eligibility`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.buffalo_water_complete_with_eligibility", "attached_node": "model.promise_dwh.buffalo_water_complete_with_eligibility"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_newark_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.bacd5a53ba": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "UPLOAD_DATE"], "model": "{{ get_where_subquery(ref('newark_water_complete_with_eligibility')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_newark_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_2c575c1f4d580a37db34e0419551b6ea.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_newark_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.bacd5a53ba", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_newark_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE"], "alias": "dbt_utils_unique_combination_o_2c575c1f4d580a37db34e0419551b6ea", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2c575c1f4d580a37db34e0419551b6ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2c575c1f4d580a37db34e0419551b6ea"}, "created_at": 1715379616.9296908, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2c575c1f4d580a37db34e0419551b6ea\") }}", "language": "sql", "refs": [{"name": "newark_water_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.newark_water_complete_with_eligibility"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_2c575c1f4d580a37db34e0419551b6ea.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`newark_water_complete_with_eligibility`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.newark_water_complete_with_eligibility", "attached_node": "model.promise_dwh.newark_water_complete_with_eligibility"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_delta_rows_account_number_hashed__UPLOAD_DATE.26dfdfd4fb": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "UPLOAD_DATE"], "model": "{{ get_where_subquery(ref('hrsd_delta_rows')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_hrsd_delta_rows_account_number_hashed__UPLOAD_DATE", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_376ebc5ead3a18200bf16bbdfa85f26e.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_delta_rows_account_number_hashed__UPLOAD_DATE.26dfdfd4fb", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_hrsd_delta_rows_account_number_hashed__UPLOAD_DATE"], "alias": "dbt_utils_unique_combination_o_376ebc5ead3a18200bf16bbdfa85f26e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_376ebc5ead3a18200bf16bbdfa85f26e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_376ebc5ead3a18200bf16bbdfa85f26e"}, "created_at": 1715379616.93188, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_376ebc5ead3a18200bf16bbdfa85f26e\") }}", "language": "sql", "refs": [{"name": "hrsd_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.hrsd_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_376ebc5ead3a18200bf16bbdfa85f26e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`hrsd_delta_rows`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.hrsd_delta_rows", "attached_node": "model.promise_dwh.hrsd_delta_rows"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_louisville_water_delta_rows_account_number_hashed__UPLOAD_DATE.24631b77ff": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "UPLOAD_DATE"], "model": "{{ get_where_subquery(ref('louisville_water_delta_rows')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_louisville_water_delta_rows_account_number_hashed__UPLOAD_DATE", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_98e1db77f7d63d54642e6f705d663129.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_louisville_water_delta_rows_account_number_hashed__UPLOAD_DATE.24631b77ff", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_louisville_water_delta_rows_account_number_hashed__UPLOAD_DATE"], "alias": "dbt_utils_unique_combination_o_98e1db77f7d63d54642e6f705d663129", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_98e1db77f7d63d54642e6f705d663129", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_98e1db77f7d63d54642e6f705d663129"}, "created_at": 1715379616.933892, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_98e1db77f7d63d54642e6f705d663129\") }}", "language": "sql", "refs": [{"name": "louisville_water_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.louisville_water_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_98e1db77f7d63d54642e6f705d663129.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`louisville_water_delta_rows`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.louisville_water_delta_rows", "attached_node": "model.promise_dwh.louisville_water_delta_rows"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_delta_rows_account_number_hashed__UPLOAD_DATE.75107ab10e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "UPLOAD_DATE"], "model": "{{ get_where_subquery(ref('corona_delta_rows')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_corona_delta_rows_account_number_hashed__UPLOAD_DATE", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_b6766d93887459187d9ab4556d0b7477.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_delta_rows_account_number_hashed__UPLOAD_DATE.75107ab10e", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_corona_delta_rows_account_number_hashed__UPLOAD_DATE"], "alias": "dbt_utils_unique_combination_o_b6766d93887459187d9ab4556d0b7477", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b6766d93887459187d9ab4556d0b7477", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b6766d93887459187d9ab4556d0b7477"}, "created_at": 1715379616.936507, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b6766d93887459187d9ab4556d0b7477\") }}", "language": "sql", "refs": [{"name": "corona_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.corona_delta_rows"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_b6766d93887459187d9ab4556d0b7477.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`corona_delta_rows`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.corona_delta_rows", "attached_node": "model.promise_dwh.corona_delta_rows"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_gcww_deltas_v2_account_number_hashed__valid_starting.6a9eaa84b0": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "valid_starting"], "model": "{{ get_where_subquery(ref('gcww_deltas_v2')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_gcww_deltas_v2_account_number_hashed__valid_starting", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_5ba1ea3684f872b0e71d713e959567be.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_gcww_deltas_v2_account_number_hashed__valid_starting.6a9eaa84b0", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_gcww_deltas_v2_account_number_hashed__valid_starting"], "alias": "dbt_utils_unique_combination_o_5ba1ea3684f872b0e71d713e959567be", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5ba1ea3684f872b0e71d713e959567be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5ba1ea3684f872b0e71d713e959567be"}, "created_at": 1715379616.9386702, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5ba1ea3684f872b0e71d713e959567be\") }}", "language": "sql", "refs": [{"name": "gcww_deltas_v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.gcww_deltas_v2"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_5ba1ea3684f872b0e71d713e959567be.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`gcww_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gcww_deltas_v2", "attached_node": "model.promise_dwh.gcww_deltas_v2"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_alexrenew_water_deltas_v2_account_number_hashed__valid_starting.95def3c3fe": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "valid_starting"], "model": "{{ get_where_subquery(ref('alexrenew_water_deltas_v2')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_alexrenew_water_deltas_v2_account_number_hashed__valid_starting", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_5ca213c6e0878deefdb5427bdfa9d790.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_alexrenew_water_deltas_v2_account_number_hashed__valid_starting.95def3c3fe", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_alexrenew_water_deltas_v2_account_number_hashed__valid_starting"], "alias": "dbt_utils_unique_combination_o_5ca213c6e0878deefdb5427bdfa9d790", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5ca213c6e0878deefdb5427bdfa9d790", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5ca213c6e0878deefdb5427bdfa9d790"}, "created_at": 1715379616.940897, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5ca213c6e0878deefdb5427bdfa9d790\") }}", "language": "sql", "refs": [{"name": "alexrenew_water_deltas_v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.alexrenew_water_deltas_v2"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_5ca213c6e0878deefdb5427bdfa9d790.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`alexrenew_water_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.alexrenew_water_deltas_v2", "attached_node": "model.promise_dwh.alexrenew_water_deltas_v2"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_deltas_v2_account_number_hashed__valid_starting.3fdfe6d6dd": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "valid_starting"], "model": "{{ get_where_subquery(ref('toledo_deltas_v2')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_toledo_deltas_v2_account_number_hashed__valid_starting", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_a825f03a428aa513adbc5a60843b0bc4.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_deltas_v2_account_number_hashed__valid_starting.3fdfe6d6dd", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_toledo_deltas_v2_account_number_hashed__valid_starting"], "alias": "dbt_utils_unique_combination_o_a825f03a428aa513adbc5a60843b0bc4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a825f03a428aa513adbc5a60843b0bc4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a825f03a428aa513adbc5a60843b0bc4"}, "created_at": 1715379616.9430861, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a825f03a428aa513adbc5a60843b0bc4\") }}", "language": "sql", "refs": [{"name": "toledo_deltas_v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.toledo_deltas_v2"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_a825f03a428aa513adbc5a60843b0bc4.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`toledo_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.toledo_deltas_v2", "attached_node": "model.promise_dwh.toledo_deltas_v2"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_deltas_v2_account_number_hashed__valid_starting.846bb7ea04": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "valid_starting"], "model": "{{ get_where_subquery(ref('hrsd_deltas_v2')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_hrsd_deltas_v2_account_number_hashed__valid_starting", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_4a956f592241b75a92accdb3ac6726db.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_deltas_v2_account_number_hashed__valid_starting.846bb7ea04", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_hrsd_deltas_v2_account_number_hashed__valid_starting"], "alias": "dbt_utils_unique_combination_o_4a956f592241b75a92accdb3ac6726db", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4a956f592241b75a92accdb3ac6726db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4a956f592241b75a92accdb3ac6726db"}, "created_at": 1715379616.9451299, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4a956f592241b75a92accdb3ac6726db\") }}", "language": "sql", "refs": [{"name": "hrsd_deltas_v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.hrsd_deltas_v2"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_4a956f592241b75a92accdb3ac6726db.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`hrsd_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.hrsd_deltas_v2", "attached_node": "model.promise_dwh.hrsd_deltas_v2"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_louisville_water_deltas_v2_account_number_hashed__valid_starting.c4c12c8f23": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "valid_starting"], "model": "{{ get_where_subquery(ref('louisville_water_deltas_v2')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_louisville_water_deltas_v2_account_number_hashed__valid_starting", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_caa2f6ea5ac0a0b35ab9c29778f42940.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_louisville_water_deltas_v2_account_number_hashed__valid_starting.c4c12c8f23", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_louisville_water_deltas_v2_account_number_hashed__valid_starting"], "alias": "dbt_utils_unique_combination_o_caa2f6ea5ac0a0b35ab9c29778f42940", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_caa2f6ea5ac0a0b35ab9c29778f42940", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_caa2f6ea5ac0a0b35ab9c29778f42940"}, "created_at": 1715379616.947314, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_caa2f6ea5ac0a0b35ab9c29778f42940\") }}", "language": "sql", "refs": [{"name": "louisville_water_deltas_v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.louisville_water_deltas_v2"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_caa2f6ea5ac0a0b35ab9c29778f42940.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`louisville_water_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.louisville_water_deltas_v2", "attached_node": "model.promise_dwh.louisville_water_deltas_v2"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_deltas_v2_account_number_hashed__valid_starting.f2a965239d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "valid_starting"], "model": "{{ get_where_subquery(ref('corona_deltas_v2')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_corona_deltas_v2_account_number_hashed__valid_starting", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_38c0c3038a362e32b8728829bec9827e.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_deltas_v2_account_number_hashed__valid_starting.f2a965239d", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_corona_deltas_v2_account_number_hashed__valid_starting"], "alias": "dbt_utils_unique_combination_o_38c0c3038a362e32b8728829bec9827e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_38c0c3038a362e32b8728829bec9827e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_38c0c3038a362e32b8728829bec9827e"}, "created_at": 1715379616.9493299, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_38c0c3038a362e32b8728829bec9827e\") }}", "language": "sql", "refs": [{"name": "corona_deltas_v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.corona_deltas_v2"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_38c0c3038a362e32b8728829bec9827e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`corona_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.corona_deltas_v2", "attached_node": "model.promise_dwh.corona_deltas_v2"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_buffalo_water_deltas_v2_account_number_hashed__valid_starting.5d5102ea8e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "valid_starting"], "model": "{{ get_where_subquery(ref('buffalo_water_deltas_v2')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_buffalo_water_deltas_v2_account_number_hashed__valid_starting", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_ebd16af48774a5ce0291f5334b32d4fe.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_buffalo_water_deltas_v2_account_number_hashed__valid_starting.5d5102ea8e", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_buffalo_water_deltas_v2_account_number_hashed__valid_starting"], "alias": "dbt_utils_unique_combination_o_ebd16af48774a5ce0291f5334b32d4fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ebd16af48774a5ce0291f5334b32d4fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ebd16af48774a5ce0291f5334b32d4fe"}, "created_at": 1715379616.951509, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ebd16af48774a5ce0291f5334b32d4fe\") }}", "language": "sql", "refs": [{"name": "buffalo_water_deltas_v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.buffalo_water_deltas_v2"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_ebd16af48774a5ce0291f5334b32d4fe.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`buffalo_water_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.buffalo_water_deltas_v2", "attached_node": "model.promise_dwh.buffalo_water_deltas_v2"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_newark_water_deltas_v2_account_number_hashed__valid_starting.621e3a3a44": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "valid_starting"], "model": "{{ get_where_subquery(ref('newark_water_deltas_v2')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_newark_water_deltas_v2_account_number_hashed__valid_starting", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_07735313951a132d0999994ccbeb157a.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_newark_water_deltas_v2_account_number_hashed__valid_starting.621e3a3a44", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_newark_water_deltas_v2_account_number_hashed__valid_starting"], "alias": "dbt_utils_unique_combination_o_07735313951a132d0999994ccbeb157a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_07735313951a132d0999994ccbeb157a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_07735313951a132d0999994ccbeb157a"}, "created_at": 1715379616.953668, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_07735313951a132d0999994ccbeb157a\") }}", "language": "sql", "refs": [{"name": "newark_water_deltas_v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.newark_water_deltas_v2"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_07735313951a132d0999994ccbeb157a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`newark_water_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.newark_water_deltas_v2", "attached_node": "model.promise_dwh.newark_water_deltas_v2"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_veoliany_water_deltas_v2_account_number_hashed__valid_starting.2080771d32": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "valid_starting"], "model": "{{ get_where_subquery(ref('veoliany_water_deltas_v2')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_veoliany_water_deltas_v2_account_number_hashed__valid_starting", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_2efc78b43636a7b27192bfb4a06e1507.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_veoliany_water_deltas_v2_account_number_hashed__valid_starting.2080771d32", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_veoliany_water_deltas_v2_account_number_hashed__valid_starting"], "alias": "dbt_utils_unique_combination_o_2efc78b43636a7b27192bfb4a06e1507", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2efc78b43636a7b27192bfb4a06e1507", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2efc78b43636a7b27192bfb4a06e1507"}, "created_at": 1715379616.9557, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2efc78b43636a7b27192bfb4a06e1507\") }}", "language": "sql", "refs": [{"name": "veoliany_water_deltas_v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.veoliany_water_deltas_v2"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_2efc78b43636a7b27192bfb4a06e1507.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`veoliany_water_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.veoliany_water_deltas_v2", "attached_node": "model.promise_dwh.veoliany_water_deltas_v2"}, "test.promise_dwh.dbt_utils_unique_combination_of_columns_centralarkansas_water_deltas_v2_account_number_hashed__valid_starting.cabe0bedd0": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_number_hashed", "valid_starting"], "model": "{{ get_where_subquery(ref('centralarkansas_water_deltas_v2')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_centralarkansas_water_deltas_v2_account_number_hashed__valid_starting", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_unique_combination_o_b07e7ecf7f498224a996d6a7d5ad966e.sql", "original_file_path": "models/utility_uploads/utility_uploads.yml", "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_centralarkansas_water_deltas_v2_account_number_hashed__valid_starting.cabe0bedd0", "fqn": ["promise_dwh", "utility_uploads", "dbt_utils_unique_combination_of_columns_centralarkansas_water_deltas_v2_account_number_hashed__valid_starting"], "alias": "dbt_utils_unique_combination_o_b07e7ecf7f498224a996d6a7d5ad966e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b07e7ecf7f498224a996d6a7d5ad966e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b07e7ecf7f498224a996d6a7d5ad966e"}, "created_at": 1715379616.957876, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b07e7ecf7f498224a996d6a7d5ad966e\") }}", "language": "sql", "refs": [{"name": "centralarkansas_water_deltas_v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.centralarkansas_water_deltas_v2"]}, "compiled_path": "target/compiled/promise_dwh/models/utility_uploads/utility_uploads.yml/dbt_utils_unique_combination_o_b07e7ecf7f498224a996d6a7d5ad966e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`centralarkansas_water_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.centralarkansas_water_deltas_v2", "attached_node": "model.promise_dwh.centralarkansas_water_deltas_v2"}, "test.promise_dwh.dbt_utils_equal_rowcount_finance_event__source_finance_event_.3acf90b47b": {"test_metadata": {"name": "equal_rowcount", "kwargs": {"compare_model": "{{ source('finance', 'event') }}", "model": "{{ get_where_subquery(ref('finance_event')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_equal_rowcount_finance_event__source_finance_event_", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_equal_rowcount_finance_event__source_finance_event_.sql", "original_file_path": "models/finance/finance.yml", "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_finance_event__source_finance_event_.3acf90b47b", "fqn": ["promise_dwh", "finance", "dbt_utils_equal_rowcount_finance_event__source_finance_event_"], "alias": "dbt_utils_equal_rowcount_finance_event__source_finance_event_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "sum(coalesce(diff_count, 0))", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"fail_calc": "sum(coalesce(diff_count, 0))"}, "created_at": 1715379616.961733, "relation_name": null, "raw_code": "{{ dbt_utils.test_equal_rowcount(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "finance_event", "package": null, "version": null}], "sources": [["finance", "event"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["source.promise_dwh.finance.event", "model.promise_dwh.finance_event"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/finance.yml/dbt_utils_equal_rowcount_finance_event__source_finance_event_.sql", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`finance_event`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`event`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.finance_event", "attached_node": "model.promise_dwh.finance_event"}, "test.promise_dwh.dbt_utils_equal_rowcount_single_sided_entry__source_finance_ledger_.f2dc4f1eea": {"test_metadata": {"name": "equal_rowcount", "kwargs": {"compare_model": "{{ source('finance', 'ledger') }}", "model": "{{ get_where_subquery(ref('single_sided_entry')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_equal_rowcount_single_sided_entry__source_finance_ledger_", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_equal_rowcount_singl_6a8258f4fe77207dee5498c47d3d2973.sql", "original_file_path": "models/finance/finance.yml", "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_single_sided_entry__source_finance_ledger_.f2dc4f1eea", "fqn": ["promise_dwh", "finance", "dbt_utils_equal_rowcount_single_sided_entry__source_finance_ledger_"], "alias": "dbt_utils_equal_rowcount_singl_6a8258f4fe77207dee5498c47d3d2973", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_equal_rowcount_singl_6a8258f4fe77207dee5498c47d3d2973", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "sum(coalesce(diff_count, 0))", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"fail_calc": "sum(coalesce(diff_count, 0))", "alias": "dbt_utils_equal_rowcount_singl_6a8258f4fe77207dee5498c47d3d2973"}, "created_at": 1715379616.967781, "relation_name": null, "raw_code": "{{ dbt_utils.test_equal_rowcount(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_equal_rowcount_singl_6a8258f4fe77207dee5498c47d3d2973\") }}", "language": "sql", "refs": [{"name": "single_sided_entry", "package": null, "version": null}], "sources": [["finance", "ledger"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["source.promise_dwh.finance.ledger", "model.promise_dwh.single_sided_entry"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/finance.yml/dbt_utils_equal_rowcount_singl_6a8258f4fe77207dee5498c47d3d2973.sql", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`single_sided_entry`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`singlesidedentry`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.single_sided_entry", "attached_node": "model.promise_dwh.single_sided_entry"}, "test.promise_dwh.dbt_utils_equal_rowcount_finance_plan__source_finance_plan_.c31f4e9b27": {"test_metadata": {"name": "equal_rowcount", "kwargs": {"compare_model": "{{ source('finance', 'plan') }}", "model": "{{ get_where_subquery(ref('finance_plan')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_equal_rowcount_finance_plan__source_finance_plan_", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_equal_rowcount_finance_plan__source_finance_plan_.sql", "original_file_path": "models/finance/finance.yml", "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_finance_plan__source_finance_plan_.c31f4e9b27", "fqn": ["promise_dwh", "finance", "dbt_utils_equal_rowcount_finance_plan__source_finance_plan_"], "alias": "dbt_utils_equal_rowcount_finance_plan__source_finance_plan_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "sum(coalesce(diff_count, 0))", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"fail_calc": "sum(coalesce(diff_count, 0))"}, "created_at": 1715379616.9702778, "relation_name": null, "raw_code": "{{ dbt_utils.test_equal_rowcount(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "finance_plan", "package": null, "version": null}], "sources": [["finance", "plan"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["source.promise_dwh.finance.plan", "model.promise_dwh.finance_plan"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/finance.yml/dbt_utils_equal_rowcount_finance_plan__source_finance_plan_.sql", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`finance_plan`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`plan`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.finance_plan", "attached_node": "model.promise_dwh.finance_plan"}, "test.promise_dwh.dbt_utils_equal_rowcount_payment_attempt__source_finance_payment_attempt_.b87f20362a": {"test_metadata": {"name": "equal_rowcount", "kwargs": {"compare_model": "{{ source('finance', 'payment_attempt') }}", "model": "{{ get_where_subquery(ref('payment_attempt')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_equal_rowcount_payment_attempt__source_finance_payment_attempt_", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_equal_rowcount_payme_8aa1863c5bf135b808f0129619941bf6.sql", "original_file_path": "models/finance/finance.yml", "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_payment_attempt__source_finance_payment_attempt_.b87f20362a", "fqn": ["promise_dwh", "finance", "dbt_utils_equal_rowcount_payment_attempt__source_finance_payment_attempt_"], "alias": "dbt_utils_equal_rowcount_payme_8aa1863c5bf135b808f0129619941bf6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_equal_rowcount_payme_8aa1863c5bf135b808f0129619941bf6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "sum(coalesce(diff_count, 0))", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"fail_calc": "sum(coalesce(diff_count, 0))", "alias": "dbt_utils_equal_rowcount_payme_8aa1863c5bf135b808f0129619941bf6"}, "created_at": 1715379616.972511, "relation_name": null, "raw_code": "{{ dbt_utils.test_equal_rowcount(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_equal_rowcount_payme_8aa1863c5bf135b808f0129619941bf6\") }}", "language": "sql", "refs": [{"name": "payment_attempt", "package": null, "version": null}], "sources": [["finance", "payment_attempt"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["source.promise_dwh.finance.payment_attempt", "model.promise_dwh.payment_attempt"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/finance.yml/dbt_utils_equal_rowcount_payme_8aa1863c5bf135b808f0129619941bf6.sql", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`payment_attempt`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`paymentattempt`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.payment_attempt", "attached_node": "model.promise_dwh.payment_attempt"}, "test.promise_dwh.dbt_utils_equal_rowcount_payment_method__source_finance_payment_method_.168378dafe": {"test_metadata": {"name": "equal_rowcount", "kwargs": {"compare_model": "{{ source('finance', 'payment_method') }}", "model": "{{ get_where_subquery(ref('payment_method')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_equal_rowcount_payment_method__source_finance_payment_method_", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_equal_rowcount_payme_bdb06f3bd8ab43bc0cbd99a5db4f9800.sql", "original_file_path": "models/finance/finance.yml", "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_payment_method__source_finance_payment_method_.168378dafe", "fqn": ["promise_dwh", "finance", "dbt_utils_equal_rowcount_payment_method__source_finance_payment_method_"], "alias": "dbt_utils_equal_rowcount_payme_bdb06f3bd8ab43bc0cbd99a5db4f9800", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_equal_rowcount_payme_bdb06f3bd8ab43bc0cbd99a5db4f9800", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "sum(coalesce(diff_count, 0))", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"fail_calc": "sum(coalesce(diff_count, 0))", "alias": "dbt_utils_equal_rowcount_payme_bdb06f3bd8ab43bc0cbd99a5db4f9800"}, "created_at": 1715379616.974973, "relation_name": null, "raw_code": "{{ dbt_utils.test_equal_rowcount(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_equal_rowcount_payme_bdb06f3bd8ab43bc0cbd99a5db4f9800\") }}", "language": "sql", "refs": [{"name": "payment_method", "package": null, "version": null}], "sources": [["finance", "payment_method"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["source.promise_dwh.finance.payment_method", "model.promise_dwh.payment_method"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/finance.yml/dbt_utils_equal_rowcount_payme_bdb06f3bd8ab43bc0cbd99a5db4f9800.sql", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`payment_method`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`paymentmethod`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.payment_method", "attached_node": "model.promise_dwh.payment_method"}, "test.promise_dwh.dbt_utils_equal_rowcount_refund_attempt__source_finance_refund_attempt_.3db86495e1": {"test_metadata": {"name": "equal_rowcount", "kwargs": {"compare_model": "{{ source('finance', 'refund_attempt') }}", "model": "{{ get_where_subquery(ref('refund_attempt')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_equal_rowcount_refund_attempt__source_finance_refund_attempt_", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_equal_rowcount_refun_f6b00d1514e5320ac338c747ad619272.sql", "original_file_path": "models/finance/finance.yml", "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_refund_attempt__source_finance_refund_attempt_.3db86495e1", "fqn": ["promise_dwh", "finance", "dbt_utils_equal_rowcount_refund_attempt__source_finance_refund_attempt_"], "alias": "dbt_utils_equal_rowcount_refun_f6b00d1514e5320ac338c747ad619272", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_equal_rowcount_refun_f6b00d1514e5320ac338c747ad619272", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "sum(coalesce(diff_count, 0))", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"fail_calc": "sum(coalesce(diff_count, 0))", "alias": "dbt_utils_equal_rowcount_refun_f6b00d1514e5320ac338c747ad619272"}, "created_at": 1715379616.977411, "relation_name": null, "raw_code": "{{ dbt_utils.test_equal_rowcount(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_equal_rowcount_refun_f6b00d1514e5320ac338c747ad619272\") }}", "language": "sql", "refs": [{"name": "refund_attempt", "package": null, "version": null}], "sources": [["finance", "refund_attempt"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["source.promise_dwh.finance.refund_attempt", "model.promise_dwh.refund_attempt"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/finance.yml/dbt_utils_equal_rowcount_refun_f6b00d1514e5320ac338c747ad619272.sql", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`refund_attempt`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`refundattempt`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.refund_attempt", "attached_node": "model.promise_dwh.refund_attempt"}, "test.promise_dwh.dbt_utils_equal_rowcount_remit_attempt__source_finance_remit_attempt_.0446ca9a51": {"test_metadata": {"name": "equal_rowcount", "kwargs": {"compare_model": "{{ source('finance', 'remit_attempt') }}", "model": "{{ get_where_subquery(ref('remit_attempt')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_equal_rowcount_remit_attempt__source_finance_remit_attempt_", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_equal_rowcount_remit_c338d5b52131a6a3b4541a280821d7a7.sql", "original_file_path": "models/finance/finance.yml", "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_remit_attempt__source_finance_remit_attempt_.0446ca9a51", "fqn": ["promise_dwh", "finance", "dbt_utils_equal_rowcount_remit_attempt__source_finance_remit_attempt_"], "alias": "dbt_utils_equal_rowcount_remit_c338d5b52131a6a3b4541a280821d7a7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_equal_rowcount_remit_c338d5b52131a6a3b4541a280821d7a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "sum(coalesce(diff_count, 0))", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"fail_calc": "sum(coalesce(diff_count, 0))", "alias": "dbt_utils_equal_rowcount_remit_c338d5b52131a6a3b4541a280821d7a7"}, "created_at": 1715379616.9797308, "relation_name": null, "raw_code": "{{ dbt_utils.test_equal_rowcount(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_equal_rowcount_remit_c338d5b52131a6a3b4541a280821d7a7\") }}", "language": "sql", "refs": [{"name": "remit_attempt", "package": null, "version": null}], "sources": [["finance", "remit_attempt"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["source.promise_dwh.finance.remit_attempt", "model.promise_dwh.remit_attempt"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/finance.yml/dbt_utils_equal_rowcount_remit_c338d5b52131a6a3b4541a280821d7a7.sql", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`remit_attempt`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`remitattempt`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.remit_attempt", "attached_node": "model.promise_dwh.remit_attempt"}, "test.promise_dwh.dbt_utils_equal_rowcount_payment_provider_balance__source_finance_payment_provider_balance_.060ca96bc1": {"test_metadata": {"name": "equal_rowcount", "kwargs": {"compare_model": "{{ source('finance', 'payment_provider_balance') }}", "model": "{{ get_where_subquery(ref('payment_provider_balance')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "dbt_utils_equal_rowcount_payment_provider_balance__source_finance_payment_provider_balance_", "resource_type": "test", "package_name": "promise_dwh", "path": "dbt_utils_equal_rowcount_payme_adfb85c2d25855d63c448b8da76a292e.sql", "original_file_path": "models/finance/finance.yml", "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_payment_provider_balance__source_finance_payment_provider_balance_.060ca96bc1", "fqn": ["promise_dwh", "finance", "dbt_utils_equal_rowcount_payment_provider_balance__source_finance_payment_provider_balance_"], "alias": "dbt_utils_equal_rowcount_payme_adfb85c2d25855d63c448b8da76a292e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_equal_rowcount_payme_adfb85c2d25855d63c448b8da76a292e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "sum(coalesce(diff_count, 0))", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"fail_calc": "sum(coalesce(diff_count, 0))", "alias": "dbt_utils_equal_rowcount_payme_adfb85c2d25855d63c448b8da76a292e"}, "created_at": 1715379616.9821901, "relation_name": null, "raw_code": "{{ dbt_utils.test_equal_rowcount(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_equal_rowcount_payme_adfb85c2d25855d63c448b8da76a292e\") }}", "language": "sql", "refs": [{"name": "payment_provider_balance", "package": null, "version": null}], "sources": [["finance", "payment_provider_balance"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_equal_rowcount", "macro.dbt.get_where_subquery"], "nodes": ["source.promise_dwh.finance.payment_provider_balance", "model.promise_dwh.payment_provider_balance"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/finance.yml/dbt_utils_equal_rowcount_payme_adfb85c2d25855d63c448b8da76a292e.sql", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`payment_provider_balance`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`paymentproviderbalance`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.payment_provider_balance", "attached_node": "model.promise_dwh.payment_provider_balance"}, "test.promise_dwh.twilio_error_monitoring_twilio_message_30034__3.882b292e9e": {"test_metadata": {"name": "twilio_error_monitoring", "kwargs": {"error_code": "30034", "lookback_days": 3, "model": "{{ get_where_subquery(ref('twilio_message')) }}"}, "namespace": null}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "twilio_error_monitoring_twilio_message_30034__3", "resource_type": "test", "package_name": "promise_dwh", "path": "twilio_error_monitoring_twilio_message_30034__3.sql", "original_file_path": "models/twilio/tests.yml", "unique_id": "test.promise_dwh.twilio_error_monitoring_twilio_message_30034__3.882b292e9e", "fqn": ["promise_dwh", "twilio", "twilio_error_monitoring_twilio_message_30034__3"], "alias": "twilio_error_monitoring_twilio_message_30034__3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1715379616.988575, "relation_name": null, "raw_code": "{{ test_twilio_error_monitoring(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "twilio_message", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.test_twilio_error_monitoring", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.twilio_message"]}, "compiled_path": "target/compiled/promise_dwh/models/twilio/tests.yml/twilio_error_monitoring_twilio_message_30034__3.sql", "compiled": true, "compiled_code": "\nWITH errors AS (\n  SELECT\n    from_number,\n    count(1)\n  FROM `analytics-prod-328313`.`prod`.`twilio_message`\n  WHERE\n    DATE(TIMESTAMP_TRUNC(created_at, DAY)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY)\n    AND error_code = '30034'\n  GROUP BY \n    1\n)\nSELECT\n  *\nFROM\n  errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.twilio_message", "attached_node": "model.promise_dwh.twilio_message"}, "test.promise_dwh.stripe_equal_rowcounts_balance_transaction_id.f643eaaf02": {"test_metadata": {"name": "stripe_equal_rowcounts", "kwargs": {"id_field": ["id"], "model": "{{ get_where_subquery(ref('balance_transaction')) }}"}, "namespace": null}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "stripe_equal_rowcounts_balance_transaction_id", "resource_type": "test", "package_name": "promise_dwh", "path": "stripe_equal_rowcounts_balance_transaction_id.sql", "original_file_path": "models/stripe/stripe.yml", "unique_id": "test.promise_dwh.stripe_equal_rowcounts_balance_transaction_id.f643eaaf02", "fqn": ["promise_dwh", "stripe", "stripe_equal_rowcounts_balance_transaction_id"], "alias": "stripe_equal_rowcounts_balance_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1715379616.992821, "relation_name": null, "raw_code": "{{ test_stripe_equal_rowcounts(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "balance_transaction", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.test_stripe_equal_rowcounts", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.balance_transaction"]}, "compiled_path": "target/compiled/promise_dwh/models/stripe/stripe.yml/stripe_equal_rowcounts_balance_transaction_id.sql", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe.balance_transaction`\n\n  UNION ALL \n  SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.balance_transaction`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`balance_transaction`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.balance_transaction", "attached_node": "model.promise_dwh.balance_transaction"}, "test.promise_dwh.stripe_equal_rowcounts_charge_id.8c2bb41bf3": {"test_metadata": {"name": "stripe_equal_rowcounts", "kwargs": {"id_field": ["id"], "model": "{{ get_where_subquery(ref('charge')) }}"}, "namespace": null}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "stripe_equal_rowcounts_charge_id", "resource_type": "test", "package_name": "promise_dwh", "path": "stripe_equal_rowcounts_charge_id.sql", "original_file_path": "models/stripe/stripe.yml", "unique_id": "test.promise_dwh.stripe_equal_rowcounts_charge_id.8c2bb41bf3", "fqn": ["promise_dwh", "stripe", "stripe_equal_rowcounts_charge_id"], "alias": "stripe_equal_rowcounts_charge_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1715379616.996095, "relation_name": null, "raw_code": "{{ test_stripe_equal_rowcounts(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "charge", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.test_stripe_equal_rowcounts", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.charge"]}, "compiled_path": "target/compiled/promise_dwh/models/stripe/stripe.yml/stripe_equal_rowcounts_charge_id.sql", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe.charge`\n\n  UNION ALL \n  SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.charge`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`charge`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.charge", "attached_node": "model.promise_dwh.charge"}, "test.promise_dwh.stripe_equal_rowcounts_stripe_customer_id.ec8a9cf45a": {"test_metadata": {"name": "stripe_equal_rowcounts", "kwargs": {"id_field": ["id"], "model": "{{ get_where_subquery(ref('stripe_customer')) }}"}, "namespace": null}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "stripe_equal_rowcounts_stripe_customer_id", "resource_type": "test", "package_name": "promise_dwh", "path": "stripe_equal_rowcounts_stripe_customer_id.sql", "original_file_path": "models/stripe/stripe.yml", "unique_id": "test.promise_dwh.stripe_equal_rowcounts_stripe_customer_id.ec8a9cf45a", "fqn": ["promise_dwh", "stripe", "stripe_equal_rowcounts_stripe_customer_id"], "alias": "stripe_equal_rowcounts_stripe_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1715379616.997969, "relation_name": null, "raw_code": "{{ test_stripe_equal_rowcounts(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stripe_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.test_stripe_equal_rowcounts", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.stripe_customer"]}, "compiled_path": "target/compiled/promise_dwh/models/stripe/stripe.yml/stripe_equal_rowcounts_stripe_customer_id.sql", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe.customer`\n\n  UNION ALL \n  SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.customer`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`customer`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stripe_customer", "attached_node": "model.promise_dwh.stripe_customer"}, "test.promise_dwh.stripe_equal_rowcounts_dispute_balance_transaction_balance_transaction_id.a4e94bee3e": {"test_metadata": {"name": "stripe_equal_rowcounts", "kwargs": {"id_field": ["balance_transaction_id"], "model": "{{ get_where_subquery(ref('dispute_balance_transaction')) }}"}, "namespace": null}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "stripe_equal_rowcounts_dispute_balance_transaction_balance_transaction_id", "resource_type": "test", "package_name": "promise_dwh", "path": "stripe_equal_rowcounts_dispute_116a905499ebb5a94635a08008ef843d.sql", "original_file_path": "models/stripe/stripe.yml", "unique_id": "test.promise_dwh.stripe_equal_rowcounts_dispute_balance_transaction_balance_transaction_id.a4e94bee3e", "fqn": ["promise_dwh", "stripe", "stripe_equal_rowcounts_dispute_balance_transaction_balance_transaction_id"], "alias": "stripe_equal_rowcounts_dispute_116a905499ebb5a94635a08008ef843d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "stripe_equal_rowcounts_dispute_116a905499ebb5a94635a08008ef843d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "stripe_equal_rowcounts_dispute_116a905499ebb5a94635a08008ef843d"}, "created_at": 1715379616.9999812, "relation_name": null, "raw_code": "{{ test_stripe_equal_rowcounts(**_dbt_generic_test_kwargs) }}{{ config(alias=\"stripe_equal_rowcounts_dispute_116a905499ebb5a94635a08008ef843d\") }}", "language": "sql", "refs": [{"name": "dispute_balance_transaction", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.test_stripe_equal_rowcounts", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.dispute_balance_transaction"]}, "compiled_path": "target/compiled/promise_dwh/models/stripe/stripe.yml/stripe_equal_rowcounts_dispute_116a905499ebb5a94635a08008ef843d.sql", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['balance_transaction_id']\n  FROM\n      `analytics-dev-328216.stripe.dispute_balance_transaction`\n\n  UNION ALL \n  SELECT\n      ['balance_transaction_id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.dispute_balance_transaction`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`dispute_balance_transaction`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dispute_balance_transaction", "attached_node": "model.promise_dwh.dispute_balance_transaction"}, "test.promise_dwh.stripe_equal_rowcounts_dispute_id.ba9a56c1cd": {"test_metadata": {"name": "stripe_equal_rowcounts", "kwargs": {"id_field": ["id"], "model": "{{ get_where_subquery(ref('dispute')) }}"}, "namespace": null}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "stripe_equal_rowcounts_dispute_id", "resource_type": "test", "package_name": "promise_dwh", "path": "stripe_equal_rowcounts_dispute_id.sql", "original_file_path": "models/stripe/stripe.yml", "unique_id": "test.promise_dwh.stripe_equal_rowcounts_dispute_id.ba9a56c1cd", "fqn": ["promise_dwh", "stripe", "stripe_equal_rowcounts_dispute_id"], "alias": "stripe_equal_rowcounts_dispute_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1715379617.0021482, "relation_name": null, "raw_code": "{{ test_stripe_equal_rowcounts(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dispute", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.test_stripe_equal_rowcounts", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.dispute"]}, "compiled_path": "target/compiled/promise_dwh/models/stripe/stripe.yml/stripe_equal_rowcounts_dispute_id.sql", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe.dispute`\n\n  UNION ALL \n  SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.dispute`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`dispute`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dispute", "attached_node": "model.promise_dwh.dispute"}, "test.promise_dwh.stripe_equal_rowcounts_refund_id.80e210a2c4": {"test_metadata": {"name": "stripe_equal_rowcounts", "kwargs": {"id_field": ["id"], "model": "{{ get_where_subquery(ref('refund')) }}"}, "namespace": null}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "stripe_equal_rowcounts_refund_id", "resource_type": "test", "package_name": "promise_dwh", "path": "stripe_equal_rowcounts_refund_id.sql", "original_file_path": "models/stripe/stripe.yml", "unique_id": "test.promise_dwh.stripe_equal_rowcounts_refund_id.80e210a2c4", "fqn": ["promise_dwh", "stripe", "stripe_equal_rowcounts_refund_id"], "alias": "stripe_equal_rowcounts_refund_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1715379617.0041752, "relation_name": null, "raw_code": "{{ test_stripe_equal_rowcounts(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "refund", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.test_stripe_equal_rowcounts", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.refund"]}, "compiled_path": "target/compiled/promise_dwh/models/stripe/stripe.yml/stripe_equal_rowcounts_refund_id.sql", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe.refund`\n\n  UNION ALL \n  SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.refund`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`refund`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.refund", "attached_node": "model.promise_dwh.refund"}, "test.promise_dwh.stripe_equal_rowcounts_transaction_fee_detail_request_id.b9b2b21aad": {"test_metadata": {"name": "stripe_equal_rowcounts", "kwargs": {"id_field": ["request_id"], "model": "{{ get_where_subquery(ref('transaction_fee_detail')) }}"}, "namespace": null}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "stripe_equal_rowcounts_transaction_fee_detail_request_id", "resource_type": "test", "package_name": "promise_dwh", "path": "stripe_equal_rowcounts_transaction_fee_detail_request_id.sql", "original_file_path": "models/stripe/stripe.yml", "unique_id": "test.promise_dwh.stripe_equal_rowcounts_transaction_fee_detail_request_id.b9b2b21aad", "fqn": ["promise_dwh", "stripe", "stripe_equal_rowcounts_transaction_fee_detail_request_id"], "alias": "stripe_equal_rowcounts_transaction_fee_detail_request_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1715379617.006024, "relation_name": null, "raw_code": "{{ test_stripe_equal_rowcounts(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transaction_fee_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.test_stripe_equal_rowcounts", "macro.dbt.get_where_subquery"], "nodes": ["model.promise_dwh.transaction_fee_detail"]}, "compiled_path": "target/compiled/promise_dwh/models/stripe/stripe.yml/stripe_equal_rowcounts_transaction_fee_detail_request_id.sql", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['request_id']\n  FROM\n      `analytics-dev-328216.stripe.transaction_fee_detail`\n\n  UNION ALL \n  SELECT\n      ['request_id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.transaction_fee_detail`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`transaction_fee_detail`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.transaction_fee_detail", "attached_node": "model.promise_dwh.transaction_fee_detail"}, "test.promise_dwh.unique_jurisdiction_metadata_jurisdiction.089ca698ab": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "jurisdiction", "model": "{{ get_where_subquery(ref('jurisdiction_metadata')) }}"}, "namespace": null}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "unique_jurisdiction_metadata_jurisdiction", "resource_type": "test", "package_name": "promise_dwh", "path": "unique_jurisdiction_metadata_jurisdiction.sql", "original_file_path": "data/promisepay/schema.yml", "unique_id": "test.promise_dwh.unique_jurisdiction_metadata_jurisdiction.089ca698ab", "fqn": ["promise_dwh", "promisepay", "unique_jurisdiction_metadata_jurisdiction"], "alias": "unique_jurisdiction_metadata_jurisdiction", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1715379617.018877, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jurisdiction_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.promise_dwh.jurisdiction_metadata"]}, "compiled_path": "target/compiled/promise_dwh/data/promisepay/schema.yml/unique_jurisdiction_metadata_jurisdiction.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select jurisdiction as unique_field\n  from `analytics-prod-328313`.`promisepay`.`jurisdiction_metadata`\n  where jurisdiction is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "jurisdiction", "file_key_name": "seeds.jurisdiction_metadata", "attached_node": "seed.promise_dwh.jurisdiction_metadata"}, "test.promise_dwh.not_null_jurisdiction_metadata_jurisdiction.e47f81d0c0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "jurisdiction", "model": "{{ get_where_subquery(ref('jurisdiction_metadata')) }}"}, "namespace": null}, "database": "analytics-prod-328313", "schema": "dbt_test__audit", "name": "not_null_jurisdiction_metadata_jurisdiction", "resource_type": "test", "package_name": "promise_dwh", "path": "not_null_jurisdiction_metadata_jurisdiction.sql", "original_file_path": "data/promisepay/schema.yml", "unique_id": "test.promise_dwh.not_null_jurisdiction_metadata_jurisdiction.e47f81d0c0", "fqn": ["promise_dwh", "promisepay", "not_null_jurisdiction_metadata_jurisdiction"], "alias": "not_null_jurisdiction_metadata_jurisdiction", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1715379617.019773, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jurisdiction_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.promise_dwh.jurisdiction_metadata"]}, "compiled_path": "target/compiled/promise_dwh/data/promisepay/schema.yml/not_null_jurisdiction_metadata_jurisdiction.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect jurisdiction\nfrom `analytics-prod-328313`.`promisepay`.`jurisdiction_metadata`\nwhere jurisdiction is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "jurisdiction", "file_key_name": "seeds.jurisdiction_metadata", "attached_node": "seed.promise_dwh.jurisdiction_metadata"}, "model.promise_dwh.stg__sse_with_past_due_events": {"database": "analytics-prod-328313", "schema": "finance", "name": "stg__sse_with_past_due_events", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/stg__sse_with_past_due_events.sql", "original_file_path": "models/finance/stg__sse_with_past_due_events.sql", "unique_id": "model.promise_dwh.stg__sse_with_past_due_events", "fqn": ["promise_dwh", "finance", "stg__sse_with_past_due_events"], "alias": "stg__sse_with_past_due_events", "checksum": {"name": "sha256", "checksum": "fcdf673990e777a995153dcdeca3fc8b45a1c8b147bb2e2532b52b99b13bf454"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["acct_identifier_jurisdiction_id", "acct_identifier_client_id"], "partition_by": {"granularity": "day", "data_type": "timestamp", "field": "effective_at"}}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "utility_upload_trigger", "schema": "finance", "partition_by": {"granularity": "day", "data_type": "timestamp", "field": "effective_at"}, "cluster_by": ["acct_identifier_jurisdiction_id", "acct_identifier_client_id"]}, "created_at": 1715566049.244471, "relation_name": "`analytics-prod-328313`.`finance`.`stg__sse_with_past_due_events`", "raw_code": "{{ config(\n    materialized='table',\n    partition_by={\n        \"field\": \"effective_at\",\n        \"data_type\": \"timestamp\",\n        \"granularity\": \"day\"\n    },\n    cluster_by=[\"acct_identifier_jurisdiction_id\", \"acct_identifier_client_id\"]\n) }}\n\n/*\n\nThis view is a clone of the core ledger: single sided entry. Except, instead of being a\ntrue ledger, this version adds \"phantom\" events of kind \"WentPastDue\" and \"ClearedPastDue\".\nThis breaks the ledger-ness because it means that things no longer balance to $0, but it's useful\nfor driving Client Historical State.\n\n*/\n\n-- First we filter the NDT from stg__scheduled_payments_lookback\n-- We only keep rows where the total amount is different than the amount\n-- the previous day (or the previous day was NULL because it was the first day we\n-- checked).\n\nWITH past_due_events AS (\n    SELECT\n        client_id,\n        obligation_id,\n        jurisdiction AS jurisdiction_id,\n        scheduled_payment_id,\n        acct_identifier_scheduled_for AS scheduled_for_raw,\n        TIMESTAMP(as_of_date) AS as_of_date,\n        total_amount_cents - COALESCE(previous_total_amount_cents, 0) AS change_from_previous\n    FROM {{ ref(\"stg__scheduled_payments_lookback\") }}\n    WHERE\n        total_amount_cents <> COALESCE(previous_total_amount_cents, 0)\n),\n\n-- This is a tiny helper CTE that lets us determine the first event_id on each date\n-- We could just make up an event_id for these phantom events, but this lets us use one\n-- that's _roughly_ right. event_id already isn't unique, so at least this lets us roughly\n-- maintain sequence.\nmin_event_id_per_date AS (\n    SELECT\n        DATE(effective_at) AS effective_date,\n        MIN(id) AS first_event_id\n    FROM\n        {{ ref(\"finance_event\") }}\n    GROUP BY 1\n)\n\n-- We SELECT * from single_sided_entry (but explicitly specify columns just for safety)\nSELECT\n    event_entry_id,\n    -- Shift event_id left by 5 places to create space for our phantom event_ids\n    event_id * 100000 AS event_id,\n    source_or_destination,\n    acct_identifier_client_id,\n    acct_identifier_jurisdiction_id,\n    acct_identifier_obligation_id,\n    acct_identifier_paid_at,\n    acct_identifier_payment_id,\n    acct_identifier_plan_id,\n    acct_identifier_provider,\n    acct_identifier_provider_payout_id,\n    acct_identifier_purpose_type,\n    acct_identifier_remit_id,\n    acct_identifier_scheduled_for,\n    acct_identifier_scheduled_payment_id,\n    acct_kind,\n    acct_type,\n    amount,\n    effective_at,\n    event_created_at,\n    event_finalized_at,\n    event_kind,\n    event_status\nFROM\n    {{ ref(\"single_sided_entry\") }}\n-- Then we UNION ALL in the new phantom events\nUNION ALL\nSELECT\n    NULL AS event_entry_id, -- Not used\n    -- Get the first event_id of the day from the min_event_id_per_date CTE\n    -- Left shift it 5 places\n    -- Add an integer based on the scheduled_payment_id (which will be unique per as_of_date)\n    first_event_id * 100000\n    + ROW_NUMBER() OVER (PARTITION BY as_of_date ORDER BY scheduled_payment_id) AS event_id,\n    CAST(NULL AS STRING) AS source_or_destination, -- Not used\n    client_id AS acct_identifier_client_id,\n    jurisdiction_id AS acct_identifier_jurisdiction_id,\n    obligation_id AS acct_identifier_obligation_id,\n    CAST(NULL AS TIMESTAMP) AS acct_identifier_paid_at,\n    NULL AS acct_identifier_payment_id,\n    NULL AS acct_identifier_plan_id,\n    CAST(NULL AS STRING) AS acct_identifier_provider,\n    NULL AS acct_identifier_provider_payout_id,\n    CAST(NULL AS STRING) AS acct_identifier_purpose_type,\n    NULL AS acct_identifier_remit_id,\n    scheduled_for_raw AS acct_identifier_scheduled_for,\n    scheduled_payment_id AS acct_identifier_scheduled_payment_id,\n    'ScheduledPaymentPast' AS acct_kind, -- This is a new account_kind we're inventing\n    CAST(NULL AS STRING) AS acct_type,\n    -- This will be positive when a payment goes past due,\n    -- and negative when that past due is cleared either by being cancelled or paid.\n    change_from_previous AS amount,\n    -- We only calculate past dueness once per day, at midnight UTC.\n    as_of_date AS effective_at,\n    CAST(NULL AS TIMESTAMP) AS event_created_at,\n    CAST(NULL AS TIMESTAMP) AS event_finalized_at,\n    -- We determine event_kind depending on whether the change from previous is positive/negative\n    IF(change_from_previous > 0, 'WentPastDue', 'ClearedPastDue') AS event_kind,\n    'Recorded' AS event_status\nFROM\n    past_due_events\nLEFT JOIN min_event_id_per_date ON effective_date = DATE(as_of_date)", "language": "sql", "refs": [{"name": "stg__scheduled_payments_lookback", "package": null, "version": null}, {"name": "finance_event", "package": null, "version": null}, {"name": "single_sided_entry", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.promise_dwh.stg__scheduled_payments_lookback", "model.promise_dwh.finance_event", "model.promise_dwh.single_sided_entry"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/stg__sse_with_past_due_events.sql", "compiled": true, "compiled_code": "\n\n/*\n\nThis view is a clone of the core ledger: single sided entry. Except, instead of being a\ntrue ledger, this version adds \"phantom\" events of kind \"WentPastDue\" and \"ClearedPastDue\".\nThis breaks the ledger-ness because it means that things no longer balance to $0, but it's useful\nfor driving Client Historical State.\n\n*/\n\n-- First we filter the NDT from stg__scheduled_payments_lookback\n-- We only keep rows where the total amount is different than the amount\n-- the previous day (or the previous day was NULL because it was the first day we\n-- checked).\n\nWITH past_due_events AS (\n    SELECT\n        client_id,\n        obligation_id,\n        jurisdiction AS jurisdiction_id,\n        scheduled_payment_id,\n        acct_identifier_scheduled_for AS scheduled_for_raw,\n        TIMESTAMP(as_of_date) AS as_of_date,\n        total_amount_cents - COALESCE(previous_total_amount_cents, 0) AS change_from_previous\n    FROM `analytics-prod-328313`.`finance`.`stg__scheduled_payments_lookback`\n    WHERE\n        total_amount_cents <> COALESCE(previous_total_amount_cents, 0)\n),\n\n-- This is a tiny helper CTE that lets us determine the first event_id on each date\n-- We could just make up an event_id for these phantom events, but this lets us use one\n-- that's _roughly_ right. event_id already isn't unique, so at least this lets us roughly\n-- maintain sequence.\nmin_event_id_per_date AS (\n    SELECT\n        DATE(effective_at) AS effective_date,\n        MIN(id) AS first_event_id\n    FROM\n        `analytics-prod-328313`.`finance`.`finance_event`\n    GROUP BY 1\n)\n\n-- We SELECT * from single_sided_entry (but explicitly specify columns just for safety)\nSELECT\n    event_entry_id,\n    -- Shift event_id left by 5 places to create space for our phantom event_ids\n    event_id * 100000 AS event_id,\n    source_or_destination,\n    acct_identifier_client_id,\n    acct_identifier_jurisdiction_id,\n    acct_identifier_obligation_id,\n    acct_identifier_paid_at,\n    acct_identifier_payment_id,\n    acct_identifier_plan_id,\n    acct_identifier_provider,\n    acct_identifier_provider_payout_id,\n    acct_identifier_purpose_type,\n    acct_identifier_remit_id,\n    acct_identifier_scheduled_for,\n    acct_identifier_scheduled_payment_id,\n    acct_kind,\n    acct_type,\n    amount,\n    effective_at,\n    event_created_at,\n    event_finalized_at,\n    event_kind,\n    event_status\nFROM\n    `analytics-prod-328313`.`finance`.`single_sided_entry`\n-- Then we UNION ALL in the new phantom events\nUNION ALL\nSELECT\n    NULL AS event_entry_id, -- Not used\n    -- Get the first event_id of the day from the min_event_id_per_date CTE\n    -- Left shift it 5 places\n    -- Add an integer based on the scheduled_payment_id (which will be unique per as_of_date)\n    first_event_id * 100000\n    + ROW_NUMBER() OVER (PARTITION BY as_of_date ORDER BY scheduled_payment_id) AS event_id,\n    CAST(NULL AS STRING) AS source_or_destination, -- Not used\n    client_id AS acct_identifier_client_id,\n    jurisdiction_id AS acct_identifier_jurisdiction_id,\n    obligation_id AS acct_identifier_obligation_id,\n    CAST(NULL AS TIMESTAMP) AS acct_identifier_paid_at,\n    NULL AS acct_identifier_payment_id,\n    NULL AS acct_identifier_plan_id,\n    CAST(NULL AS STRING) AS acct_identifier_provider,\n    NULL AS acct_identifier_provider_payout_id,\n    CAST(NULL AS STRING) AS acct_identifier_purpose_type,\n    NULL AS acct_identifier_remit_id,\n    scheduled_for_raw AS acct_identifier_scheduled_for,\n    scheduled_payment_id AS acct_identifier_scheduled_payment_id,\n    'ScheduledPaymentPast' AS acct_kind, -- This is a new account_kind we're inventing\n    CAST(NULL AS STRING) AS acct_type,\n    -- This will be positive when a payment goes past due,\n    -- and negative when that past due is cleared either by being cancelled or paid.\n    change_from_previous AS amount,\n    -- We only calculate past dueness once per day, at midnight UTC.\n    as_of_date AS effective_at,\n    CAST(NULL AS TIMESTAMP) AS event_created_at,\n    CAST(NULL AS TIMESTAMP) AS event_finalized_at,\n    -- We determine event_kind depending on whether the change from previous is positive/negative\n    IF(change_from_previous > 0, 'WentPastDue', 'ClearedPastDue') AS event_kind,\n    'Recorded' AS event_status\nFROM\n    past_due_events\nLEFT JOIN min_event_id_per_date ON effective_date = DATE(as_of_date)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.stg__scheduled_payments_lookback": {"database": "analytics-prod-328313", "schema": "finance", "name": "stg__scheduled_payments_lookback", "resource_type": "model", "package_name": "promise_dwh", "path": "finance/stg__scheduled_payments_lookback.sql", "original_file_path": "models/finance/stg__scheduled_payments_lookback.sql", "unique_id": "model.promise_dwh.stg__scheduled_payments_lookback", "fqn": ["promise_dwh", "finance", "stg__scheduled_payments_lookback"], "alias": "stg__scheduled_payments_lookback", "checksum": {"name": "sha256", "checksum": "1eef953f272b6800808ec6244c5c016d33f27784b4d544b7bab47d1b96364ac3"}, "config": {"enabled": true, "alias": null, "schema": "finance", "database": null, "tags": ["utility_upload_trigger"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction", "client_id"], "partition_by": {"field": "as_of_date", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "utility_upload_trigger", "schema": "finance", "partition_by": {"field": "as_of_date", "data_type": "date", "granularity": "day"}, "cluster_by": ["jurisdiction", "client_id"]}, "created_at": 1715566049.254072, "relation_name": "`analytics-prod-328313`.`finance`.`stg__scheduled_payments_lookback`", "raw_code": "{{ config(\n    materialized='table',\n    partition_by={\n        \"field\": \"as_of_date\",\n        \"data_type\": \"date\",\n        \"granularity\": \"day\"\n    },\n    cluster_by=[\"jurisdiction\", \"client_id\"]\n) }}\n\n/*\n\nThis table stages a look at every scheduled payment and determines how much of it was outstanding as of\neach day starting the SECOND day after it was due up through yesterday.\n\nFor a scheduled payment that is paid as scheduled, the outstanding amount will be $0 for every day\nchecked.\n\nThis uses a generous definition of past due (a full day elapses after the day the payment was scheduled for).\n*/\n\nWITH\ndate_spine AS ({{ generate_date_spine_sql() }}),\n\nlookback AS (\n    SELECT\n        sse_ids.acct_identifier_client_id AS client_id,\n        sse_ids.acct_identifier_obligation_id AS obligation_id,\n        finance.jurisdiction,\n        finance.acct_identifier_scheduled_payment_id AS scheduled_payment_id,\n        finance.acct_identifier_scheduled_for,\n        date_spine.day_start AS as_of_date,\n        DATE_ADD(DATE(finance.acct_identifier_scheduled_for), INTERVAL 2 DAY) AS target_date,\n        SUM(finance.amount) AS total_amount_cents\n    FROM\n        {{ ref('single_sided_entry') }} AS finance\n    LEFT JOIN {{ ref('sse_ids') }} AS sse_ids ON finance.event_id = sse_ids.event_id\n    LEFT JOIN date_spine AS date_spine\n        ON\n            DATE_TRUNC(finance.acct_identifier_scheduled_for, DAY) <= DATE_TRUNC(CURRENT_TIMESTAMP(), DAY)\n            AND finance.effective_at <= (TIMESTAMP(date_spine.day_start))\n    LEFT JOIN\n        {{ ref('customer') }} AS customer\n        ON\n            sse_ids.jurisdiction_x_client_id\n            = customer.jurisdiction_x_id\n    WHERE\n        1 = 1\n        -- Pretty generous definition of past due -- not past due until 2nd day after payment was scheduled\n        AND DATE(finance.acct_identifier_scheduled_for) <= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND DATE(date_spine.day_start) >= DATE_ADD(DATE(finance.acct_identifier_scheduled_for), INTERVAL 2 DAY)\n        -- Include pending payments so that if someone paid via ACH but it hasn't cleared, \n        -- we don't treat that as past due.\n        AND finance.event_status IN ('Pending', 'Recorded')\n        -- AND DATE(date_spine.day_start) = DATE('2024-05-01')\n        AND NOT is_test_account\n    GROUP BY\n        ALL\n)\n\nSELECT\n    *,\n    LAG(total_amount_cents)\n        OVER\n        (\n            PARTITION BY client_id, jurisdiction, scheduled_payment_id\n            ORDER BY as_of_date\n        ) AS previous_total_amount_cents\nFROM lookback", "language": "sql", "refs": [{"name": "single_sided_entry", "package": null, "version": null}, {"name": "sse_ids", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_date_spine_sql"], "nodes": ["model.promise_dwh.single_sided_entry", "model.promise_dwh.sse_ids", "model.promise_dwh.customer"]}, "compiled_path": "target/compiled/promise_dwh/models/finance/stg__scheduled_payments_lookback.sql", "compiled": true, "compiled_code": "\n\n/*\n\nThis table stages a look at every scheduled payment and determines how much of it was outstanding as of\neach day starting the SECOND day after it was due up through yesterday.\n\nFor a scheduled payment that is paid as scheduled, the outstanding amount will be $0 for every day\nchecked.\n\nThis uses a generous definition of past due (a full day elapses after the day the payment was scheduled for).\n*/\n\nWITH\ndate_spine AS (SELECT\n    *\nFROM\n    UNNEST(GENERATE_DATE_ARRAY('2020-10-01', '2025-12-31', INTERVAL 1 DAY)) as day_start),\n\nlookback AS (\n    SELECT\n        sse_ids.acct_identifier_client_id AS client_id,\n        sse_ids.acct_identifier_obligation_id AS obligation_id,\n        finance.jurisdiction,\n        finance.acct_identifier_scheduled_payment_id AS scheduled_payment_id,\n        finance.acct_identifier_scheduled_for,\n        date_spine.day_start AS as_of_date,\n        DATE_ADD(DATE(finance.acct_identifier_scheduled_for), INTERVAL 2 DAY) AS target_date,\n        SUM(finance.amount) AS total_amount_cents\n    FROM\n        `analytics-prod-328313`.`finance`.`single_sided_entry` AS finance\n    LEFT JOIN `analytics-prod-328313`.`finance`.`sse_ids` AS sse_ids ON finance.event_id = sse_ids.event_id\n    LEFT JOIN date_spine AS date_spine\n        ON\n            DATE_TRUNC(finance.acct_identifier_scheduled_for, DAY) <= DATE_TRUNC(CURRENT_TIMESTAMP(), DAY)\n            AND finance.effective_at <= (TIMESTAMP(date_spine.day_start))\n    LEFT JOIN\n        `analytics-prod-328313`.`promisepay`.`customer` AS customer\n        ON\n            sse_ids.jurisdiction_x_client_id\n            = customer.jurisdiction_x_id\n    WHERE\n        1 = 1\n        -- Pretty generous definition of past due -- not past due until 2nd day after payment was scheduled\n        AND DATE(finance.acct_identifier_scheduled_for) <= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND DATE(date_spine.day_start) >= DATE_ADD(DATE(finance.acct_identifier_scheduled_for), INTERVAL 2 DAY)\n        -- Include pending payments so that if someone paid via ACH but it hasn't cleared, \n        -- we don't treat that as past due.\n        AND finance.event_status IN ('Pending', 'Recorded')\n        -- AND DATE(date_spine.day_start) = DATE('2024-05-01')\n        AND NOT is_test_account\n    GROUP BY\n        ALL\n)\n\nSELECT\n    *,\n    LAG(total_amount_cents)\n        OVER\n        (\n            PARTITION BY client_id, jurisdiction, scheduled_payment_id\n            ORDER BY as_of_date\n        ) AS previous_total_amount_cents\nFROM lookback", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.promise_dwh.customer_communication_combined": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "customer_communication_combined", "resource_type": "model", "package_name": "promise_dwh", "path": "promisepay/customer_communication_combined.sql", "original_file_path": "models/promisepay/customer_communication_combined.sql", "unique_id": "model.promise_dwh.customer_communication_combined", "fqn": ["promise_dwh", "promisepay", "customer_communication_combined"], "alias": "customer_communication_combined", "checksum": {"name": "sha256", "checksum": "17b86f03f9c6424b4c677e09f8e7a29238f9ed7c8130bec1a253f3d37579e738"}, "config": {"enabled": true, "alias": null, "schema": "promisepay", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ jsonObjectKeys() }}", "transaction": true, "index": null}, {"sql": "{{ jsonNestedExtract() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction_x_client_id", "template_type", "template_name"], "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "pre-hook": ["{{ jsonObjectKeys() }}", "{{ jsonNestedExtract() }}"], "schema": "promisepay", "partition_by": {"field": "created_at", "data_type": "timestamp", "granularity": "day"}, "cluster_by": ["jurisdiction_x_client_id", "template_type", "template_name"]}, "created_at": 1715566151.078939, "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_communication_combined`", "raw_code": "-- noqa: disable=all\n-- disable linting from here\n{{\n   config(\n      materialized=\"table\",\n      partition_by={\n         \"field\": \"created_at\",\n         \"data_type\": \"timestamp\",\n         \"granularity\": \"day\"\n      },\n      cluster_by=[\"jurisdiction_x_client_id\", \"template_type\", \"template_name\"],\n   )\n}}\nWITH customer_communication_combined AS (\n    {%- if target.name == \"prod\" %}\n        {%- set ref_list = [\n            source('adhoc_tables', 'buffalo_data_enrichment_comms'),\n            ref('kustomer_emails_for_customer_communication'),\n            ref('customer_communication' )\n        ] %}\n    {%- else %}\n        {%- set ref_list = [\n            ref('customer_communication' )\n        ]\n        %}\n    {%- endif %} \n    {{ dbt_utils.union_relations(relations=ref_list) }}\n),\n-- noqa: enable=all\n-- re-enable linting from here\n\ncte AS (\n    SELECT\n        id,\n        customer_id,\n        template_id,\n        template_version_id,\n        channel,\n        created_at,\n        CASE\n            -- Capture other/custom links and convert to link/utm_content\n            WHEN \n                template_type = 'other' AND template_name = 'custom' AND utm_content IS NOT NULL\n                THEN utm_content\n            WHEN\n                template_type = 'welcome' AND template_name = 'custom'\n                THEN 'login_link'\n            WHEN\n                template_type = 'other'\n                AND template_name = 'final_disconnection_not_in_plan'\n                THEN template_name\n            WHEN\n                template_type = 'other'\n                AND template_name = 'custom'\n                AND jurisdiction = 'florida_lihwap_pay'\n                AND DATE_TRUNC(\n                    created_at, DAY\n                ) BETWEEN '2023-07-14' AND '2023-07-17'\n                THEN 'relief_opt_out_fllihwap'\n            ELSE template_name\n        END AS template_name,\n        CASE\n            -- Capture other/custom links and convert to link/utm_content\n            WHEN \n                template_type = 'other' AND template_name = 'custom' AND utm_content IS NOT NULL\n                THEN 'ops_link'\n            WHEN\n                template_type = 'welcome' AND template_name = 'custom'\n                THEN 'other'\n            WHEN\n                template_type = 'other'\n                AND template_name = 'final_disconnection_not_in_plan'\n                THEN 'welcome'\n            WHEN\n                template_type = 'other'\n                AND template_name = 'custom'\n                AND jurisdiction = 'florida_lihwap_pay'\n                AND DATE_TRUNC(\n                    created_at, DAY\n                ) BETWEEN '2023-07-14' AND '2023-07-17'\n                THEN 'other'\n            ELSE template_type\n        END AS template_type,\n        payment_id,\n        payment_key,\n        jurisdiction\n    FROM\n        customer_communication_combined\n)\n\nSELECT\n    * EXCEPT (jurisdiction),\n    REPLACE(jurisdiction, '_', '') AS jurisdiction,\n    CONCAT(REPLACE(jurisdiction, '_', ''), customer_id)\n        AS jurisdiction_x_client_id\nFROM cte", "language": "sql", "refs": [{"name": "kustomer_emails_for_customer_communication", "package": null, "version": null}, {"name": "customer_communication", "package": null, "version": null}], "sources": [["adhoc_tables", "buffalo_data_enrichment_comms"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.promise_dwh.jsonObjectKeys", "macro.promise_dwh.jsonNestedExtract"], "nodes": ["source.promise_dwh.adhoc_tables.buffalo_data_enrichment_comms", "model.promise_dwh.kustomer_emails_for_customer_communication", "model.promise_dwh.customer_communication"]}, "compiled_path": "target/compiled/promise_dwh/models/promisepay/customer_communication_combined.sql", "compiled": true, "compiled_code": "-- noqa: disable=all\n-- disable linting from here\n\nWITH customer_communication_combined AS ( \n    \n\n        (\n            select\n                cast('`analytics-prod-328313`.`adhoc_tables`.`buffalo_data_enrichment_comms`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`template_id` as INT64) as `template_id` ,\n                    cast(`template_version_id` as STRING) as `template_version_id` ,\n                    cast(`channel` as STRING) as `channel` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`template_name` as STRING) as `template_name` ,\n                    cast(`template_type` as STRING) as `template_type` ,\n                    cast(`payment_id` as STRING) as `payment_id` ,\n                    cast(`payment_key` as STRING) as `payment_key` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(null as STRING) as `utm_content` \n\n            from `analytics-prod-328313`.`adhoc_tables`.`buffalo_data_enrichment_comms`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`kustomer`.`kustomer_emails_for_customer_communication`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`template_id` as INT64) as `template_id` ,\n                    cast(`template_version_id` as STRING) as `template_version_id` ,\n                    cast(`channel` as STRING) as `channel` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`template_name` as STRING) as `template_name` ,\n                    cast(`template_type` as STRING) as `template_type` ,\n                    cast(`payment_id` as STRING) as `payment_id` ,\n                    cast(`payment_key` as STRING) as `payment_key` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(null as STRING) as `utm_content` \n\n            from `analytics-prod-328313`.`kustomer`.`kustomer_emails_for_customer_communication`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`promisepay`.`customer_communication`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`template_id` as INT64) as `template_id` ,\n                    cast(`template_version_id` as STRING) as `template_version_id` ,\n                    cast(`channel` as STRING) as `channel` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`template_name` as STRING) as `template_name` ,\n                    cast(`template_type` as STRING) as `template_type` ,\n                    cast(`payment_id` as STRING) as `payment_id` ,\n                    cast(`payment_key` as STRING) as `payment_key` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`utm_content` as STRING) as `utm_content` \n\n            from `analytics-prod-328313`.`promisepay`.`customer_communication`\n\n            \n        )\n\n        \n),\n-- noqa: enable=all\n-- re-enable linting from here\n\ncte AS (\n    SELECT\n        id,\n        customer_id,\n        template_id,\n        template_version_id,\n        channel,\n        created_at,\n        CASE\n            -- Capture other/custom links and convert to link/utm_content\n            WHEN \n                template_type = 'other' AND template_name = 'custom' AND utm_content IS NOT NULL\n                THEN utm_content\n            WHEN\n                template_type = 'welcome' AND template_name = 'custom'\n                THEN 'login_link'\n            WHEN\n                template_type = 'other'\n                AND template_name = 'final_disconnection_not_in_plan'\n                THEN template_name\n            WHEN\n                template_type = 'other'\n                AND template_name = 'custom'\n                AND jurisdiction = 'florida_lihwap_pay'\n                AND DATE_TRUNC(\n                    created_at, DAY\n                ) BETWEEN '2023-07-14' AND '2023-07-17'\n                THEN 'relief_opt_out_fllihwap'\n            ELSE template_name\n        END AS template_name,\n        CASE\n            -- Capture other/custom links and convert to link/utm_content\n            WHEN \n                template_type = 'other' AND template_name = 'custom' AND utm_content IS NOT NULL\n                THEN 'ops_link'\n            WHEN\n                template_type = 'welcome' AND template_name = 'custom'\n                THEN 'other'\n            WHEN\n                template_type = 'other'\n                AND template_name = 'final_disconnection_not_in_plan'\n                THEN 'welcome'\n            WHEN\n                template_type = 'other'\n                AND template_name = 'custom'\n                AND jurisdiction = 'florida_lihwap_pay'\n                AND DATE_TRUNC(\n                    created_at, DAY\n                ) BETWEEN '2023-07-14' AND '2023-07-17'\n                THEN 'other'\n            ELSE template_type\n        END AS template_type,\n        payment_id,\n        payment_key,\n        jurisdiction\n    FROM\n        customer_communication_combined\n)\n\nSELECT\n    * EXCEPT (jurisdiction),\n    REPLACE(jurisdiction, '_', '') AS jurisdiction,\n    CONCAT(REPLACE(jurisdiction, '_', ''), customer_id)\n        AS jurisdiction_x_client_id\nFROM cte", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "snapshot.promise_dwh.jurisdiction_metadata_historical": {"database": "analytics-prod-328313", "schema": "promisepay", "name": "jurisdiction_metadata_historical", "resource_type": "snapshot", "package_name": "promise_dwh", "path": "promisepay/jurisdiction_metadata.sql", "original_file_path": "snapshots/promisepay/jurisdiction_metadata.sql", "unique_id": "snapshot.promise_dwh.jurisdiction_metadata_historical", "fqn": ["promise_dwh", "promisepay", "jurisdiction_metadata", "jurisdiction_metadata_historical"], "alias": "jurisdiction_metadata_historical", "checksum": {"name": "sha256", "checksum": "686d02c9f7b0c3bad0f4f26b27eaf1b3d716985b4e70284e06ac05acb11649f1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "jurisdiction", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "check", "target_schema": "promisepay", "target_database": null, "updated_at": null, "check_cols": "all"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "promisepay", "strategy": "check", "unique_key": "jurisdiction", "check_cols": "all"}, "created_at": 1715566151.1519291, "relation_name": "`analytics-prod-328313`.`promisepay`.`jurisdiction_metadata_historical`", "raw_code": " -- noqa\n\n{{\n    config(\n        target_schema='promisepay',\n        strategy='check',\n        unique_key='jurisdiction',\n        check_cols='all',\n    )\n}}\nSELECT *\n{% if target.name=='dev' %}\n    EXCEPT(URL),\n    CASE URL\n      WHEN 'https://louisvillewater.promise-pay.com' THEN 'https://lw-dev.promise-pay.com'\n      ELSE REGEXP_REPLACE(URL, r'(\\.promise-pay\\.com|\\.com)', '-dev\\\\1') \n    END AS URL\n{% endif %}\nFROM {{ ref('jurisdiction_metadata') }}\n\n", "language": "sql", "refs": [{"name": "jurisdiction_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.promise_dwh.jurisdiction_metadata"]}, "compiled_path": null, "compiled": true, "compiled_code": " -- noqa\n\n\nSELECT *\n\nFROM `analytics-prod-328313`.`promisepay`.`jurisdiction_metadata`\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}}, "sources": {"source.promise_dwh.adhoc_tables.buffalo_data_enrichment_comms": {"database": "analytics-prod-328313", "schema": "adhoc_tables", "name": "buffalo_data_enrichment_comms", "resource_type": "source", "package_name": "promise_dwh", "path": "models/promisepay/schema.yml", "original_file_path": "models/promisepay/schema.yml", "unique_id": "source.promise_dwh.adhoc_tables.buffalo_data_enrichment_comms", "fqn": ["promise_dwh", "promisepay", "adhoc_tables", "buffalo_data_enrichment_comms"], "source_name": "adhoc_tables", "source_description": "", "loader": "", "identifier": "buffalo_data_enrichment_comms", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-prod-328313`.`adhoc_tables`.`buffalo_data_enrichment_comms`", "created_at": 1715379617.023026}, "source.promise_dwh.finance.event": {"database": "analytics-dev-328216", "schema": "finance_prod_public", "name": "event", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance.event", "fqn": ["promise_dwh", "finance", "finance", "event"], "source_name": "finance", "source_description": "", "loader": "", "identifier": "event", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_prod_public`.`event`", "created_at": 1715379617.023127}, "source.promise_dwh.finance.ledger": {"database": "analytics-dev-328216", "schema": "finance_prod_public", "name": "ledger", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance.ledger", "fqn": ["promise_dwh", "finance", "finance", "ledger"], "source_name": "finance", "source_description": "", "loader": "", "identifier": "singlesidedentry", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_prod_public`.`singlesidedentry`", "created_at": 1715379617.023201}, "source.promise_dwh.finance.api_request": {"database": "analytics-dev-328216", "schema": "finance_prod_public", "name": "api_request", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance.api_request", "fqn": ["promise_dwh", "finance", "finance", "api_request"], "source_name": "finance", "source_description": "", "loader": "", "identifier": "financeapirequest", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_prod_public`.`financeapirequest`", "created_at": 1715379617.023268}, "source.promise_dwh.finance.plan": {"database": "analytics-dev-328216", "schema": "finance_prod_public", "name": "plan", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance.plan", "fqn": ["promise_dwh", "finance", "finance", "plan"], "source_name": "finance", "source_description": "", "loader": "", "identifier": "plan", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_prod_public`.`plan`", "created_at": 1715379617.023332}, "source.promise_dwh.finance.payment_attempt": {"database": "analytics-dev-328216", "schema": "finance_prod_public", "name": "payment_attempt", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance.payment_attempt", "fqn": ["promise_dwh", "finance", "finance", "payment_attempt"], "source_name": "finance", "source_description": "", "loader": "", "identifier": "paymentattempt", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_prod_public`.`paymentattempt`", "created_at": 1715379617.023393}, "source.promise_dwh.finance.payment_method": {"database": "analytics-dev-328216", "schema": "finance_prod_public", "name": "payment_method", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance.payment_method", "fqn": ["promise_dwh", "finance", "finance", "payment_method"], "source_name": "finance", "source_description": "", "loader": "", "identifier": "paymentmethod", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_prod_public`.`paymentmethod`", "created_at": 1715379617.0234518}, "source.promise_dwh.finance.refund_attempt": {"database": "analytics-dev-328216", "schema": "finance_prod_public", "name": "refund_attempt", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance.refund_attempt", "fqn": ["promise_dwh", "finance", "finance", "refund_attempt"], "source_name": "finance", "source_description": "", "loader": "", "identifier": "refundattempt", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_prod_public`.`refundattempt`", "created_at": 1715379617.023509}, "source.promise_dwh.finance.remit_attempt": {"database": "analytics-dev-328216", "schema": "finance_prod_public", "name": "remit_attempt", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance.remit_attempt", "fqn": ["promise_dwh", "finance", "finance", "remit_attempt"], "source_name": "finance", "source_description": "", "loader": "", "identifier": "remitattempt", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_prod_public`.`remitattempt`", "created_at": 1715379617.023566}, "source.promise_dwh.finance.scheduled_payment_entity": {"database": "analytics-dev-328216", "schema": "finance_prod_public", "name": "scheduled_payment_entity", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance.scheduled_payment_entity", "fqn": ["promise_dwh", "finance", "finance", "scheduled_payment_entity"], "source_name": "finance", "source_description": "", "loader": "", "identifier": "scheduledpaymententity", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_prod_public`.`scheduledpaymententity`", "created_at": 1715379617.0236218}, "source.promise_dwh.finance.payment_provider_balance": {"database": "analytics-dev-328216", "schema": "finance_prod_public", "name": "payment_provider_balance", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance.payment_provider_balance", "fqn": ["promise_dwh", "finance", "finance", "payment_provider_balance"], "source_name": "finance", "source_description": "", "loader": "", "identifier": "paymentproviderbalance", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_prod_public`.`paymentproviderbalance`", "created_at": 1715379617.023678}, "source.promise_dwh.finance_dev.event": {"database": "analytics-dev-328216", "schema": "finance_dev_public", "name": "event", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance_dev.event", "fqn": ["promise_dwh", "finance", "finance_dev", "event"], "source_name": "finance_dev", "source_description": "", "loader": "", "identifier": "event", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_dev_public`.`event`", "created_at": 1715379617.023734}, "source.promise_dwh.finance_dev.ledger": {"database": "analytics-dev-328216", "schema": "finance_dev_public", "name": "ledger", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance_dev.ledger", "fqn": ["promise_dwh", "finance", "finance_dev", "ledger"], "source_name": "finance_dev", "source_description": "", "loader": "", "identifier": "singlesidedentry", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_dev_public`.`singlesidedentry`", "created_at": 1715379617.023791}, "source.promise_dwh.finance_dev.api_request": {"database": "analytics-dev-328216", "schema": "finance_dev_public", "name": "api_request", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance_dev.api_request", "fqn": ["promise_dwh", "finance", "finance_dev", "api_request"], "source_name": "finance_dev", "source_description": "", "loader": "", "identifier": "financeapirequest", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_dev_public`.`financeapirequest`", "created_at": 1715379617.0238469}, "source.promise_dwh.finance_dev.plan": {"database": "analytics-dev-328216", "schema": "finance_dev_public", "name": "plan", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance_dev.plan", "fqn": ["promise_dwh", "finance", "finance_dev", "plan"], "source_name": "finance_dev", "source_description": "", "loader": "", "identifier": "plan", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_dev_public`.`plan`", "created_at": 1715379617.023902}, "source.promise_dwh.finance_dev.payment_attempt": {"database": "analytics-dev-328216", "schema": "finance_dev_public", "name": "payment_attempt", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance_dev.payment_attempt", "fqn": ["promise_dwh", "finance", "finance_dev", "payment_attempt"], "source_name": "finance_dev", "source_description": "", "loader": "", "identifier": "paymentattempt", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_dev_public`.`paymentattempt`", "created_at": 1715379617.023958}, "source.promise_dwh.finance_dev.payment_method": {"database": "analytics-dev-328216", "schema": "finance_dev_public", "name": "payment_method", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance_dev.payment_method", "fqn": ["promise_dwh", "finance", "finance_dev", "payment_method"], "source_name": "finance_dev", "source_description": "", "loader": "", "identifier": "paymentmethod", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_dev_public`.`paymentmethod`", "created_at": 1715379617.024012}, "source.promise_dwh.finance_dev.refund_attempt": {"database": "analytics-dev-328216", "schema": "finance_dev_public", "name": "refund_attempt", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance_dev.refund_attempt", "fqn": ["promise_dwh", "finance", "finance_dev", "refund_attempt"], "source_name": "finance_dev", "source_description": "", "loader": "", "identifier": "refundattempt", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_dev_public`.`refundattempt`", "created_at": 1715379617.024068}, "source.promise_dwh.finance_dev.remit_attempt": {"database": "analytics-dev-328216", "schema": "finance_dev_public", "name": "remit_attempt", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance_dev.remit_attempt", "fqn": ["promise_dwh", "finance", "finance_dev", "remit_attempt"], "source_name": "finance_dev", "source_description": "", "loader": "", "identifier": "remitattempt", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_dev_public`.`remitattempt`", "created_at": 1715379617.024123}, "source.promise_dwh.finance_dev.scheduled_payment_entity": {"database": "analytics-dev-328216", "schema": "finance_dev_public", "name": "scheduled_payment_entity", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance_dev.scheduled_payment_entity", "fqn": ["promise_dwh", "finance", "finance_dev", "scheduled_payment_entity"], "source_name": "finance_dev", "source_description": "", "loader": "", "identifier": "scheduledpaymententity", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_dev_public`.`scheduledpaymententity`", "created_at": 1715379617.0241768}, "source.promise_dwh.finance_dev.payment_provider_balance": {"database": "analytics-dev-328216", "schema": "finance_dev_public", "name": "payment_provider_balance", "resource_type": "source", "package_name": "promise_dwh", "path": "models/finance/finance.yml", "original_file_path": "models/finance/finance.yml", "unique_id": "source.promise_dwh.finance_dev.payment_provider_balance", "fqn": ["promise_dwh", "finance", "finance_dev", "payment_provider_balance"], "source_name": "finance_dev", "source_description": "", "loader": "", "identifier": "paymentproviderbalance", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`finance_dev_public`.`paymentproviderbalance`", "created_at": 1715379617.02423}, "source.promise_dwh.stripe.balance_transaction": {"database": "analytics-dev-328216", "schema": "stripe", "name": "balance_transaction", "resource_type": "source", "package_name": "promise_dwh", "path": "models/stripe/stripe.yml", "original_file_path": "models/stripe/stripe.yml", "unique_id": "source.promise_dwh.stripe.balance_transaction", "fqn": ["promise_dwh", "stripe", "stripe", "balance_transaction"], "source_name": "stripe", "source_description": "", "loader": "", "identifier": "balance_transaction", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`stripe`.`balance_transaction`", "created_at": 1715379617.0242848}, "source.promise_dwh.stripe.charge": {"database": "analytics-dev-328216", "schema": "stripe", "name": "charge", "resource_type": "source", "package_name": "promise_dwh", "path": "models/stripe/stripe.yml", "original_file_path": "models/stripe/stripe.yml", "unique_id": "source.promise_dwh.stripe.charge", "fqn": ["promise_dwh", "stripe", "stripe", "charge"], "source_name": "stripe", "source_description": "", "loader": "", "identifier": "charge", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`stripe`.`charge`", "created_at": 1715379617.024339}, "source.promise_dwh.stripe.customer": {"database": "analytics-dev-328216", "schema": "stripe", "name": "customer", "resource_type": "source", "package_name": "promise_dwh", "path": "models/stripe/stripe.yml", "original_file_path": "models/stripe/stripe.yml", "unique_id": "source.promise_dwh.stripe.customer", "fqn": ["promise_dwh", "stripe", "stripe", "customer"], "source_name": "stripe", "source_description": "", "loader": "", "identifier": "customer", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`stripe`.`customer`", "created_at": 1715379617.0243928}, "source.promise_dwh.stripe.dispute_balance_transaction": {"database": "analytics-dev-328216", "schema": "stripe", "name": "dispute_balance_transaction", "resource_type": "source", "package_name": "promise_dwh", "path": "models/stripe/stripe.yml", "original_file_path": "models/stripe/stripe.yml", "unique_id": "source.promise_dwh.stripe.dispute_balance_transaction", "fqn": ["promise_dwh", "stripe", "stripe", "dispute_balance_transaction"], "source_name": "stripe", "source_description": "", "loader": "", "identifier": "dispute_balance_transaction", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`stripe`.`dispute_balance_transaction`", "created_at": 1715379617.024447}, "source.promise_dwh.stripe.dispute": {"database": "analytics-dev-328216", "schema": "stripe", "name": "dispute", "resource_type": "source", "package_name": "promise_dwh", "path": "models/stripe/stripe.yml", "original_file_path": "models/stripe/stripe.yml", "unique_id": "source.promise_dwh.stripe.dispute", "fqn": ["promise_dwh", "stripe", "stripe", "dispute"], "source_name": "stripe", "source_description": "", "loader": "", "identifier": "dispute", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`stripe`.`dispute`", "created_at": 1715379617.0245}, "source.promise_dwh.stripe.payment_intent": {"database": "analytics-dev-328216", "schema": "stripe", "name": "payment_intent", "resource_type": "source", "package_name": "promise_dwh", "path": "models/stripe/stripe.yml", "original_file_path": "models/stripe/stripe.yml", "unique_id": "source.promise_dwh.stripe.payment_intent", "fqn": ["promise_dwh", "stripe", "stripe", "payment_intent"], "source_name": "stripe", "source_description": "", "loader": "", "identifier": "payment_intent", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`stripe`.`payment_intent`", "created_at": 1715379617.024554}, "source.promise_dwh.stripe.refund": {"database": "analytics-dev-328216", "schema": "stripe", "name": "refund", "resource_type": "source", "package_name": "promise_dwh", "path": "models/stripe/stripe.yml", "original_file_path": "models/stripe/stripe.yml", "unique_id": "source.promise_dwh.stripe.refund", "fqn": ["promise_dwh", "stripe", "stripe", "refund"], "source_name": "stripe", "source_description": "", "loader": "", "identifier": "refund", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`stripe`.`refund`", "created_at": 1715379617.024608}, "source.promise_dwh.stripe.transaction_fee_detail": {"database": "analytics-dev-328216", "schema": "stripe", "name": "transaction_fee_detail", "resource_type": "source", "package_name": "promise_dwh", "path": "models/stripe/stripe.yml", "original_file_path": "models/stripe/stripe.yml", "unique_id": "source.promise_dwh.stripe.transaction_fee_detail", "fqn": ["promise_dwh", "stripe", "stripe", "transaction_fee_detail"], "source_name": "stripe", "source_description": "", "loader": "", "identifier": "transaction_fee_detail", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`stripe`.`transaction_fee_detail`", "created_at": 1715379617.024661}, "source.promise_dwh.template_service.template": {"database": "analytics-dev-328216", "schema": "platform_prod_template", "name": "template", "resource_type": "source", "package_name": "promise_dwh", "path": "models/template_service/template_service.yml", "original_file_path": "models/template_service/template_service.yml", "unique_id": "source.promise_dwh.template_service.template", "fqn": ["promise_dwh", "template_service", "template_service", "template"], "source_name": "template_service", "source_description": "", "loader": "", "identifier": "template", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`platform_prod_template`.`template`", "created_at": 1715379617.024715}, "source.promise_dwh.template_service.template_text": {"database": "analytics-dev-328216", "schema": "platform_prod_template", "name": "template_text", "resource_type": "source", "package_name": "promise_dwh", "path": "models/template_service/template_service.yml", "original_file_path": "models/template_service/template_service.yml", "unique_id": "source.promise_dwh.template_service.template_text", "fqn": ["promise_dwh", "template_service", "template_service", "template_text"], "source_name": "template_service", "source_description": "", "loader": "", "identifier": "template_version", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`platform_prod_template`.`template_version`", "created_at": 1715379617.024768}, "source.promise_dwh.template_service.template_fields": {"database": "analytics-dev-328216", "schema": "platform_prod_template", "name": "template_fields", "resource_type": "source", "package_name": "promise_dwh", "path": "models/template_service/template_service.yml", "original_file_path": "models/template_service/template_service.yml", "unique_id": "source.promise_dwh.template_service.template_fields", "fqn": ["promise_dwh", "template_service", "template_service", "template_fields"], "source_name": "template_service", "source_description": "", "loader": "", "identifier": "template_version_field", "quoting": {"database": true, "schema": true, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-dev-328216`.`platform_prod_template`.`template_version_field`", "created_at": 1715379617.0248199}}, "macros": {"macro.promise_dwh.get_all_jurisdictions": {"name": "get_all_jurisdictions", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/get_all_juridictions.sql", "original_file_path": "macros/get_all_juridictions.sql", "unique_id": "macro.promise_dwh.get_all_jurisdictions", "macro_sql": "{% macro get_all_jurisdictions(append_string = \"\") %}\n    {% set all_items = [] %}\n    {% set jurisdiction_map = var('jurisdiction-map') %}\n    {% for key, value in jurisdiction_map.items() %}\n        {% do all_items.append(key + append_string) %}\n    {% endfor %}\n    {{ return(all_items|unique) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.9745831, "supported_languages": null}, "macro.promise_dwh.generate_deltas_vtwo": {"name": "generate_deltas_vtwo", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/generate_deltas_vtwo.sql", "original_file_path": "macros/generate_deltas_vtwo.sql", "unique_id": "macro.promise_dwh.generate_deltas_vtwo", "macro_sql": "{% macro generate_deltas_vtwo(jurx_enum_key, jurx_fields) %}\n{{\n  config(\n    partition_by={\n      \"field\": \"valid_starting\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n    },\n    cluster_by = ['account_number_hashed'],\n    materialized = 'table',\n    dataset = 'utility_data',\n    tags = jurx_enum_key + '_utility_upload'\n  )\n}}\n\n    {#- Check if this target is enabled #}\n    {%- if target.name not in var('jurisdiction-map')[jurx_enum_key] or var('jurisdiction-map')[jurx_enum_key][target.name] == '' %}\n        {{ config (enabled=false) }}\n    {%- endif %}\n\n    {%- if jurx_enum_key == 'louisville_water' %}\n    {%- set from_table = \"`\" + var(\"jurisdiction-map\")[jurx_enum_key][target.name] + \".staging.complete` WHERE jurisdiction='louisville_water'\" %}\n{%- else %}\n        {%- set from_table = ref(jurx_enum_key + '_complete_with_eligibility') %}\n    {%- endif %}\n\nWITH dr AS (SELECT * FROM {{ ref(jurx_enum_key + '_delta_rows') }}),\nc AS (SELECT * FROM {{ from_table }})\n\n{{ generate_uniform_utility_data( looker_name(jurx_enum_key), jurx_fields) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.promise_dwh.generate_uniform_utility_data", "macro.promise_dwh.looker_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.9760041, "supported_languages": null}, "macro.promise_dwh.federated_table": {"name": "federated_table", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/federate_table.sql", "original_file_path": "macros/federate_table.sql", "unique_id": "macro.promise_dwh.federated_table", "macro_sql": "{% macro federated_table(connection, schema_table) %}\n    EXTERNAL_QUERY(\"{{ connection }}\", \n    '''\n        SELECT\n            *\n        FROM {{ schema_table }}'''\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.976236, "supported_languages": null}, "macro.promise_dwh.get_all_project_ids": {"name": "get_all_project_ids", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/get_all_project_ids.sql", "original_file_path": "macros/get_all_project_ids.sql", "unique_id": "macro.promise_dwh.get_all_project_ids", "macro_sql": "{% macro get_all_project_ids() %}\n    {% set all_items = [] %}\n    {% set jurisdiction_map = var('jurisdiction-map') %}\n    {% for key, value in jurisdiction_map.items() %}\n        {% if target.name in value and value[target.name] != '' %}\n            {% do all_items.append(value[target.name]) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(all_items|unique) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.976862, "supported_languages": null}, "macro.promise_dwh.create_complete_account_records": {"name": "create_complete_account_records", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/create_complete_account_records.sql", "original_file_path": "macros/create_complete_account_records.sql", "unique_id": "macro.promise_dwh.create_complete_account_records", "macro_sql": "{% macro create_complete_account_records(jurx_enum_key, past_due_field, eligibility_field=None) %}\n    {% set project_key = var(\"jurisdiction-map\")[jurx_enum_key][target.name] %}\n\n    {#- We don't need to check if the target.name is defined because it is handled in the macro that calls this #}\nWITH jurx_complete AS (\n    SELECT * FROM `{{ project_key }}.staging.complete`\n    WHERE jurisdiction = '{{ jurx_enum_key }}'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n{% if is_incremental() -%}\n    -- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n    {%- endif %}\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        {% if eligibility_field -%}\n        COALESCE({{ eligibility_field }}, 'undefined') != 'N' AND \n    {%- endif %}\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN {{ past_due_field }} > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN {{ past_due_field }} = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN {{ past_due_field }} is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN {{ past_due_field }} > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN {{ past_due_field }} = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN {{ past_due_field }} is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n{% if is_incremental() -%}\n    -- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.978963, "supported_languages": null}, "macro.promise_dwh.inject_template_text": {"name": "inject_template_text", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/inject_template_text.sql", "original_file_path": "macros/inject_template_text.sql", "unique_id": "macro.promise_dwh.inject_template_text", "macro_sql": "{% macro inject_template_text() %}\n    \n    CREATE OR REPLACE FUNCTION {{ this.schema }}.insert_fields(template_text STRING, fields ARRAY<STRING>)\n    RETURNS STRING\n    LANGUAGE js\n    {% raw %}\n    AS '''\n    let respText = template_text;\n    if (fields != null) {\n        for (i = 0; i < fields.length; i++) {\n            respText = respText.replace(`{{{ ${i} }}}`, `{{{` + fields[i] + `}}}`)\n            }\n    }\n    return respText;\n    ''';\n    {% endraw %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.979161, "supported_languages": null}, "macro.promise_dwh.generate_last_value_sql": {"name": "generate_last_value_sql", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/generate_last_value_sql.sql", "original_file_path": "macros/generate_last_value_sql.sql", "unique_id": "macro.promise_dwh.generate_last_value_sql", "macro_sql": "{%- macro generate_last_value_sql(field) -%}\n    LAST_VALUE({{ field }} IGNORE NULLS) OVER (client_window) as {{ field }},\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.979306, "supported_languages": null}, "macro.promise_dwh.looker_name": {"name": "looker_name", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/looker_name.sql", "original_file_path": "macros/looker_name.sql", "unique_id": "macro.promise_dwh.looker_name", "macro_sql": "{%- macro looker_name(enum_key) -%}\n    {{ enum_key | replace(\"_\", \"\") | replace(\"-\", \"\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.9794948, "supported_languages": null}, "macro.promise_dwh.window_back_full_days": {"name": "window_back_full_days", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/window_back_full_days.sql", "original_file_path": "macros/window_back_full_days.sql", "unique_id": "macro.promise_dwh.window_back_full_days", "macro_sql": "{% macro window_back_full_days(column_name,window_days=3) %}\n    TIMESTAMP_SUB(TIMESTAMP_TRUNC({{ column_name }}, DAY), INTERVAL {{ window_days }} DAY)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.979659, "supported_languages": null}, "macro.promise_dwh.generate_mr_data": {"name": "generate_mr_data", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/generate_mr_data.sql", "original_file_path": "macros/generate_mr_data.sql", "unique_id": "macro.promise_dwh.generate_mr_data", "macro_sql": "{% macro generate_mr_data(jurx_enum_key) %}\n{{\n  config(\n    materialized = 'table',\n    dataset = 'utility_data',\n    tags = jurx_enum_key + '_utility_upload',\n    cluster_by = ['jurisdiction']\n  )\n}}\n\n    {#- Check if this target is enabled #}\n    {%- if var('jurisdiction-map')[jurx_enum_key][target.name] == '' or target.name not in var('jurisdiction-map')[jurx_enum_key] %}\n        {{ config (enabled=false) }}\n    {%- endif %}\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM {{ ref(jurx_enum_key + '_complete_with_eligibility') }})\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n{{ get_mr_dates( looker_name(jurx_enum_key) ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.promise_dwh.get_mr_dates", "macro.promise_dwh.looker_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.980331, "supported_languages": null}, "macro.promise_dwh.get_finance_source": {"name": "get_finance_source", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/get_finance_source.sql", "original_file_path": "macros/get_finance_source.sql", "unique_id": "macro.promise_dwh.get_finance_source", "macro_sql": "{% macro get_finance_source(table_name) %}\n    {% if target.name == \"prod\" %}\n        {% set source_schema = \"finance\" %}\n    {% else %}\n        {% set source_schema = \"finance_dev\" %}\n    {% endif %}\n    {{ source(source_schema, table_name) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.9806871, "supported_languages": null}, "macro.promise_dwh.get_mr_dates": {"name": "get_mr_dates", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/get_mr_dates.sql", "original_file_path": "macros/get_mr_dates.sql", "unique_id": "macro.promise_dwh.get_mr_dates", "macro_sql": "{% macro get_mr_dates(jurisdiction) %}\nSELECT \n  '{{ jurisdiction }}' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.98083, "supported_languages": null}, "macro.promise_dwh.remove_pay_dev": {"name": "remove_pay_dev", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/remove_pay_dev.sql", "original_file_path": "macros/remove_pay_dev.sql", "unique_id": "macro.promise_dwh.remove_pay_dev", "macro_sql": "{%- macro remove_pay_dev(gcp_target_key) -%}\n    {{ gcp_target_key | replace(\"-dev\", \"\") | replace(\"-pay\", \"\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.9810188, "supported_languages": null}, "macro.promise_dwh.jsonNestedExtract": {"name": "jsonNestedExtract", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/jsonNestedExtract.sql", "original_file_path": "macros/jsonNestedExtract.sql", "unique_id": "macro.promise_dwh.jsonNestedExtract", "macro_sql": "{% macro jsonNestedExtract() %}\n    CREATE OR REPLACE FUNCTION {{ this.schema }}.jsonNestedExtract(input STRING)\n    RETURNS string\n    LANGUAGE js AS \"\"\"\n    function flattenObj(obj, parent = '', res = {}){\n    for(let key in obj){\n        let propName = parent ? parent + '.' + key : key;\n        if(obj[key] != null && typeof obj[key] == 'object'){\n            flattenObj(obj[key], propName, res);\n        } else {\n            res[propName] = obj[key];\n        }\n    }\n    return JSON.stringify(res);\n  }\n  return flattenObj(JSON.parse(input));\n    \"\"\";\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.981228, "supported_languages": null}, "macro.promise_dwh.redact_message": {"name": "redact_message", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/message_redactor.sql", "original_file_path": "macros/message_redactor.sql", "unique_id": "macro.promise_dwh.redact_message", "macro_sql": "{% macro redact_message(column_name) %}\nREGEXP_REPLACE( \n        REGEXP_REPLACE( \n            REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REGEXP_REPLACE(\n                            REGEXP_REPLACE(\n                                REGEXP_REPLACE(\n                                    REGEXP_REPLACE(\n                                        REGEXP_REPLACE(\n                                            REGEXP_REPLACE({{ column_name }}, r'customer=[0-9]*', 'customer=[REDACTED]'),\n                                        r'pii_to_verify=[0-9]*', 'pii_to_verify=[REDACTED]'),\n                                    r'external_id=[0-9]*&', 'external_id=[REDACTED]&'),\n                                r'ref=[0-9A-Z]{4}-[0-9A-Z]{4}-[0-9A-Z]{4}', 'ref=[REDACTED]'),\n                            r'(?:Hi|Hello) [A-z]+ ?[A-z]* ?[A-z]* ?(?:,|-)', 'Hi [NAME REDACTED]'),\n                        r'phone=[0-9]{10}&pp_token=[0-9]{6}', 'phone=[REDACTED]&pp_token=[REDACTED]'),\n                    r'\\$[0-9]{0,5}\\.?[0-9]{0,2}', '$[AMOUNT REDACTED]'),\n                r'account [0-9]{6}-[0-9]{7}', 'account [REDACTED]'),\n            r'account #[0-9]*', 'account #[REDACTED]'),\n        r' [0-9]{6}', ' [REDACTED]'),\n      r'\\(?[2-9]{1}[0-9]{2}\\)?[ \\-.]?[2-9]{1}[0-9]{2}[ \\-.][0-9]{4}', '[PHONE REDACTED]') as {{ column_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.981676, "supported_languages": null}, "macro.promise_dwh.generate_delta_rows": {"name": "generate_delta_rows", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/generate_delta_rows.sql", "original_file_path": "macros/generate_delta_rows.sql", "unique_id": "macro.promise_dwh.generate_delta_rows", "macro_sql": "{% macro generate_delta_rows(jurx_enum_key, change_triggers) %}\n{{\n  config(\n    partition_by={\n      \"field\": \"UPLOAD_DATE\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n    },\n    materialized = 'incremental',\n    dataset = 'utility_data',\n    incremental_strategy = 'insert_overwrite',\n    tags = jurx_enum_key + '_utility_upload'\n  )\n}}\n    {#- Check if this target is enabled #}\n    {%- if var('jurisdiction-map')[jurx_enum_key][target.name] == '' or target.name not in var('jurisdiction-map')[jurx_enum_key] %}\n        {{ config (enabled=false) }}\n    {%- endif %}\n\n    {%- if jurx_enum_key == 'louisville_water' %}\n    {%- set from_table = \"(SELECT * FROM `\" + var(\"jurisdiction-map\")[jurx_enum_key][target.name] + \".staging.complete` WHERE jurisdiction='louisville_water' )\" %}\n{%- else %}\n        {%- set from_table = ref(jurx_enum_key + '_complete_with_eligibility') %}\n        {# LW does not use the standard change triggers #}\n        {%- set _ = change_triggers.append(\"gte_7_days_past_due\") %}\n        {%- set _ = change_triggers.append(\"gte_15_days_past_due\") %}\n        {%- set _ = change_triggers.append(\"account_missing_for_3_consecutive_days\") %}\n    {%- endif %}\n\n\n    {# This is a meaningless default value #}\n    {%- set start_date = \"2000-01-01\" -%}\n    {%- set max_part_stmt = \"(SELECT MAX(COALESCE(UPLOAD_DATE, DATE('\" + start_date + \"'))) as max_partition FROM `\" +  this.database  + \"`.`utility_data`.\" + this.name  + \" WHERE jurisdiction='\" + jurx_enum_key + \"' AND UPLOAD_DATE < '2099-01-01')\" %}\n\n\n    {% call set_sql_header(config) %}\n    DECLARE max_partition DATE DEFAULT DATE('{{ start_date }}');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ({{ max_part_stmt }}) IS NULL THEN DATE('{{ start_date }}') ELSE ({{ max_part_stmt }}) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;\n    {%- endcall %}\n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        ({%- for trigger in change_triggers %}\n            ({{ trigger }} = LAG({{ trigger }}) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR {{ trigger }} IS NULL)\n            {% if not loop.last -%} AND {%- endif %}\n        {%- endfor %})\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".\n    {%- if is_incremental() -%}\n        -- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        {%- endif %}\n        THEN 0\n        ELSE 1\n    END as change\nFROM {{ from_table }}\n{%- if is_incremental() -%}\n\t-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL {{ var(\"utility_delta_window\", \"5\") }} DAY)\n{%- endif -%})\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.set_sql_header", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.9843268, "supported_languages": null}, "macro.promise_dwh.gcp_target_key": {"name": "gcp_target_key", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/gcp_target_key.sql", "original_file_path": "macros/gcp_target_key.sql", "unique_id": "macro.promise_dwh.gcp_target_key", "macro_sql": "{%- macro gcp_target_key(enum_key) -%}\n    {{ var(\"jurisdiction-map\")[enum_key][target.name] }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.984512, "supported_languages": null}, "macro.promise_dwh.jsonObjectKeys": {"name": "jsonObjectKeys", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/jsonObjectKeys.sql", "original_file_path": "macros/jsonObjectKeys.sql", "unique_id": "macro.promise_dwh.jsonObjectKeys", "macro_sql": "{% macro jsonObjectKeys() %}\n    CREATE OR REPLACE FUNCTION {{ this.schema }}.jsonObjectKeys(input STRING)\n    RETURNS Array<String>\n    LANGUAGE js AS \"\"\"\n    return Object.keys(JSON.parse(input));\n    \"\"\";\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.984651, "supported_languages": null}, "macro.promise_dwh.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "unique_id": "macro.promise_dwh.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.9849348, "supported_languages": null}, "macro.promise_dwh.hash_string": {"name": "hash_string", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/hash_string.sql", "original_file_path": "macros/hash_string.sql", "unique_id": "macro.promise_dwh.hash_string", "macro_sql": "{% macro hash_string(column_name) %}\n    SHA256(TRIM(LOWER({{ column_name }}))) as {{ column_name }}_hashed\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.985078, "supported_languages": null}, "macro.promise_dwh.flatten_json_fields": {"name": "flatten_json_fields", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/flatten_json_fields.sql", "original_file_path": "macros/flatten_json_fields.sql", "unique_id": "macro.promise_dwh.flatten_json_fields", "macro_sql": "{% macro flatten_json_fields(field_list, parent_field, name_prefix) %}\n    {%- for field in field_list %}\n    , JSON_VALUE({{ parent_field }}, '$.{{ field }}') as {{ name_prefix }}_{{ field | replace(\".\", \"_\") }}\n    {%- endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.9854982, "supported_languages": null}, "macro.promise_dwh.generate_uniform_utility_data": {"name": "generate_uniform_utility_data", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/generate_uniform_utility_data.sql", "original_file_path": "macros/generate_uniform_utility_data.sql", "unique_id": "macro.promise_dwh.generate_uniform_utility_data", "macro_sql": "{% macro generate_uniform_utility_data(jurisdiction, jurx_fields) %}\n    {# We expect this to be passed the looker name of the jurisdiction, w/o dashes or hyphens #}\n    {# payment_arrangement is our term for \"has legacy plan\" #}\n{%- set fields_complete = [\n                            (\"account_number_hashed\", \"STRING\"),\n                            (\"due_date\", \"DATE\"),\n                            (\"outstanding_new_bill\", \"INT64\"),\n                            (\"current_balance\",\"INT64\"),\n                            (\"past_due_balance\", \"INT64\"),\n                            (\"total_balance\", \"INT64\"),\n                            (\"relief_amount\", \"INT64\"),\n                            (\"relief_balance\", \"INT64\"),\n                            (\"compliance_total_balance\", \"INT64\"),\n                            (\"compliance_past_due_balance\", \"INT64\"),\n                            (\"sanitation_balance\", \"INT64\"),\n                            (\"bill_date\", \"DATE\"),\n                            (\"account_type\", \"STRING\"),\n                            (\"cash_only\", \"BOOLEAN\"),\n                            (\"pay_plan_eligible\", \"STRING\"),\n                            (\"payment_arrangement\", \"BOOLEAN\"),\n                            (\"stranded\", \"BOOLEAN\"),\n                            (\"no_owner_permission\", \"STRING\"),\n                            (\"customer_type\", \"STRING\"),\n                            (\"subregion\", \"STRING\"),\n                            (\"active_promise_pay_plan\", \"STRING\"),\n                            (\"promise_plan_balance\", \"INT64\"),\n                            (\"in_severance\", \"STRING\"),\n                            (\"disconnected\", \"STRING\"),\n                            (\"broken\", \"STRING\"),\n                            (\"lihwap_amount_applied_cents\", \"INT64\"),\n                            (\"lihwap_amount_applied_date\", \"DATE\"),\n                            (\"gte_7_days_past_due\", \"BOOLEAN\"),\n                            (\"gte_15_days_past_due\", \"BOOLEAN\"),\n                            (\"account_missing_for_3_consecutive_days\", \"BOOLEAN\")] %}\n    {%- if jurisdiction != 'louisvillewater' %}\n        {# We add these for everyone except LW #}\n        {%- set _ = jurx_fields.update({\"gte_7_days_past_due\": \"gte_7_days_past_due\"}) -%}\n        {%- set _ = jurx_fields.update({\"gte_15_days_past_due\": \"gte_15_days_past_due\"}) -%}\n        {%- set _ = jurx_fields.update({\"account_missing_for_3_consecutive_days\": \"account_missing_for_3_consecutive_days\"}) -%}\n    {%- endif %}\n\nSELECT \n  '{{ jurisdiction }}' as jurisdiction\n    {%- for field in fields_complete %}\n        {%- if field[0] in jurx_fields %}\n        , CAST({{ jurx_fields[field[0]] }} AS {{ field[1] }})  AS {{ field[0] }}\n        {%- else %}\n        , CAST(NULL AS {{ field[1] }}) AS {{ field[0] }}\n        {%- endif %}\n    {%- endfor %}\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.987969, "supported_languages": null}, "macro.promise_dwh.deserialize": {"name": "deserialize", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/deserialize.sql", "original_file_path": "macros/deserialize.sql", "unique_id": "macro.promise_dwh.deserialize", "macro_sql": "{% macro deserialize() %}\n    CREATE OR REPLACE FUNCTION {{ this.schema }}.deserialize(x STRING)\n    RETURNS STRING\n    LANGUAGE js AS r\"\"\"\n    return JSON.parse(x);\n    \"\"\";\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.988117, "supported_languages": null}, "macro.promise_dwh.generate_complete_with_eligibility": {"name": "generate_complete_with_eligibility", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/generate_complete_with_eligibility.sql", "original_file_path": "macros/generate_complete_with_eligibility.sql", "unique_id": "macro.promise_dwh.generate_complete_with_eligibility", "macro_sql": "{% macro generate_complete_with_eligibility(\n    jurx_enum_key,\n    past_due_field,\n    eligibility_field=None\n) %}\n\n{{\n  config(\n    partition_by={\n      \"field\": \"UPLOAD_DATE\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n    },\n\n    materialized = 'incremental',\n    dataset = 'utility_data',\n    incremental_strategy = 'insert_overwrite',\n    tags = jurx_enum_key + '_utility_upload'\n  )\n}}\n    {# Check if this target is enabled #}\n    {%- if var('jurisdiction-map')[jurx_enum_key][target.name] == '' or target.name not in var('jurisdiction-map')[jurx_enum_key] %}\n        {{ config (enabled=false) }}\n    {%- endif %}\n\n    {# This is a meaningless default value #}\n    {%- set start_date = \"2000-01-01\" -%}\n    {%- set max_part_stmt = \"(SELECT MAX(COALESCE(UPLOAD_DATE, DATE('\" +  start_date  + \"'))) as max_partition FROM `\" +  this.database  + \"`.`utility_data`.\" +  this.name  + \" WHERE jurisdiction='\" + jurx_enum_key + \"' AND UPLOAD_DATE < '2099-01-01')\" %}\n\n\n    {% call set_sql_header(config) %}\n    DECLARE max_partition DATE DEFAULT DATE('{{ start_date }}');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ({{ max_part_stmt }}) IS NULL THEN DATE('{{ start_date }}') ELSE ({{ max_part_stmt }}) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;\n    {%- endcall %}\n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n{{ create_complete_account_records(jurx_enum_key, past_due_field, eligibility_field=eligibility_field ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.set_sql_header", "macro.promise_dwh.create_complete_account_records"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.989401, "supported_languages": null}, "macro.promise_dwh.generate_one_utility_account_history": {"name": "generate_one_utility_account_history", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/generate_one_utility_account_history.sql", "original_file_path": "macros/generate_one_utility_account_history.sql", "unique_id": "macro.promise_dwh.generate_one_utility_account_history", "macro_sql": "{% macro generate_one_utility_account_history(jurx_enum_key) %}\n{{ config (\n    tags = jurx_enum_key + '_utility_upload',\n    \n) }}\n    {# Check if this target is enabled #}\n    {%- if var('jurisdiction-map')[jurx_enum_key][target.name] == '' or target.name not in var('jurisdiction-map')[jurx_enum_key] -%}\n        {{ config (enabled=false) }}\n    {%- endif -%}\n\nWITH jurisdiction AS (\n    SELECT *\n    FROM {{ ref(jurx_enum_key + '_deltas_v2') }}\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_{% if target.name==\"dev\" %}dev_{% endif %}client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN {{ ref('customer') }} c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = '{{ looker_name(jurx_enum_key) }}'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN {{ ref(\"customer\") }} c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n    {%- set fields_to_convert = [\n        \"due_date\",\n        \"outstanding_new_bill\",\n        \"current_balance\",\n        \"past_due_balance\",\n        \"total_balance\",\n        \"relief_amount\",\n        \"relief_balance\",\n        \"compliance_total_balance\",\n        \"compliance_past_due_balance\",\n        \"sanitation_balance\",\n        \"bill_date\",\n        \"account_type\",\n        \"stranded\",\n        \"cash_only\",\n        \"subregion\",\n        \"pay_plan_eligible\",\n        \"no_owner_permission\",\n        \"customer_type\",\n        \"active_promise_pay_plan\",\n        \"promise_plan_balance\",\n        \"in_severance\",\n        \"disconnected\",\n        \"broken\",\n        \"gte_7_days_past_due\",\n        \"gte_15_days_past_due\",\n        \"account_missing_for_3_consecutive_days\",\n        \"client_paid_fees_to_date\",\n        \"municipal_fees_to_date\",\n        \"jurisdiction_paid_fees_to_date\",\n        \"obligation_paid_to_date\",\n        \"amount_scheduled_to_be_paid\",\n        \"past_due_scheduled_amount\",\n        \"obligation_uncovered\",\n        \"client_fees_scheduled\",\n        \"municipal_fees_scheduled\",\n        \"payments_currently_pending\",\n        \"lihwap_amount_applied_cents\",\n    ] -%}\n    {%- for field in fields_to_convert %}\n        {{ generate_last_value_sql(field) }}\n    {%- endfor %}    \n    {%- if jurx_enum_key == \"baltimore\" -%}\n        --\n        -- if Baltimore, get payment_arrangement from list\n        bpp.client_id is NOT NULL as payment_arrangement,\n    {% else %}\n        {{ generate_last_value_sql(\"payment_arrangement\") }}\n    {%- endif %}\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n     \n{%- if jurx_enum_key == \"baltimore\" -%}\n    --\n    -- if baltimore, join to list clients with pre-existing plans\n    LEFT JOIN `analytics-prod-328313.exclusions.baltimore_preexisting_plans` bpp\n        ON ae.client_id = bpp.client_id\n{%- endif %}\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.promise_dwh.looker_name", "macro.promise_dwh.generate_last_value_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.993403, "supported_languages": null}, "macro.promise_dwh.generate_cloud_table_name": {"name": "generate_cloud_table_name", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/generate_cloud_table_name.sql", "original_file_path": "macros/generate_cloud_table_name.sql", "unique_id": "macro.promise_dwh.generate_cloud_table_name", "macro_sql": "{%- macro generate_cloud_table_name(project, table) -%}\n    {%- if project != 'florida-lihwap-pay' %}\n        `{{ project }}.staging.{{ table }}`\n    {%- else %}\n        `{{ project }}.analytics_promisepay_prod.{{ table }}`\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.993736, "supported_languages": null}, "macro.promise_dwh.test_twilio_error_monitoring": {"name": "test_twilio_error_monitoring", "resource_type": "macro", "package_name": "promise_dwh", "path": "tests/generic/twilio_error_monitoring.sql", "original_file_path": "tests/generic/twilio_error_monitoring.sql", "unique_id": "macro.promise_dwh.test_twilio_error_monitoring", "macro_sql": "{% test twilio_error_monitoring(model, error_code, lookback_days) %}\nWITH errors AS (\n  SELECT\n    from_number,\n    count(1)\n  FROM {{ model }}\n  WHERE\n    DATE(TIMESTAMP_TRUNC(created_at, DAY)) >= DATE_SUB(CURRENT_DATE(), INTERVAL {{lookback_days}} DAY)\n    AND error_code = '{{error_code}}'\n  GROUP BY \n    1\n)\nSELECT\n  *\nFROM\n  errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.993993, "supported_languages": null}, "macro.promise_dwh.test_stripe_equal_rowcounts": {"name": "test_stripe_equal_rowcounts", "resource_type": "macro", "package_name": "promise_dwh", "path": "tests/generic/stripe_equal_rowcounts.sql", "original_file_path": "tests/generic/stripe_equal_rowcounts.sql", "unique_id": "macro.promise_dwh.test_stripe_equal_rowcounts", "macro_sql": "{% test stripe_equal_rowcounts(model, id_field) %}\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n{% set stripe_accounts =  ['stripe', 'stripe_private_utilities'] %}\n\nWITH unioned_tables AS (\n  {%- for acct in stripe_accounts -%}\n  SELECT\n      {{ id_field }}\n  FROM\n      `analytics-dev-328216.{{ acct }}.{{ model.identifier }}`\n\n  {% if not loop.last -%} \n  UNION ALL \n  {% endif %}\n\n  {%- endfor %}\n),\ncompare_table as (\n  select * from {{ model }}\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.994699, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.9949682, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.995141, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.995358, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.999296, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.999715, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.9998279, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379614.9999502, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.000073, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.000192, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.000343, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.000586, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.000722, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.001159, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.001482, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.002057, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.002202, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.002441, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.002793, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.002928, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.003555, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.004066, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.004647, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.008117, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"indirect\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.00896, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.010452, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0141912, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.014483, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.015352, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.015913, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0195909, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0199838, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.020122, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.020235, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.020405, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.020517, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.021559, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.021995, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.024801, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.026073, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0266418, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.027528, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.028146, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.029113, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.030432, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0307992, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.031022, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.031589, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0319, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.032049, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/options.sql", "original_file_path": "macros/relations/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0324538, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/cluster.sql", "original_file_path": "macros/relations/cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0329, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0330722, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/partition.sql", "original_file_path": "macros/relations/partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.033827, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0339499, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_model_node(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.034486, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.034674, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0352929, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0355682, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_model_node(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.036136, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.036257, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/options.sql", "original_file_path": "macros/relations/table/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.036507, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.036649, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.036757, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0382771, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0384462, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.038631, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/options.sql", "original_file_path": "macros/relations/view/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.038864, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.039011, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_relation.sql", "original_file_path": "macros/catalog/by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.040214, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.04285, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.042924, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0430012, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.043252, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0433438, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0435898, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_schema.sql", "original_file_path": "macros/catalog/by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.044616, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.044707, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.044896, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0450518, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.045206, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.04527, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.045355, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0455198, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.046358, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.046871, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0470169, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.047431, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0476348, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.047978, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.048405, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.048548, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0486798, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.048835, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0489862, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0490959, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.049654, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.049809, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.05007, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.050242, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.050817, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.051032, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.051239, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.051487, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.051685, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.052672, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.052834, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0529542, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.053072, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.05319, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.053521, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.053782, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.054123, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.054506, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.05474, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.057966, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.058107, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.058298, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0589068, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0590458, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0591931, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.060427, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.061543, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.065387, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.065631, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.065768, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.065845, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.065973, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.06607, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.066242, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.067009, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.067164, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.067383, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.067744, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.073316, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.075732, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.076125, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0763898, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.076714, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.077038, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0816011, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.081941, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.082152, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.083256, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.083452, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.084, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.086554, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.089338, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.090857, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.09133, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.091926, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0921311, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.092736, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.0986948, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.10021, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.100436, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.10131, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.101538, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.102102, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.102674, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.103483, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.103683, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.103839, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.104079, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1042292, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.104471, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.104625, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.104838, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.104995, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1051168, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.105346, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.109744, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.114978, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.116012, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.11703, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1177568, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.117964, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.118062, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.118315, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1184268, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1216068, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.124407, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.129111, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.129867, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.130065, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.130469, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.130629, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.130739, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1308532, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.13095, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.131079, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1311731, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.131583, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.131739, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.132867, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.133239, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.133564, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.134022, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1342459, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.134491, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.13485, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.135065, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.135715, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.13604, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.136194, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.136357, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.13652, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1372101, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.138279, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1386619, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.138896, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.139186, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1393669, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.140009, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.140383, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.140573, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.140817, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1411269, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.141359, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.141779, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.142248, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.142529, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.142708, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.142936, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.143022, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.143256, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.143378, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.14364, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.143764, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.144005, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.144136, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.144684, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.14485, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.145097, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1452212, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.145459, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.145581, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.146503, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.146606, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.147072, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1472142, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.147327, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1484091, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1488209, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.149117, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.14935, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.149437, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.149666, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.149785, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.150016, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1501381, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.150909, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.151061, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.151426, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1520178, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.152412, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.152568, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.152716, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1529448, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1530318, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.15381, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.153933, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.154884, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.15505, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1552398, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.155479, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.155604, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1559691, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1561012, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1562529, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1566982, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.157009, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.157262, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.157474, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.157978, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.159264, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.159752, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.159997, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.161699, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.162719, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.163358, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.163556, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.163753, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.163815, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.164479, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.164983, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.165314, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.165754, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.166175, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.166334, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1665761, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.166689, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.167466, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.167843, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.16801, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.168591, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1688151, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.168905, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.169203, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.169343, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.169535, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1696, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.169827, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.169945, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.17019, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.170311, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.170872, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.171235, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.171527, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1716769, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1719198, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.172043, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.17226, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.172398, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.172606, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.172744, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.172951, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1730402, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.173285, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1734028, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.173613, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1736991, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.174764, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.174895, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1750321, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1752288, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.175391, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.175531, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.17568, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.175841, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.17599, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.176123, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.176262, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.176391, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.176534, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.176663, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.176934, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.177054, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.177266, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.177356, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.177664, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1779132, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.178043, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.178518, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.178672, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.178881, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1791182, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.179235, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.17957, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.179901, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.180148, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.180276, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.18061, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.180772, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.180911, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.181067, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1814988, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.181634, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.181751, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.181839, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.181979, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1820438, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1821802, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.182318, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1831071, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1832252, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.183357, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1837142, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.183872, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.183986, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.184116, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1842198, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1861079, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.186263, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.186442, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.186773, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.186976, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.187246, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.187398, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1875358, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.187739, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1882088, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1884139, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.18853, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1888971, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.189256, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.189501, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.189686, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.191255, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.191353, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.191492, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.191585, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1918771, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.192037, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.19212, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.19231, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1924648, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.192655, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1928089, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.192998, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.19366, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.193821, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1940339, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.194231, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.19523, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.195704, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.195863, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.195977, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.196597, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.196745, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.196915, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1970592, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1972852, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.1977038, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.200376, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2006059, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.200775, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.200992, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2011461, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2012749, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.201421, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.201623, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.201792, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2020469, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.202205, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2023501, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2024908, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2026272, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.20288, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.203032, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2051032, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.205238, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.205507, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2056892, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.205865, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.206016, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2069812, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.207274, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.207428, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.207723, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.207917, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.208417, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.208628, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.209301, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.210829, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.210958, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.211645, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.211993, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.212485, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.212893, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.212955, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.213397, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.213592, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.213828, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.214058, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2143722, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.214899, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.215337, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.21589, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.216164, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.216437, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2174258, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.21832, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.219095, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2200289, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.220787, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.221108, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.22188, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.222698, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.223128, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.223547, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2240908, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2245078, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.224997, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2253408, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.22593, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.226627, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.22719, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.227745, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2282329, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.228537, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2288918, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2293131, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.22989, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2305999, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2314088, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.232189, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.232848, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.233612, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.234066, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.234327, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.237586, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2389162, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.239151, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.239295, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.239677, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2399209, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.240087, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2403, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.240462, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.240992, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.241739, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.242385, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2428942, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.243097, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.243409, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.243747, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.244225, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.244509, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.244879, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2454998, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.246221, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.246989, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.247355, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.247513, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.247961, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2485929, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2493591, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.249723, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2499719, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2511292, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.252353, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2536058, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.255018, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.255272, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2553868, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.258393, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2614331, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.261699, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.261912, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.26259, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.262779, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.262954, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2631192, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.263264, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.263413, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.263762, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.263975, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.264323, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.264798, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.265106, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.265399, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.266997, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.267307, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.267929, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.268367, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2693791, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2706711, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.271629, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.272367, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.272789, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.273422, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.274123, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2746072, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.2747781, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.275125, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.275639, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.276054, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.276594, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.277097, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.277217, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.277333, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.277447, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.277908, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.278539, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.279542, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.279776, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.280303, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715379615.281014, "supported_languages": null}, "macro.promise_dwh.generate_date_spine_sql": {"name": "generate_date_spine_sql", "resource_type": "macro", "package_name": "promise_dwh", "path": "macros/generate_date_spine_sql.sql", "original_file_path": "macros/generate_date_spine_sql.sql", "unique_id": "macro.promise_dwh.generate_date_spine_sql", "macro_sql": "{%- macro generate_date_spine_sql() -%}\nSELECT\n    *\nFROM\n    UNNEST(GENERATE_DATE_ARRAY('2020-10-01', '2025-12-31', INTERVAL 1 DAY)) as day_start\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1715566049.188471, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.promise_dwh.vaporeon": [{"database": "analytics-prod-328313", "schema": "utilities", "name": "vaporeon", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/vaporeon.sql", "original_file_path": "models/utilities/vaporeon.sql", "unique_id": "model.promise_dwh.vaporeon", "fqn": ["promise_dwh", "utilities", "vaporeon"], "alias": "vaporeon", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": false, "alias": null, "schema": "utilities", "database": null, "tags": ["vaporeon_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["vaporeon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["vaporeon_utility_upload"], "enabled": false}, "created_at": 1715379615.8417048, "config_call_dict": {"tags": ["vaporeon_utility_upload"], "enabled": false}, "relation_name": "`analytics-prod-328313`.`utilities`.`vaporeon`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "vaporeon_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.leafeon": [{"database": "analytics-prod-328313", "schema": "utilities", "name": "leafeon", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/leafeon.sql", "original_file_path": "models/utilities/leafeon.sql", "unique_id": "model.promise_dwh.leafeon", "fqn": ["promise_dwh", "utilities", "leafeon"], "alias": "leafeon", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": false, "alias": null, "schema": "utilities", "database": null, "tags": ["leafeon_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["leafeon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["leafeon_utility_upload"], "enabled": false}, "created_at": 1715379615.863263, "config_call_dict": {"tags": ["leafeon_utility_upload"], "enabled": false}, "relation_name": "`analytics-prod-328313`.`utilities`.`leafeon`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "leafeon_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.flareon": [{"database": "analytics-prod-328313", "schema": "utilities", "name": "flareon", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/flareon.sql", "original_file_path": "models/utilities/flareon.sql", "unique_id": "model.promise_dwh.flareon", "fqn": ["promise_dwh", "utilities", "flareon"], "alias": "flareon", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": false, "alias": null, "schema": "utilities", "database": null, "tags": ["flareon_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["flareon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["flareon_utility_upload"], "enabled": false}, "created_at": 1715379615.8956108, "config_call_dict": {"tags": ["flareon_utility_upload"], "enabled": false}, "relation_name": "`analytics-prod-328313`.`utilities`.`flareon`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "flareon_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.jolteon": [{"database": "analytics-prod-328313", "schema": "utilities", "name": "jolteon", "resource_type": "model", "package_name": "promise_dwh", "path": "utilities/jolteon.sql", "original_file_path": "models/utilities/jolteon.sql", "unique_id": "model.promise_dwh.jolteon", "fqn": ["promise_dwh", "utilities", "jolteon"], "alias": "jolteon", "checksum": {"name": "sha256", "checksum": "15341378ebe9271137a5d90963b5bb4486c534d0d7ce8f7821ec2e73bfa96706"}, "config": {"enabled": false, "alias": null, "schema": "utilities", "database": null, "tags": ["jolteon_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["jolteon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "utilities", "tags": ["jolteon_utility_upload"], "enabled": false}, "created_at": 1715379615.934756, "config_call_dict": {"tags": ["jolteon_utility_upload"], "enabled": false}, "relation_name": "`analytics-prod-328313`.`utilities`.`jolteon`", "raw_code": "{{ generate_one_utility_account_history(this.name) }}", "language": "sql", "refs": [{"name": "jolteon_deltas_v2", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}, {"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_one_utility_account_history"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.flareon_mr_data": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "flareon_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/flareon_mr_data.sql", "original_file_path": "models/utility_uploads/flareon_mr_data.sql", "unique_id": "model.promise_dwh.flareon_mr_data", "fqn": ["promise_dwh", "utility_uploads", "flareon_mr_data"], "alias": "flareon_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "flareon_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "flareon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["flareon_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"], "enabled": false}, "created_at": 1715379615.947734, "config_call_dict": {"materialized": "table", "dataset": "utility_data", "tags": ["flareon_utility_upload"], "cluster_by": ["jurisdiction"], "enabled": false}, "relation_name": "`analytics-prod-328313`.`utility_data`.`flareon_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "flareon_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.vaporeon_delta_rows": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "vaporeon_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/vaporeon_delta_rows.sql", "original_file_path": "models/utility_uploads/vaporeon_delta_rows.sql", "unique_id": "model.promise_dwh.vaporeon_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "vaporeon_delta_rows"], "alias": "vaporeon_delta_rows", "checksum": {"name": "sha256", "checksum": "96d9ab0ac4fb5047a35da7b97e0f0a1881f5c49de4e83cac118ef3e886ce9683"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "vaporeon_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.vaporeon_delta_rows WHERE jurisdiction='vaporeon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.vaporeon_delta_rows WHERE jurisdiction='vaporeon' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "vaporeon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["vaporeon_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.vaporeon_delta_rows WHERE jurisdiction='vaporeon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.vaporeon_delta_rows WHERE jurisdiction='vaporeon' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379615.950451, "config_call_dict": {"partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "materialized": "incremental", "dataset": "utility_data", "incremental_strategy": "insert_overwrite", "tags": ["vaporeon_utility_upload"], "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.vaporeon_delta_rows WHERE jurisdiction='vaporeon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.vaporeon_delta_rows WHERE jurisdiction='vaporeon' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "relation_name": "`analytics-prod-328313`.`utility_data`.`vaporeon_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"past_due_balance\", \"due_date\", \"acct_type\",\n                           \"ACCT_ELIGIBLE\", \"promise_plan_balance\"]\n    )\n}}", "language": "sql", "refs": [{"name": "vaporeon_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.leafeon_complete_with_eligibility": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "leafeon_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/leafeon_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/leafeon_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.leafeon_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "leafeon_complete_with_eligibility"], "alias": "leafeon_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "leafeon_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.leafeon_complete_with_eligibility WHERE jurisdiction='leafeon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.leafeon_complete_with_eligibility WHERE jurisdiction='leafeon' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "leafeon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["leafeon_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.leafeon_complete_with_eligibility WHERE jurisdiction='leafeon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.leafeon_complete_with_eligibility WHERE jurisdiction='leafeon' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.0165591, "config_call_dict": {"partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "materialized": "incremental", "dataset": "utility_data", "incremental_strategy": "insert_overwrite", "tags": ["leafeon_utility_upload"], "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.leafeon_complete_with_eligibility WHERE jurisdiction='leafeon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.leafeon_complete_with_eligibility WHERE jurisdiction='leafeon' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "relation_name": "`analytics-prod-328313`.`utility_data`.`leafeon_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.vaporeon_complete_with_eligibility": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "vaporeon_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/vaporeon_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/vaporeon_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.vaporeon_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "vaporeon_complete_with_eligibility"], "alias": "vaporeon_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "vaporeon_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.vaporeon_complete_with_eligibility WHERE jurisdiction='vaporeon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.vaporeon_complete_with_eligibility WHERE jurisdiction='vaporeon' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "vaporeon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["vaporeon_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.vaporeon_complete_with_eligibility WHERE jurisdiction='vaporeon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.vaporeon_complete_with_eligibility WHERE jurisdiction='vaporeon' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.0420039, "config_call_dict": {"partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "materialized": "incremental", "dataset": "utility_data", "incremental_strategy": "insert_overwrite", "tags": ["vaporeon_utility_upload"], "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.vaporeon_complete_with_eligibility WHERE jurisdiction='vaporeon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.vaporeon_complete_with_eligibility WHERE jurisdiction='vaporeon' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "relation_name": "`analytics-prod-328313`.`utility_data`.`vaporeon_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.jolteon_deltas_v2": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "jolteon_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/jolteon_deltas_v2.sql", "original_file_path": "models/utility_uploads/jolteon_deltas_v2.sql", "unique_id": "model.promise_dwh.jolteon_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "jolteon_deltas_v2"], "alias": "jolteon_deltas_v2", "checksum": {"name": "sha256", "checksum": "e4d12fdba893666a74dece86b86b03a632f14e60bbe79bb7c528630bb0fce65c"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "jolteon_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "jolteon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["jolteon_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"], "enabled": false}, "created_at": 1715379616.05113, "config_call_dict": {"partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"], "materialized": "table", "dataset": "utility_data", "tags": ["jolteon_utility_upload"], "enabled": false}, "relation_name": "`analytics-prod-328313`.`utility_data`.`jolteon_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\",\n      \"due_date\": \"due_date\",\n      \"outstanding_new_bill\": \"total_balance - past_due_balance\",\n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"total_balance\",\n      \"account_type\": \"acct_type\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"promise_plan_balance\": \"promise_plan_balance\",\n      \"active_promise_pay_plan\": \"CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END\"\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "jolteon_complete_with_eligibility", "package": null, "version": null}, {"name": "jolteon_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.flareon_delta_rows": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "flareon_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/flareon_delta_rows.sql", "original_file_path": "models/utility_uploads/flareon_delta_rows.sql", "unique_id": "model.promise_dwh.flareon_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "flareon_delta_rows"], "alias": "flareon_delta_rows", "checksum": {"name": "sha256", "checksum": "96d9ab0ac4fb5047a35da7b97e0f0a1881f5c49de4e83cac118ef3e886ce9683"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "flareon_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.flareon_delta_rows WHERE jurisdiction='flareon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.flareon_delta_rows WHERE jurisdiction='flareon' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "flareon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["flareon_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.flareon_delta_rows WHERE jurisdiction='flareon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.flareon_delta_rows WHERE jurisdiction='flareon' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.075965, "config_call_dict": {"partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "materialized": "incremental", "dataset": "utility_data", "incremental_strategy": "insert_overwrite", "tags": ["flareon_utility_upload"], "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.flareon_delta_rows WHERE jurisdiction='flareon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.flareon_delta_rows WHERE jurisdiction='flareon' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "relation_name": "`analytics-prod-328313`.`utility_data`.`flareon_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"past_due_balance\", \"due_date\", \"acct_type\",\n                           \"ACCT_ELIGIBLE\", \"promise_plan_balance\"]\n    )\n}}", "language": "sql", "refs": [{"name": "flareon_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.vaporeon_deltas_v2": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "vaporeon_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/vaporeon_deltas_v2.sql", "original_file_path": "models/utility_uploads/vaporeon_deltas_v2.sql", "unique_id": "model.promise_dwh.vaporeon_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "vaporeon_deltas_v2"], "alias": "vaporeon_deltas_v2", "checksum": {"name": "sha256", "checksum": "e4d12fdba893666a74dece86b86b03a632f14e60bbe79bb7c528630bb0fce65c"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "vaporeon_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "vaporeon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["vaporeon_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"], "enabled": false}, "created_at": 1715379616.0923038, "config_call_dict": {"partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"], "materialized": "table", "dataset": "utility_data", "tags": ["vaporeon_utility_upload"], "enabled": false}, "relation_name": "`analytics-prod-328313`.`utility_data`.`vaporeon_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\",\n      \"due_date\": \"due_date\",\n      \"outstanding_new_bill\": \"total_balance - past_due_balance\",\n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"total_balance\",\n      \"account_type\": \"acct_type\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"promise_plan_balance\": \"promise_plan_balance\",\n      \"active_promise_pay_plan\": \"CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END\"\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "vaporeon_complete_with_eligibility", "package": null, "version": null}, {"name": "vaporeon_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.flareon_deltas_v2": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "flareon_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/flareon_deltas_v2.sql", "original_file_path": "models/utility_uploads/flareon_deltas_v2.sql", "unique_id": "model.promise_dwh.flareon_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "flareon_deltas_v2"], "alias": "flareon_deltas_v2", "checksum": {"name": "sha256", "checksum": "e4d12fdba893666a74dece86b86b03a632f14e60bbe79bb7c528630bb0fce65c"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "flareon_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "flareon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["flareon_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"], "enabled": false}, "created_at": 1715379616.098392, "config_call_dict": {"partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"], "materialized": "table", "dataset": "utility_data", "tags": ["flareon_utility_upload"], "enabled": false}, "relation_name": "`analytics-prod-328313`.`utility_data`.`flareon_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\",\n      \"due_date\": \"due_date\",\n      \"outstanding_new_bill\": \"total_balance - past_due_balance\",\n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"total_balance\",\n      \"account_type\": \"acct_type\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"promise_plan_balance\": \"promise_plan_balance\",\n      \"active_promise_pay_plan\": \"CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END\"\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "flareon_complete_with_eligibility", "package": null, "version": null}, {"name": "flareon_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.leafeon_deltas_v2": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "leafeon_deltas_v2", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/leafeon_deltas_v2.sql", "original_file_path": "models/utility_uploads/leafeon_deltas_v2.sql", "unique_id": "model.promise_dwh.leafeon_deltas_v2", "fqn": ["promise_dwh", "utility_uploads", "leafeon_deltas_v2"], "alias": "leafeon_deltas_v2", "checksum": {"name": "sha256", "checksum": "e4d12fdba893666a74dece86b86b03a632f14e60bbe79bb7c528630bb0fce65c"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "leafeon_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["account_number_hashed"], "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}}, "tags": ["utility_upload_trigger", "leafeon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["leafeon_utility_upload"], "schema": "utility_data", "partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"], "enabled": false}, "created_at": 1715379616.117837, "config_call_dict": {"partition_by": {"field": "valid_starting", "data_type": "date", "granularity": "day"}, "cluster_by": ["account_number_hashed"], "materialized": "table", "dataset": "utility_data", "tags": ["leafeon_utility_upload"], "enabled": false}, "relation_name": "`analytics-prod-328313`.`utility_data`.`leafeon_deltas_v2`", "raw_code": "{{ generate_deltas_vtwo(\n    this.name|replace('_deltas_v2',''), \n    { \"account_number_hashed\": \"account_number_hashed\",\n      \"due_date\": \"due_date\",\n      \"outstanding_new_bill\": \"total_balance - past_due_balance\",\n      \"past_due_balance\": \"past_due_balance\",\n      \"total_balance\": \"total_balance\",\n      \"account_type\": \"acct_type\",\n      \"pay_plan_eligible\": \"ACCT_ELIGIBLE\",\n      \"promise_plan_balance\": \"promise_plan_balance\",\n      \"active_promise_pay_plan\": \"CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END\"\n    }\n    )\n}}", "language": "sql", "refs": [{"name": "leafeon_complete_with_eligibility", "package": null, "version": null}, {"name": "leafeon_delta_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_deltas_vtwo"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.leafeon_delta_rows": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "leafeon_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/leafeon_delta_rows.sql", "original_file_path": "models/utility_uploads/leafeon_delta_rows.sql", "unique_id": "model.promise_dwh.leafeon_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "leafeon_delta_rows"], "alias": "leafeon_delta_rows", "checksum": {"name": "sha256", "checksum": "96d9ab0ac4fb5047a35da7b97e0f0a1881f5c49de4e83cac118ef3e886ce9683"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "leafeon_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.leafeon_delta_rows WHERE jurisdiction='leafeon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.leafeon_delta_rows WHERE jurisdiction='leafeon' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "leafeon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["leafeon_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.leafeon_delta_rows WHERE jurisdiction='leafeon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.leafeon_delta_rows WHERE jurisdiction='leafeon' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.121105, "config_call_dict": {"partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "materialized": "incremental", "dataset": "utility_data", "incremental_strategy": "insert_overwrite", "tags": ["leafeon_utility_upload"], "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.leafeon_delta_rows WHERE jurisdiction='leafeon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.leafeon_delta_rows WHERE jurisdiction='leafeon' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "relation_name": "`analytics-prod-328313`.`utility_data`.`leafeon_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"past_due_balance\", \"due_date\", \"acct_type\",\n                           \"ACCT_ELIGIBLE\", \"promise_plan_balance\"]\n    )\n}}", "language": "sql", "refs": [{"name": "leafeon_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.vaporeon_mr_data": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "vaporeon_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/vaporeon_mr_data.sql", "original_file_path": "models/utility_uploads/vaporeon_mr_data.sql", "unique_id": "model.promise_dwh.vaporeon_mr_data", "fqn": ["promise_dwh", "utility_uploads", "vaporeon_mr_data"], "alias": "vaporeon_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "vaporeon_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "vaporeon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["vaporeon_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"], "enabled": false}, "created_at": 1715379616.13048, "config_call_dict": {"materialized": "table", "dataset": "utility_data", "tags": ["vaporeon_utility_upload"], "cluster_by": ["jurisdiction"], "enabled": false}, "relation_name": "`analytics-prod-328313`.`utility_data`.`vaporeon_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "vaporeon_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.jolteon_complete_with_eligibility": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "jolteon_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/jolteon_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/jolteon_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.jolteon_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "jolteon_complete_with_eligibility"], "alias": "jolteon_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "jolteon_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jolteon_complete_with_eligibility WHERE jurisdiction='jolteon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jolteon_complete_with_eligibility WHERE jurisdiction='jolteon' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "jolteon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["jolteon_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jolteon_complete_with_eligibility WHERE jurisdiction='jolteon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jolteon_complete_with_eligibility WHERE jurisdiction='jolteon' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.1466172, "config_call_dict": {"partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "materialized": "incremental", "dataset": "utility_data", "incremental_strategy": "insert_overwrite", "tags": ["jolteon_utility_upload"], "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jolteon_complete_with_eligibility WHERE jurisdiction='jolteon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jolteon_complete_with_eligibility WHERE jurisdiction='jolteon' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "relation_name": "`analytics-prod-328313`.`utility_data`.`jolteon_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.flareon_complete_with_eligibility": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "flareon_complete_with_eligibility", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/flareon_complete_with_eligibility.sql", "original_file_path": "models/utility_uploads/flareon_complete_with_eligibility.sql", "unique_id": "model.promise_dwh.flareon_complete_with_eligibility", "fqn": ["promise_dwh", "utility_uploads", "flareon_complete_with_eligibility"], "alias": "flareon_complete_with_eligibility", "checksum": {"name": "sha256", "checksum": "63afbe12890be8c2022ab3309340a4e51c355a3a0f318ad399a2159e7afbe215"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "flareon_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.flareon_complete_with_eligibility WHERE jurisdiction='flareon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.flareon_complete_with_eligibility WHERE jurisdiction='flareon' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "flareon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["flareon_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.flareon_complete_with_eligibility WHERE jurisdiction='flareon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.flareon_complete_with_eligibility WHERE jurisdiction='flareon' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.158596, "config_call_dict": {"partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "materialized": "incremental", "dataset": "utility_data", "incremental_strategy": "insert_overwrite", "tags": ["flareon_utility_upload"], "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.flareon_complete_with_eligibility WHERE jurisdiction='flareon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.flareon_complete_with_eligibility WHERE jurisdiction='flareon' AND UPLOAD_DATE < '2099-01-01')) END);\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "relation_name": "`analytics-prod-328313`.`utility_data`.`flareon_complete_with_eligibility`", "raw_code": "{{ generate_complete_with_eligibility(\n    this.name|replace('_complete_with_eligibility',''),\n    'past_due_balance',\n    'plan_eligible',\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_complete_with_eligibility"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.jolteon_mr_data": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "jolteon_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/jolteon_mr_data.sql", "original_file_path": "models/utility_uploads/jolteon_mr_data.sql", "unique_id": "model.promise_dwh.jolteon_mr_data", "fqn": ["promise_dwh", "utility_uploads", "jolteon_mr_data"], "alias": "jolteon_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "jolteon_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "jolteon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["jolteon_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"], "enabled": false}, "created_at": 1715379616.194033, "config_call_dict": {"materialized": "table", "dataset": "utility_data", "tags": ["jolteon_utility_upload"], "cluster_by": ["jurisdiction"], "enabled": false}, "relation_name": "`analytics-prod-328313`.`utility_data`.`jolteon_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "jolteon_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.jolteon_delta_rows": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "jolteon_delta_rows", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/jolteon_delta_rows.sql", "original_file_path": "models/utility_uploads/jolteon_delta_rows.sql", "unique_id": "model.promise_dwh.jolteon_delta_rows", "fqn": ["promise_dwh", "utility_uploads", "jolteon_delta_rows"], "alias": "jolteon_delta_rows", "checksum": {"name": "sha256", "checksum": "96d9ab0ac4fb5047a35da7b97e0f0a1881f5c49de4e83cac118ef3e886ce9683"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "jolteon_utility_upload"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "insert_overwrite", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jolteon_delta_rows WHERE jurisdiction='jolteon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jolteon_delta_rows WHERE jurisdiction='jolteon' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "tags": ["utility_upload_trigger", "jolteon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "tags": ["jolteon_utility_upload"], "schema": "utility_data", "partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jolteon_delta_rows WHERE jurisdiction='jolteon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jolteon_delta_rows WHERE jurisdiction='jolteon' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "created_at": 1715379616.2102132, "config_call_dict": {"partition_by": {"field": "UPLOAD_DATE", "data_type": "date", "granularity": "day"}, "materialized": "incremental", "dataset": "utility_data", "incremental_strategy": "insert_overwrite", "tags": ["jolteon_utility_upload"], "enabled": false, "sql_header": "\n    DECLARE max_partition DATE DEFAULT DATE('2000-01-01');\n    BEGIN\n        SET max_partition = (SELECT CASE WHEN ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jolteon_delta_rows WHERE jurisdiction='jolteon' AND UPLOAD_DATE < '2099-01-01')) IS NULL THEN DATE('2000-01-01') ELSE ((SELECT MAX(COALESCE(UPLOAD_DATE, DATE('2000-01-01'))) as max_partition FROM `analytics-prod-328313`.`utility_data`.jolteon_delta_rows WHERE jurisdiction='jolteon' AND UPLOAD_DATE < '2099-01-01')) END );\n    EXCEPTION WHEN ERROR THEN\n        -- do nothing.\n        -- this exception block is needed because is_incremental() does not work inside of set_sql_header()\n    END;"}, "relation_name": "`analytics-prod-328313`.`utility_data`.`jolteon_delta_rows`", "raw_code": "{{ generate_delta_rows(\n    this.name|replace('_delta_rows',''), \n    [\"total_balance\", \"past_due_balance\", \"due_date\", \"acct_type\",\n                           \"ACCT_ELIGIBLE\", \"promise_plan_balance\"]\n    )\n}}", "language": "sql", "refs": [{"name": "jolteon_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_delta_rows"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.promise_dwh.leafeon_mr_data": [{"database": "analytics-prod-328313", "schema": "utility_data", "name": "leafeon_mr_data", "resource_type": "model", "package_name": "promise_dwh", "path": "utility_uploads/leafeon_mr_data.sql", "original_file_path": "models/utility_uploads/leafeon_mr_data.sql", "unique_id": "model.promise_dwh.leafeon_mr_data", "fqn": ["promise_dwh", "utility_uploads", "leafeon_mr_data"], "alias": "leafeon_mr_data", "checksum": {"name": "sha256", "checksum": "33a04c103bee50d4207de15fce9111744faba856e331a4e9b4ef4869f2ac1a66"}, "config": {"enabled": false, "alias": null, "schema": "utility_data", "database": null, "tags": ["utility_upload_trigger", "leafeon_utility_upload"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": ["jurisdiction"]}, "tags": ["utility_upload_trigger", "leafeon_utility_upload"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["leafeon_utility_upload"], "schema": "utility_data", "cluster_by": ["jurisdiction"], "enabled": false}, "created_at": 1715379616.228961, "config_call_dict": {"materialized": "table", "dataset": "utility_data", "tags": ["leafeon_utility_upload"], "cluster_by": ["jurisdiction"], "enabled": false}, "relation_name": "`analytics-prod-328313`.`utility_data`.`leafeon_mr_data`", "raw_code": "{{ \n  generate_mr_data(\n    this.name|replace('_mr_data','')\n  )\n}}", "language": "sql", "refs": [{"name": "leafeon_complete_with_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.promise_dwh.generate_mr_data"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}]}, "parent_map": {"model.promise_dwh.customer": [], "model.promise_dwh.customer_communication": [], "model.promise_dwh.survey_wide": ["model.promise_dwh.stg__survey_long"], "model.promise_dwh.customer_version": [], "model.promise_dwh.stg__survey_paths": [], "model.promise_dwh.transaction_fee_configs": [], "model.promise_dwh.client_comms_recipient": ["model.promise_dwh.customer_communication_combined"], "model.promise_dwh.payment_plan_event_history": [], "model.promise_dwh.customer_materialized": ["model.promise_dwh.customer"], "model.promise_dwh.stg__lw_sandbox_current_account_facts": [], "model.promise_dwh.customer_config_wide": ["model.promise_dwh.customer_config_attributes"], "model.promise_dwh.customer_config_long": ["model.promise_dwh.customer_config_attributes", "model.promise_dwh.customer_config_wide"], "model.promise_dwh.obligation": [], "model.promise_dwh.customer_config_attributes": [], "model.promise_dwh.system_properties": [], "model.promise_dwh.payment_record": [], "model.promise_dwh.stg__lw_sandbox_plans": [], "model.promise_dwh.customer_exception_history": [], "model.promise_dwh.stg__survey_long": ["model.promise_dwh.stg__survey_paths"], "model.promise_dwh.pledge": [], "model.promise_dwh.user_status_promisepay": [], "model.promise_dwh.calls_valihwap": [], "model.promise_dwh.user_status_valihwap": [], "model.promise_dwh.calls_explore_valihwap": [], "model.promise_dwh.studio_flow_execution_valihwap": [], "model.promise_dwh.calls_promisepay": [], "model.promise_dwh.studio_flow_execution_promisepay": [], "model.promise_dwh.events_wide": ["model.promise_dwh.device_user_map", "model.promise_dwh.event_attributes", "model.promise_dwh.other_attributes", "model.promise_dwh.user_attributes"], "model.promise_dwh.event_attributes": [], "model.promise_dwh.other_attributes": [], "model.promise_dwh.session_facts": [], "model.promise_dwh.device_user_map": ["model.promise_dwh.session_facts"], "model.promise_dwh.user_attributes": [], "model.promise_dwh.company": [], "model.promise_dwh.property": [], "model.promise_dwh.engagement_meeting": [], "model.promise_dwh.engagement_deal": [], "model.promise_dwh.deal_pipeline_stage": [], "model.promise_dwh.contact_property_history": [], "model.promise_dwh.engagement_contact": [], "model.promise_dwh.deal_pipeline": [], "model.promise_dwh.deal_company": [], "model.promise_dwh.deal_contact": [], "model.promise_dwh.owner": [], "model.promise_dwh.engagement_company": [], "model.promise_dwh.deal_property_history": [], "model.promise_dwh.company_property_history": [], "model.promise_dwh.engagement": [], "model.promise_dwh.deal": [], "model.promise_dwh.deal_stage": [], "model.promise_dwh.contact": [], "model.promise_dwh.prod_dag_list": [], "model.promise_dwh.prod_all_dag_runs": [], "model.promise_dwh.alexrenew_water": ["model.promise_dwh.alexrenew_water_deltas_v2", "model.promise_dwh.customer"], "model.promise_dwh.jackson_water": ["model.promise_dwh.customer", "model.promise_dwh.jackson_water_deltas_v2"], "model.promise_dwh.newark_water": ["model.promise_dwh.customer", "model.promise_dwh.newark_water_deltas_v2"], "model.promise_dwh.account_history_combined": ["model.promise_dwh.alexrenew_water", "model.promise_dwh.baltimore", "model.promise_dwh.buffalo_water", "model.promise_dwh.cal_water", "model.promise_dwh.centralarkansas_water", "model.promise_dwh.corona", "model.promise_dwh.gcww", "model.promise_dwh.hrsd", "model.promise_dwh.jackson_water", "model.promise_dwh.louisville_water", "model.promise_dwh.newark_water", "model.promise_dwh.newmexico_water", "model.promise_dwh.newportnews_water", "model.promise_dwh.nola_water", "model.promise_dwh.richmond", "model.promise_dwh.sj_water", "model.promise_dwh.toledo", "model.promise_dwh.veoliany_water", "model.promise_dwh.washington_water", "model.promise_dwh.wssc_water"], "model.promise_dwh.corona": ["model.promise_dwh.corona_deltas_v2", "model.promise_dwh.customer"], "model.promise_dwh.buffalo_water": ["model.promise_dwh.buffalo_water_deltas_v2", "model.promise_dwh.customer"], "model.promise_dwh.richmond": ["model.promise_dwh.customer", "model.promise_dwh.richmond_deltas_v2"], "model.promise_dwh.gcww": ["model.promise_dwh.customer", "model.promise_dwh.gcww_deltas_v2"], "model.promise_dwh.washington_water": ["model.promise_dwh.customer", "model.promise_dwh.washington_water_deltas_v2"], "model.promise_dwh.baltimore": ["model.promise_dwh.baltimore_deltas_v2", "model.promise_dwh.customer"], "model.promise_dwh.nola_water": ["model.promise_dwh.customer", "model.promise_dwh.nola_water_deltas_v2"], "model.promise_dwh.newportnews_water": ["model.promise_dwh.customer", "model.promise_dwh.newportnews_water_deltas_v2"], "model.promise_dwh.veoliany_water": ["model.promise_dwh.customer", "model.promise_dwh.veoliany_water_deltas_v2"], "model.promise_dwh.lw_gte_7_days_past_due": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.centralarkansas_water": ["model.promise_dwh.centralarkansas_water_deltas_v2", "model.promise_dwh.customer"], "model.promise_dwh.hrsd": ["model.promise_dwh.customer", "model.promise_dwh.hrsd_deltas_v2"], "model.promise_dwh.sj_water": ["model.promise_dwh.customer", "model.promise_dwh.sj_water_deltas_v2"], "model.promise_dwh.cal_water": ["model.promise_dwh.cal_water_deltas_v2", "model.promise_dwh.customer"], "model.promise_dwh.account_history_combined_current": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.louisville_water": ["model.promise_dwh.customer", "model.promise_dwh.louisville_water_deltas_v2"], "model.promise_dwh.newmexico_water": ["model.promise_dwh.customer", "model.promise_dwh.newmexico_water_deltas_v2"], "model.promise_dwh.wssc_water": ["model.promise_dwh.customer", "model.promise_dwh.wssc_water_deltas_v2"], "model.promise_dwh.toledo": ["model.promise_dwh.customer", "model.promise_dwh.toledo_deltas_v2"], "model.promise_dwh.hrsd_mr_data": ["model.promise_dwh.hrsd_complete_with_eligibility"], "model.promise_dwh.richmond_delta_rows": ["model.promise_dwh.richmond_complete_with_eligibility"], "model.promise_dwh.richmond_complete_with_eligibility": [], "model.promise_dwh.veoliany_water_mr_data": ["model.promise_dwh.veoliany_water_complete_with_eligibility"], "model.promise_dwh.hrsd_deltas_v2": ["model.promise_dwh.hrsd_complete_with_eligibility", "model.promise_dwh.hrsd_delta_rows"], "model.promise_dwh.toledo_delta_rows": ["model.promise_dwh.toledo_complete_with_eligibility"], "model.promise_dwh.veoliany_water_complete_with_eligibility": [], "model.promise_dwh.wssc_water_mr_data": ["model.promise_dwh.wssc_water_complete_with_eligibility"], "model.promise_dwh.alexrenew_water_complete_with_eligibility": [], "model.promise_dwh.mr_client_data": ["model.promise_dwh.alexrenew_water_mr_data", "model.promise_dwh.baltimore_mr_data", "model.promise_dwh.buffalo_water_mr_data", "model.promise_dwh.cal_water_mr_data", "model.promise_dwh.centralarkansas_water_mr_data", "model.promise_dwh.corona_mr_data", "model.promise_dwh.gcww_mr_data", "model.promise_dwh.hrsd_mr_data", "model.promise_dwh.jackson_water_mr_data", "model.promise_dwh.louisville_water_mr_data", "model.promise_dwh.newark_water_mr_data", "model.promise_dwh.newmexico_water_mr_data", "model.promise_dwh.newportnews_water_mr_data", "model.promise_dwh.nola_water_mr_data", "model.promise_dwh.richmond_mr_data", "model.promise_dwh.sj_water_mr_data", "model.promise_dwh.toledo_mr_data", "model.promise_dwh.veoliany_water_mr_data", "model.promise_dwh.washington_water_mr_data", "model.promise_dwh.wssc_water_mr_data"], "model.promise_dwh.washington_water_delta_rows": ["model.promise_dwh.washington_water_complete_with_eligibility"], "model.promise_dwh.newark_water_mr_data": ["model.promise_dwh.newark_water_complete_with_eligibility"], "model.promise_dwh.richmond_deltas_v2": ["model.promise_dwh.richmond_complete_with_eligibility", "model.promise_dwh.richmond_delta_rows"], "model.promise_dwh.buffalo_water_deltas_v2": ["model.promise_dwh.buffalo_water_complete_with_eligibility", "model.promise_dwh.buffalo_water_delta_rows"], "model.promise_dwh.sj_water_delta_rows": ["model.promise_dwh.sj_water_complete_with_eligibility"], "model.promise_dwh.veoliany_water_deltas_v2": ["model.promise_dwh.veoliany_water_complete_with_eligibility", "model.promise_dwh.veoliany_water_delta_rows"], "model.promise_dwh.newark_water_complete_with_eligibility": [], "model.promise_dwh.gcww_deltas_v2": ["model.promise_dwh.gcww_complete_with_eligibility", "model.promise_dwh.gcww_delta_rows"], "model.promise_dwh.toledo_deltas_v2": ["model.promise_dwh.toledo_complete_with_eligibility", "model.promise_dwh.toledo_delta_rows"], "model.promise_dwh.baltimore_mr_data": ["model.promise_dwh.baltimore_complete_with_eligibility"], "model.promise_dwh.nola_water_complete_with_eligibility": [], "model.promise_dwh.newmexico_water_complete_with_eligibility": [], "model.promise_dwh.newportnews_water_deltas_v2": ["model.promise_dwh.newportnews_water_complete_with_eligibility", "model.promise_dwh.newportnews_water_delta_rows"], "model.promise_dwh.buffalo_water_complete_with_eligibility": [], "model.promise_dwh.washington_water_mr_data": ["model.promise_dwh.washington_water_complete_with_eligibility"], "model.promise_dwh.sj_water_complete_with_eligibility": [], "model.promise_dwh.centralarkansas_water_complete_with_eligibility": [], "model.promise_dwh.sj_water_deltas_v2": ["model.promise_dwh.sj_water_complete_with_eligibility", "model.promise_dwh.sj_water_delta_rows"], "model.promise_dwh.toledo_mr_data": ["model.promise_dwh.toledo_complete_with_eligibility"], "model.promise_dwh.cal_water_deltas_v2": ["model.promise_dwh.cal_water_complete_with_eligibility", "model.promise_dwh.cal_water_delta_rows"], "model.promise_dwh.centralarkansas_water_mr_data": ["model.promise_dwh.centralarkansas_water_complete_with_eligibility"], "model.promise_dwh.baltimore_delta_rows": ["model.promise_dwh.baltimore_complete_with_eligibility"], "model.promise_dwh.newportnews_water_delta_rows": ["model.promise_dwh.newportnews_water_complete_with_eligibility"], "model.promise_dwh.nola_water_deltas_v2": ["model.promise_dwh.nola_water_complete_with_eligibility", "model.promise_dwh.nola_water_delta_rows"], "model.promise_dwh.cal_water_mr_data": ["model.promise_dwh.cal_water_complete_with_eligibility"], "model.promise_dwh.wssc_water_deltas_v2": ["model.promise_dwh.wssc_water_complete_with_eligibility", "model.promise_dwh.wssc_water_delta_rows"], "model.promise_dwh.gcww_delta_rows": ["model.promise_dwh.gcww_complete_with_eligibility"], "model.promise_dwh.jackson_water_mr_data": ["model.promise_dwh.jackson_water_complete_with_eligibility"], "model.promise_dwh.louisville_water_mr_data": [], "model.promise_dwh.centralarkansas_water_deltas_v2": ["model.promise_dwh.centralarkansas_water_complete_with_eligibility", "model.promise_dwh.centralarkansas_water_delta_rows"], "model.promise_dwh.newmexico_water_delta_rows": ["model.promise_dwh.newmexico_water_complete_with_eligibility"], "model.promise_dwh.louisville_water_deltas_v2": ["model.promise_dwh.louisville_water_delta_rows"], "model.promise_dwh.corona_deltas_v2": ["model.promise_dwh.corona_complete_with_eligibility", "model.promise_dwh.corona_delta_rows"], "model.promise_dwh.newmexico_water_mr_data": ["model.promise_dwh.newmexico_water_complete_with_eligibility"], "model.promise_dwh.buffalo_water_delta_rows": ["model.promise_dwh.buffalo_water_complete_with_eligibility"], "model.promise_dwh.alexrenew_water_deltas_v2": ["model.promise_dwh.alexrenew_water_complete_with_eligibility", "model.promise_dwh.alexrenew_water_delta_rows"], "model.promise_dwh.richmond_mr_data": ["model.promise_dwh.richmond_complete_with_eligibility"], "model.promise_dwh.nola_water_delta_rows": ["model.promise_dwh.nola_water_complete_with_eligibility"], "model.promise_dwh.newark_water_deltas_v2": ["model.promise_dwh.newark_water_complete_with_eligibility", "model.promise_dwh.newark_water_delta_rows"], "model.promise_dwh.sj_water_mr_data": ["model.promise_dwh.sj_water_complete_with_eligibility"], "model.promise_dwh.gcww_complete_with_eligibility": [], "model.promise_dwh.jackson_water_delta_rows": ["model.promise_dwh.jackson_water_complete_with_eligibility"], "model.promise_dwh.wssc_water_complete_with_eligibility": [], "model.promise_dwh.newark_water_delta_rows": ["model.promise_dwh.newark_water_complete_with_eligibility"], "model.promise_dwh.corona_delta_rows": ["model.promise_dwh.corona_complete_with_eligibility"], "model.promise_dwh.washington_water_deltas_v2": ["model.promise_dwh.washington_water_complete_with_eligibility", "model.promise_dwh.washington_water_delta_rows"], "model.promise_dwh.jackson_water_complete_with_eligibility": [], "model.promise_dwh.veoliany_water_delta_rows": ["model.promise_dwh.veoliany_water_complete_with_eligibility"], "model.promise_dwh.jackson_water_deltas_v2": ["model.promise_dwh.jackson_water_complete_with_eligibility", "model.promise_dwh.jackson_water_delta_rows"], "model.promise_dwh.hrsd_complete_with_eligibility": [], "model.promise_dwh.baltimore_deltas_v2": ["model.promise_dwh.baltimore_complete_with_eligibility", "model.promise_dwh.baltimore_delta_rows"], "model.promise_dwh.newmexico_water_deltas_v2": ["model.promise_dwh.newmexico_water_complete_with_eligibility", "model.promise_dwh.newmexico_water_delta_rows"], "model.promise_dwh.cal_water_delta_rows": ["model.promise_dwh.cal_water_complete_with_eligibility"], "model.promise_dwh.newportnews_water_complete_with_eligibility": [], "model.promise_dwh.louisville_water_delta_rows": [], "model.promise_dwh.wssc_water_delta_rows": ["model.promise_dwh.wssc_water_complete_with_eligibility"], "model.promise_dwh.alexrenew_water_delta_rows": ["model.promise_dwh.alexrenew_water_complete_with_eligibility"], "model.promise_dwh.cal_water_complete_with_eligibility": [], "model.promise_dwh.centralarkansas_water_delta_rows": ["model.promise_dwh.centralarkansas_water_complete_with_eligibility"], "model.promise_dwh.corona_mr_data": ["model.promise_dwh.corona_complete_with_eligibility"], "model.promise_dwh.gcww_mr_data": ["model.promise_dwh.gcww_complete_with_eligibility"], "model.promise_dwh.buffalo_water_mr_data": ["model.promise_dwh.buffalo_water_complete_with_eligibility"], "model.promise_dwh.nola_water_mr_data": ["model.promise_dwh.nola_water_complete_with_eligibility"], "model.promise_dwh.hrsd_delta_rows": ["model.promise_dwh.hrsd_complete_with_eligibility"], "model.promise_dwh.newportnews_water_mr_data": ["model.promise_dwh.newportnews_water_complete_with_eligibility"], "model.promise_dwh.alexrenew_water_mr_data": ["model.promise_dwh.alexrenew_water_complete_with_eligibility"], "model.promise_dwh.washington_water_complete_with_eligibility": [], "model.promise_dwh.baltimore_complete_with_eligibility": [], "model.promise_dwh.corona_complete_with_eligibility": [], "model.promise_dwh.toledo_complete_with_eligibility": [], "model.promise_dwh.request_type": [], "model.promise_dwh.request": [], "model.promise_dwh.project": [], "model.promise_dwh.component": [], "model.promise_dwh.status": [], "model.promise_dwh.issue_board": [], "model.promise_dwh.issue_watcher": [], "model.promise_dwh.user_group": [], "model.promise_dwh.project_role": [], "model.promise_dwh.comment": [], "model.promise_dwh.issue_multiselect_history": [], "model.promise_dwh.board": [], "model.promise_dwh.user_jira": [], "model.promise_dwh.issue_type": [], "model.promise_dwh.issue_link": [], "model.promise_dwh.permission": [], "model.promise_dwh.organization": [], "model.promise_dwh.project_board": [], "model.promise_dwh.issue_field_history": [], "model.promise_dwh.priority": [], "model.promise_dwh.project_category": [], "model.promise_dwh.sprint": [], "model.promise_dwh.field_option": [], "model.promise_dwh.project_role_actor": [], "model.promise_dwh.issue": [], "model.promise_dwh.field": [], "model.promise_dwh.epic": [], "model.promise_dwh.conversation": [], "model.promise_dwh.message": [], "model.promise_dwh.note": [], "model.promise_dwh.customer_kustomer": [], "model.promise_dwh.kustomer_emails_for_customer_communication": [], "model.promise_dwh.user": [], "model.promise_dwh.single_sided_entry": ["source.promise_dwh.finance.ledger"], "model.promise_dwh.upcoming_payments": ["model.promise_dwh.single_sided_entry"], "model.promise_dwh.payment_attempt": ["source.promise_dwh.finance.payment_attempt"], "model.promise_dwh.finance_event": ["source.promise_dwh.finance.event"], "model.promise_dwh.payment_provider_balance": ["source.promise_dwh.finance.payment_provider_balance"], "model.promise_dwh.refund_attempt": ["source.promise_dwh.finance.refund_attempt"], "model.promise_dwh.finance_plan": ["source.promise_dwh.finance.plan"], "model.promise_dwh.remit_attempt": ["source.promise_dwh.finance.remit_attempt"], "model.promise_dwh.payment_method": ["source.promise_dwh.finance.payment_method"], "model.promise_dwh.upcoming_payments_client_level": ["model.promise_dwh.upcoming_payments"], "model.promise_dwh.finance_api_request": ["source.promise_dwh.finance.api_request"], "model.promise_dwh.sse_ids": ["model.promise_dwh.single_sided_entry"], "model.promise_dwh.twilio_message": [], "model.promise_dwh.balance_transaction": [], "model.promise_dwh.dispute_balance_transaction": [], "model.promise_dwh.card": [], "model.promise_dwh.refund": [], "model.promise_dwh.transaction_fee_detail": [], "model.promise_dwh.payment_intent": [], "model.promise_dwh.charge": [], "model.promise_dwh.stripe_customer": [], "model.promise_dwh.dispute": [], "model.promise_dwh.stg__template": [], "model.promise_dwh.template": ["model.promise_dwh.stg__template"], "model.promise_dwh.stg__template_version_field": [], "model.promise_dwh.template_text": ["model.promise_dwh.stg__template_version", "model.promise_dwh.stg__template_version_field"], "model.promise_dwh.stg__template_version": [], "snapshot.promise_dwh.transaction_fee_configs_snapshot": ["model.promise_dwh.transaction_fee_configs"], "snapshot.promise_dwh.customer_config_snapshot": ["model.promise_dwh.customer_config_long"], "snapshot.promise_dwh.airflow_prod_dag_list_snapshot": ["model.promise_dwh.prod_dag_list"], "snapshot.promise_dwh.airflow_prod_all_dag_runs_snapshot": ["model.promise_dwh.prod_all_dag_runs"], "analysis.promise_dwh.fraud_check_vdss": [], "analysis.promise_dwh.finance_not_stripe": [], "analysis.promise_dwh.stripe_transactions": [], "analysis.promise_dwh.unattributed_stripe_fees": [], "analysis.promise_dwh.stripe_not_finance": [], "analysis.promise_dwh.flow_for_month_as_of_now": [], "analysis.promise_dwh.payments_this_month_for_other_months": [], "analysis.promise_dwh.flow_diff_since_month_end": [], "analysis.promise_dwh.flow_as_of_month_end": [], "analysis.promise_dwh.balance_diff_since_month_end": [], "analysis.promise_dwh.payments_this_month_for_this_month": [], "analysis.promise_dwh.balance_for_month_as_of_now": [], "analysis.promise_dwh.payments_in_other_months_for_this_month": [], "analysis.promise_dwh.balance_as_of_month_end": [], "analysis.promise_dwh.insert_new_accountholder_records": [], "analysis.promise_dwh.update_new_hh_matches": [], "analysis.promise_dwh.converted_app_hh_matches": [], "analysis.promise_dwh.prequals_to_sms": [], "analysis.promise_dwh.load_Promise_AcctHolder_DSS_Account_Holder_Name": [], "analysis.promise_dwh.load_Promise_HHMembers_DSS_Household_Members": [], "analysis.promise_dwh.insert_new_hh_records": [], "analysis.promise_dwh.convert_unintegrated_utilities": [], "analysis.promise_dwh.update_new_accountholder_matches": [], "analysis.promise_dwh.find_prequal_to_qual_people": [], "analysis.promise_dwh.oc_cleaning": [], "analysis.promise_dwh.load_new_coastal_cloud": [], "analysis.promise_dwh.toho_exclude_accounts": [], "analysis.promise_dwh.toho_stcloud_cleaning": [], "analysis.promise_dwh.load_full_liheap": [], "analysis.promise_dwh.manatee_cleanup": [], "analysis.promise_dwh.toho_kissimmee_cleaning": [], "analysis.promise_dwh.load_snap_data": [], "analysis.promise_dwh.jea_cleaning": [], "analysis.promise_dwh.load_full_eheap": [], "analysis.promise_dwh.stripe_transaction_fee_details_insert": [], "analysis.promise_dwh.stripe_transaction_insert": [], "test.promise_dwh.utility_deltas_one_current_at_a_time": [], "seed.promise_dwh.jurisdiction_metadata": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_event_attributes_attributes.21b06fb34c": ["model.promise_dwh.event_attributes"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_user_attributes_attributes.079d587c1d": ["model.promise_dwh.user_attributes"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_other_attributes_attributes.1a01332839": ["model.promise_dwh.other_attributes"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_device_user_map_device_id__last_user_id.5e3156e4f6": ["model.promise_dwh.device_user_map"], "test.promise_dwh.accepted_values_account_history_combined_account_type__R__I__C__M.2ffae00bec": ["model.promise_dwh.account_history_combined"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_gcww_delta_rows_account_number_hashed__UPLOAD_DATE.dede6fe02b": ["model.promise_dwh.gcww_delta_rows"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_alexrenew_water_delta_rows_account_number_hashed__UPLOAD_DATE.c4e89b4db7": ["model.promise_dwh.alexrenew_water_delta_rows"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.2a17cb52b3": ["model.promise_dwh.toledo_complete_with_eligibility"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_delta_rows_account_number_hashed__UPLOAD_DATE.b4d51c14ef": ["model.promise_dwh.toledo_delta_rows"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.37162f93b7": ["model.promise_dwh.hrsd_complete_with_eligibility"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_complete_with_eligibility_account_number_hashed__account_status__UPLOAD_DATE.e81242254a": ["model.promise_dwh.corona_complete_with_eligibility"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_buffalo_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.9113f63092": ["model.promise_dwh.buffalo_water_complete_with_eligibility"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_newark_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.bacd5a53ba": ["model.promise_dwh.newark_water_complete_with_eligibility"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_delta_rows_account_number_hashed__UPLOAD_DATE.26dfdfd4fb": ["model.promise_dwh.hrsd_delta_rows"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_louisville_water_delta_rows_account_number_hashed__UPLOAD_DATE.24631b77ff": ["model.promise_dwh.louisville_water_delta_rows"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_delta_rows_account_number_hashed__UPLOAD_DATE.75107ab10e": ["model.promise_dwh.corona_delta_rows"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_gcww_deltas_v2_account_number_hashed__valid_starting.6a9eaa84b0": ["model.promise_dwh.gcww_deltas_v2"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_alexrenew_water_deltas_v2_account_number_hashed__valid_starting.95def3c3fe": ["model.promise_dwh.alexrenew_water_deltas_v2"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_deltas_v2_account_number_hashed__valid_starting.3fdfe6d6dd": ["model.promise_dwh.toledo_deltas_v2"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_deltas_v2_account_number_hashed__valid_starting.846bb7ea04": ["model.promise_dwh.hrsd_deltas_v2"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_louisville_water_deltas_v2_account_number_hashed__valid_starting.c4c12c8f23": ["model.promise_dwh.louisville_water_deltas_v2"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_deltas_v2_account_number_hashed__valid_starting.f2a965239d": ["model.promise_dwh.corona_deltas_v2"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_buffalo_water_deltas_v2_account_number_hashed__valid_starting.5d5102ea8e": ["model.promise_dwh.buffalo_water_deltas_v2"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_newark_water_deltas_v2_account_number_hashed__valid_starting.621e3a3a44": ["model.promise_dwh.newark_water_deltas_v2"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_veoliany_water_deltas_v2_account_number_hashed__valid_starting.2080771d32": ["model.promise_dwh.veoliany_water_deltas_v2"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_centralarkansas_water_deltas_v2_account_number_hashed__valid_starting.cabe0bedd0": ["model.promise_dwh.centralarkansas_water_deltas_v2"], "test.promise_dwh.dbt_utils_equal_rowcount_finance_event__source_finance_event_.3acf90b47b": ["model.promise_dwh.finance_event", "source.promise_dwh.finance.event"], "test.promise_dwh.dbt_utils_equal_rowcount_single_sided_entry__source_finance_ledger_.f2dc4f1eea": ["model.promise_dwh.single_sided_entry", "source.promise_dwh.finance.ledger"], "test.promise_dwh.dbt_utils_equal_rowcount_finance_plan__source_finance_plan_.c31f4e9b27": ["model.promise_dwh.finance_plan", "source.promise_dwh.finance.plan"], "test.promise_dwh.dbt_utils_equal_rowcount_payment_attempt__source_finance_payment_attempt_.b87f20362a": ["model.promise_dwh.payment_attempt", "source.promise_dwh.finance.payment_attempt"], "test.promise_dwh.dbt_utils_equal_rowcount_payment_method__source_finance_payment_method_.168378dafe": ["model.promise_dwh.payment_method", "source.promise_dwh.finance.payment_method"], "test.promise_dwh.dbt_utils_equal_rowcount_refund_attempt__source_finance_refund_attempt_.3db86495e1": ["model.promise_dwh.refund_attempt", "source.promise_dwh.finance.refund_attempt"], "test.promise_dwh.dbt_utils_equal_rowcount_remit_attempt__source_finance_remit_attempt_.0446ca9a51": ["model.promise_dwh.remit_attempt", "source.promise_dwh.finance.remit_attempt"], "test.promise_dwh.dbt_utils_equal_rowcount_payment_provider_balance__source_finance_payment_provider_balance_.060ca96bc1": ["model.promise_dwh.payment_provider_balance", "source.promise_dwh.finance.payment_provider_balance"], "test.promise_dwh.twilio_error_monitoring_twilio_message_30034__3.882b292e9e": ["model.promise_dwh.twilio_message"], "test.promise_dwh.stripe_equal_rowcounts_balance_transaction_id.f643eaaf02": ["model.promise_dwh.balance_transaction"], "test.promise_dwh.stripe_equal_rowcounts_charge_id.8c2bb41bf3": ["model.promise_dwh.charge"], "test.promise_dwh.stripe_equal_rowcounts_stripe_customer_id.ec8a9cf45a": ["model.promise_dwh.stripe_customer"], "test.promise_dwh.stripe_equal_rowcounts_dispute_balance_transaction_balance_transaction_id.a4e94bee3e": ["model.promise_dwh.dispute_balance_transaction"], "test.promise_dwh.stripe_equal_rowcounts_dispute_id.ba9a56c1cd": ["model.promise_dwh.dispute"], "test.promise_dwh.stripe_equal_rowcounts_refund_id.80e210a2c4": ["model.promise_dwh.refund"], "test.promise_dwh.stripe_equal_rowcounts_transaction_fee_detail_request_id.b9b2b21aad": ["model.promise_dwh.transaction_fee_detail"], "test.promise_dwh.unique_jurisdiction_metadata_jurisdiction.089ca698ab": ["seed.promise_dwh.jurisdiction_metadata"], "test.promise_dwh.not_null_jurisdiction_metadata_jurisdiction.e47f81d0c0": ["seed.promise_dwh.jurisdiction_metadata"], "model.promise_dwh.stg__sse_with_past_due_events": ["model.promise_dwh.finance_event", "model.promise_dwh.single_sided_entry", "model.promise_dwh.stg__scheduled_payments_lookback"], "model.promise_dwh.stg__scheduled_payments_lookback": ["model.promise_dwh.customer", "model.promise_dwh.single_sided_entry", "model.promise_dwh.sse_ids"], "model.promise_dwh.customer_communication_combined": ["model.promise_dwh.customer_communication", "model.promise_dwh.kustomer_emails_for_customer_communication", "source.promise_dwh.adhoc_tables.buffalo_data_enrichment_comms"], "snapshot.promise_dwh.jurisdiction_metadata_historical": ["seed.promise_dwh.jurisdiction_metadata"], "source.promise_dwh.adhoc_tables.buffalo_data_enrichment_comms": [], "source.promise_dwh.finance.event": [], "source.promise_dwh.finance.ledger": [], "source.promise_dwh.finance.api_request": [], "source.promise_dwh.finance.plan": [], "source.promise_dwh.finance.payment_attempt": [], "source.promise_dwh.finance.payment_method": [], "source.promise_dwh.finance.refund_attempt": [], "source.promise_dwh.finance.remit_attempt": [], "source.promise_dwh.finance.scheduled_payment_entity": [], "source.promise_dwh.finance.payment_provider_balance": [], "source.promise_dwh.finance_dev.event": [], "source.promise_dwh.finance_dev.ledger": [], "source.promise_dwh.finance_dev.api_request": [], "source.promise_dwh.finance_dev.plan": [], "source.promise_dwh.finance_dev.payment_attempt": [], "source.promise_dwh.finance_dev.payment_method": [], "source.promise_dwh.finance_dev.refund_attempt": [], "source.promise_dwh.finance_dev.remit_attempt": [], "source.promise_dwh.finance_dev.scheduled_payment_entity": [], "source.promise_dwh.finance_dev.payment_provider_balance": [], "source.promise_dwh.stripe.balance_transaction": [], "source.promise_dwh.stripe.charge": [], "source.promise_dwh.stripe.customer": [], "source.promise_dwh.stripe.dispute_balance_transaction": [], "source.promise_dwh.stripe.dispute": [], "source.promise_dwh.stripe.payment_intent": [], "source.promise_dwh.stripe.refund": [], "source.promise_dwh.stripe.transaction_fee_detail": [], "source.promise_dwh.template_service.template": [], "source.promise_dwh.template_service.template_text": [], "source.promise_dwh.template_service.template_fields": []}, "child_map": {"model.promise_dwh.customer": ["model.promise_dwh.alexrenew_water", "model.promise_dwh.baltimore", "model.promise_dwh.buffalo_water", "model.promise_dwh.cal_water", "model.promise_dwh.centralarkansas_water", "model.promise_dwh.corona", "model.promise_dwh.customer_materialized", "model.promise_dwh.gcww", "model.promise_dwh.hrsd", "model.promise_dwh.jackson_water", "model.promise_dwh.louisville_water", "model.promise_dwh.newark_water", "model.promise_dwh.newmexico_water", "model.promise_dwh.newportnews_water", "model.promise_dwh.nola_water", "model.promise_dwh.richmond", "model.promise_dwh.sj_water", "model.promise_dwh.stg__scheduled_payments_lookback", "model.promise_dwh.toledo", "model.promise_dwh.veoliany_water", "model.promise_dwh.washington_water", "model.promise_dwh.wssc_water"], "model.promise_dwh.customer_communication": ["model.promise_dwh.customer_communication_combined"], "model.promise_dwh.survey_wide": [], "model.promise_dwh.customer_version": [], "model.promise_dwh.stg__survey_paths": ["model.promise_dwh.stg__survey_long"], "model.promise_dwh.transaction_fee_configs": ["snapshot.promise_dwh.transaction_fee_configs_snapshot"], "model.promise_dwh.client_comms_recipient": [], "model.promise_dwh.payment_plan_event_history": [], "model.promise_dwh.customer_materialized": [], "model.promise_dwh.stg__lw_sandbox_current_account_facts": [], "model.promise_dwh.customer_config_wide": ["model.promise_dwh.customer_config_long"], "model.promise_dwh.customer_config_long": ["snapshot.promise_dwh.customer_config_snapshot"], "model.promise_dwh.obligation": [], "model.promise_dwh.customer_config_attributes": ["model.promise_dwh.customer_config_long", "model.promise_dwh.customer_config_wide"], "model.promise_dwh.system_properties": [], "model.promise_dwh.payment_record": [], "model.promise_dwh.stg__lw_sandbox_plans": [], "model.promise_dwh.customer_exception_history": [], "model.promise_dwh.stg__survey_long": ["model.promise_dwh.survey_wide"], "model.promise_dwh.pledge": [], "model.promise_dwh.user_status_promisepay": [], "model.promise_dwh.calls_valihwap": [], "model.promise_dwh.user_status_valihwap": [], "model.promise_dwh.calls_explore_valihwap": [], "model.promise_dwh.studio_flow_execution_valihwap": [], "model.promise_dwh.calls_promisepay": [], "model.promise_dwh.studio_flow_execution_promisepay": [], "model.promise_dwh.events_wide": [], "model.promise_dwh.event_attributes": ["model.promise_dwh.events_wide", "test.promise_dwh.dbt_utils_unique_combination_of_columns_event_attributes_attributes.21b06fb34c"], "model.promise_dwh.other_attributes": ["model.promise_dwh.events_wide", "test.promise_dwh.dbt_utils_unique_combination_of_columns_other_attributes_attributes.1a01332839"], "model.promise_dwh.session_facts": ["model.promise_dwh.device_user_map"], "model.promise_dwh.device_user_map": ["model.promise_dwh.events_wide", "test.promise_dwh.dbt_utils_unique_combination_of_columns_device_user_map_device_id__last_user_id.5e3156e4f6"], "model.promise_dwh.user_attributes": ["model.promise_dwh.events_wide", "test.promise_dwh.dbt_utils_unique_combination_of_columns_user_attributes_attributes.079d587c1d"], "model.promise_dwh.company": [], "model.promise_dwh.property": [], "model.promise_dwh.engagement_meeting": [], "model.promise_dwh.engagement_deal": [], "model.promise_dwh.deal_pipeline_stage": [], "model.promise_dwh.contact_property_history": [], "model.promise_dwh.engagement_contact": [], "model.promise_dwh.deal_pipeline": [], "model.promise_dwh.deal_company": [], "model.promise_dwh.deal_contact": [], "model.promise_dwh.owner": [], "model.promise_dwh.engagement_company": [], "model.promise_dwh.deal_property_history": [], "model.promise_dwh.company_property_history": [], "model.promise_dwh.engagement": [], "model.promise_dwh.deal": [], "model.promise_dwh.deal_stage": [], "model.promise_dwh.contact": [], "model.promise_dwh.prod_dag_list": ["snapshot.promise_dwh.airflow_prod_dag_list_snapshot"], "model.promise_dwh.prod_all_dag_runs": ["snapshot.promise_dwh.airflow_prod_all_dag_runs_snapshot"], "model.promise_dwh.alexrenew_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.jackson_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.newark_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.account_history_combined": ["model.promise_dwh.account_history_combined_current", "model.promise_dwh.lw_gte_7_days_past_due", "test.promise_dwh.accepted_values_account_history_combined_account_type__R__I__C__M.2ffae00bec"], "model.promise_dwh.corona": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.buffalo_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.richmond": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.gcww": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.washington_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.baltimore": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.nola_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.newportnews_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.veoliany_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.lw_gte_7_days_past_due": [], "model.promise_dwh.centralarkansas_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.hrsd": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.sj_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.cal_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.account_history_combined_current": [], "model.promise_dwh.louisville_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.newmexico_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.wssc_water": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.toledo": ["model.promise_dwh.account_history_combined"], "model.promise_dwh.hrsd_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.richmond_delta_rows": ["model.promise_dwh.richmond_deltas_v2"], "model.promise_dwh.richmond_complete_with_eligibility": ["model.promise_dwh.richmond_delta_rows", "model.promise_dwh.richmond_deltas_v2", "model.promise_dwh.richmond_mr_data"], "model.promise_dwh.veoliany_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.hrsd_deltas_v2": ["model.promise_dwh.hrsd", "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_deltas_v2_account_number_hashed__valid_starting.846bb7ea04"], "model.promise_dwh.toledo_delta_rows": ["model.promise_dwh.toledo_deltas_v2", "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_delta_rows_account_number_hashed__UPLOAD_DATE.b4d51c14ef"], "model.promise_dwh.veoliany_water_complete_with_eligibility": ["model.promise_dwh.veoliany_water_delta_rows", "model.promise_dwh.veoliany_water_deltas_v2", "model.promise_dwh.veoliany_water_mr_data"], "model.promise_dwh.wssc_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.alexrenew_water_complete_with_eligibility": ["model.promise_dwh.alexrenew_water_delta_rows", "model.promise_dwh.alexrenew_water_deltas_v2", "model.promise_dwh.alexrenew_water_mr_data"], "model.promise_dwh.mr_client_data": [], "model.promise_dwh.washington_water_delta_rows": ["model.promise_dwh.washington_water_deltas_v2"], "model.promise_dwh.newark_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.richmond_deltas_v2": ["model.promise_dwh.richmond"], "model.promise_dwh.buffalo_water_deltas_v2": ["model.promise_dwh.buffalo_water", "test.promise_dwh.dbt_utils_unique_combination_of_columns_buffalo_water_deltas_v2_account_number_hashed__valid_starting.5d5102ea8e"], "model.promise_dwh.sj_water_delta_rows": ["model.promise_dwh.sj_water_deltas_v2"], "model.promise_dwh.veoliany_water_deltas_v2": ["model.promise_dwh.veoliany_water", "test.promise_dwh.dbt_utils_unique_combination_of_columns_veoliany_water_deltas_v2_account_number_hashed__valid_starting.2080771d32"], "model.promise_dwh.newark_water_complete_with_eligibility": ["model.promise_dwh.newark_water_delta_rows", "model.promise_dwh.newark_water_deltas_v2", "model.promise_dwh.newark_water_mr_data", "test.promise_dwh.dbt_utils_unique_combination_of_columns_newark_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.bacd5a53ba"], "model.promise_dwh.gcww_deltas_v2": ["model.promise_dwh.gcww", "test.promise_dwh.dbt_utils_unique_combination_of_columns_gcww_deltas_v2_account_number_hashed__valid_starting.6a9eaa84b0"], "model.promise_dwh.toledo_deltas_v2": ["model.promise_dwh.toledo", "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_deltas_v2_account_number_hashed__valid_starting.3fdfe6d6dd"], "model.promise_dwh.baltimore_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.nola_water_complete_with_eligibility": ["model.promise_dwh.nola_water_delta_rows", "model.promise_dwh.nola_water_deltas_v2", "model.promise_dwh.nola_water_mr_data"], "model.promise_dwh.newmexico_water_complete_with_eligibility": ["model.promise_dwh.newmexico_water_delta_rows", "model.promise_dwh.newmexico_water_deltas_v2", "model.promise_dwh.newmexico_water_mr_data"], "model.promise_dwh.newportnews_water_deltas_v2": ["model.promise_dwh.newportnews_water"], "model.promise_dwh.buffalo_water_complete_with_eligibility": ["model.promise_dwh.buffalo_water_delta_rows", "model.promise_dwh.buffalo_water_deltas_v2", "model.promise_dwh.buffalo_water_mr_data", "test.promise_dwh.dbt_utils_unique_combination_of_columns_buffalo_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.9113f63092"], "model.promise_dwh.washington_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.sj_water_complete_with_eligibility": ["model.promise_dwh.sj_water_delta_rows", "model.promise_dwh.sj_water_deltas_v2", "model.promise_dwh.sj_water_mr_data"], "model.promise_dwh.centralarkansas_water_complete_with_eligibility": ["model.promise_dwh.centralarkansas_water_delta_rows", "model.promise_dwh.centralarkansas_water_deltas_v2", "model.promise_dwh.centralarkansas_water_mr_data"], "model.promise_dwh.sj_water_deltas_v2": ["model.promise_dwh.sj_water"], "model.promise_dwh.toledo_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.cal_water_deltas_v2": ["model.promise_dwh.cal_water"], "model.promise_dwh.centralarkansas_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.baltimore_delta_rows": ["model.promise_dwh.baltimore_deltas_v2"], "model.promise_dwh.newportnews_water_delta_rows": ["model.promise_dwh.newportnews_water_deltas_v2"], "model.promise_dwh.nola_water_deltas_v2": ["model.promise_dwh.nola_water"], "model.promise_dwh.cal_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.wssc_water_deltas_v2": ["model.promise_dwh.wssc_water"], "model.promise_dwh.gcww_delta_rows": ["model.promise_dwh.gcww_deltas_v2", "test.promise_dwh.dbt_utils_unique_combination_of_columns_gcww_delta_rows_account_number_hashed__UPLOAD_DATE.dede6fe02b"], "model.promise_dwh.jackson_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.louisville_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.centralarkansas_water_deltas_v2": ["model.promise_dwh.centralarkansas_water", "test.promise_dwh.dbt_utils_unique_combination_of_columns_centralarkansas_water_deltas_v2_account_number_hashed__valid_starting.cabe0bedd0"], "model.promise_dwh.newmexico_water_delta_rows": ["model.promise_dwh.newmexico_water_deltas_v2"], "model.promise_dwh.louisville_water_deltas_v2": ["model.promise_dwh.louisville_water", "test.promise_dwh.dbt_utils_unique_combination_of_columns_louisville_water_deltas_v2_account_number_hashed__valid_starting.c4c12c8f23"], "model.promise_dwh.corona_deltas_v2": ["model.promise_dwh.corona", "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_deltas_v2_account_number_hashed__valid_starting.f2a965239d"], "model.promise_dwh.newmexico_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.buffalo_water_delta_rows": ["model.promise_dwh.buffalo_water_deltas_v2"], "model.promise_dwh.alexrenew_water_deltas_v2": ["model.promise_dwh.alexrenew_water", "test.promise_dwh.dbt_utils_unique_combination_of_columns_alexrenew_water_deltas_v2_account_number_hashed__valid_starting.95def3c3fe"], "model.promise_dwh.richmond_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.nola_water_delta_rows": ["model.promise_dwh.nola_water_deltas_v2"], "model.promise_dwh.newark_water_deltas_v2": ["model.promise_dwh.newark_water", "test.promise_dwh.dbt_utils_unique_combination_of_columns_newark_water_deltas_v2_account_number_hashed__valid_starting.621e3a3a44"], "model.promise_dwh.sj_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.gcww_complete_with_eligibility": ["model.promise_dwh.gcww_delta_rows", "model.promise_dwh.gcww_deltas_v2", "model.promise_dwh.gcww_mr_data"], "model.promise_dwh.jackson_water_delta_rows": ["model.promise_dwh.jackson_water_deltas_v2"], "model.promise_dwh.wssc_water_complete_with_eligibility": ["model.promise_dwh.wssc_water_delta_rows", "model.promise_dwh.wssc_water_deltas_v2", "model.promise_dwh.wssc_water_mr_data"], "model.promise_dwh.newark_water_delta_rows": ["model.promise_dwh.newark_water_deltas_v2"], "model.promise_dwh.corona_delta_rows": ["model.promise_dwh.corona_deltas_v2", "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_delta_rows_account_number_hashed__UPLOAD_DATE.75107ab10e"], "model.promise_dwh.washington_water_deltas_v2": ["model.promise_dwh.washington_water"], "model.promise_dwh.jackson_water_complete_with_eligibility": ["model.promise_dwh.jackson_water_delta_rows", "model.promise_dwh.jackson_water_deltas_v2", "model.promise_dwh.jackson_water_mr_data"], "model.promise_dwh.veoliany_water_delta_rows": ["model.promise_dwh.veoliany_water_deltas_v2"], "model.promise_dwh.jackson_water_deltas_v2": ["model.promise_dwh.jackson_water"], "model.promise_dwh.hrsd_complete_with_eligibility": ["model.promise_dwh.hrsd_delta_rows", "model.promise_dwh.hrsd_deltas_v2", "model.promise_dwh.hrsd_mr_data", "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.37162f93b7"], "model.promise_dwh.baltimore_deltas_v2": ["model.promise_dwh.baltimore"], "model.promise_dwh.newmexico_water_deltas_v2": ["model.promise_dwh.newmexico_water"], "model.promise_dwh.cal_water_delta_rows": ["model.promise_dwh.cal_water_deltas_v2"], "model.promise_dwh.newportnews_water_complete_with_eligibility": ["model.promise_dwh.newportnews_water_delta_rows", "model.promise_dwh.newportnews_water_deltas_v2", "model.promise_dwh.newportnews_water_mr_data"], "model.promise_dwh.louisville_water_delta_rows": ["model.promise_dwh.louisville_water_deltas_v2", "test.promise_dwh.dbt_utils_unique_combination_of_columns_louisville_water_delta_rows_account_number_hashed__UPLOAD_DATE.24631b77ff"], "model.promise_dwh.wssc_water_delta_rows": ["model.promise_dwh.wssc_water_deltas_v2"], "model.promise_dwh.alexrenew_water_delta_rows": ["model.promise_dwh.alexrenew_water_deltas_v2", "test.promise_dwh.dbt_utils_unique_combination_of_columns_alexrenew_water_delta_rows_account_number_hashed__UPLOAD_DATE.c4e89b4db7"], "model.promise_dwh.cal_water_complete_with_eligibility": ["model.promise_dwh.cal_water_delta_rows", "model.promise_dwh.cal_water_deltas_v2", "model.promise_dwh.cal_water_mr_data"], "model.promise_dwh.centralarkansas_water_delta_rows": ["model.promise_dwh.centralarkansas_water_deltas_v2"], "model.promise_dwh.corona_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.gcww_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.buffalo_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.nola_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.hrsd_delta_rows": ["model.promise_dwh.hrsd_deltas_v2", "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_delta_rows_account_number_hashed__UPLOAD_DATE.26dfdfd4fb"], "model.promise_dwh.newportnews_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.alexrenew_water_mr_data": ["model.promise_dwh.mr_client_data"], "model.promise_dwh.washington_water_complete_with_eligibility": ["model.promise_dwh.washington_water_delta_rows", "model.promise_dwh.washington_water_deltas_v2", "model.promise_dwh.washington_water_mr_data"], "model.promise_dwh.baltimore_complete_with_eligibility": ["model.promise_dwh.baltimore_delta_rows", "model.promise_dwh.baltimore_deltas_v2", "model.promise_dwh.baltimore_mr_data"], "model.promise_dwh.corona_complete_with_eligibility": ["model.promise_dwh.corona_delta_rows", "model.promise_dwh.corona_deltas_v2", "model.promise_dwh.corona_mr_data", "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_complete_with_eligibility_account_number_hashed__account_status__UPLOAD_DATE.e81242254a"], "model.promise_dwh.toledo_complete_with_eligibility": ["model.promise_dwh.toledo_delta_rows", "model.promise_dwh.toledo_deltas_v2", "model.promise_dwh.toledo_mr_data", "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.2a17cb52b3"], "model.promise_dwh.request_type": [], "model.promise_dwh.request": [], "model.promise_dwh.project": [], "model.promise_dwh.component": [], "model.promise_dwh.status": [], "model.promise_dwh.issue_board": [], "model.promise_dwh.issue_watcher": [], "model.promise_dwh.user_group": [], "model.promise_dwh.project_role": [], "model.promise_dwh.comment": [], "model.promise_dwh.issue_multiselect_history": [], "model.promise_dwh.board": [], "model.promise_dwh.user_jira": [], "model.promise_dwh.issue_type": [], "model.promise_dwh.issue_link": [], "model.promise_dwh.permission": [], "model.promise_dwh.organization": [], "model.promise_dwh.project_board": [], "model.promise_dwh.issue_field_history": [], "model.promise_dwh.priority": [], "model.promise_dwh.project_category": [], "model.promise_dwh.sprint": [], "model.promise_dwh.field_option": [], "model.promise_dwh.project_role_actor": [], "model.promise_dwh.issue": [], "model.promise_dwh.field": [], "model.promise_dwh.epic": [], "model.promise_dwh.conversation": [], "model.promise_dwh.message": [], "model.promise_dwh.note": [], "model.promise_dwh.customer_kustomer": [], "model.promise_dwh.kustomer_emails_for_customer_communication": ["model.promise_dwh.customer_communication_combined"], "model.promise_dwh.user": [], "model.promise_dwh.single_sided_entry": ["model.promise_dwh.sse_ids", "model.promise_dwh.stg__scheduled_payments_lookback", "model.promise_dwh.stg__sse_with_past_due_events", "model.promise_dwh.upcoming_payments", "test.promise_dwh.dbt_utils_equal_rowcount_single_sided_entry__source_finance_ledger_.f2dc4f1eea"], "model.promise_dwh.upcoming_payments": ["model.promise_dwh.upcoming_payments_client_level"], "model.promise_dwh.payment_attempt": ["test.promise_dwh.dbt_utils_equal_rowcount_payment_attempt__source_finance_payment_attempt_.b87f20362a"], "model.promise_dwh.finance_event": ["model.promise_dwh.stg__sse_with_past_due_events", "test.promise_dwh.dbt_utils_equal_rowcount_finance_event__source_finance_event_.3acf90b47b"], "model.promise_dwh.payment_provider_balance": ["test.promise_dwh.dbt_utils_equal_rowcount_payment_provider_balance__source_finance_payment_provider_balance_.060ca96bc1"], "model.promise_dwh.refund_attempt": ["test.promise_dwh.dbt_utils_equal_rowcount_refund_attempt__source_finance_refund_attempt_.3db86495e1"], "model.promise_dwh.finance_plan": ["test.promise_dwh.dbt_utils_equal_rowcount_finance_plan__source_finance_plan_.c31f4e9b27"], "model.promise_dwh.remit_attempt": ["test.promise_dwh.dbt_utils_equal_rowcount_remit_attempt__source_finance_remit_attempt_.0446ca9a51"], "model.promise_dwh.payment_method": ["test.promise_dwh.dbt_utils_equal_rowcount_payment_method__source_finance_payment_method_.168378dafe"], "model.promise_dwh.upcoming_payments_client_level": [], "model.promise_dwh.finance_api_request": [], "model.promise_dwh.sse_ids": ["model.promise_dwh.stg__scheduled_payments_lookback"], "model.promise_dwh.twilio_message": ["test.promise_dwh.twilio_error_monitoring_twilio_message_30034__3.882b292e9e"], "model.promise_dwh.balance_transaction": ["test.promise_dwh.stripe_equal_rowcounts_balance_transaction_id.f643eaaf02"], "model.promise_dwh.dispute_balance_transaction": ["test.promise_dwh.stripe_equal_rowcounts_dispute_balance_transaction_balance_transaction_id.a4e94bee3e"], "model.promise_dwh.card": [], "model.promise_dwh.refund": ["test.promise_dwh.stripe_equal_rowcounts_refund_id.80e210a2c4"], "model.promise_dwh.transaction_fee_detail": ["test.promise_dwh.stripe_equal_rowcounts_transaction_fee_detail_request_id.b9b2b21aad"], "model.promise_dwh.payment_intent": [], "model.promise_dwh.charge": ["test.promise_dwh.stripe_equal_rowcounts_charge_id.8c2bb41bf3"], "model.promise_dwh.stripe_customer": ["test.promise_dwh.stripe_equal_rowcounts_stripe_customer_id.ec8a9cf45a"], "model.promise_dwh.dispute": ["test.promise_dwh.stripe_equal_rowcounts_dispute_id.ba9a56c1cd"], "model.promise_dwh.stg__template": ["model.promise_dwh.template"], "model.promise_dwh.template": [], "model.promise_dwh.stg__template_version_field": ["model.promise_dwh.template_text"], "model.promise_dwh.template_text": [], "model.promise_dwh.stg__template_version": ["model.promise_dwh.template_text"], "snapshot.promise_dwh.transaction_fee_configs_snapshot": [], "snapshot.promise_dwh.customer_config_snapshot": [], "snapshot.promise_dwh.airflow_prod_dag_list_snapshot": [], "snapshot.promise_dwh.airflow_prod_all_dag_runs_snapshot": [], "analysis.promise_dwh.fraud_check_vdss": [], "analysis.promise_dwh.finance_not_stripe": [], "analysis.promise_dwh.stripe_transactions": [], "analysis.promise_dwh.unattributed_stripe_fees": [], "analysis.promise_dwh.stripe_not_finance": [], "analysis.promise_dwh.flow_for_month_as_of_now": [], "analysis.promise_dwh.payments_this_month_for_other_months": [], "analysis.promise_dwh.flow_diff_since_month_end": [], "analysis.promise_dwh.flow_as_of_month_end": [], "analysis.promise_dwh.balance_diff_since_month_end": [], "analysis.promise_dwh.payments_this_month_for_this_month": [], "analysis.promise_dwh.balance_for_month_as_of_now": [], "analysis.promise_dwh.payments_in_other_months_for_this_month": [], "analysis.promise_dwh.balance_as_of_month_end": [], "analysis.promise_dwh.insert_new_accountholder_records": [], "analysis.promise_dwh.update_new_hh_matches": [], "analysis.promise_dwh.converted_app_hh_matches": [], "analysis.promise_dwh.prequals_to_sms": [], "analysis.promise_dwh.load_Promise_AcctHolder_DSS_Account_Holder_Name": [], "analysis.promise_dwh.load_Promise_HHMembers_DSS_Household_Members": [], "analysis.promise_dwh.insert_new_hh_records": [], "analysis.promise_dwh.convert_unintegrated_utilities": [], "analysis.promise_dwh.update_new_accountholder_matches": [], "analysis.promise_dwh.find_prequal_to_qual_people": [], "analysis.promise_dwh.oc_cleaning": [], "analysis.promise_dwh.load_new_coastal_cloud": [], "analysis.promise_dwh.toho_exclude_accounts": [], "analysis.promise_dwh.toho_stcloud_cleaning": [], "analysis.promise_dwh.load_full_liheap": [], "analysis.promise_dwh.manatee_cleanup": [], "analysis.promise_dwh.toho_kissimmee_cleaning": [], "analysis.promise_dwh.load_snap_data": [], "analysis.promise_dwh.jea_cleaning": [], "analysis.promise_dwh.load_full_eheap": [], "analysis.promise_dwh.stripe_transaction_fee_details_insert": [], "analysis.promise_dwh.stripe_transaction_insert": [], "test.promise_dwh.utility_deltas_one_current_at_a_time": [], "seed.promise_dwh.jurisdiction_metadata": ["snapshot.promise_dwh.jurisdiction_metadata_historical", "test.promise_dwh.not_null_jurisdiction_metadata_jurisdiction.e47f81d0c0", "test.promise_dwh.unique_jurisdiction_metadata_jurisdiction.089ca698ab"], "test.promise_dwh.dbt_utils_unique_combination_of_columns_event_attributes_attributes.21b06fb34c": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_user_attributes_attributes.079d587c1d": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_other_attributes_attributes.1a01332839": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_device_user_map_device_id__last_user_id.5e3156e4f6": [], "test.promise_dwh.accepted_values_account_history_combined_account_type__R__I__C__M.2ffae00bec": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_gcww_delta_rows_account_number_hashed__UPLOAD_DATE.dede6fe02b": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_alexrenew_water_delta_rows_account_number_hashed__UPLOAD_DATE.c4e89b4db7": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.2a17cb52b3": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_delta_rows_account_number_hashed__UPLOAD_DATE.b4d51c14ef": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.37162f93b7": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_complete_with_eligibility_account_number_hashed__account_status__UPLOAD_DATE.e81242254a": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_buffalo_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.9113f63092": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_newark_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.bacd5a53ba": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_delta_rows_account_number_hashed__UPLOAD_DATE.26dfdfd4fb": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_louisville_water_delta_rows_account_number_hashed__UPLOAD_DATE.24631b77ff": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_delta_rows_account_number_hashed__UPLOAD_DATE.75107ab10e": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_gcww_deltas_v2_account_number_hashed__valid_starting.6a9eaa84b0": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_alexrenew_water_deltas_v2_account_number_hashed__valid_starting.95def3c3fe": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_deltas_v2_account_number_hashed__valid_starting.3fdfe6d6dd": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_deltas_v2_account_number_hashed__valid_starting.846bb7ea04": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_louisville_water_deltas_v2_account_number_hashed__valid_starting.c4c12c8f23": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_deltas_v2_account_number_hashed__valid_starting.f2a965239d": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_buffalo_water_deltas_v2_account_number_hashed__valid_starting.5d5102ea8e": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_newark_water_deltas_v2_account_number_hashed__valid_starting.621e3a3a44": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_veoliany_water_deltas_v2_account_number_hashed__valid_starting.2080771d32": [], "test.promise_dwh.dbt_utils_unique_combination_of_columns_centralarkansas_water_deltas_v2_account_number_hashed__valid_starting.cabe0bedd0": [], "test.promise_dwh.dbt_utils_equal_rowcount_finance_event__source_finance_event_.3acf90b47b": [], "test.promise_dwh.dbt_utils_equal_rowcount_single_sided_entry__source_finance_ledger_.f2dc4f1eea": [], "test.promise_dwh.dbt_utils_equal_rowcount_finance_plan__source_finance_plan_.c31f4e9b27": [], "test.promise_dwh.dbt_utils_equal_rowcount_payment_attempt__source_finance_payment_attempt_.b87f20362a": [], "test.promise_dwh.dbt_utils_equal_rowcount_payment_method__source_finance_payment_method_.168378dafe": [], "test.promise_dwh.dbt_utils_equal_rowcount_refund_attempt__source_finance_refund_attempt_.3db86495e1": [], "test.promise_dwh.dbt_utils_equal_rowcount_remit_attempt__source_finance_remit_attempt_.0446ca9a51": [], "test.promise_dwh.dbt_utils_equal_rowcount_payment_provider_balance__source_finance_payment_provider_balance_.060ca96bc1": [], "test.promise_dwh.twilio_error_monitoring_twilio_message_30034__3.882b292e9e": [], "test.promise_dwh.stripe_equal_rowcounts_balance_transaction_id.f643eaaf02": [], "test.promise_dwh.stripe_equal_rowcounts_charge_id.8c2bb41bf3": [], "test.promise_dwh.stripe_equal_rowcounts_stripe_customer_id.ec8a9cf45a": [], "test.promise_dwh.stripe_equal_rowcounts_dispute_balance_transaction_balance_transaction_id.a4e94bee3e": [], "test.promise_dwh.stripe_equal_rowcounts_dispute_id.ba9a56c1cd": [], "test.promise_dwh.stripe_equal_rowcounts_refund_id.80e210a2c4": [], "test.promise_dwh.stripe_equal_rowcounts_transaction_fee_detail_request_id.b9b2b21aad": [], "test.promise_dwh.unique_jurisdiction_metadata_jurisdiction.089ca698ab": [], "test.promise_dwh.not_null_jurisdiction_metadata_jurisdiction.e47f81d0c0": [], "model.promise_dwh.stg__sse_with_past_due_events": [], "model.promise_dwh.stg__scheduled_payments_lookback": ["model.promise_dwh.stg__sse_with_past_due_events"], "model.promise_dwh.customer_communication_combined": ["model.promise_dwh.client_comms_recipient"], "snapshot.promise_dwh.jurisdiction_metadata_historical": [], "source.promise_dwh.adhoc_tables.buffalo_data_enrichment_comms": ["model.promise_dwh.customer_communication_combined"], "source.promise_dwh.finance.event": ["model.promise_dwh.finance_event", "test.promise_dwh.dbt_utils_equal_rowcount_finance_event__source_finance_event_.3acf90b47b"], "source.promise_dwh.finance.ledger": ["model.promise_dwh.single_sided_entry", "test.promise_dwh.dbt_utils_equal_rowcount_single_sided_entry__source_finance_ledger_.f2dc4f1eea"], "source.promise_dwh.finance.api_request": ["model.promise_dwh.finance_api_request"], "source.promise_dwh.finance.plan": ["model.promise_dwh.finance_plan", "test.promise_dwh.dbt_utils_equal_rowcount_finance_plan__source_finance_plan_.c31f4e9b27"], "source.promise_dwh.finance.payment_attempt": ["model.promise_dwh.payment_attempt", "test.promise_dwh.dbt_utils_equal_rowcount_payment_attempt__source_finance_payment_attempt_.b87f20362a"], "source.promise_dwh.finance.payment_method": ["model.promise_dwh.payment_method", "test.promise_dwh.dbt_utils_equal_rowcount_payment_method__source_finance_payment_method_.168378dafe"], "source.promise_dwh.finance.refund_attempt": ["model.promise_dwh.refund_attempt", "test.promise_dwh.dbt_utils_equal_rowcount_refund_attempt__source_finance_refund_attempt_.3db86495e1"], "source.promise_dwh.finance.remit_attempt": ["model.promise_dwh.remit_attempt", "test.promise_dwh.dbt_utils_equal_rowcount_remit_attempt__source_finance_remit_attempt_.0446ca9a51"], "source.promise_dwh.finance.scheduled_payment_entity": [], "source.promise_dwh.finance.payment_provider_balance": ["model.promise_dwh.payment_provider_balance", "test.promise_dwh.dbt_utils_equal_rowcount_payment_provider_balance__source_finance_payment_provider_balance_.060ca96bc1"], "source.promise_dwh.finance_dev.event": [], "source.promise_dwh.finance_dev.ledger": [], "source.promise_dwh.finance_dev.api_request": [], "source.promise_dwh.finance_dev.plan": [], "source.promise_dwh.finance_dev.payment_attempt": [], "source.promise_dwh.finance_dev.payment_method": [], "source.promise_dwh.finance_dev.refund_attempt": [], "source.promise_dwh.finance_dev.remit_attempt": [], "source.promise_dwh.finance_dev.scheduled_payment_entity": [], "source.promise_dwh.finance_dev.payment_provider_balance": [], "source.promise_dwh.stripe.balance_transaction": [], "source.promise_dwh.stripe.charge": [], "source.promise_dwh.stripe.customer": [], "source.promise_dwh.stripe.dispute_balance_transaction": [], "source.promise_dwh.stripe.dispute": [], "source.promise_dwh.stripe.payment_intent": [], "source.promise_dwh.stripe.refund": [], "source.promise_dwh.stripe.transaction_fee_detail": [], "source.promise_dwh.template_service.template": [], "source.promise_dwh.template_service.template_text": [], "source.promise_dwh.template_service.template_fields": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}