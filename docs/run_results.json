{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.14", "generated_at": "2024-05-13T02:13:32.163342Z", "invocation_id": "cbbe5a81-67d0-4459-9634-487e3a611dbc", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.852472Z", "completed_at": "2024-05-13T02:13:23.877341Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.966551Z", "completed_at": "2024-05-13T02:13:23.966562Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12561321258544922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.balance_as_of_month_end", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\nwith ending_balances as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'ending' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n          and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_balances as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'starting' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n          and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_and_ending_balances as (\n        select * from starting_balances\n        union \n        select * from ending_balances\n)\nselect \n  jurisdiction_id, period, accttype, acctkind, status, balance,\n  (case when accttype = 'Liability' then -1 else 1 end) * \n  cast (balance/100.0 as decimal(18, 2)) as human_readable_balance\nfrom starting_and_ending_balances\norder by 1, 2, 3, 4, 5 desc", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.869092Z", "completed_at": "2024-05-13T02:13:23.879987Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.967216Z", "completed_at": "2024-05-13T02:13:23.967220Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1257309913635254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.balance_diff_since_month_end", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\nwith ending_balances_diff as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'ending' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance_diff\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n          and eventfinalizedat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_balances_diff as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'starting' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance_diff\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n          and eventfinalizedat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_and_ending_balances as (\n        select * from starting_balances_diff\n        union \n        select * from ending_balances_diff\n)\nselect \n  jurisdiction_id, period, accttype, acctkind, status, balance_diff,\n  (case when accttype = 'Liability' then -1 else 1 end) * \n  cast (balance_diff/100.0 as decimal(18, 2)) as balance_diff_dollars\nfrom starting_and_ending_balances\norder by 1, 2, 3, 4, 5 desc", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.870751Z", "completed_at": "2024-05-13T02:13:23.882595Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.967828Z", "completed_at": "2024-05-13T02:13:23.967831Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1259310245513916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.balance_for_month_as_of_now", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\nwith ending_balances as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'ending' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_balances as (\n        select \n    acctidentifierjurisdictionid as jurisdiction_id,\n          'starting' as period,\n          accttype, \n          acctkind, \n    case \n    when acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n      then 'Actual'\n    else 'Hypothetical'\n    end as status,\n          sum(amount) as balance\n        from singlesidedentry\n        where accttype in ('Asset', 'Liability')\n          and eventstatus = 'Recorded'\n          and effectiveat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n),\nstarting_and_ending_balances as (\n        select * from starting_balances\n        union \n        select * from ending_balances\n)\nselect \n  jurisdiction_id, period, accttype, acctkind, status, balance,\n  (case when accttype = 'Liability' then -1 else 1 end) * \n  cast (balance/100.0 as decimal(18, 2)) as human_readable_balance\nfrom starting_and_ending_balances\norder by 1, 2, 3, 4, 5 desc", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.872339Z", "completed_at": "2024-05-13T02:13:23.939436Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.968412Z", "completed_at": "2024-05-13T02:13:23.968416Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1261298656463623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.convert_unintegrated_utilities", "compiled": true, "compiled_code": "WITH lihwap_relief_processing_state AS (\n  SELECT\n          rps.*,\n          ra.customer_id,\n         row_number() OVER (PARTITION BY customer_id ORDER BY rps.created_at DESC) as state_number_desc,\n         lead(rps.created_at) OVER (PARTITION BY customer_id ORDER BY rps.created_at) as next_transition_ts\n         FROM\n           `virginia-lihwap-pay.analytics_promisepay_prod.relief_processing_state` rps\n         LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` ra ON ra.id = rps.relief_application_id\n         ),\n-- First find all the applications\npre AS (\n  SELECT\n    DATE(pre_ra.created_at) as app_created,\n    JSON_VALUE(external_data, '$.metadata.values[0].utilityName') as utility_name,\n    JSON_VALUE(external_data, '$.accountNumber') as account_number,\n    JSON_VALUE(external_data, '$.accountName') as account_name,\n    JSON_VALUE(external_data, '$.serviceAddresses[0]') as address,\n    analytics_promisepay_prod.parseLocation(JSON_VALUE(external_data, '$.serviceAddresses[0]')) as parsed_address,\n    pii_to_verify as zip,\n    pre.phone_number as phone_number,\n    pre.name as name,\n    pre_ra.id as old_relief_application_id,\n    pre.id as old_customer_id\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\", \"SELECT * FROM customer;\") AS pre\n  LEFT JOIN\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\", \"SELECT * FROM obligation;\") pre_ob\n  ON\n    pre.id = pre_ob.customer_id\n  LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.service_address` pre_address\n    ON pre_ob.id = pre_address.id\n  LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` pre_ra\n    ON pre.id = pre_ra.customer_id\n  LEFT JOIN lihwap_relief_processing_state AS current_application_state ON \n      pre_ra.id = current_application_state.relief_application_id\n      AND current_application_state.state_number_desc = 1\n  -- Where their data source was unintegrated\n  WHERE data_source_id = 2 \n    -- It's not a test application\n    AND current_application_state.reason_codes <> 'TestAccount' \n    -- And they're still in the errored state\n    AND current_application_state.reason_codes = 'NonintegratedUtility'\n    AND pre_ra.active),\n\n-- Then find all accounts at integrated utilities\npost AS (\n  SELECT\n    post_ds.friendly_name as utility_name,\n    JSON_VALUE(external_data, '$.accountNumber') as account_number,\n    JSON_VALUE(external_data, '$.accountName') as account_name,\n    JSON_VALUE(external_data, '$.serviceAddresses[0]') as address,\n    analytics_promisepay_prod.parseLocation(JSON_VALUE(external_data, '$.serviceAddresses[0]')) as parsed_address,\n    SAFE_CAST(JSON_VALUE(external_data, '$.pastDueBalance.value') AS INT64)/100 as past_due_balance,\n    pii_to_verify as zip,\n    post.phone_number as phone_number,\n    post.name as name,\n    post.id as new_customer_id,\n    current_application_state.status as integrated_status\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\", \"SELECT * FROM customer;\") AS post\n  LEFT JOIN\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\", \"SELECT * FROM obligation;\") post_ob\n  ON\n    post.id = post_ob.customer_id\n  LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.service_address` post_address\n  ON post_ob.id = post_address.id\n  JOIN `virginia-lihwap-pay.analytics_promisepay_prod.data_source` post_ds\n    ON post_ds.id = post.data_source_id\n  LEFT JOIN lihwap_relief_processing_state AS current_application_state ON \n      post.id = current_application_state.customer_id\n      AND current_application_state.state_number_desc = 1\n  WHERE data_source_id != 2),\nall_flat AS (\n\nSELECT\n  app_created ni_app_created,\n  pre.old_relief_application_id ni_relief_application_id,\n  pre.old_customer_id AS nonintegrated_client_id,\n  LTRIM(REGEXP_REPLACE(pre.account_number, r'[^0-9]', \"\"), '0') AS  ni_account_number, \n  pre.utility_name ni_utility_name, \n  pre.address ni_address,\n  analytics_promisepay_prod.parseName(pre.name).first as ni_first_name,\n  analytics_promisepay_prod.parseName(pre.name).last as ni_last_name,\n  post.new_customer_id AS integrated_client_id,\n  integrated_status,\n  past_due_balance,\n  analytics_promisepay_prod.parseName(post.name).first as first_name_post,\n  analytics_promisepay_prod.parseName(post.name).last as last_name_post,\n  LOWER(analytics_promisepay_prod.parseName(pre.name).last) = LOWER(analytics_promisepay_prod.parseName(post.name).last) as last_names_match,\n  LTRIM(REGEXP_REPLACE(post.account_number, r'[^0-9]', \"\"), '0') AS  i_account_number, \n  LTRIM(REGEXP_REPLACE(pre.account_number, r'[^0-9]', \"\"), '0') = LTRIM(REGEXP_REPLACE(post.account_number, r'[^0-9]', \"\"), '0') AS account_numbers_match,\n  post.utility_name,\n  pre.phone_number = post.phone_number AS phone_numbers_match,\n  post.address,\n  CONCAT(pre.parsed_address.number, LEFT(pre.parsed_address.street, 2), pre.zip) = \n    CONCAT(post.parsed_address.number, LEFT(post.parsed_address.street, 2), post.zip) as addresses_match\n-- Then join any where the account number, account name, address, phone number or name match\nFROM\n  pre\n  LEFT JOIN post ON LTRIM(REGEXP_REPLACE(pre.account_number, r'[^0-9]', \"\"), '0') = LTRIM(REGEXP_REPLACE(post.account_number, r'[^0-9]', \"\"), '0')\n  OR CONCAT(pre.parsed_address.number, LEFT(pre.parsed_address.street, 2), pre.zip) = \n    CONCAT(post.parsed_address.number, LEFT(post.parsed_address.street, 2), post.zip)\n  OR pre.phone_number = post.phone_number\n  OR pre.name = post.name\nORDER BY 2)\nSELECT\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), NULL, ni_app_created) AS ni_app_created,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), NULL, ni_relief_application_id) AS ni_relief_application_id,\n  nonintegrated_client_id,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_account_number) AS ni_account_number,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_utility_name) AS ni_utility_name,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_address) AS ni_address,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_first_name) AS ni_first_name,\n  IF(nonintegrated_client_id = LAG(nonintegrated_client_id) OVER (PARTITION BY nonintegrated_client_id ORDER BY integrated_client_id), \"\", ni_last_name) AS ni_last_name,\n  * except (ni_app_created, ni_relief_application_id, nonintegrated_client_id, ni_account_number, ni_utility_name, ni_address,\n  ni_first_name, ni_last_name)\n\nFROM\n  all_flat\nORDER BY nonintegrated_client_id, integrated_client_id", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.874150Z", "completed_at": "2024-05-13T02:13:23.962111Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.969618Z", "completed_at": "2024-05-13T02:13:23.969621Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.12636303901672363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.converted_app_hh_matches", "compiled": true, "compiled_code": "-- First get processing state because that's where the note about old-to-new lives\nWITH\n  lihwap_relief_processing_state AS (\n  SELECT\n    rps.*,\n    ra.customer_id,\n    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY rps.created_at DESC) AS state_number_desc,\n    LEAD(rps.created_at) OVER (PARTITION BY customer_id ORDER BY rps.created_at) AS next_transition_ts\n  FROM\n    `virginia-lihwap-pay.analytics_promisepay_prod.relief_processing_state` rps\n  LEFT JOIN\n    `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` ra\n  ON\n    ra.id = rps.relief_application_id),\n -- Then get the mapping from client_id to their current app \n  lihwap_applicant_current_app AS (\n  SELECT\n    stg__lihwap_applicants_applications.customer_id AS client_id,\n    COALESCE(MAX(CASE\n          WHEN stg__lihwap_applicants_applications.active THEN stg__lihwap_applicants_applications.id\n        ELSE\n        NULL\n      END\n        ), MAX(stg__lihwap_applicants_applications.id )) AS current_lihwap_app_id\n  FROM\n    `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS stg__lihwap_applicants_applications\n  GROUP BY\n    1),\n  -- Query applications (with the notes) to find what client owned the app that was converted  \n  old_to_new AS (\n  SELECT\n    lihwap_relief_application.customer_id AS new_client_id,\n    CAST(CASE\n        WHEN current_application_state.notes LIKE 'resubmitted from nonintegrated application%' THEN REGEXP_EXTRACT(current_application_state.notes, r'^.* client id: ([0-9]*), UpdateSource')\n      ELSE\n      NULL\n    END\n      AS INT64) AS old_client_id\n  FROM\n    `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS lihwap_relief_application\n  LEFT JOIN\n    lihwap_relief_processing_state AS current_application_state\n  ON\n    lihwap_relief_application.customer_id = current_application_state.customer_id\n    AND current_application_state.state_number_desc = 1\n  WHERE\n    ((current_application_state.reason_codes) <> 'TestAccount'\n      OR (current_application_state.reason_codes) IS NULL)\n    AND (current_application_state.notes) LIKE 'resubmitted from nonintegrated%'\n  GROUP BY\n    1,\n    2),\n  -- Convert the client_id mapping from above to an application-to-application id mapping using each\n  -- client's current application  \n  old_app_to_new_app AS (\n  SELECT\n    old.current_lihwap_app_id AS old_id,\n    new_peeps.current_lihwap_app_id AS new_id\n  FROM\n    old_to_new\n  LEFT JOIN\n    lihwap_applicant_current_app old\n  ON\n    old_client_id = old.client_id\n  LEFT JOIN\n    lihwap_applicant_current_app new_peeps\n  ON\n    new_client_id = new_peeps.client_id)\n-- Finally, take the matches we have, and see if any have new_ids\nSELECT\n-- Pull apart the id we send to DSS (which is {application_id}#{hh_member_id})\n  DISTINCT\n  REGEXP_EXTRACT(hmc.id, r'([0-9]*)#.*') AS application_id,\n  REGEXP_EXTRACT(hmc.id, r'[0-9]*#(.*)') AS hh_member_id,\n  -- Look to make sure we have reasonable matches\n  old_id,\n  new_id,\n  -- These will be the new ids we insert into the household_matches table\n  CONCAT(new_id, '#', REGEXP_EXTRACT(hmc.id, r'[0-9]*#(.*)')) AS additional_match\nFROM\n  `virginia-lihwap-pay.dss_matching.household_members_complete` hmc\nJOIN\n  old_app_to_new_app\nON\n  CAST(REGEXP_EXTRACT(hmc.id, r'([0-9]*)#.*') AS INT64) = old_id", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.875726Z", "completed_at": "2024-05-13T02:13:23.962644Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.970597Z", "completed_at": "2024-05-13T02:13:23.970600Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.12650012969970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.finance_not_stripe", "compiled": true, "compiled_code": "WITH stripe_transactions AS (SELECT\n  *\nFROM (\n  WITH\n    charge_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.charge_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.charge_id IS NOT NULL\n      AND td.dispute_id IS NULL\n      AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    GROUP BY\n      td.charge_id ),\n    dispute_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.dispute_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.dispute_id IS NOT NULL\n      AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    GROUP BY\n      td.dispute_id ),\n    jurisdictions AS (\n    SELECT\n      c.id AS charge_id,\n      c.balance_transaction_id,\n      CASE\n        WHEN c.statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.statement_descriptor, (STRPOS(c.statement_descriptor, '-') + 1), (LENGTH(c.statement_descriptor) - STRPOS(c.statement_descriptor, '-')) ) ) )\n        WHEN c.calculated_statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.calculated_statement_descriptor, (STRPOS(c.calculated_statement_descriptor, '*') + 1), (LENGTH(c.calculated_statement_descriptor) - STRPOS(c.calculated_statement_descriptor, '*')) ) ) )\n      ELSE\n      NULL\n    END\n      AS jurisdiction\n    FROM\n      `analytics-prod-328313.stripe.charge` c )\n    -- Captured Charge + Payment Transactions Plus Associated Refunds\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN bt.type = 'charge' THEN 'Credit Card'\n      WHEN bt.type = 'payment' THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    bt.amount / 100.0 AS charge_amount,\n    r.amount /100.0 AS refund_amount,\n    (COALESCE(bt.amount,\n        0) - COALESCE(r.amount,\n        0)) / 100.0 AS total_revenue_CALCULATED,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(bt.fee,\n      0)\n  END\n    / 100.0 AS ach_fee,\n    cf.ic_flat AS ic_flat,\n    cf.ic_pct AS ic_pct,\n    cf.stripe_flat AS stripe_flat,\n    cf.stripe_pct AS stripe_pct,\n    COALESCE(cf.total_fees,\n      0) AS total_stripe_ic_fees,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(rbt.fee,\n      0)\n  END\n    / 100.0 AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    (CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(bt.fee,\n        0)\n    END\n      + COALESCE(cf.total_fees,\n        0) +\n      CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(rbt.fee,\n        0)\n    END\n      + 5) / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Captured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    bt.source = c.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    bt.id = j.balance_transaction_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` rbt\n  ON\n    r.balance_transaction_id = rbt.id\n  WHERE\n    bt.type IN ('payment',\n      'charge')\n  UNION ALL\n    -- Uncaptured Charge Transactions\n  SELECT\n    COALESCE(j.jurisdiction,\n      'UNKNOWN'),\n    'Credit Card' AS payment_method,\n    'charge - unsuccessful' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    .05 AS total_fees_CALCULATED,\n    NULL AS balance_transaction_id,\n    NULL AS balance_transaction_created,\n    NULL AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Uncaptured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    jurisdictions j\n  ON\n    c.id = j.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  WHERE\n    c.captured IS FALSE\n  UNION ALL\n    -- Dispute Data\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN cbt.type = 'charge' THEN 'Credit Card'\n      WHEN cbt.type IN ('payment_failure_refund',\n      'payment') THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    'dispute' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", d.created, \"America/Los_Angeles\") AS transaction_date,\n    -d.amount / 100.0 AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    df.ic_flat AS ic_flat,\n    df.ic_pct AS ic_pct,\n    df.stripe_flat AS stripe_flat,\n    df.stripe_pct AS stripe_pct,\n    COALESCE(df.total_fees,\n      0) AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    bt.fee / 100.0 AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    COALESCE(df.total_fees,\n        0) + (bt.fee / 100.0) AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    NULL AS fee_explanation,\n    'Disputes' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.dispute` d\n  JOIN\n    `analytics-prod-328313.stripe.dispute_balance_transaction` dbt\n  ON\n    d.id = dbt.dispute_id\n  JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    dbt.balance_transaction_id = bt.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.charge` c\n  ON\n    d.charge_id = c.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` cbt\n  ON\n    c.balance_transaction_id = cbt.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    d.charge_id = j.charge_id\n  LEFT JOIN\n    dispute_ic_fees df\n  ON\n    d.id = df.dispute_id\n  UNION ALL\n      -- Sigma + Connect Fees\n  SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    -- Unlike other transactions, we invoice for sigma/connect fees that are charged after the month they're incurred. \n    -- That is: Fees charged in July should be on the reconciliation reports for June.\n    -- Fudging the date stamp below to include them automatically. \n    FORMAT_TIMESTAMP(\"%F %T\", CAST(DATE_SUB(DATE(bt.created), INTERVAL 1 MONTH) as TIMESTAMP), \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - ConnectSigma' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description NOT LIKE 'Radar%'\n    AND bt.description NOT LIKE 'Card payments (%'\n    AND bt.description NOT LIKE 'Card Account Updater (CAU)%'\n    AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount \n    UNION ALL\n      -- Card Account Updater Fees\n   SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - CAU' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    AND bt.description LIKE 'Card Account Updater (CAU)%'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount)\nWHERE\n  transaction_date >= '2021-12-01'\n  AND transaction_date < '2022-01-01'\nORDER BY\n  transaction_date\n),\nfinance_transactions AS (\nSELECT\n    (FORMAT_TIMESTAMP('%F %T', finance.effective_at , 'America/Los_Angeles')) AS finance_effective_time,\n        (FORMAT_TIMESTAMP('%F %T', finance.event_finalized_at , 'America/Los_Angeles')) AS finance_finalized_time,\n    finance.acct_identifier_jurisdiction_id  AS finance_jurisdiction_id,\n    sse_ids.acct_identifier_client_id  AS sse_ids_client_id,\n    finance.acct_identifier_obligation_id AS obligation_id,\n    sse_ids.acct_identifier_payment_id AS sse_ids_payment_id,\n    far.human_readable_reference  AS far_human_readable_reference,\n    sse_ids.acct_identifier_provider AS sse_ids_provider,\n    CASE\n          WHEN finance_event.refund_id IS NOT NULL\n          THEN refund_attempt.provider_details_processorRefundId\n          ELSE (CASE\n          WHEN sse_ids.acct_identifier_provider in ('Stripe', 'StripePlaidAch')\n          THEN payment_attempt.provider_details_stripeChargeId\n          WHEN sse_ids.acct_identifier_provider = 'StripePaymentIntents'\n          THEN payment_attempt.provider_details_paymentIntentId\n          ELSE far.human_readable_reference\n        END)\n        END AS sse_events_provider_details,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'PaidCollection') THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_obligation_amount,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'ClientPaidFees') THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_client_paid_fee,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'PaymentProviderHeldFunds') THEN ( finance.amount/100  )  ELSE NULL END), 0) AS finance_net_payment,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'AccountsReceivable') THEN ( finance.amount/100  )  ELSE NULL END), 0) AS finance_jurisdiction_paid_fee,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind  IN ('AccountsReceivable', 'PaidCollection')) THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_remit_amount\nFROM `analytics-prod-328313.finance.single_sided_entry`\n     AS finance\n\nLEFT JOIN `analytics-prod-328313.looker_scratch.LR_T48641641489734855_sse_ids` AS sse_ids ON finance.event_id = sse_ids.event_id\nLEFT JOIN `analytics-prod-328313.finance.finance_event`\n     AS finance_event ON finance.event_id = finance_event.id\nLEFT JOIN `analytics-prod-328313.finance.payment_attempt`\n     AS payment_attempt ON payment_attempt.id = COALESCE(sse_ids.acct_identifier_payment_id, finance.acct_identifier_scheduled_payment_id)\nLEFT JOIN `analytics-prod-328313.finance.refund_attempt`\n     AS refund_attempt ON refund_attempt.id = finance_event.refund_id\nLEFT JOIN `analytics-prod-328313.finance.finance_api_request`\n     AS far ON far.payment_attempt_id = payment_attempt.id\nWHERE ((( finance.effective_at  ) >= (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND ( finance.effective_at  ) < (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles')))) AND ((( finance.event_finalized_at  ) >= (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND ( finance.event_finalized_at  ) < (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles')))) AND (finance.event_kind ) IN ('PaymentRefunded', 'PaymentSucceeded') AND (finance.event_status ) = 'Recorded'\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\nSELECT \n  ft.*\nFROM\n  finance_transactions ft \n  LEFT JOIN stripe_transactions s ON\n    s.charge_id = ft.sse_events_provider_details OR\n    s.charge_payment_intent_id = ft.sse_events_provider_details OR\n    s.refund_id = ft.sse_events_provider_details\nWHERE \n  ft.sse_events_provider_details is NOT null\n  AND s.transaction_type IS NULL", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.877645Z", "completed_at": "2024-05-13T02:13:23.963229Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.971302Z", "completed_at": "2024-05-13T02:13:23.971306Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.12634801864624023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.find_prequal_to_qual_people", "compiled": true, "compiled_code": "-- This is for finding pre-qualified applications that now have been CatEl\n-- matched by DSS for producing the file that we use with the CLI to move \n-- them to the next stage\n-- We check if _any_ household member for the application matched on any of the 3 CatEl programs\nWITH approvals AS (\n  SELECT\n    SPLIT(id, '#') [SAFE_OFFSET(0)] as application_id,\n    -- Check if there's a TRUE for ANY program for ANY HH member\n    MAX(\n      match_in_snap\n      OR match_in_tanf\n      OR match_in_liheap\n    ) as approved\n  FROM\n    `virginia-lihwap-pay.dss_matching.household_members_complete`\n  GROUP BY\n    1\n),\nWITH lihwap_relief_processing_state AS (\n  SELECT\n          rps.*,\n          ra.customer_id,\n         row_number() OVER (PARTITION BY customer_id ORDER BY rps.created_at DESC) as state_number_desc,\n         lead(rps.created_at) OVER (PARTITION BY customer_id ORDER BY rps.created_at) as next_transition_ts\n         FROM\n           `virginia-lihwap-pay.analytics_promisepay_prod.relief_processing_state` rps\n         LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` ra ON ra.id = rps.relief_application_id\n         )\nSELECT\n  lihwap_relief_application.customer_id AS client_id,\n  approved\nFROM\n  `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS lihwap_relief_application\n  LEFT JOIN lihwap_relief_processing_state AS current_application_state ON lihwap_relief_application.id = current_application_state.relief_application_id\n  AND current_application_state.state_number_desc = 1\n  LEFT JOIN approvals ON CAST(application_id AS INT64) = lihwap_relief_application.id\nWHERE\n  current_application_state.reason_codes <> 'TestAccount'\n  AND current_application_state.status = 'PreQualified'\n  AND approved is not null", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.878840Z", "completed_at": "2024-05-13T02:13:23.963452Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.971538Z", "completed_at": "2024-05-13T02:13:23.971542Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.12642502784729004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.flow_as_of_month_end", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\n\nwith flow as (\nselect \n  acctidentifierjurisdictionid as jurisdiction_id,\n  accttype, \n  acctkind, \n  case \n  when accttype in ('Revenue', 'Expense')\n    or acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n  then 'Actual'\n  else 'Hypothetical'\n  end as status,\n  eventkind,\n  sum(amount) as amount\nfrom singlesidedentry\nwhere eventstatus = 'Recorded'\n  and effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n  and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n  and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\ngroup by 1, 2, 3, 4, 5\norder by 1, 2, 3, 4, 5\n)\nselect \n  jurisdiction_id, accttype, acctkind, status, eventkind, amount,\n  (case when accttype in ('Revenue', 'Liability') then -1 else 1 end) * \n  cast (amount/100.0 as decimal(18, 2)) as human_readable_amount\nfrom flow\norder by 1, 2, 3, 4, 5", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.880275Z", "completed_at": "2024-05-13T02:13:23.963984Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.972272Z", "completed_at": "2024-05-13T02:13:23.972275Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.12640905380249023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.flow_diff_since_month_end", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\n\nwith flow as (\nselect \n  acctidentifierjurisdictionid as jurisdiction_id,\n  accttype, \n  acctkind, \n  case \n  when accttype in ('Revenue', 'Expense')\n    or acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n  then 'Actual'\n  else 'Hypothetical'\n  end as status,\n  eventkind,\n  sum(amount) as amount_diff\nfrom singlesidedentry\nwhere eventstatus = 'Recorded'\n  and effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n  and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n  and eventfinalizedat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\ngroup by 1, 2, 3, 4, 5\norder by 1, 2, 3, 4, 5\n)\nselect \n  jurisdiction_id, accttype, acctkind, status, eventkind, amount_diff,\n  (case when accttype in ('Revenue', 'Liability') then -1 else 1 end) * \n  cast (amount_diff/100.0 as decimal(18, 2)) as amount_diff_dollars\nfrom flow\norder by 1, 2, 3, 4, 5", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.881446Z", "completed_at": "2024-05-13T02:13:23.964246Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.972487Z", "completed_at": "2024-05-13T02:13:23.972490Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.12645196914672852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.flow_for_month_as_of_now", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\n\nwith flow as (\nselect \n  acctidentifierjurisdictionid as jurisdiction_id,\n  accttype, \n  acctkind, \n  case \n  when accttype in ('Revenue', 'Expense')\n    or acctkind in ('AccountsReceivable', 'PaidCollection', 'PaymentProviderHeldFunds') \n  then 'Actual'\n  else 'Hypothetical'\n  end as status,\n  eventkind,\n  sum(amount) as amount\nfrom singlesidedentry\nwhere eventstatus = 'Recorded'\n  and effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n  and effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\ngroup by 1, 2, 3, 4, 5\norder by 1, 2, 3, 4, 5\n)\nselect \n  jurisdiction_id, accttype, acctkind, status, eventkind, amount,\n  (case when accttype in ('Revenue', 'Liability') then -1 else 1 end) * \n  cast (amount/100.0 as decimal(18, 2)) as human_readable_amount\nfrom flow\norder by 1, 2, 3, 4, 5", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.882874Z", "completed_at": "2024-05-13T02:13:23.964868Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.973175Z", "completed_at": "2024-05-13T02:13:23.973178Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.12650108337402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.fraud_check_vdss", "compiled": true, "compiled_code": "with approved_apps AS (\n    SELECT\n        ra.id as id,\n        customer_id\n    FROM\n        `virginia-lihwap-pay.analytics_promisepay_prod.relief_processing_state` rps\n        LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` ra ON ra.id = rps.relief_application_id\n    WHERE\n        rps.status in ('Approved', 'ReliefTransferred', 'ReliefGranted')\n),\nhousehold_members as (\n    SELECT\n        id,\n        JSON_QUERY_ARRAY(data, '$.clientProvided.householdMembers') as hh_array\n    FROM\n        EXTERNAL_QUERY(\n            \"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n            \"SELECT * FROM relief_application;\"\n        ) as apps\n    JOIN approved_apps USING (id)\n),\nhousehold_member_name_dob AS (\n    SELECT\n        household_members.id as relief_application_id,\n        `virginia-lihwap-pay.analytics_promisepay_prod.parseName`(JSON_VALUE(hh_member, '$.fullName')) as parsed_name,\n        JSON_VALUE(hh_member, '$.id') as hh_memberid,\n        DATE(JSON_VALUE(hh_member, '$.dateOfBirth')) as hh_member_dateOfBirth\n    FROM\n        household_members\n        LEFT JOIN UNNEST(hh_array) as hh_member\n        LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.dss_post_application_matches` AS dss_post_application_matches ON \n            dss_post_application_matches.id = CONCAT(household_members.id,'#',JSON_VALUE(hh_member, '$.id'))\n    WHERE\n        JSON_VALUE(hh_member, '$.id') IS NOT NULL\n        AND (\n        dss_post_application_matches.match_in_liheap\n        OR dss_post_application_matches.match_in_snap\n        OR dss_post_application_matches.match_in_tanf )\n),\nparsed_addresses AS (\n    SELECT\n        c.id as customer_id,\n        JSON_VALUE(external_data, '$.serviceAddresses[0]') as unparsed_address,\n        `virginia-lihwap-pay.analytics_promisepay_prod.parseLocation`(\n            CONCAT(\n                INITCAP(\n                    JSON_VALUE(external_data, '$.serviceAddresses[0]')\n                ),\n                ' ',\n                -- For data from utilities, we're not requesting city, so we get that based on the ZIP\n                IF(data_source_id != 2, zc.city, ''),\n                ' VA ',\n                -- The ZIP gets saved separately in the customer table\n                c.pii_to_verify\n            )\n        ) as parsed_address,\n        `virginia-lihwap-pay.analytics_promisepay_prod.parseName`(\n                          JSON_VALUE(external_data, '$.accountName')) as parsed_name,\n        JSON_VALUE(external_data, '$.accountName') as unparsed_account_name,\n        c.pii_to_verify AS raw_zip\n    FROM\n        EXTERNAL_QUERY(\n            \"projects/virginia-lihwap-pay/locations/us/connections/virginia_lihwap_pay\",\n            '''\n                      SELECT\n                          *\n                      FROM obligation'''\n        ) as obligation\n        JOIN `virginia-lihwap-pay.analytics_promisepay_prod.customer` c on c.id = customer_id\n        JOIN `virginia-lihwap-pay.staging.va_zipcodes` zc on c.pii_to_verify = zc.zip\n        JOIN approved_apps aa ON aa.customer_id = c.id\n    WHERE\n        CONCAT(\n            JSON_VALUE(external_data, '$.serviceAddresses[0]'),\n            ' ',\n            pii_to_verify\n        ) is not null\n),\nlihwap_service_address_unhashed AS (\n    SELECT\n        customer_id,\n        parsed_address.number AS street_number,\n        parsed_address.street AS street_name,\n        COALESCE(parsed_address.zip, raw_zip) as zip_code,\n        unparsed_account_name,\n        CONCAT(parsed_address.number, parsed_name.last, COALESCE(parsed_address.zip, raw_zip)) as household_identifier\n    FROM\n        parsed_addresses\n)\n,multiple_households AS (\nSELECT\n    household_member_name_dob.parsed_name.first AS first_name,\n    household_member_name_dob.parsed_name.last AS last_name,\n    DATE(household_member_name_dob.hh_member_dateOfBirth) AS dob,\n    COUNT(DISTINCT lihwap_relief_application.id) AS count_of_applications,\n    COUNT(DISTINCT household_identifier) as count_of_households\nFROM\n    household_member_name_dob\n    LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS lihwap_relief_application \n        ON household_member_name_dob.relief_application_id = lihwap_relief_application.id\n    LEFT JOIN lihwap_service_address_unhashed ON lihwap_relief_application.customer_id = lihwap_service_address_unhashed.customer_id\nGROUP BY 1,2,3\nHAVING COUNT(DISTINCT household_identifier) > 1 OR COUNT(DISTINCT lihwap_relief_application.id) > 1\n)\nSELECT\n  first_name,\n  last_name,\n  dob,\n  household_identifier,\n  lihwap_relief_application.id\nFROM\n    household_member_name_dob\n    JOIN multiple_households ON household_member_name_dob.parsed_name.first = first_name \n      AND  household_member_name_dob.parsed_name.last = last_name\n      AND DATE(household_member_name_dob.hh_member_dateOfBirth) = dob\n    LEFT JOIN `virginia-lihwap-pay.analytics_promisepay_prod.relief_application` AS lihwap_relief_application \n        ON household_member_name_dob.relief_application_id = lihwap_relief_application.id\n    LEFT JOIN lihwap_service_address_unhashed ON lihwap_relief_application.customer_id = lihwap_service_address_unhashed.customer_id\nGROUP BY 1,2,3,4,5", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.883996Z", "completed_at": "2024-05-13T02:13:23.965136Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.973392Z", "completed_at": "2024-05-13T02:13:23.973396Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.12655282020568848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.insert_new_accountholder_records", "compiled": true, "compiled_code": "-- For inserting new rows for account holders we send to DSS for pre-enrollment matching\n-- Sets values for matches as NULL since we don't know the values when we send them\n\nINSERT INTO\n    `virginia-lihwap-pay.dss_matching.account_holder_complete`\nSELECT\n    id, \n    first_name, \n    last_name, \n    street_number, \n    pre_direction,\n    street_name,\n    street_type,\n    post_direction,\n    address1,\n    city,\n    state,\n    dwelling_number,\n    CAST(zip_code AS STRING) as zip_code,\n    filename,\n    PARSE_DATE(\"%m/%d/%Y\", load) as load,\n    CAST(NULL as boolean) AS match,\nFROM\n    `virginia-lihwap-pay.dss_matching.Promise_AcctHolder_DSS_Account_Holder_Name_W_20221031_104500000`\n    WHERE id NOT IN (SELECT id FROM `virginia-lihwap-pay.dss_matching.account_holder_complete`)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.886069Z", "completed_at": "2024-05-13T02:13:23.965463Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.973609Z", "completed_at": "2024-05-13T02:13:23.973612Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.12179684638977051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.insert_new_hh_records", "compiled": true, "compiled_code": "-- For inserting new rows for household members we send to DSS for matching\n-- Sets values for matches as NULL since we don't know the values when we send them\n\nINSERT INTO\n    `virginia-lihwap-pay.dss_matching.household_members_complete`\nSELECT\n    DISTINCT\n    id, \n    first_name, \n    last_name, \n    street_number, \n    pre_direction,\n    street_name,\n    street_type,\n    post_direction,\n    address1,\n    city,\n    state,\n    dwelling_number,\n    CAST(zip_code AS STRING),\n    PARSE_DATE(\"%m/%d/%y\", date_of_birth) as date_of_birth,\n    snap,\n    tanf,\n    liheap,\n    filename,\n    PARSE_DATE(\"%m/%d/%Y\", load) as load,\n    CAST(NULL as boolean) AS match_in_snap,\n    CAST(NULL as boolean) AS match_in_tanf,\n    CAST(NULL as boolean) AS match_in_liheap\nFROM `virginia-lihwap-pay.dss_matching.Promise_HHMembers_DSS_Household_Members_W_20221128_211552`\nWHERE id NOT IN (SELECT id FROM `virginia-lihwap-pay.dss_matching.household_members_complete`)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.958729Z", "completed_at": "2024-05-13T02:13:23.965887Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.973820Z", "completed_at": "2024-05-13T02:13:23.973823Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 0.1181650161743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.jea_cleaning", "compiled": true, "compiled_code": "/*\nJEA sent us their data in three distinct files, and there were a lot of rows, \nwhich made it challenging to clean in Excel. So we did it here instead.\n\nAlso, we wanted the people they believe to be LIHEAP recipients at the top of the file so they get integrated first\n*/\n\nDECLARE liheap_accts ARRAY<STRING>;\n\nSET liheap_accts = ['0105009213','0133054200','0145597856','0209205725','0255575564','0347785752','0425010731','0427633419','0433430347','0480234200','0493479972','0500018190','0719328227','0769410902','0810198971','0836239033','0897944200','0931514200','1093144200','1106780068','1308310476','1367734200','1404644979','1650354200','1704554148','1719907746','1774244200','1880954200','1946944200','1964654200','2143538129','2300924200','2375724200','2560937061','2564892551','2583680729','2622924200','2787638775','3010751290','3036334200','3055724200','3075754200','3076634200','3101544200','3160514200','3170136532','3251918286','3253545432','3309424200','3440395533','3660803296','3690554200','3797314008','3870534453','3915957321','3939314200','3957621386','3963134200','4153807995','4197778436','4263604671','4263834200','4298622740','4410132196','4581741943','4598067854','4628444200','4707832828','4802144200','4921001519','5003954200','5134144329','5164883326','5234963339','5255977230','5329654200','5434526931','5461486316','5678944200','5862714200','5867256648','5914452202','5938324200','5948661395','6222834200','6483754200','6604144200','6673924200','6714944200','6840854200','7177514200','7239262019','7813539276','8039154200','8295834200','8363275959','8449809021','8709359374','8796542687','8938951556','8949944200','8994829616','9363997214','9555990089','9870831896','9912514200','9989414200','0063703622','0126824200','0144593289','0161944882','0214000224','0226834200','0285314228','0308678656','0317522899','0322134200','0390313227','0422653662','0445875248','0609928966','0671064200','0692247701','0772334200','0789234200','0902755145','0931996793','0958010878','0970244200','1123514200','1150339389','1197514200','1238751827','1275134200','1286880919','1458710381','1460020206','1507195020','1660798375','1663854200','1755024200','1920611689','1969844892','1973082788','2330661293','2380981296','2408478942','2499954200','2604754200','2697434200','2729115850','2790744200','2804880544','3078628941','3086466975','3127824200','3283802256','3309924200','3336344200','3360404858','3360823362','3380634200','3399343808','3405493724','3481405372','3556110543','3723025842','3740921559','3978834200','4051444200','4059734200','4083439092','4195414200','4456155807','4491414200','4556785300','4593564396','4746330672','4854665368','4976018770','5039628664','5100193065','5272414200','5294306497','5709737163','5764440894','5936558735','5942654200','6000061656','6009615457','6230792591','6273944200','6384200007','6399104229','6650924857','6653899959','6731238318','6754154200','6805938292','6932231770','7024444200','7089254200','7259314200','7329499279','7561834200','7864344200','7981573004','8192309752','8205144200','8552154200','8622895100','8970614200','9067514200','9181947019','9238445610','9300754200','9361212532','9411514200','9537117545','9723124200','9734579849','9755634200','9774349094','9785039469','0004233032','0009514200','0022134200','0022452868','0079307000','0124973088','0227824200','0286624200','0330230484','0350619048','0425579667','0440824200','0498334200','0512268909','0568968758','0645555952','0733824200','0798525799','0807414200','0809317091','0858744200','0909042582','1186463140','1198724200','1215564327','1297514200','1369028156','1501330501','1642867914','1659153881','1678661306','1712531723','1807414200','1833634200','1894018612','1914605974','1994607816','2040991501','2083810639','2163047219','2199754200','2285520315','2314434200','2456346962','2750878425','2793460847','2842824200','2869243209','2890414200','2897148100','2919738475','3236318257','3255024200','3259314200','3290454200','3424944953','3438624200','3444408332','3452297748','3486547087','3488893471','3739738836','3939994640','4190614096','4363474124','4416925018','4450738155','4487367333','4611998524','4771371333','4878914020','5020614200','5097724200','5120239571','5135977480','5280615549','5440889085','5447724200','5573444200','5615744200','5647344200','5703071408','5730794411','5837707776','5876514200','5994153343','6001344200','6012354200','6041375246','6169333967','6333017993','6362409580','6583893850','6635429621','6792337478','6870876332','6913290671','7083401085','7423094656','7445496111','7463131848','7555834200','7789557960','7836444200','7860890182','7928821055','7949514200','7969434200','8020254200','8061361086','8087434200','8118973985','8188709250','8219624200','8252734200','8261935147','8400405221','8475634200','8703554200','8798814200','8811093990','8865724200','8892273100','8988995856','9080811162','9336740944','9394834200','9609224200','9614303261','9770331299','9787157418','9800690276','9818224200','9833834200','9859242207','9966261858','0045334200','0124350489','0138994719','0139425757','0162360321','0390844200','0487398794','0538434200','0615179085','0651373885','0687134200','0738514200','0774191179','0859491085','1016564921','1031154200','1201213736','1274321729','1288156692','1329435539','1361428154','1410255168','1470492629','1472054200','1527181269','1889051427','1979052123','2019037220','2057254200','2065250043','2082836734','2150710248','2297738737','2298634200','2333769142','2641293465','2771830220','2895064200','3020134200','3308775701','3320154200','3333452480','3408414200','3418528962','3477254200','3512414200','3670164987','3869857457','4190392719','4261224200','4615154037','4627924200','4681240148','4767659829','4814767613','5178944200','5196064200','5281154200','5346024200','5579607677','5591431399','5615809031','5656219816','5667434200','5798343291','5877724200','5906924200','6337579088','6497154200','6577730544','6596514200','6798805298','6807244200','6877302523','6905624200','6910414200','7137315201','7325134200','7409829057','7413897416','7437724931','7506679716','7517872751','7888634200','7910514200','7939725520','8001946848','8034143459','8112352684','8184273957','8639463346','8696178846','8874458056','9250906968','9324700280','9366494985','9570608582','9656944200','9748439306','9799434948','0101134200','0116331451','0128302871','0206172455','0273514200','0361944200','0464995661','0471344200','0554545278','0684854200','0859447628','0919944200','0945072007','1293634200','1414324200','1431326078','1522924200','1591634200','1689885531','1690544200','1762354200','1910724200','1995254200','2080885742','2166154200','2211258461','2454279419','2593654200','2717890499','2762069645','2922819625','2998060417','3128092331','3299465090','3300318256','3413054200','3629514200','3635106295','3651134200','3657140117','4103754200','4118043995','4236934200','4261354200','4313434200','4321759417','4403147721','4415424200','4680244200','4685400557','4686407616','4902119085','4997434200','5197566897','5241424200','5274139426','5378254200','5437490839','5666717271','5698774110','5718109032','5916875329','5988724200','6043424200','6048396632','6069283645','6225750451','6232686701','6316514200','6369555213','6522260419','6572414200','6668524979','6780645291','6780982646','6969434200','7008150641','7020414200','7030044200','7150087169','7224642080','7488445240','7552093151','7729144200','7757577233','7831713948','7838534200','7864514200','7966340998','8005272198','8162703301','8448644200','8466585263','8487244200','8936598121','9064620721','9140334200','9352896343','9400514200','9470224200','9693582869','9854434200','9902169693','0063724200','0145914200','0189508623','0200654709','0307724200','0356724200','0357694299','0374044200','0439676884','0712134200','0943754200','1055414200','1335708512','1346224874','1365514200','1418282305','1547234200','1613054200','1707554200','1743924200','1780411775','1823692729','1869775259','1994744200','2247634200','2251424200','2252754590','2331209186','2333319519','2364844691','2445358148','2449501539','2568314200','2788034200','2914064200','2931454200','2983754200','2986778386','3205144200','3309534200','3320924200','3344333987','3527154200','3540295331','3611088218','3616470312','3683754200','3697183869','3809934032','3937403829','3990334200','4113414200','4123738486','4185044200','4209934200','4261445066','4345924200','4381450283','4463034200','4585369389','4618315451','4625042707','4667634200','4690544200','4749713787','4970452969','5019834200','5326375603','5326886511','5455223314','5484187044','5558686153','5585934200','5637634200','5683383205','5765813082','5945414200','6133789869','6247469610','6371926957','6445724200','6493037877','6497534200','6524514200','6651396109','6672824200','6788951117','7004144237','7007444200','7021934200','7252610967','7369805283','7388460606','7427103463','7650017335','7793144200','7816824200','7858354200','7923984980','7930897135','8013734200','8036834200','8096914200','8119944231','8127721723','8289558577','8325151877','8434552309','8569683213','8588625355','8738824200','8802924200','8819961933','8972073224','8982858898','9096854200','9136997334','9415934178','9447224200','9635814200','9790414200','9821019103','9877370125','9895336130','0050524183','0086653161','0112433055','0139323200','0144113301','0202938268','0236517313','0377081532','0423044200','0459920332','0484066018','0530919176','0531154200','0610434200','0747537365','1005549229','1261249435','1308047061','1318563390','1407227451','1410509452','1536944200','1592821967','1596181953','1621876612','1655015308','1702603049','1717334200','1879314200','1895134200','1901524200','1906187168','1977734200','1999834200','2020614200','2029861100','2192741710','2291064200','2299112328','2300354200','2387724200','2534121251','2587736600','2719075930','2767092128','2974930025','2988436382','3107164534','3151697506','3265944200','3295893433','3377907974','3405144200','3515424200','3589432613','3655101860','3812428763','3926740651','4001024200','4046144200','4113734200','4282701115','4494135028','4583439214','4594064200','4655212794','4720925599','4964954200','5072324200','5136442259','5173434200','5348527661','5385044200','5428634200','5431044200','5559908148','5577744200','5680614200','5796830124','5868314200','5985452726','6012534200','6076423783','6120503388','6141944200','6142154200','6201092403','6207424200','6267433388','6343358723','6360134689','6382572072','6421834200','6424622154','6463527980','6543634200','6563234200','6730532208','6903244562','6912414200','7059688485','7307254200','7448127917','7547034200','7572388708','7585144186','7857567423','7859829450','7929718685','7936020972','7981144200','8265734200','8315118722','8368314200','8380131768','8440244200','8485479106','8620726273','8634781348','8702724200','8862854200','8864934200','9077169158','9101003078','9160454200','9196799453','9241658139','9630244200','9920944007','0020602509','0140744200','0158514200','0212434200','0239579523','0290344200','0291915261','0303941113','0391242543','0452344200','0461534200','0473249865','0481624200','0492414200','0496648401','0498154200','0531170855','0591880887','0805710501','0865074557','0926725945','1045934200','1145414200','1218581367','1218856680','1369149180','1746784589','1787514200','1793144200','1956834200','1989814200','2012947768','2199734200','2211134200','2321834200','2433493431','2488514200','2572201465','2760221526','2927034200','2982762047','3058234200','3090026831','3106514200','3260064200','3286533845','3364754252','3473839174','3615030660','3655834200','3663581294','3666504078','3863060554','3870244200','3913943995','3961955241','3982414200','4180234200','4212634200','4246144200','4288414200','4289003272','4342834200','4403382552','4530044200','4737824200','4770224200','4934944200','4943634200','4962665981','5090176554','5131321430','5267211480','5307234200','5347154200','5367444200','5400514200','5528854200','5572235785','5703894634','5834975797','5875724200','5888414200','6040934200','6113648281','6125987570','6185814649','6317987362','6322002173','6384615810','6456895272','6493514200','6529225921','6543524200','6552734200','6644698816','6648434200','6790830025','7022372927','7297154200','7362411424','7502912520','7783447903','7787454200','8095114002','8236238004','8256342507','8394634200','8397219775','8478454200','8481367747','8526344200','8534623233','8609534200','8659814200','8688775088','8852734200','8916940368','8940079722','9091317432','9236123765','9258554200','9344707198','9399914943','9510044200','9527279189','9560334200','9727276532','9792185086','9887119985'];\n\n\nWITH\n  first_pass AS (\n  SELECT\n    DISTINCT LPAD(acct_no, 10, '0') AS acct_number_padded,\n    CAST(CAST(total_w_balance_cents AS NUMERIC)*100 AS INT64) AS total_w_balance_cents,\n    CAST(CAST(w_past_due_balance_cents AS NUMERIC)*100 AS INT64) AS w_past_due_balance_cents,\n    * EXCEPT ( sp_type,\n      total_w_balance_cents,\n      w_past_due_balance_cents,\n      total_balance_cents,\n      past_due_balance_cents )\n  FROM\n    jea_restricted.jea_upload_1),\n  second_pass AS (\n  SELECT\n    CONCAT(acct_number_padded, CAST(total_w_balance_cents AS STRING)) AS acct_plus_balance,\n    *\n  FROM\n    first_pass ),\n  dupe_balances AS (\n  SELECT\n    acct_number_padded,\n    COUNT(DISTINCT acct_plus_balance) AS num_rows\n  FROM\n    second_pass\n  GROUP BY\n    1\n  HAVING\n    (num_rows > 1) ),\n  other_dupes AS(\n  SELECT\n    acct_number_padded,\n    COUNT(1) AS num_rows\n  FROM\n    second_pass\n  GROUP BY\n    1\n  HAVING\n    (num_rows > 1) ),\n  base_table AS (\n  SELECT\n    DISTINCT * EXCEPT (acct_plus_balance)\n  FROM\n    second_pass\n  WHERE\n    acct_number_padded NOT IN (\n    SELECT\n      acct_number_padded\n    FROM\n      dupe_balances)\n    AND acct_number_padded NOT IN (\n    SELECT\n      acct_number_padded\n    FROM\n      other_dupes )),\n  query_table AS (\n  SELECT\n    acct_number_padded AS acct_no,\n    IF(total_w_balance_cents IS NULL, 0, total_w_balance_cents) AS total_balance_cents,\n    IF(w_past_due_balance_cents IS NULL, 0, w_past_due_balance_cents) AS past_due_balance_cents,\n    acct_name,\n    acct_name AS contact_name,\n    'R' AS acct_type,\n    svc_address_street,\n    svc_address_zip,\n    mailing_address_street,\n    mailing_address_zip,\n    phone,\n    email,\n    NULL AS lihwap_amount_applied_cents,\n    disconnect_risk,\n    disconnected\n  FROM\n    base_table\n  -- exclude three accounts with invalid mailing zip codes\n  WHERE acct_number_padded NOT IN ('6516978610','9706914200','1319882092'))\nSELECT\n  *\nFROM\n  query_table\nWHERE acct_no IN UNNEST(liheap_accts)\n\nUNION ALL\n\nSELECT\n  *\nFROM\n  query_table\nWHERE acct_no NOT IN UNNEST(liheap_accts)\n\n\n;", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.959944Z", "completed_at": "2024-05-13T02:13:23.966114Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.974029Z", "completed_at": "2024-05-13T02:13:23.974031Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.11546707153320312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.load_Promise_AcctHolder_DSS_Account_Holder_Name", "compiled": true, "compiled_code": "LOAD DATA INTO dss_matching.Promise_AcctHolder_DSS_Account_Holder_Name_W_20221106_201800000(\n  id INT64, \n  first_name STRING, \n  last_name STRING, \n  street_number STRING, \n  pre_direction\tSTRING,\n  street_name\tSTRING,\n  street_type\tSTRING,\n  post_direction\tSTRING,\n  address1\tSTRING,\n  city\tSTRING,\n  state\tSTRING,\n  dwelling_number\tSTRING,\n  zip_code\tINT64,\n  filename\tSTRING,\n  `load`\tSTRING)\n  FROM FILES(\n    skip_leading_rows=1,\n    format='CSV',\n    field_delimiter='|',\n    allow_jagged_rows=TRUE,\n    uris = ['gs://vdss_files/Promise_AcctHolder_DSS_Account_Holder_Name_W_20221106_201800000.csv']\n  )", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.961028Z", "completed_at": "2024-05-13T02:13:23.966782Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:23.974916Z", "completed_at": "2024-05-13T02:13:23.974919Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.11229491233825684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.load_Promise_HHMembers_DSS_Household_Members", "compiled": true, "compiled_code": "LOAD DATA INTO dss_matching.Promise_HHMembers_DSS_Household_Members_W_20221031_091300000(\n  id STRING, \n  first_name STRING, \n  last_name STRING, \n  street_number STRING, \n  pre_direction\tSTRING,\n  street_name\tSTRING,\n  street_type\tSTRING,\n  post_direction\tSTRING,\n  address1\tSTRING,\n  city\tSTRING,\n  state\tSTRING,\n  dwelling_number\tSTRING,\n  zip_code\tINT64,\n  date_of_birth STRING,\n  snap BOOLEAN,\n  tanf BOOLEAN,\n  liheap BOOLEAN,\n  filename\tSTRING,\n  `load`\tSTRING)\n  FROM FILES(\n    skip_leading_rows=1,\n    format='CSV',\n    field_delimiter='|',\n    allow_jagged_rows=TRUE,\n    uris = ['gs://vdss_files/Promise_HHMembers_DSS_Household_Members_W_20221031_091300000.csv']\n  )", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.988905Z", "completed_at": "2024-05-13T02:13:23.997684Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.014187Z", "completed_at": "2024-05-13T02:13:24.014192Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03735613822937012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.load_full_eheap", "compiled": true, "compiled_code": "LOAD DATA OVERWRITE florida-lihwap-pay.catel_source_restricted.test_2_eheap_2022_data (\n\n  Unique_Identifier_for_HH\tINT64, \n  HH_First_Name\tSTRING\t, \n  HH_Last_Name\tSTRING\t, \n  Street_Address_1\tSTRING, \t\n  Street_Address_2\tSTRING\t, \n  City\tSTRING\t, \n  ZIP\tINT64\t, \n  Num_in_HH\tINT64, \t\n  Annual_Income\tSTRING\t, \n  Elderly__60\tBOOLEAN\t, \n  Disabled\tBOOLEAN\t, \n  Child___6\tBOOLEAN\t, \n  Payment_Date\tSTRING\t, \n  Benefit_Type__Crisis_or_Home_Energy\tSTRING\t, \n  Funding_Source_utilized_for_benefit\tSTRING\t, \n  Benefit_Amount\tSTRING\t, \n  Fuel_type__where_benefit_was_applied\tSTRING\t, \n  Main_Heating_Fuel_Type\tSTRING\t, \n  Account_Holder_Name\tSTRING\t, \n  Vendor\tSTRING\t, \n  Acct_Number\tSTRING\t, \n  Electric_Account_Holder_Name__if_diff__from_main_heating_fuel\tSTRING\t, \n  Electric_Vendor\tSTRING\t, \n  Electric_Acct_Number\tSTRING\t, \n  Disconnected_or_Out_of_Fuel___Y_N_\tBOOLEAN\t, \n  Past_Due__Shut_off_Notice__Nearly_Out_of_Fuel___Y_N_\tBOOLEAN\t, \n  Restored_Home_Energy___Y_N_\tBOOLEAN\t, \n  Necessary_to_prevent_home_energy_loss___Y_N_\tBOOLEAN\t\n\n)\n  FROM FILES(\n    skip_leading_rows=1,\n    allow_quoted_newlines=true,\n    format='CSV',\n    uris = ['gs://liheap_data/Elder Affairs LIHEAP Client Listing (Annual Performance Data 2022) (1).csv']\n  )", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.990851Z", "completed_at": "2024-05-13T02:13:24.001034Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.015263Z", "completed_at": "2024-05-13T02:13:24.015267Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.037628173828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.load_full_liheap", "compiled": true, "compiled_code": "LOAD DATA OVERWRITE florida-lihwap-pay.liheap_restricted.full_list (\n    CID STRING,\n    HouseholdID STRING,\n    ApplicationDate STRING,\n    Firstname STRING,\n    MI STRING,\n    Lastname STRING,\n    FamilyMembers INT64,\n    Email STRING,\n    HldEmail STRING,\n    Phone STRING,\n    HomePhone STRING,\n    CellPhone STRING,\n    WorkPhone STRING, \n    AnnualFamilyIncome STRING,\n    County STRING,\n    DOB STRING,\n    Gender STRING,\n    Disabled STRING,\n    Race STRING,\n    Ethnicity STRING,\n    FoodStampsBenefit STRING,\n    ElectricAcctName STRING,\n    ElectricAccNo STRING,\n    ElectricVendor STRING,\n    CreatedOn STRING ,\n    IsHeadOfFamily STRING ,\n    Age STRING ,\n    MailAddr1 STRING ,\n    MailCity STRING ,\n    HousingType STRING ,\n    PovertyLevel STRING ,\n    MailState STRING ,\n    Landlord_Addr1 STRING ,\n    Landlord_City STRING ,\n    Landlord_Name STRING ,\n    Landlord_Phone STRING ,\n    Landlord_Zip STRING ,\n    MailAddr2 STRING ,\n    MailCounty STRING ,\n    MailZipcode STRING ,\n    NonCashBenefits_Snap STRING ,\n    NonCashBenefits_LIHEAP STRING ,\n    NonCashBenefits_ChildcareVoucher STRING ,\n    OtherIncomeSource_PrivateDisabilityInsurance STRING ,\n    OtherIncomeSource_SSI STRING ,\n    OtherIncomeSource_TANF STRING ,\n    SocialSecurityBenefit STRING ,\n    SSIBenefit STRING ,\n    OwnHouseType STRING ,\n    Veteran STRING ,\n    Rent STRING ,\n    TANFBenefit STRING,\n    WaterAccNo STRING,\n    WaterAcctName STRING,\n    WaterVendor STRING,\n    HouseHoldType STRING,\n    GenderDD STRING ,\n    BLANK STRING)\n  FROM FILES(\n    skip_leading_rows=1,\n    format='CSV',\n    uris = ['gs://liheap_data/LIHEAP CLIENT LISTINGS_UPDATED_07.14.2023.csv']\n  )", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.992226Z", "completed_at": "2024-05-13T02:13:24.003430Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.015857Z", "completed_at": "2024-05-13T02:13:24.015860Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03776884078979492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.load_new_coastal_cloud", "compiled": true, "compiled_code": "LOAD DATA OVERWRITE florida-lihwap-pay.coastal_cloud_lihwap_data.combined_lihwap_data_20231110 (\n    case_name STRING,\n    application_name STRING,\n    applicant_name STRING,\n    applicant_address STRING,\n    applicant_phone STRING,\n    county_name STRING,\n    submitted_date STRING,\n    applicant_date_of_birth STRING,\n    applicant_age STRING,\n    community_action_agency_name STRING,\n    case_status STRING,\n    case_closed_reason STRING,\n    funds_committed_date STRING,\n    award_period_from_batch STRING,\n    number_hh_members STRING,\n    elderly_benefit STRING,\n    disability_benefit STRING,\n    child_benefit STRING,\n    hh_income STRING,\n    case_last_modified_date STRING,\n    utility_provider_name STRING,\n    name_of_utility_company STRING,\n    name_on_account STRING,\n    account_number STRING,\n    award_amount_to_utility_provider STRING,\n    actual_amount STRING,\n    utility_provider_status STRING\n) FROM FILES (\n    skip_leading_rows=1,\n    format='CSV',\n    uris = ['gs://coastal_cloud_lihwap_data/SQL Promise Results-11-10-2023012442284Z.csv']\n)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.993552Z", "completed_at": "2024-05-13T02:13:24.006819Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.016457Z", "completed_at": "2024-05-13T02:13:24.016460Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03795480728149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.load_snap_data", "compiled": true, "compiled_code": "LOAD DATA OVERWRITE florida-lihwap-pay.snap_restricted.snap_20230912 (\n  casenum STRING,\n  receiving_firstname STRING,\n  receiving_lastname STRING,\n  receiving_citizenship STRING,\n  receiving_white STRING,\n  receiving_black STRING,\n  receiving_a_indian STRING,\n  receiving_asian STRING,\n  receiving_hawaiian STRING,\n  receiving_other STRING,\n  receiving_unknown STRING,\n  receiving_hispanic STRING,\n  receiving_sheltercost STRING,\n  payee_firstname STRING,\n  payee_lastname STRING,\n  payee_citizenship STRING,\n  payee_white STRING,\n  payee_black STRING,\n  payee_a_indian STRING,\n  payee_asian STRING,\n  payee_hawaiian STRING,\n  payee_other STRING,\n  payee_unknown STRING,\n  payee_hispanic STRING,\n  payee_sheltercost STRING,\n  street_number_living STRING,\n  address_unit_number_living STRING,\n  address_direction_living STRING,\n  street_living STRING,\n  address_line_2_living STRING,\n  address_suffix_living STRING,\n  address_quadrant_living STRING,\n  apartment_number_living STRING,\n  city_living STRING,\n  state_living STRING,\n  zip_code_living STRING,\n  county STRING,\n  phone_number STRING,\n)\n  FROM FILES(\n    skip_leading_rows=1,\n    format='CSV',\n    field_delimiter='|',\n    quote='',\n    max_bad_records=1,\n    uris = ['gs://liheap_data/SNAP Oct22 - Aug23.txt']\n  )", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.995403Z", "completed_at": "2024-05-13T02:13:24.010205Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.017095Z", "completed_at": "2024-05-13T02:13:24.017098Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.03750801086425781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.manatee_cleanup", "compiled": true, "compiled_code": "with manatee_combined_data as (\n  select *\nfrom `florida-lihwap-pay.manatee_restricted.manatee_upload_1`\nUNION ALL\nselect *\nfrom `florida-lihwap-pay.manatee_restricted.manatee_upload_2`\n)\nselect\n  string_field_0 as acct_no,\n  string_field_1 as acct_name,\n  string_field_1 as contact_name,\n  string_field_2 as acct_type,\n  string_field_3 as svc_address_street,\n  string_field_4 as svc_address_zip,\n  string_field_5 as phone,\n  string_field_6 as email,\n  -- if mailing_zip contains anything other than numbers and hypens after trim\n  -- then replace the mailing_address_ZIP with svc_address_ZIP\n  COALESCE(REGEXP_EXTRACT(string_field_8, \"[0-9]{5}\"), string_field_4) as mailing_address_zip,\n  -- perform same zip code check but replace street address:\n  -- if mailing_zip contains anything other than numbers and hypens after trim\n  -- then replace the mailing_address_ZIP with svc_address_ZIP\n  IF(REGEXP_EXTRACT(string_field_8, \"[0-9]{5}\") IS NULL,\n      string_field_3,\n      string_field_7) as mailing_address_street,\n  0 as total_balance_cents,\n  0 as past_due_balance_cents,\n  null as lihwap_amount_applied_cents\nfrom manatee_combined_data \nwhere string_field_0 != 'string_field_0'", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.996595Z", "completed_at": "2024-05-13T02:13:24.010675Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.018201Z", "completed_at": "2024-05-13T02:13:24.018205Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.03794217109680176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.oc_cleaning", "compiled": true, "compiled_code": "/*\nDe-duping Orange County Utilities data based on Max's original JEA de-duping query.\n\nMax's aforementioned query: https://github.com/PromiseNetwork/dbtPromise/blob/main/analysis/fl_lihwap/jea_cleaning.sql\n*/\n\nWITH\n\n-- first_pass = data from utility + minor formatting, data casing\n  first_pass AS (\n  SELECT\n    DISTINCT\n    LPAD(CAST(acct_no AS STRING), 10, '0') AS acct_number_padded,\n    CAST(total_balance_cents AS INT64) AS total_balance_cents,\n    CAST(past_due_balance_cents AS INT64) AS past_due_balance_cents,\n    * EXCEPT (\n      total_balance_cents,\n      past_due_balance_cents,\n      phone_10,\n      disconnected )\n  FROM\n    oc_restricted.oc_upload),\n\n-- dupe_accounts checks for any account number that shows up more than once in the file\n  dupe_accounts AS(\n  SELECT\n    acct_number_padded,\n    COUNT(1) AS num_rows\n  FROM\n    first_pass\n  GROUP BY\n    1\n  HAVING\n    (num_rows > 1) )\n\n-- get the fields we actually want, handles balance NULLs, check against NULLs\n-- and drops duplicates\nSELECT\n  DISTINCT\n  acct_number_padded AS acct_no,\n  IF(total_balance_cents IS NULL, 0, total_balance_cents) AS total_balance_cents,\n  IF(past_due_balance_cents IS NULL, 0, past_due_balance_cents) AS past_due_balance_cents,\n  acct_name,\n  acct_name AS contact_name,\n  acct_type,\n  svc_address_street,\n  svc_address_zip,\n  disconnect_risk,\n  mailing_address_street,\n  mailing_address_zip,\n  phone,\n  email,\n  NULL AS lihwap_amount_applied_cents\nFROM\n  first_pass\nWHERE\n  -- not duplicate account numbers\n  acct_number_padded NOT IN (\n    SELECT\n      acct_number_padded\n    FROM\n      dupe_accounts )", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.997915Z", "completed_at": "2024-05-13T02:13:24.010971Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.018603Z", "completed_at": "2024-05-13T02:13:24.018605Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.03810572624206543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.payments_in_other_months_for_this_month", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\nwith summarized_events as (\n        select \n    sse.effectiveat as paid_at,\n    eventcreatedat as created_at,\n        eventfinalizedat as finalized_at,\n    min(acctidentifierpaymentid) as payment_id,\n    min(event.refundid) as refund_id,\n    min(acctidentifierjurisdictionid) as jurisdiction_id,\n    min(acctidentifierclientid) as client_id,\n    min(acctidentifierobligationid) as obligation_id,\n    min(acctidentifierprovider) as payment_provider,\n          sum(\n                  case when acctkind = 'PaidCollection' then -1 * amount else 0 end\n          ) as obligation_amount,\n          sum(\n                  case when acctkind = 'ClientPaidFees' then -1 * amount else 0 end\n          )  as client_paid_fee,\n          sum(\n                  case when acctkind = 'PaymentProviderHeldFunds' then amount else 0 end\n          ) as net_payment,\n    sum(\n      case when acctkind = 'AccountsReceivable' then amount else 0 end\n    )  as jurisdiction_paid_fee,\n    sum(\n      case when acctkind in ('AccountsReceivable', 'PaidCollection')  then -1 * amount else 0 end\n    )  as remit_amount\n        from singlesidedentry sse left join event\non sse.eventid = event.id\n    where (\n       sse.effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n       and sse.effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n    )\n    and (\n        eventfinalizedat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n        or eventfinalizedat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\n    )\n    and sse.eventkind in ('PaymentSucceeded', 'PaymentRefunded')\n    and eventstatus = 'Recorded'\n        group by 1, 2, 3\n)\nselect \n  to_char(summarized_events.paid_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as paid_at,\n--  to_char(summarized_events.created_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as created_at,\n  to_char(summarized_events.finalized_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as recorded_at,\n  summarized_events.jurisdiction_id,\n  summarized_events.client_id,\n  summarized_events.obligation_id,\n  summarized_events.payment_id,\n  far.humanreadablereference,\n  summarized_events.payment_provider,  \ncase\nwhen summarized_events.refund_id is not null\nthen\n  ra.provideranddetails ->> 'processorRefundId'\nelse\n  (pa.provideranddetails #>> '{}')::jsonb->>(\n    case \n    when summarized_events.payment_provider = 'Stripe'\n        then 'stripeChargeId'\n    when summarized_events.payment_provider = 'StripePlaidAch'\n        then 'stripeChargeId'\n    when summarized_events.payment_provider = 'StripePaymentIntents'\n        then 'paymentIntentId'\n    else 'humanReadablePaymentMethod'\n    end\n  )\nend\n  as provider_details,\n  cast(obligation_amount/100.00 as decimal(18, 2)) as obligation_amount,\n  cast(client_paid_fee/100.00 as decimal(18, 2)) as client_paid_fee,\n  cast(net_payment/100.00 as decimal(18, 2)) as net_payment,\n  cast(jurisdiction_paid_fee/100.00 as decimal(18, 2)) as jurisdiction_paid_fee,\n  cast(remit_amount/100.00 as decimal(18, 2)) as remit_amount\nfrom summarized_events\nleft join financeapirequest as far\non summarized_events.payment_id = far.paymentattemptid\nleft join financeapirequest as far_re\non summarized_events.refund_id = far_re.refundattemptid\nleft join paymentattempt as pa\non summarized_events.payment_id = pa.id\nleft join refundattempt as ra\non summarized_events.refund_id = ra.id\norder by recorded_at, 1, 2", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:23.999964Z", "completed_at": "2024-05-13T02:13:24.011419Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.019270Z", "completed_at": "2024-05-13T02:13:24.019273Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.038437843322753906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.payments_this_month_for_other_months", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\nwith summarized_events as (\n        select \n    sse.effectiveat as paid_at,\n    eventcreatedat as created_at,\n        eventfinalizedat as finalized_at,\n    min(acctidentifierpaymentid) as payment_id,\n    min(event.refundid) as refund_id,\n    min(acctidentifierjurisdictionid) as jurisdiction_id,\n    min(acctidentifierclientid) as client_id,\n    min(acctidentifierobligationid) as obligation_id,\n    min(acctidentifierprovider) as payment_provider,\n          sum(\n                  case when acctkind = 'PaidCollection' then -1 * amount else 0 end\n          ) as obligation_amount,\n          sum(\n                  case when acctkind = 'ClientPaidFees' then -1 * amount else 0 end\n          )  as client_paid_fee,\n          sum(\n                  case when acctkind = 'PaymentProviderHeldFunds' then amount else 0 end\n          ) as net_payment,\n    sum(\n      case when acctkind = 'AccountsReceivable' then amount else 0 end\n    )  as jurisdiction_paid_fee,\n    sum(\n      case when acctkind in ('AccountsReceivable', 'PaidCollection')  then -1 * amount else 0 end\n    )  as remit_amount\n        from singlesidedentry sse left join event\non sse.eventid = event.id\n    where (\n       sse.effectiveat < timestamp with time zone '2021-10-01 America/Los_Angeles'\n       or sse.effectiveat >= timestamp with time zone '2021-11-01 America/Los_Angeles'\n    )\n    and eventfinalizedat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n    and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        and sse.eventkind in ('PaymentSucceeded', 'PaymentRefunded')\n        and eventstatus = 'Recorded'\n        group by 1, 2, 3\n)\nselect \n  to_char(summarized_events.paid_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as paid_at,\n--  to_char(summarized_events.created_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as created_at,\n  to_char(summarized_events.finalized_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as recorded_at,\n  summarized_events.jurisdiction_id,\n  summarized_events.client_id,\n  summarized_events.obligation_id,\n  summarized_events.payment_id,\n  far.humanreadablereference,\n  summarized_events.payment_provider,  \ncase\nwhen summarized_events.refund_id is not null\nthen\n  ra.provideranddetails ->> 'processorRefundId'\nelse\n  (pa.provideranddetails #>> '{}')::jsonb->>(\n    case \n    when summarized_events.payment_provider = 'Stripe'\n        then 'stripeChargeId'\n    when summarized_events.payment_provider = 'StripePlaidAch'\n        then 'stripeChargeId'\n    when summarized_events.payment_provider = 'StripePaymentIntents'\n        then 'paymentIntentId'\n    else 'humanReadablePaymentMethod'\n    end\n  )\nend\n  as provider_details,\n  cast(obligation_amount/100.00 as decimal(18, 2)) as obligation_amount,\n  cast(client_paid_fee/100.00 as decimal(18, 2)) as client_paid_fee,\n  cast(net_payment/100.00 as decimal(18, 2)) as net_payment,\n  cast(jurisdiction_paid_fee/100.00 as decimal(18, 2)) as jurisdiction_paid_fee,\n  cast(remit_amount/100.00 as decimal(18, 2)) as remit_amount\nfrom summarized_events\nleft join financeapirequest as far\non summarized_events.payment_id = far.paymentattemptid\nleft join financeapirequest as far_re\non summarized_events.refund_id = far_re.refundattemptid\nleft join paymentattempt as pa\non summarized_events.payment_id = pa.id\nleft join refundattempt as ra\non summarized_events.refund_id = ra.id\norder by recorded_at, 1, 2", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.001270Z", "completed_at": "2024-05-13T02:13:24.011690Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.019483Z", "completed_at": "2024-05-13T02:13:24.019486Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.03838801383972168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.payments_this_month_for_this_month", "compiled": true, "compiled_code": "set local time zone 'America/Los_Angeles';\n\nwith summarized_events as (\n        select \n    sse.effectiveat as paid_at,\n    eventcreatedat as created_at,\n        eventfinalizedat as finalized_at,\n    min(acctidentifierpaymentid) as payment_id,\n    min(event.refundid) as refund_id,\n    min(acctidentifierjurisdictionid) as jurisdiction_id,\n    min(acctidentifierclientid) as client_id,\n    min(acctidentifierobligationid) as obligation_id,\n    min(acctidentifierprovider) as payment_provider,\n          sum(\n                  case when acctkind = 'PaidCollection' then -1 * amount else 0 end\n          ) as obligation_amount,\n          sum(\n                  case when acctkind = 'ClientPaidFees' then -1 * amount else 0 end\n          )  as client_paid_fee,\n          sum(\n                  case when acctkind = 'PaymentProviderHeldFunds' then amount else 0 end\n          ) as net_payment,\n    sum(\n      case when acctkind = 'AccountsReceivable' then amount else 0 end\n    )  as jurisdiction_paid_fee,\n    sum(\n      case when acctkind in ('AccountsReceivable', 'PaidCollection')  then -1 * amount else 0 end\n    )  as remit_amount\n        from singlesidedentry sse left join event on sse.eventid = event.id\n    where sse.effectiveat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n    and sse.effectiveat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n    and eventfinalizedat >= timestamp with time zone '2021-10-01 America/Los_Angeles'\n    and eventfinalizedat < timestamp with time zone '2021-11-01 America/Los_Angeles'\n        and sse.eventkind in ('PaymentSucceeded', 'PaymentRefunded')\n        and eventstatus = 'Recorded'\n        group by 1, 2, 3\n)\nselect --count(*) from summarized_events /*\n  to_char(summarized_events.paid_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as paid_at,\n--  to_char(summarized_events.created_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as created_at,\n  to_char(summarized_events.finalized_at at time zone 'America/Los_Angeles', 'yyyy-mm-dd HH24:MI:SS') as recorded_at,\n  summarized_events.jurisdiction_id,\n  summarized_events.client_id,\n  summarized_events.obligation_id,\n  summarized_events.payment_id,\n  far.humanreadablereference,\n  summarized_events.payment_provider,\n  case\n    when summarized_events.refund_id is not null\n    then\n      ra.provideranddetails ->> 'processorRefundId'\n    else  \n      (pa.provideranddetails #>> '{}')::jsonb->>(\n        case \n        when summarized_events.payment_provider = 'Stripe'\n            then 'stripeChargeId'\n        when summarized_events.payment_provider = 'StripePlaidAch'\n            then 'stripeChargeId'\n        when summarized_events.payment_provider = 'StripePaymentIntents'\n            then 'paymentIntentId'\n        else 'humanReadablePaymentMethod'\n        end\n      )\n  end\n  as provider_details,\n  cast(obligation_amount/100.00 as decimal(18, 2)) as obligation_amount,\n  cast(client_paid_fee/100.00 as decimal(18, 2)) as client_paid_fee,\n  cast(net_payment/100.00 as decimal(18, 2)) as net_payment,\n  cast(jurisdiction_paid_fee/100.00 as decimal(18, 2)) as jurisdiction_paid_fee,\n  cast(remit_amount/100.00 as decimal(18, 2)) as remit_amount\nfrom summarized_events --*/\nleft join financeapirequest as far\non summarized_events.payment_id = far.paymentattemptid\nleft join financeapirequest as far_re\non summarized_events.refund_id = far_re.refundattemptid\nleft join paymentattempt as pa\non summarized_events.payment_id = pa.id\nleft join refundattempt as ra\non summarized_events.refund_id = ra.id\norder by recorded_at, 1, 2", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.002370Z", "completed_at": "2024-05-13T02:13:24.012150Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.020168Z", "completed_at": "2024-05-13T02:13:24.020171Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.03874993324279785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.prequals_to_sms", "compiled": true, "compiled_code": "SELECT\n  ds.friendly_name,\n  customer_id,\n  past_due_value\nFROM\n  `virginia-lihwap-pay.dss_matching.account_holder_complete` ahc\n-- Join of live federated data from PP customer\nLEFT JOIN (\n  SELECT\n    *\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM customer;\")) customer\nON\n  customer.id = ahc.id\n-- Data sources so we know which jurisdiction they're in\nLEFT JOIN\n  virginia-lihwap-pay.analytics_promisepay_prod.data_source ds\nON\n  ds.id = data_source_id\n-- Join of live federated data from PP obligation\nLEFT JOIN (\n  SELECT\n    customer_id,\n    JSON_VALUE(external_data, '$.pastDueBalance.value') AS past_due_value\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM obligation;\") ) obligation\nON\n  ahc.id = obligation.customer_id\nWHERE\n  JSON_VALUE(external_data, '$.accountType') = 'residential'\n  AND\n  -- Only include people who DSS matched\n  ahc.MATCH\n  -- Exclude people where phone_verified is true (about 2100 customers so far)\n  AND ahc.id NOT IN (\n  SELECT\n    id\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM customer;\")\n  WHERE\n    phone_verified)\n  -- Exclude people who we've sent any SMS to from the app (about 2700 customers so far)\n  AND ahc.id NOT IN (\n  SELECT\n    customer_id\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM customer_communication;\"))\n  -- Exclude anyone with no past due balance\n  AND SAFE_CAST(past_due_value AS INT64) > 0\n  -- Exclude anyone with a phone number that's been verified (for any customer)\n  AND customer.phone_number NOT IN (\n    SELECT\n    phone_number\n  FROM\n    EXTERNAL_QUERY(\"virginia-lihwap-pay.us.virginia_lihwap_pay\",\n      \"SELECT * FROM customer;\")\n  WHERE\n    phone_verified\n  )\n  ORDER BY RAND()\n  LIMIT 300", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.003679Z", "completed_at": "2024-05-13T02:13:24.012462Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.020390Z", "completed_at": "2024-05-13T02:13:24.020393Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.03870820999145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.stripe_not_finance", "compiled": true, "compiled_code": "WITH stripe_transactions AS (SELECT\n  *\nFROM (\n  WITH\n    charge_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.charge_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.charge_id IS NOT NULL\n      AND td.dispute_id IS NULL\n      AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    GROUP BY\n      td.charge_id ),\n    dispute_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.dispute_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.dispute_id IS NOT NULL\n      AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    GROUP BY\n      td.dispute_id ),\n    jurisdictions AS (\n    SELECT\n      c.id AS charge_id,\n      c.balance_transaction_id,\n      CASE\n        WHEN c.statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.statement_descriptor, (STRPOS(c.statement_descriptor, '-') + 1), (LENGTH(c.statement_descriptor) - STRPOS(c.statement_descriptor, '-')) ) ) )\n        WHEN c.calculated_statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.calculated_statement_descriptor, (STRPOS(c.calculated_statement_descriptor, '*') + 1), (LENGTH(c.calculated_statement_descriptor) - STRPOS(c.calculated_statement_descriptor, '*')) ) ) )\n      ELSE\n      NULL\n    END\n      AS jurisdiction\n    FROM\n      `analytics-prod-328313.stripe.charge` c )\n    -- Captured Charge + Payment Transactions Plus Associated Refunds\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN bt.type = 'charge' THEN 'Credit Card'\n      WHEN bt.type = 'payment' THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    bt.amount / 100.0 AS charge_amount,\n    r.amount /100.0 AS refund_amount,\n    (COALESCE(bt.amount,\n        0) - COALESCE(r.amount,\n        0)) / 100.0 AS total_revenue_CALCULATED,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(bt.fee,\n      0)\n  END\n    / 100.0 AS ach_fee,\n    cf.ic_flat AS ic_flat,\n    cf.ic_pct AS ic_pct,\n    cf.stripe_flat AS stripe_flat,\n    cf.stripe_pct AS stripe_pct,\n    COALESCE(cf.total_fees,\n      0) AS total_stripe_ic_fees,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(rbt.fee,\n      0)\n  END\n    / 100.0 AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    (CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(bt.fee,\n        0)\n    END\n      + COALESCE(cf.total_fees,\n        0) +\n      CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(rbt.fee,\n        0)\n    END\n      + 5) / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Captured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    bt.source = c.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    bt.id = j.balance_transaction_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` rbt\n  ON\n    r.balance_transaction_id = rbt.id\n  WHERE\n    bt.type IN ('payment',\n      'charge')\n  UNION ALL\n    -- Uncaptured Charge Transactions\n  SELECT\n    COALESCE(j.jurisdiction,\n      'UNKNOWN'),\n    'Credit Card' AS payment_method,\n    'charge - unsuccessful' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    .05 AS total_fees_CALCULATED,\n    NULL AS balance_transaction_id,\n    NULL AS balance_transaction_created,\n    NULL AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Uncaptured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    jurisdictions j\n  ON\n    c.id = j.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  WHERE\n    c.captured IS FALSE\n  UNION ALL\n    -- Dispute Data\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN cbt.type = 'charge' THEN 'Credit Card'\n      WHEN cbt.type IN ('payment_failure_refund',\n      'payment') THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    'dispute' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", d.created, \"America/Los_Angeles\") AS transaction_date,\n    -d.amount / 100.0 AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    df.ic_flat AS ic_flat,\n    df.ic_pct AS ic_pct,\n    df.stripe_flat AS stripe_flat,\n    df.stripe_pct AS stripe_pct,\n    COALESCE(df.total_fees,\n      0) AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    bt.fee / 100.0 AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    COALESCE(df.total_fees,\n        0) + (bt.fee / 100.0) AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    NULL AS fee_explanation,\n    'Disputes' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.dispute` d\n  JOIN\n    `analytics-prod-328313.stripe.dispute_balance_transaction` dbt\n  ON\n    d.id = dbt.dispute_id\n  JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    dbt.balance_transaction_id = bt.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.charge` c\n  ON\n    d.charge_id = c.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` cbt\n  ON\n    c.balance_transaction_id = cbt.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    d.charge_id = j.charge_id\n  LEFT JOIN\n    dispute_ic_fees df\n  ON\n    d.id = df.dispute_id\n  UNION ALL\n      -- Sigma + Connect Fees\n  SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    -- Unlike other transactions, we invoice for sigma/connect fees that are charged after the month they're incurred. \n    -- That is: Fees charged in July should be on the reconciliation reports for June.\n    -- Fudging the date stamp below to include them automatically. \n    FORMAT_TIMESTAMP(\"%F %T\", CAST(DATE_SUB(DATE(bt.created), INTERVAL 1 MONTH) as TIMESTAMP), \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - ConnectSigma' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description NOT LIKE 'Radar%'\n    AND bt.description NOT LIKE 'Card payments (%'\n    AND bt.description NOT LIKE 'Card Account Updater (CAU)%'\n    AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount \n    UNION ALL\n      -- Card Account Updater Fees\n   SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - CAU' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND td.incurred_at BETWEEN '2021-12-01' AND '2022-01-01'\n    AND bt.description LIKE 'Card Account Updater (CAU)%'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount)\nWHERE\n  transaction_date >= '2021-12-01'\n  AND transaction_date < '2022-01-01'\nORDER BY\n  transaction_date\n),\nfinance_transactions AS (\nSELECT\n    (FORMAT_TIMESTAMP('%F %T', finance.effective_at , 'America/Los_Angeles')) AS finance_effective_time,\n        (FORMAT_TIMESTAMP('%F %T', finance.event_finalized_at , 'America/Los_Angeles')) AS finance_finalized_time,\n    finance.acct_identifier_jurisdiction_id  AS finance_jurisdiction_id,\n    sse_ids.acct_identifier_client_id  AS sse_ids_client_id,\n    finance.acct_identifier_obligation_id AS obligation_id,\n    sse_ids.acct_identifier_payment_id AS sse_ids_payment_id,\n    far.human_readable_reference  AS far_human_readable_reference,\n    sse_ids.acct_identifier_provider AS sse_ids_provider,\n    CASE\n          WHEN finance_event.refund_id IS NOT NULL\n          THEN refund_attempt.provider_details_processorRefundId\n          ELSE (CASE\n          WHEN sse_ids.acct_identifier_provider in ('Stripe', 'StripePlaidAch')\n          THEN payment_attempt.provider_details_stripeChargeId\n          WHEN sse_ids.acct_identifier_provider = 'StripePaymentIntents'\n          THEN payment_attempt.provider_details_paymentIntentId\n          ELSE far.human_readable_reference\n        END)\n        END AS sse_events_provider_details,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'PaidCollection') THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_obligation_amount,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'ClientPaidFees') THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_client_paid_fee,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'PaymentProviderHeldFunds') THEN ( finance.amount/100  )  ELSE NULL END), 0) AS finance_net_payment,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind = 'AccountsReceivable') THEN ( finance.amount/100  )  ELSE NULL END), 0) AS finance_jurisdiction_paid_fee,\n    COALESCE(SUM(CASE WHEN (finance.acct_kind  IN ('AccountsReceivable', 'PaidCollection')) THEN -1 * ( finance.amount/100  )  ELSE NULL END), 0) AS finance_remit_amount\nFROM `analytics-prod-328313.finance.single_sided_entry`\n     AS finance\n\nLEFT JOIN `analytics-prod-328313.looker_scratch.LR_T48641641489734855_sse_ids` AS sse_ids ON finance.event_id = sse_ids.event_id\nLEFT JOIN `analytics-prod-328313.finance.finance_event`\n     AS finance_event ON finance.event_id = finance_event.id\nLEFT JOIN `analytics-prod-328313.finance.payment_attempt`\n     AS payment_attempt ON payment_attempt.id = COALESCE(sse_ids.acct_identifier_payment_id, finance.acct_identifier_scheduled_payment_id)\nLEFT JOIN `analytics-prod-328313.finance.refund_attempt`\n     AS refund_attempt ON refund_attempt.id = finance_event.refund_id\nLEFT JOIN `analytics-prod-328313.finance.finance_api_request`\n     AS far ON far.payment_attempt_id = payment_attempt.id\nWHERE ((( finance.effective_at  ) >= (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND ( finance.effective_at  ) < (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles')))) AND ((( finance.event_finalized_at  ) >= (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND ( finance.event_finalized_at  ) < (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles')))) AND (finance.event_kind ) IN ('PaymentRefunded', 'PaymentSucceeded') AND (finance.event_status ) = 'Recorded'\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\nSELECT \n  s.*\nFROM\n  stripe_transactions s\n  LEFT JOIN finance_transactions ch ON s.charge_id = ch.sse_events_provider_details\n  LEFT JOIN finance_transactions pi ON s.charge_payment_intent_id = pi.sse_events_provider_details\n  LEFT JOIN finance_transactions re ON s.refund_id = re.sse_events_provider_details\nWHERE \n  ch.sse_events_provider_details is null AND pi.sse_events_provider_details is null AND re.sse_events_provider_details is NULL\n  AND transaction_type in ('charge', 'dispute', 'payment', 'refund')", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.005859Z", "completed_at": "2024-05-13T02:13:24.012922Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.021078Z", "completed_at": "2024-05-13T02:13:24.021082Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.03870081901550293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.stripe_transaction_insert", "compiled": true, "compiled_code": "DELETE FROM `analytics-dev-328216`.stripe.transaction_details T\nWHERE T.id IN (SELECT fee_id FROM `analytics-dev-328216`.stripe.transaction_details_new);\nINSERT INTO `analytics-dev-328216`.stripe.transaction_details\nSELECT incurred_at, event_type, charge_id, refund_id, dispute_id, request_id, destination_id, customer_id, card_brand, card_funding, card_country, card_present, fee_category, fee_name, fee_currency, plan_name, additional_explanation, variable_rate, fixed_per_item_amount, variable_volume_amount, fixed_per_item_count, min_amount, max_amount, subtotal_amount, tax_rate, tax_amount, total_amount, fx_rate, billing_currency, billing_amount, balance_transaction_id, balance_transaction_created_at, attribution_start_time, attribution_end_time, id, network, bin, issuing_bank, connected_account_id, connected_account_name, connected_account_country\nFROM\n(SELECT new_td.*, FORMAT_DATETIME('%F %T', attribution_start_date) as attribution_start_time, FORMAT_DATETIME('%F %T', attribution_end_date) as attribution_end_time, new_td.fee_id as id, bt.created as balance_transaction_created_at FROM `analytics-dev-328216`.stripe.transaction_details_new new_td LEFT JOIN `analytics-dev-328216`.stripe.balance_transaction bt ON new_td.balance_transaction_id = bt.id) as S;", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.004848Z", "completed_at": "2024-05-13T02:13:24.013146Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.021300Z", "completed_at": "2024-05-13T02:13:24.021304Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.03947591781616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.stripe_transaction_fee_details_insert", "compiled": true, "compiled_code": "-- This is for loading in the new transaction-level fee report each month that gets downloaded\n--from Stripe and then uploaded to GCS. You need to update the table name and GS link each time\n\nLOAD DATA into `analytics-dev-328216.stripe_private_utilities.transaction_fee_details_202302`\nFROM FILES(\n    format='CSV',\n    uris = ['gs://promise-stripe-reports/stripe_private_utilities/Transaction-level_report_of_payments_fees_2023-02-01_to_2023-02-28.csv'],\n    skip_leading_rows=1\n  )\n\n-- DELETE FROM stripe.transaction_fee_detail t\n-- WHERE t.fee_id IN (SELECT fee_id FROM `analytics-dev-328216.stripe.transaction_fee_details_dec` );\n\nINSERT INTO `analytics-dev-328216.stripe.transaction_fee_detail` \nSELECT \n    incurred_at\n    , event_type\n    , charge_id\n    , refund_id\n    , dispute_id\n    , request_id\n    , customer_id\n    , card_brand\n    , card_funding\n    , card_country\n    , card_present\n    , fee_category\n    , fee_name\n    , fee_currency\n    , plan_name\n    , additional_explanation\n    , variable_rate\n    , fixed_per_item_amount\n    , variable_volume_amount\n    , fixed_per_item_count\n    , CAST(min_amount as STRING) AS min_amount\n    , CAST(max_amount as STRING) AS max_amount\n    , subtotal_amount\n    , tax_rate\n    , tax_amount\n    , total_amount\n    , fx_rate\n    , billing_currency\n    , billing_amount\n    , balance_transaction_id\n    , balance_debited_at\n    , attribution_start_date\n    , attribution_end_date\n    , fee_id\n    , network\n    , bin\n    , issuing_bank\n FROM `analytics-dev-328216.stripe.transaction_fee_details_2022*`;", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.007047Z", "completed_at": "2024-05-13T02:13:24.013925Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.021974Z", "completed_at": "2024-05-13T02:13:24.021977Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 0.0394740104675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.stripe_transactions", "compiled": true, "compiled_code": "SELECT\n  *\nFROM (\n  WITH\n    charge_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.charge_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.charge_id IS NOT NULL\n      AND td.dispute_id IS NULL\n      AND td.incurred_at BETWEEN (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles'))\n    GROUP BY\n      td.charge_id ),\n    dispute_ic_fees AS (\n    SELECT\n      STRING_AGG(td.fee_id, \",\") AS fee_ids,\n      td.dispute_id,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS ic_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'network_cost' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS ic_pct,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.fixed_per_item_count * td.fixed_per_item_amount\n        ELSE\n        0\n      END\n        ) AS stripe_flat,\n      SUM(\n        CASE\n          WHEN td.fee_category = 'stripe_fee' THEN td.variable_volume_amount * td.variable_rate\n        ELSE\n        0\n      END\n        ) AS stripe_pct,\n      SUM(td.subtotal_amount) AS total_fees\n    FROM\n      `analytics-prod-328313.stripe.transaction_fee_detail` td\n    WHERE\n      td.dispute_id IS NOT NULL\n      AND td.incurred_at BETWEEN (TIMESTAMP('2021-12-01 00:00:00', 'America/Los_Angeles')) AND (TIMESTAMP('2022-01-01 00:00:00', 'America/Los_Angeles'))\n    GROUP BY\n      td.dispute_id ),\n    jurisdictions AS (\n    SELECT\n      c.id AS charge_id,\n      c.balance_transaction_id,\n      CASE\n        WHEN c.statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.statement_descriptor, (STRPOS(c.statement_descriptor, '-') + 1), (LENGTH(c.statement_descriptor) - STRPOS(c.statement_descriptor, '-')) ) ) )\n        WHEN c.calculated_statement_descriptor IS NOT NULL THEN UPPER( TRIM( SUBSTR( c.calculated_statement_descriptor, (STRPOS(c.calculated_statement_descriptor, '*') + 1), (LENGTH(c.calculated_statement_descriptor) - STRPOS(c.calculated_statement_descriptor, '*')) ) ) )\n      ELSE\n      NULL\n    END\n      AS jurisdiction\n    FROM\n      `analytics-prod-328313.stripe.charge` c )\n    -- Captured Charge + Payment Transactions Plus Associated Refunds\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN bt.type = 'charge' THEN 'Credit Card'\n      WHEN bt.type = 'payment' THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    bt.amount / 100.0 AS charge_amount,\n    r.amount /100.0 AS refund_amount,\n    (COALESCE(bt.amount,\n        0) - COALESCE(r.amount,\n        0)) / 100.0 AS total_revenue_CALCULATED,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(bt.fee,\n      0)\n  END\n    / 100.0 AS ach_fee,\n    cf.ic_flat AS ic_flat,\n    cf.ic_pct AS ic_pct,\n    cf.stripe_flat AS stripe_flat,\n    cf.stripe_pct AS stripe_pct,\n    COALESCE(cf.total_fees,\n      0) AS total_stripe_ic_fees,\n    CASE\n      WHEN bt.type = 'charge' THEN NULL\n    ELSE\n    COALESCE(rbt.fee,\n      0)\n  END\n    / 100.0 AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    (CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(bt.fee,\n        0)\n    END\n      + COALESCE(cf.total_fees,\n        0) +\n      CASE\n        WHEN bt.type = 'charge' THEN 0\n      ELSE\n      COALESCE(rbt.fee,\n        0)\n    END\n      + 5) / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Captured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    bt.source = c.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    bt.id = j.balance_transaction_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` rbt\n  ON\n    r.balance_transaction_id = rbt.id\n  WHERE\n    bt.type IN ('payment',\n      'charge')\n  UNION ALL\n    -- Uncaptured Charge Transactions\n  SELECT\n    COALESCE(j.jurisdiction,\n      'UNKNOWN'),\n    'Credit Card' AS payment_method,\n    'charge - unsuccessful' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    .05 AS radar_fee_CALCULATED,\n    .05 AS total_fees_CALCULATED,\n    NULL AS balance_transaction_id,\n    NULL AS balance_transaction_created,\n    NULL AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    r.id AS refund_id,\n    r.balance_transaction_id AS refund_balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", r.created, \"America/Los_Angeles\") AS refund_created,\n    r.description AS refund_description,\n    NULL AS fee_explanation,\n    'Uncaptured Charges' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.charge` c\n  LEFT JOIN\n    jurisdictions j\n  ON\n    c.id = j.charge_id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.refund` r\n  ON\n    c.id = r.charge_id\n  LEFT JOIN\n    charge_ic_fees cf\n  ON\n    c.id = cf.charge_id\n  WHERE\n    c.captured IS FALSE\n  UNION ALL\n    -- Dispute Data\n  SELECT\n    j.jurisdiction,\n    CASE\n      WHEN cbt.type = 'charge' THEN 'Credit Card'\n      WHEN cbt.type IN ('payment_failure_refund',\n      'payment') THEN 'ACH'\n    ELSE\n    NULL\n  END\n    AS payment_method,\n    'dispute' AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", d.created, \"America/Los_Angeles\") AS transaction_date,\n    -d.amount / 100.0 AS charge_amount,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ach_fee,\n    df.ic_flat AS ic_flat,\n    df.ic_pct AS ic_pct,\n    df.stripe_flat AS stripe_flat,\n    df.stripe_pct AS stripe_pct,\n    COALESCE(df.total_fees,\n      0) AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    bt.fee / 100.0 AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    COALESCE(df.total_fees,\n        0) + (bt.fee / 100.0) AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    c.id AS charge_id,\n    FORMAT_TIMESTAMP(\"%F %T\", c.created, \"America/Los_Angeles\") AS charge_created,\n    c.payment_intent_id AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    NULL AS fee_explanation,\n    'Disputes' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.dispute` d\n  JOIN\n    `analytics-prod-328313.stripe.dispute_balance_transaction` dbt\n  ON\n    d.id = dbt.dispute_id\n  JOIN\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  ON\n    dbt.balance_transaction_id = bt.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.charge` c\n  ON\n    d.charge_id = c.id\n  LEFT JOIN\n    `analytics-prod-328313.stripe.balance_transaction` cbt\n  ON\n    c.balance_transaction_id = cbt.id\n  LEFT JOIN\n    jurisdictions j\n  ON\n    d.charge_id = j.charge_id\n  LEFT JOIN\n    dispute_ic_fees df\n  ON\n    d.id = df.dispute_id\n  UNION ALL\n      -- Sigma + Connect Fees\n  SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    -- Unlike other transactions, we invoice for sigma/connect fees that are charged after the month they're incurred. \n    -- That is: Fees charged in July should be on the reconciliation reports for June.\n    -- Fudging the date stamp below to include them automatically. \n    FORMAT_TIMESTAMP(\"%F %T\", CAST(DATE_SUB(DATE(bt.created), INTERVAL 1 MONTH) as TIMESTAMP), \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - ConnectSigma' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description NOT LIKE 'Radar%'\n    AND bt.description NOT LIKE 'Card payments (%'\n    AND bt.description NOT LIKE 'Card Account Updater (CAU)%'\n    AND bt.description LIKE '%2021-12%'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount \n    UNION ALL\n      -- Card Account Updater Fees\n   SELECT\n    'UNKNOWN' AS jurisdiction,\n    NULL AS payment_method,\n    bt.type AS transaction_type,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS transaction_date,\n    NULL AS charge_amount,\n    NULL AS ach_fee,\n    NULL AS refund_amount,\n    0 AS total_revenue_CALCULATED,\n    NULL AS ic_flat,\n    NULL AS ic_pct,\n    NULL AS stripe_flat,\n    NULL AS stripe_pct,\n    NULL AS total_stripe_ic_fees,\n    NULL AS ach_payment_failure_refund_fee,\n    NULL AS dispute_fee,\n    NULL AS radar_fee_CALCULATED,\n    -bt.amount / 100.0 AS total_fees_CALCULATED,\n    bt.id AS balance_transaction_id,\n    FORMAT_TIMESTAMP(\"%F %T\", bt.created, \"America/Los_Angeles\") AS balance_transaction_created,\n    bt.description AS balance_transaction_description,\n    NULL AS charge_id,\n    NULL AS charge_created,\n    NULL AS charge_payment_intent_id,\n    NULL AS refund_id,\n    NULL AS refund_balance_transaction_id,\n    NULL AS refund_created,\n    NULL AS refund_description,\n    CONCAT(td.fee_name, ': ', td.plan_name, ' - ', td.additional_explanation) AS fee_explanation,\n    'Unassociated - CAU' AS query_name\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description LIKE '%2021-12%'\n    AND bt.description LIKE 'Card Account Updater (CAU)%'\n  GROUP BY\n    bt.id,\n    bt.amount,\n    bt.created,\n    bt.description,\n    bt.type,\n    td.fee_category,\n    td.fee_name,\n    td.plan_name,\n    td.additional_explanation,\n    td.customer_id,\n    td.variable_rate,\n    td.fixed_per_item_amount)\nWHERE\n  transaction_date >= '2021-12-01'\n  AND transaction_date < '2022-01-01'\nORDER BY\n  transaction_date", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.009141Z", "completed_at": "2024-05-13T02:13:24.014419Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.022444Z", "completed_at": "2024-05-13T02:13:24.022447Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.03808188438415527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.toho_kissimmee_cleaning", "compiled": true, "compiled_code": "/*\nCleaning TOHO data & separating the two data sources.\n\nKissimmee data is that with a 9-digit account no (including leading 0s).\nThis query filters for those accounts & removes accounts which we know cannot be imported.\n\nThis query returns 124548 results.\n*/\n\nSELECT * EXCEPT(past_due_balance_cents, mailing_address_zip, mailing_address_street)\n    , 0 as past_due_balance_cents\n    , IF(NOT REGEXP_CONTAINS(TRIM(mailing_address_zip), \"^[0-9\\\\-]+$\"),\n        svc_address_zip,\n        mailing_address_zip) as mailing_address_zip\n    -- perform same zip code check but replace street address:\n    -- if mailing_zip contains anything other than numbers and hypens after trim\n    -- then replace the mailing_address_ZIP with svc_address_ZIP\n    , IF(NOT REGEXP_CONTAINS(TRIM(mailing_address_zip), \"^[0-9\\\\-]+$\"),\n        svc_address_street,\n        mailing_address_street) as mailing_address_street\nFROM `florida-lihwap-pay.toho_restricted.toho_upload`\nwhere svc_address_zip is not null\nand acct_no <> 'acct_no'\nand svc_address_zip not in ('Move', '0', 'Fl', '347', '3474', '3475', '3655', '3896', 'COURT')\nand length(acct_no) = 9", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.008143Z", "completed_at": "2024-05-13T02:13:24.014857Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.023126Z", "completed_at": "2024-05-13T02:13:24.023129Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.04062390327453613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.toho_exclude_accounts", "compiled": true, "compiled_code": "/*\nCleaning TOHO data & separating the two data sources.\n\nThis query returns the 785 accounts which can not be imported due to data issues & are not included in the two cleaning queries.\n*/\n\n SELECT * EXCEPT(past_due_balance_cents), 0 as past_due_balance_cents\n FROM `florida-lihwap-pay.toho_restricted.toho_upload`\n where svc_address_zip is null\n or acct_no = 'acct_no'\n or svc_address_zip in ('Move', '0', 'Fl', '347', '3474', '3475', '3655', '3896', 'COURT')", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.036615Z", "completed_at": "2024-05-13T02:13:24.064091Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.094402Z", "completed_at": "2024-05-13T02:13:24.094408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07019186019897461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.toho_stcloud_cleaning", "compiled": true, "compiled_code": "/*\nCleaning TOHO data & separating the two data sources.\n\nKissimmee data is that with a 8-digit account no (including leading 0s).\nThis query filters for those accounts & removes accounts which we know cannot be imported. \n\nThis query returns 33680 results.\n*/\n\nSELECT * EXCEPT(past_due_balance_cents, mailing_address_zip, mailing_address_street)\n    , 0 as past_due_balance_cents\n    , IF(NOT REGEXP_CONTAINS(TRIM(mailing_address_zip), \"^[0-9\\\\-]+$\"),\n        svc_address_zip,\n        mailing_address_zip) as mailing_address_zip\n    -- perform same zip code check but replace street address:\n    -- if mailing_zip contains anything other than numbers and hypens after trim\n    -- then replace the mailing_address_ZIP with svc_address_ZIP\n    , IF(NOT REGEXP_CONTAINS(TRIM(mailing_address_zip), \"^[0-9\\\\-]+$\"),\n        svc_address_street,\n        mailing_address_street) as mailing_address_street\nFROM `florida-lihwap-pay.toho_restricted.toho_upload`\nwhere svc_address_zip is not null\nand acct_no <> 'acct_no'\nand svc_address_zip not in ('Move', '0', 'Fl', '347', '3474', '3475', '3655', '3896', 'COURT')\nand length(acct_no) = 8", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.039016Z", "completed_at": "2024-05-13T02:13:24.071892Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.095663Z", "completed_at": "2024-05-13T02:13:24.095666Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07022380828857422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.unattributed_stripe_fees", "compiled": true, "compiled_code": "-- Sigma + Connect Fees\n  SELECT\n    bt.description AS balance_transaction_description,\n    bt.amount / 100.0 AS total_fees_CALCULATED\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description NOT LIKE 'Radar%'\n    AND bt.description NOT LIKE 'Card payments (%'\n    AND bt.description NOT LIKE 'Card Account Updater (CAU)%'\n    AND bt.description LIKE '%2021-12%'\n  GROUP BY\n    1,2\n    UNION ALL\n      -- Card Account Updater Fees\n   SELECT\n    bt.description AS balance_transaction_description,\n    bt.amount / 100.0 AS total_fees_CALCULATED\n  FROM\n    `analytics-prod-328313.stripe.balance_transaction` bt\n  LEFT JOIN\n    `analytics-prod-328313.stripe.transaction_fee_detail` td\n  ON\n    bt.id = td.balance_transaction_id\n  WHERE\n    bt.type IN ('stripe_fee',\n      'network_cost')\n    AND td.fee_id IS NULL\n    AND bt.description LIKE '%2021-12%'\n    AND bt.description LIKE 'Card Account Updater (CAU)%'\n  GROUP BY\n    1,2", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.041529Z", "completed_at": "2024-05-13T02:13:24.074852Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.096074Z", "completed_at": "2024-05-13T02:13:24.096078Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.07025980949401855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.update_new_accountholder_matches", "compiled": true, "compiled_code": "-- For UPDATEing the values of the matches we get back from DSS\n-- Requires setting the FROM each time\n\nUPDATE\n    `virginia-lihwap-pay.dss_matching.account_holder_complete` p\nSET\n    match = dss.MATCH\nFROM\n    (SELECT ID, MAX(MATCH) as MATCH FROM`virginia-lihwap-pay.dss_matching.DSS_AcctHolder_Promise_Account_Holder_Name_Match_W_*` GROUP BY 1) dss\nWHERE\n    dss.id = p.id", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.042844Z", "completed_at": "2024-05-13T02:13:24.083768Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.096855Z", "completed_at": "2024-05-13T02:13:24.096859Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07069015502929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.promise_dwh.update_new_hh_matches", "compiled": true, "compiled_code": "-- For UPDATEing the values of the matches we get back from DSS\n-- Requires setting the FROM each time\n\nUPDATE\n    `virginia-lihwap-pay.dss_matching.household_members_complete` p\nSET\n    match_in_snap = dss.MATCH_IN_SNAP,\n    match_in_tanf = dss.MATCH_IN_TANF,\n    match_in_liheap = dss.MATCH_IN_LIHEAP\nFROM\n    (SELECT\n        id\n        , MAX(MATCH_IN_SNAP) AS MATCH_IN_SNAP\n        , MAX(MATCH_IN_TANF) AS MATCH_IN_TANF\n        , MAX(MATCH_IN_LIHEAP) AS MATCH_IN_LIHEAP\n     FROM `virginia-lihwap-pay.dss_matching.DSS_HHMembers_Promise_Household_Members_Match_*`\n     GROUP BY 1) AS dss\nWHERE\n    dss.id = p.id", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.044145Z", "completed_at": "2024-05-13T02:13:24.090344Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.097493Z", "completed_at": "2024-05-13T02:13:24.097497Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.07085585594177246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.alexrenew_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `alexrenew-water-pay.staging.complete`\n    WHERE jurisdiction = 'alexrenew_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(payPlanEligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN pastDueBalance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN pastDueBalance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN pastDueBalance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN pastDueBalance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN pastDueBalance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN pastDueBalance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`alexrenew_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.055960Z", "completed_at": "2024-05-13T02:13:24.090844Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.098309Z", "completed_at": "2024-05-13T02:13:24.098312Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.07065510749816895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.balance_transaction", "compiled": true, "compiled_code": "-- Get rows from balance_transaction for account stripe\n    SELECT\n        id\n        , connected_account_id\n        \n            , NULL AS payout_id\n        \n        , amount\n        , available_on\n        , created\n        , currency\n        , description\n        , exchange_rate\n        , fee\n        , net\n        , source\n        , status\n        , type\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`balance_transaction`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\nUNION ALL\n    -- Get rows from balance_transaction for account stripe_private_utilities\n    SELECT\n        id\n        , connected_account_id\n        \n            , NULL AS payout_id\n        \n        , amount\n        , available_on\n        , created\n        , currency\n        , description\n        , exchange_rate\n        , fee\n        , net\n        , source\n        , status\n        , type\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`balance_transaction`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n", "relation_name": "`analytics-prod-328313`.`stripe`.`balance_transaction`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.060772Z", "completed_at": "2024-05-13T02:13:24.091136Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.098931Z", "completed_at": "2024-05-13T02:13:24.098934Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.07105517387390137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.baltimore_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `baltimore-pay.staging.complete`\n    WHERE jurisdiction = 'baltimore'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`baltimore_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.064428Z", "completed_at": "2024-05-13T02:13:24.091540Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.099175Z", "completed_at": "2024-05-13T02:13:24.099180Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.07099080085754395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.board", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.board`", "relation_name": "`analytics-prod-328313`.`jira`.`board`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.066211Z", "completed_at": "2024-05-13T02:13:24.092017Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.100058Z", "completed_at": "2024-05-13T02:13:24.100063Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.07138609886169434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.buffalo_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `buffalo-water-pay.staging.complete`\n    WHERE jurisdiction = 'buffalo_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`buffalo_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.069099Z", "completed_at": "2024-05-13T02:13:24.092505Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.100816Z", "completed_at": "2024-05-13T02:13:24.100819Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.07160019874572754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.cal_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `cal-water-pay.staging.complete`\n    WHERE jurisdiction = 'cal_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`cal_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.072152Z", "completed_at": "2024-05-13T02:13:24.092783Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.101053Z", "completed_at": "2024-05-13T02:13:24.101057Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.07176089286804199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.calls_explore_valihwap", "compiled": true, "compiled_code": "\n\nSELECT\n    interaction_id,\n    call_type,\n    start_time,\n    end_time,\n    talkdesk_phone_number,\n    IF( -- check is a phone number string\n        REGEXP_CONTAINS(CAST(customer_phone_number AS string), r'[2-9][0-9]{9}$'),\n        -- if so, hash and cast as string\n        TO_BASE64(SHA256(REGEXP_EXTRACT(CAST(customer_phone_number AS string), r'[2-9][0-9]{9}$'))),\n        NULL\n    ) AS customer_phone_number_hashed,\n    talk_time,\n    record,\n    hangup,\n    in_business_hours,\n    callback_from_queue,\n    IF(\n    -- if waiting time is in HH:MM:SS format \n        CONTAINS_SUBSTR(waiting_time, ':'),\n        -- then convert to fraction of a day to match format of other \n        -- extract hours and divide by hours in day\n        (SAFE_CAST(SUBSTR(waiting_time, 1, 2) AS float64) / 24)\n        -- extract minutes, then seconds and divide by minutes / hours in day\n        + (SAFE_CAST(SUBSTR(waiting_time, 4, 2) AS float64) / 1440)\n        + (SAFE_CAST(SUBSTR(waiting_time, 7, 2) AS float64) / 86400),\n        -- else, if already in decimal format, cast to float\n        SAFE_CAST(waiting_time AS float64)\n    ) AS waiting_time,\n    agent_speed_to_answer,\n    holding_time,\n    rating,\n    `description`,\n    agent_name,\n    phone_display_name,\n    disposition_code,\n    `transfer`,\n    handling_agent,\n    tags,\n    ivr_options,\n    csat_score,\n    csat_survey_time,\n    team,\n    rating_reason,\n    agent_disconnected,\n    calls_historical_base_data_status,\n    'valihwap' AS instance\nFROM\n    `virginia-lihwap-pay.analytics_talkdesk_staging.td_explore_calls_report_data_valihwap`\n\n\n    -- recalculate latest day's data + previous\n    WHERE end_time >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "relation_name": "`analytics-prod-328313`.`talkdesk`.`calls_explore_valihwap`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.075124Z", "completed_at": "2024-05-13T02:13:24.093061Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.101288Z", "completed_at": "2024-05-13T02:13:24.101291Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.07172608375549316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.calls_promisepay", "compiled": true, "compiled_code": "\n\nwith phone_name_fix as (\n    select\n        talkdesk_phone_number\n        , MAX(talkdesk_phone_display_name) as phone_display_name\n    from `analytics-dev-328216.talkdesk_api.td_calls_report_data_promisepay`\n    group by 1\n)\n\nselect\n    call_id,\n    callsid,\n    `type`,\n    start_at,\n    end_at,\n    calls.talkdesk_phone_number,\n    phone_display_name as talkdesk_phone_display_name,\n    case\n        when REGEXP_CONTAINS(contact_phone_number, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            then SHA256(REGEXP_EXTRACT(contact_phone_number, r'[2-9][0-9]{9}$'))\n    end as contact_phone_number_hashed,\n    user_id,\n    user_name,\n    user_email,\n    total_time,\n    talk_time,\n    wait_time,\n    hold_time,\n    abandon_time,\n    total_ringing_time,\n    disposition_code,\n    notes,\n    user_voice_rating,\n    ring_groups,\n    ivr_options,\n    is_in_business_hours,\n    is_callback_from_queue,\n    is_transfer,\n    handling_user_id,\n    handling_user_name,\n    handling_user_email,\n    recording_url,\n    is_external_transfer,\n    is_if_no_answer,\n    is_call_forwarding,\n    csat_score,\n    csat_survey_time,\n    team_id,\n    team_name,\n    rating_reason,\n    agent_disconnected,\n    data_status__valid___damaged_,\n    'general' as instance\nfrom\n    `analytics-dev-328216.talkdesk_api.td_calls_report_data_promisepay` as calls\nleft join phone_name_fix as pnf\n    using (talkdesk_phone_number)\n\n\n    -- recalculate latest day's data + previous\n    where end_at >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "relation_name": "`analytics-prod-328313`.`talkdesk`.`calls_promisepay`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.078949Z", "completed_at": "2024-05-13T02:13:24.093524Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.101994Z", "completed_at": "2024-05-13T02:13:24.101997Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.07209229469299316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.calls_valihwap", "compiled": true, "compiled_code": "\n\nSELECT\n    call_id,\n    callsid,\n    `type`,\n    start_at,\n    end_at,\n    talkdesk_phone_number,\n    talkdesk_phone_display_name,\n    CASE\n        WHEN REGEXP_CONTAINS(contact_phone_number, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(contact_phone_number, r'[2-9][0-9]{9}$'))\n    END AS contact_phone_number_hashed,\n    user_id,\n    user_name,\n    user_email,\n    total_time,\n    talk_time,\n    wait_time,\n    hold_time,\n    abandon_time,\n    total_ringing_time,\n    disposition_code,\n    notes,\n    user_voice_rating,\n    ring_groups,\n    ivr_options,\n    is_in_business_hours,\n    is_callback_from_queue,\n    is_transfer,\n    handling_user_id,\n    handling_user_name,\n    handling_user_email,\n    recording_url,\n    is_external_transfer,\n    is_if_no_answer,\n    is_call_forwarding,\n    csat_score,\n    csat_survey_time,\n    team_id,\n    team_name,\n    rating_reason,\n    agent_disconnected,\n    data_status__valid___damaged_,\n    'valihwap' AS instance\nFROM\n    `virginia-lihwap-pay.analytics_talkdesk_staging.td_calls_report_data_valihwap`\n\n\n    -- recalculate latest day's data + previous\n    WHERE end_at >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "relation_name": "`analytics-prod-328313`.`talkdesk`.`calls_valihwap`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.081540Z", "completed_at": "2024-05-13T02:13:24.093776Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.102227Z", "completed_at": "2024-05-13T02:13:24.102230Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 0.072052001953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.card", "compiled": true, "compiled_code": "-- Get rows from card for account stripe\n    SELECT\n        id\n        --,_fivetran_synced\n        , account_id\n        --, address_city\n        --, address_country\n        --, address_line_1\n        --, address_line_1_check\n        --, address_line_2\n        --, address_state\n        --, address_zip\n        --, address_zip_check\n        , brand\n        , connected_account_id\n        , country\n        --, created\n        --, currency\n        , customer_id\n        --, cvc_check\n        --, dynamic_last_4\n        , exp_month\n        , exp_year\n        --, fingerprint\n        , funding\n        , is_deleted\n        --, last_4\n        --, metadata\n        --, name\n        , network\n        --, recipient\n        --, three_d_secure_usage_supported\n        --,  tokenization_method\n        , wallet_type\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`card`\n    \n        UNION ALL\n    -- Get rows from card for account stripe_private_utilities\n    SELECT\n        id\n        --,_fivetran_synced\n        , account_id\n        --, address_city\n        --, address_country\n        --, address_line_1\n        --, address_line_1_check\n        --, address_line_2\n        --, address_state\n        --, address_zip\n        --, address_zip_check\n        , brand\n        , connected_account_id\n        , country\n        --, created\n        --, currency\n        , customer_id\n        --, cvc_check\n        --, dynamic_last_4\n        , exp_month\n        , exp_year\n        --, fingerprint\n        , funding\n        , is_deleted\n        --, last_4\n        --, metadata\n        --, name\n        , network\n        --, recipient\n        --, three_d_secure_usage_supported\n        --,  tokenization_method\n        , wallet_type\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`card`\n    ", "relation_name": "`analytics-prod-328313`.`stripe`.`card`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.086845Z", "completed_at": "2024-05-13T02:13:24.094864Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.103658Z", "completed_at": "2024-05-13T02:13:24.103661Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.07120585441589355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.charge", "compiled": true, "compiled_code": "-- Get rows for charge for account stripe\n    SELECT\n        id\n        , balance_transaction_id\n        , card_id\n        , bank_account_id\n        -- , connected_account_id\n        , customer_id\n        -- , destination\n        -- , invoice_id\n        -- , on_behalf_of\n        , payment_intent_id\n        , payment_method_id\n        -- , source_transfer\n        -- , transfer_id\n        -- , transfer_data_destination\n        -- , application\n        , amount\n        , amount_refunded\n        -- , application_fee_amount\n        -- , billing_detail_name\n        -- , billing_detail_address_line_1\n        -- , billing_detail_address_line_1\n        , billing_detail_address_city\n        , billing_detail_address_state\n        , billing_detail_address_postal_code\n        , billing_detail_address_country\n        -- , billing_detail_email\n        -- , billing_detail_phone\n        , calculated_statement_descriptor\n        , captured\n        , created\n        , currency\n        , description\n        , failure_code\n        , failure_message\n        , fraud_details_stripe_report\n        , fraud_details_user_report\n        , livemode\n        -- , metadata\n        , paid\n        -- , receipt_email\n        -- , receipt_number\n        -- , receipt_url\n        , refunded\n        -- , source_id\n        , statement_descriptor\n        , status\n        -- , transfer_data_destination\n        -- , transfer_group\n        , outcome_network_status\n        , outcome_reason\n        , outcome_risk_level\n        , outcome_risk_score\n        , outcome_seller_message\n        , outcome_type\n        -- , shipping_address_*\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`charge`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\nUNION ALL\n    -- Get rows for charge for account stripe_private_utilities\n    SELECT\n        id\n        , balance_transaction_id\n        , card_id\n        , bank_account_id\n        -- , connected_account_id\n        , customer_id\n        -- , destination\n        -- , invoice_id\n        -- , on_behalf_of\n        , payment_intent_id\n        , payment_method_id\n        -- , source_transfer\n        -- , transfer_id\n        -- , transfer_data_destination\n        -- , application\n        , amount\n        , amount_refunded\n        -- , application_fee_amount\n        -- , billing_detail_name\n        -- , billing_detail_address_line_1\n        -- , billing_detail_address_line_1\n        , billing_detail_address_city\n        , billing_detail_address_state\n        , billing_detail_address_postal_code\n        , billing_detail_address_country\n        -- , billing_detail_email\n        -- , billing_detail_phone\n        , calculated_statement_descriptor\n        , captured\n        , created\n        , currency\n        , description\n        , failure_code\n        , failure_message\n        , fraud_details_stripe_report\n        , fraud_details_user_report\n        , livemode\n        -- , metadata\n        , paid\n        -- , receipt_email\n        -- , receipt_number\n        -- , receipt_url\n        , refunded\n        -- , source_id\n        , statement_descriptor\n        , status\n        -- , transfer_data_destination\n        -- , transfer_group\n        , outcome_network_status\n        , outcome_reason\n        , outcome_risk_level\n        , outcome_risk_score\n        , outcome_seller_message\n        , outcome_type\n        -- , shipping_address_*\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`charge`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n", "relation_name": "`analytics-prod-328313`.`stripe`.`charge`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.084074Z", "completed_at": "2024-05-13T02:13:24.095072Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.103888Z", "completed_at": "2024-05-13T02:13:24.103891Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.07225918769836426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.centralarkansas_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `centralarkansas-water-pay.staging.complete`\n    WHERE jurisdiction = 'centralarkansas_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(active_status, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`centralarkansas_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.114364Z", "completed_at": "2024-05-13T02:13:24.122209Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.167598Z", "completed_at": "2024-05-13T02:13:24.167604Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06251215934753418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.comment", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.comment`", "relation_name": "`analytics-prod-328313`.`jira`.`comment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.125183Z", "completed_at": "2024-05-13T02:13:24.145051Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.172358Z", "completed_at": "2024-05-13T02:13:24.172362Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06387686729431152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.company_property_history", "compiled": true, "compiled_code": "\n\n\nSELECT\n    --_fivetran_start\n    company_id,\n    `name`,\n    --, _fivetran_active\n    --, _fivetran_end\n    --, _fivetran_synced\n    source,\n    source_id,\n    `timestamp`,\n    `value`\nFROM\n    `analytics-prod-328313`.`hubspot`.`company_property_history`", "relation_name": "`analytics-prod-328313`.`hubspot`.`company_property_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.122627Z", "completed_at": "2024-05-13T02:13:24.148365Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.172796Z", "completed_at": "2024-05-13T02:13:24.172799Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06518983840942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.company", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id,\n    -- , _fivetran_synced\n    -- , is_deleted\n    portal_id,\n    property_address,\n    property_address_2,\n    property_annualrevenue,\n    -- , property_application_process\n    property_city,\n    -- , property_closedate\n    -- , property_company_type\n    property_country,\n    property_createdate,\n    -- , property_current_online_ticket_provider_if_applicable_\n    -- , property_days_to_close\n    -- , property_demographics_asian\n    -- , property_demographics_black\n    -- , property_demographics_hispanic\n    -- , property_demographics_white\n    property_description,\n    property_domain,\n    -- , property_engagements_last_meeting_booked\n    property_facebook_company_page,\n    property_first_contact_createdate,\n    -- , property_first_contact_createdate_timestamp_earliest_value_78_b_50_eea\n    property_first_deal_created_date,\n    property_founded_year,\n    -- , property_how_are_court_dates_communicated_\n    property_hs_all_accessible_team_ids,\n    property_hs_all_owner_ids,\n    property_hs_all_team_ids,\n    property_hs_analytics_first_timestamp,\n    property_hs_analytics_first_visit_timestamp,\n    property_hs_analytics_last_timestamp,\n    property_hs_analytics_last_visit_timestamp,\n    property_hs_analytics_num_page_views,\n    property_hs_analytics_num_visits,\n    property_hs_analytics_source,\n    property_hs_analytics_source_data_1,\n    property_hs_analytics_source_data_2,\n    property_hs_created_by_user_id,\n    property_hs_date_entered_customer,\n    property_hs_date_entered_opportunity,\n    property_hs_date_exited_opportunity,\n    property_hs_is_target_account,\n    property_hs_last_booked_meeting_date,\n    property_hs_last_logged_call_date,\n    property_hs_last_open_task_date,\n    property_hs_last_sales_activity_date,\n    property_hs_last_sales_activity_timestamp,\n    property_hs_lastmodifieddate,\n    property_hs_latest_meeting_activity,\n    property_hs_num_blockers,\n    property_hs_num_child_companies,\n    property_hs_num_contacts_with_buying_roles,\n    property_hs_num_decision_makers,\n    property_hs_num_open_deals,\n    property_hs_parent_company_id,\n    property_hs_pipeline,\n    property_hs_sales_email_last_replied,\n    property_hs_target_account_probability,\n    property_hs_target_account_recommendation_state,\n    property_hs_time_in_customer,\n    property_hs_time_in_opportunity,\n    property_hs_total_deal_value,\n    property_hs_updated_by_user_id,\n    property_hs_user_ids_of_all_owners,\n    property_hubspot_owner_assigneddate,\n    property_hubspot_owner_id,\n    property_hubspot_team_id,\n    property_industry,\n    property_is_public,\n    property_lifecyclestage,\n    property_linkedin_company_page,\n    property_linkedinbio,\n    property_name,\n    property_notes_last_contacted,\n    property_notes_last_updated,\n    property_notes_next_activity_date,\n    property_num_associated_contacts,\n    property_num_associated_deals,\n    property_num_contacted_notes,\n    property_num_notes,\n    property_numberofemployees,\n    property_online_ticket_processing_fee,\n    property_payment_plans_are,\n    property_phone,\n    property_population,\n    property_poverty_rate,\n    property_recent_deal_amount,\n    property_recent_deal_close_date,\n    property_referenceable,\n    property_relationship_type,\n    property_senior_executive_name,\n    property_senior_executive_title,\n    property_state,\n    property_ticket_payment_site_for_court,\n    property_ticket_payment_site_non_court_,\n    property_tickets_can_be_paid_,\n    property_tickets_enforced_by,\n    property_timezone,\n    property_total_money_raised,\n    property_total_revenue,\n    property_twitterhandle,\n    property_web_technologies,\n    property_website,\n    property_zip,\n    property_hs_predictivecontactscore_v_2,\n    property_num_conversion_events,\n    property_decision_level,\n    property_recent_conversion_date,\n    property_first_conversion_date,\n    property_first_conversion_event_name,\n    property_recent_conversion_event_name\nFROM\n    `analytics-prod-328313`.`hubspot`.`company`", "relation_name": "`analytics-prod-328313`.`hubspot`.`company`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.127584Z", "completed_at": "2024-05-13T02:13:24.160227Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.173763Z", "completed_at": "2024-05-13T02:13:24.173767Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06483197212219238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.component", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.component`", "relation_name": "`analytics-prod-328313`.`jira`.`component`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.129495Z", "completed_at": "2024-05-13T02:13:24.167309Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.174538Z", "completed_at": "2024-05-13T02:13:24.174541Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.06514406204223633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.contact", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id,\n    -- , _fivetran_deleted\n    -- , _fivetran_synced\n    canonical_vid,\n    merged_vids,\n    property_address,\n    property_annualrevenue,\n    property_associatedcompanyid,\n    property_city,\n    property_closedate,\n    property_company,\n    property_company_size,\n    property_country,\n    property_createdate,\n    property_currentlyinworkflow,\n    property_date_of_birth,\n    property_degree,\n    property_department,\n    property_email,\n    property_engagements_last_meeting_booked,\n    property_engagements_last_meeting_booked_campaign,\n    property_engagements_last_meeting_booked_medium,\n    property_engagements_last_meeting_booked_source,\n    property_fax,\n    property_field_of_study,\n    property_first_deal_created_date,\n    property_firstname,\n    property_gender,\n    property_graduation_date,\n    property_hs_all_accessible_team_ids,\n    property_hs_all_assigned_business_unit_ids,\n    property_hs_all_owner_ids,\n    property_hs_all_team_ids,\n    property_hs_analytics_average_page_views,\n    property_hs_analytics_first_referrer,\n    property_hs_analytics_first_timestamp,\n    property_hs_analytics_first_touch_converting_campaign,\n    property_hs_analytics_first_url,\n    property_hs_analytics_first_visit_timestamp,\n    property_hs_analytics_last_referrer,\n    property_hs_analytics_last_timestamp,\n    property_hs_analytics_last_touch_converting_campaign,\n    property_hs_analytics_last_url,\n    property_hs_analytics_last_visit_timestamp,\n    property_hs_analytics_num_event_completions,\n    property_hs_analytics_num_page_views,\n    property_hs_analytics_num_visits,\n    property_hs_analytics_revenue,\n    property_hs_analytics_source,\n    property_hs_analytics_source_data_1,\n    property_hs_analytics_source_data_2,\n    property_hs_avatar_filemanager_key,\n    property_hs_buying_role,\n    property_hs_content_membership_notes,\n    property_hs_content_membership_registration_domain_sent_to,\n    property_hs_content_membership_status,\n    property_hs_conversations_visitor_email,\n    property_hs_count_is_unworked,\n    property_hs_count_is_worked,\n    property_hs_created_by_conversations,\n    property_hs_email_bounce,\n    property_hs_email_click,\n    property_hs_email_customer_quarantined_reason,\n    property_hs_email_delivered,\n    property_hs_email_first_click_date,\n    property_hs_email_first_open_date,\n    property_hs_email_first_reply_date,\n    property_hs_email_first_send_date,\n    property_hs_email_hard_bounce_reason,\n    property_hs_email_hard_bounce_reason_enum,\n    property_hs_email_last_click_date,\n    property_hs_email_last_email_name,\n    property_hs_email_last_open_date,\n    property_hs_email_last_reply_date,\n    property_hs_email_last_send_date,\n    property_hs_email_open,\n    property_hs_email_optout,\n    property_hs_email_optout_5747393,\n    property_hs_email_optout_7148597,\n    property_hs_email_quarantined,\n    property_hs_email_quarantined_reason,\n    property_hs_email_replied,\n    property_hs_email_sends_since_last_engagement,\n    property_hs_emailconfirmationstatus,\n    property_hs_facebook_click_id,\n    property_hs_facebookid,\n    property_hs_feedback_last_nps_follow_up,\n    property_hs_feedback_last_nps_rating,\n    property_hs_google_click_id,\n    property_hs_googleplusid,\n    property_hs_ip_timezone,\n    property_hs_is_unworked,\n    property_hs_language,\n    property_hs_last_sales_activity_date,\n    property_hs_last_sales_activity_timestamp,\n    property_hs_latest_meeting_activity,\n    property_hs_latest_source,\n    property_hs_latest_source_data_1,\n    property_hs_latest_source_data_2,\n    property_hs_lead_status,\n    property_hs_legal_basis,\n    property_hs_lifecyclestage_customer_date,\n    property_hs_lifecyclestage_evangelist_date,\n    property_hs_lifecyclestage_lead_date,\n    property_hs_lifecyclestage_marketingqualifiedlead_date,\n    property_hs_lifecyclestage_opportunity_date,\n    property_hs_lifecyclestage_other_date,\n    property_hs_lifecyclestage_salesqualifiedlead_date,\n    property_hs_lifecyclestage_subscriber_date,\n    property_hs_linkedinid,\n    property_hs_marketable_reason_id,\n    property_hs_marketable_reason_type,\n    property_hs_marketable_status,\n    property_hs_marketable_until_renewal,\n    property_hs_merged_object_ids,\n    property_hs_persona,\n    property_hs_pipeline,\n    property_hs_predictivecontactscorebucket,\n    property_hs_predictivescoringtier,\n    property_hs_sa_first_engagement_date,\n    property_hs_sales_email_last_clicked,\n    property_hs_sales_email_last_opened,\n    property_hs_sales_email_last_replied,\n    property_hs_sequences_actively_enrolled_count,\n    property_hs_social_facebook_clicks,\n    property_hs_social_google_plus_clicks,\n    property_hs_social_linkedin_clicks,\n    property_hs_social_num_broadcast_clicks,\n    property_hs_social_twitter_clicks,\n    property_hs_testpurge,\n    property_hs_testrollback,\n    property_hs_time_between_contact_creation_and_deal_close,\n    property_hs_time_between_contact_creation_and_deal_creation,\n    property_hs_time_to_move_from_lead_to_customer,\n    property_hs_time_to_move_from_opportunity_to_customer,\n    property_hs_time_to_move_from_subscriber_to_customer,\n    property_hs_timezone,\n    property_hs_twitterid,\n    property_hs_unique_creation_key,\n    property_hs_user_ids_of_all_notification_followers,\n    property_hs_user_ids_of_all_notification_unfollowers,\n    property_hs_user_ids_of_all_owners,\n    property_hubspot_owner_assigneddate,\n    property_hubspot_owner_id,\n    property_hubspot_team_id,\n    property_industry,\n    property_ip_city,\n    property_ip_country,\n    property_ip_country_code,\n    property_ip_latlon,\n    property_ip_state,\n    property_ip_state_code,\n    property_ip_zipcode,\n    property_job_function,\n    property_jobtitle,\n    property_lastmodifieddate,\n    property_lastname,\n    property_lifecyclestage,\n    property_linkedin_profile,\n    property_linkedinbio,\n    property_lists,\n    property_marital_status,\n    property_message,\n    property_military_status,\n    property_mobilephone,\n    property_notes_last_contacted,\n    property_notes_last_updated,\n    property_notes_next_activity_date,\n    property_num_associated_deals,\n    property_num_contacted_notes,\n    property_num_notes,\n    property_numemployees,\n    property_owneremail,\n    property_ownername,\n    property_payment_processor,\n    property_payments_url,\n    property_phone,\n    property_photo,\n    property_product,\n    property_recent_deal_amount,\n    property_recent_deal_close_date,\n    property_relationship_status,\n    property_salutation,\n    property_school,\n    property_seniority,\n    property_start_date,\n    property_state,\n    property_total_revenue,\n    property_twitterbio,\n    property_twitterhandle,\n    property_twitterprofilephoto,\n    property_website,\n    property_work_email,\n    property_zip,\n    property_hs_predictivecontactscore_v_2,\n    property_realcontact_type,\n    property_contact_type,\n    property_hs_clicked_linkedin_ad,\n    property_hs_linkedin_ad_clicked,\n    property_memory_blue_contact,\n    property_hs_latest_source_timestamp,\n    property_hs_created_by_user_id,\n    property_hs_email_bad_address\nFROM\n    `analytics-prod-328313`.`hubspot`.`contact`", "relation_name": "`analytics-prod-328313`.`hubspot`.`contact`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.132253Z", "completed_at": "2024-05-13T02:13:24.167916Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.174991Z", "completed_at": "2024-05-13T02:13:24.174994Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.0626220703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.conversation", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    id,\n    created_at,\n    created_by,\n    `deleted`,\n    deleted_at,\n    deleted_by,\n    modified_at,\n    modified_by,\n    updated_at,\n    ended,\n    queue_id,\n    customer_id,\n    direction,\n    external_id,\n    message_count,\n    `name`, -- should we obfuscate?\n    note_count,\n    outbound_message_count,\n    reopen_count,\n    snooze_count,\n    `status`,\n    default_lang,\n    priority,\n    first_message_in_created_at,\n    first_message_in_id,\n    first_message_in_sent_at,\n    first_response_created_at,\n    first_response_id,\n    first_response_response_time,\n    first_response_sent_at,\n    last_activity_at,\n    last_message_at,\n    last_message_direction,\n    last_message_in_created_at,\n    last_message_in_message_id,\n    last_message_in_sent_at,\n    last_message_out_created_at,\n    last_message_out_message_id,\n    last_message_out_sent_at\nFROM\n    `analytics-dev-328216.kustomer.conversation`\n\n\n    -- recalculate latest day's data + previous\n    WHERE created_at >= timestamp_sub(_dbt_max_partition, INTERVAL 1 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`kustomer`.`conversation`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.136458Z", "completed_at": "2024-05-13T02:13:24.168390Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.176029Z", "completed_at": "2024-05-13T02:13:24.176033Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.06330394744873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.corona_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `corona-pay.staging.complete`\n    WHERE jurisdiction = 'corona'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        \n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`corona_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.139272Z", "completed_at": "2024-05-13T02:13:24.168884Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.176732Z", "completed_at": "2024-05-13T02:13:24.176735Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.06342005729675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.customer", "compiled": true, "compiled_code": "\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `alexrenew-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `baltimore-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `buffalo-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `cal-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `centralarkansas-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `corona-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `gcww-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `hrsd-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `jackson-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `louisville-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `newark-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `newportnews-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `nola-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `richmond-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `sj-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `toledo-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `veoliany-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `wssc-water-pay.staging.customer`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        ,        REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\")      AS jurisdiction -- noqa\n        , CONCAT(REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\"), id) AS jurisdiction_x_id\n        , TO_BASE64(name_hashed) = \"ej8CRBdhd7n6wrIEY+eZbmV+fSLaMTwdPDKoiRoRBuc=\" AS is_test_account\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.customer`\n    \n", "relation_name": "`analytics-prod-328313`.`promisepay`.`customer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.145330Z", "completed_at": "2024-05-13T02:13:24.169193Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.176955Z", "completed_at": "2024-05-13T02:13:24.176959Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.06334424018859863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.customer_communication", "compiled": true, "compiled_code": "\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.customer_communication`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.customer_communication`\n    \n", "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_communication`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.148608Z", "completed_at": "2024-05-13T02:13:24.169484Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.177181Z", "completed_at": "2024-05-13T02:13:24.177184Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.06345772743225098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.customer_config_attributes", "compiled": true, "compiled_code": "\n\nWITH\n-- join all jurx configs then extract attributes\nall_configs AS (\n        SELECT *\n        FROM\n            \n        `alexrenew-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `baltimore-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `buffalo-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `cal-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `centralarkansas-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `corona-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `gcww-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `hrsd-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `jackson-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `louisville-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newark-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newportnews-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `nola-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `richmond-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `sj-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `toledo-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `veoliany-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `wssc-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `florida-lihwap-pay.analytics_promisepay_prod.customer_config_values`\n        \n    \n)\n\n-- use js functions to unpack JSONs\n-- planLengthOptions is an array, so the key followed by an index, regex drops index, want to access whole array\nSELECT DISTINCT REGEXP_REPLACE(config_key, '[\\\\.,0-9]+$', '') AS config_json_path\n\nFROM all_configs,\n    UNNEST([STRUCT(promisepay.jsonNestedExtract(config_values) AS leaves)]),\n    UNNEST(promisepay.jsonObjectKeys(leaves)) AS config_key", "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_config_attributes`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.151984Z", "completed_at": "2024-05-13T02:13:24.169786Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.177397Z", "completed_at": "2024-05-13T02:13:24.177400Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.06357312202453613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.customer_exception_history", "compiled": true, "compiled_code": "\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.customer_exception_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.customer_exception_history`\n    \n", "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_exception_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.154935Z", "completed_at": "2024-05-13T02:13:24.170195Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.178085Z", "completed_at": "2024-05-13T02:13:24.178088Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.06372213363647461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.customer_kustomer", "compiled": true, "compiled_code": "\n\nSELECT\n    id\n    , created_by\n    , modified_by\n    , created_at\n    , CASE\n        WHEN REGEXP_CONTAINS(display_name, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(display_name, r'[2-9][0-9]{9}$'))\n        ELSE SHA256(LOWER(TRIM(display_name)))\n    END AS display_name_hashed\n    , COALESCE(REGEXP_CONTAINS(display_name, r'^(?:\\+1)?[2-9][0-9]{9}$'), FALSE) AS display_name_is_phone\n    , external_id\n    , progressive_status\n    , verified\n    , modified_at\n    , deleted_at\n    , last_activity_at\n    , default_lang\n    , deleted\n    , CASE\n        WHEN REGEXP_CONTAINS(first_name, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(first_name, r'[0-9]{10}$'))\n        ELSE SHA256(LOWER(TRIM(first_name)))\n    END AS first_name_hashed\n    , \n    SHA256(TRIM(LOWER(last_name))) as last_name_hashed\n\n    , CASE\n        WHEN REGEXP_CONTAINS(name, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(name, r'[0-9]{10}$'))\n        ELSE SHA256(LOWER(TRIM(name)))\n    END AS name_hashed\n    , last_message_at\n    , last_conversation_id\n    , last_message_out_sent_at\n    , conversation_counts_all\n    , conversation_counts_done\n    , conversation_counts_open\n    , conversation_counts_snoozed\n    , CASE\n        WHEN custom_client_external_id_str = 'multiple' OR custom_client_external_id_str IS NULL\n            THEN custom_client_external_id_str\n        ELSE TO_BASE64(SHA256(custom_client_external_id_str))\n    END AS client_external_id_hashed\n    , custom_client_verification_str AS client_verification_string\n    , custom_customer_name_str AS customer_name\n    , custom_enrolled_bool AS enrolled\n    , custom_relief_eligibility_str AS relief_eligible\nFROM\n    `analytics-dev-328216.kustomer.customer`", "relation_name": "`analytics-prod-328313`.`kustomer`.`customer_kustomer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.157270Z", "completed_at": "2024-05-13T02:13:24.170449Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.178304Z", "completed_at": "2024-05-13T02:13:24.178307Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 0.06381702423095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.customer_version", "compiled": true, "compiled_code": "\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.customer_version`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.customer_version`\n    \n", "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_version`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.160469Z", "completed_at": "2024-05-13T02:13:24.170703Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.178522Z", "completed_at": "2024-05-13T02:13:24.178525Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.06364107131958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.contact_property_history", "compiled": true, "compiled_code": "\n\n\nSELECT\n-- _fivetran_start\n    contact_id,\n    `name`,\n    -- , _fivetran_active\n    -- , _fivetran_end\n    -- , _fivetran_synced\n    source,\n    source_id,\n    `timestamp`,\n    `value`\nFROM\n    `analytics-prod-328313`.`hubspot`.`contact_property_history`", "relation_name": "`analytics-prod-328313`.`hubspot`.`contact_property_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.162271Z", "completed_at": "2024-05-13T02:13:24.171902Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.180000Z", "completed_at": "2024-05-13T02:13:24.180004Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.06426191329956055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.deal", "compiled": true, "compiled_code": "\n\n\nSELECT\n    deal_id,\n    -- , _fivetran_synced\n    deal_pipeline_id,\n    deal_pipeline_stage_id,\n    is_deleted,\n    is_merged,\n    owner_id,\n    portal_id,\n    property_amount,\n    property_amount_in_home_currency,\n    property_approval_strategy_context,\n    property_avg_arrearage,\n    property_blockers_concerns,\n    property_can_you_pay_a_citation_online_,\n    property_closed_lost_reason,\n    property_closed_won_reason,\n    property_closedate,\n    property_committed,\n    property_contract_date,\n    property_contract_evergreen,\n    property_contract_expiration,\n    property_contract_renewal_campaign,\n    property_createdate,\n    property_days_to_close,\n    property_dealname,\n    property_dealtype,\n    property_delinquent_accounts,\n    property_description,\n    property_engagements_last_meeting_booked,\n    property_flags,\n    property_forecast_model,\n    property_help_needed,\n    property_hs_all_accessible_team_ids,\n    property_hs_all_owner_ids,\n    property_hs_all_team_ids,\n    property_hs_analytics_source,\n    property_hs_analytics_source_data_1,\n    property_hs_analytics_source_data_2,\n    property_hs_closed_amount,\n    property_hs_closed_amount_in_home_currency,\n    property_hs_created_by_user_id,\n    property_hs_createdate,\n    -- , property_hs_date_entered_1_bd_5379_d_74_f_5_4_aa_7_9_e_2_c_ebe_431778_f_7_f_235311591\n    -- , property_hs_date_entered_1_d_6_f_0_c_54_89_db_4955_a_81_f_399_e_1_c_4_a_0_cbd_1988428775\n    -- , property_hs_date_entered_2004_c_8_de_921_a_4_c_46_bc_90_149_a_8_e_9_d_56_ac_1414072509\n    -- , property_hs_date_entered_2439044\n    -- , property_hs_date_entered_2439453\n    -- , property_hs_date_entered_2_d_5_af_470_6365_480_b_b_3_d_2_2_a_7458_a_30_c_0_d_1081712001\n    -- , property_hs_date_entered_305_f_953_c_0198_41_e_7_8263_226_d_92_c_4_f_5_f_7_961705327\n    -- , property_hs_date_entered_3816814\n    -- , property_hs_date_entered_3_a_2_cc_27_c_e_424_433_d_8_ca_5_a_38350_f_5_c_6_ea_1394195149\n    -- , property_hs_date_entered_3_b_9_f_0_c_7_a_6_eb_0_483_a_8_d_35_6944237166_d_5_1610057148\n    -- , property_hs_date_entered_426389\n    -- , property_hs_date_entered_5068_e_5_ca_fd_2_a_4037_a_36_c_14_f_37224365_b_518395357\n    -- , property_hs_date_entered_638152\n    -- , property_hs_date_entered_8394792\n    -- , property_hs_date_entered_a_67_a_3_dcf_21_ad_4_dd_4_98_a_2_da_039_c_0_a_3_c_2_e_527925615\n    -- , property_hs_date_entered_appointmentscheduled\n    -- , property_hs_date_entered_c_146038_c_696_b_4_c_37_8484_d_9_ed_70353453_2118041574\n    -- , property_hs_date_entered_c_4_a_762_a_9_c_947_49_b_4_b_59_b_7_c_83_d_48890_f_0_2080616206\n    -- , property_hs_date_entered_c_4_c_73_bc_1_288_c_4528_bbfa_f_1_c_58_f_849_a_27_840228759\n    -- , property_hs_date_entered_c_9_fc_7_fea_4_a_57_42_d_6_9_f_7_b_12089_d_8_d_9934_1141043323\n    -- , property_hs_date_entered_ce_02_c_44_d_f_100_421_f_a_77_b_739719_cc_480_b_474304893\n    -- , property_hs_date_entered_ce_6919_e_7_6785_4_f_76_afef_3_edfb_2_e_77_aaa_780981640\n    property_hs_date_entered_closedlost,\n    property_hs_date_entered_closedwon,\n    property_hs_date_entered_contractsent,\n    -- , property_hs_date_entered_d_73_e_17_f_8_678_c_4270_ac_11_ed_2669186_d_48_230132295\n    property_hs_date_entered_decisionmakerboughtin,\n    property_hs_date_entered_presentationscheduled,\n    -- , property_hs_date_exited_1_bd_5379_d_74_f_5_4_aa_7_9_e_2_c_ebe_431778_f_7_f_235311591\n    -- , property_hs_date_exited_1_d_6_f_0_c_54_89_db_4955_a_81_f_399_e_1_c_4_a_0_cbd_1988428775\n    -- , property_hs_date_exited_2004_c_8_de_921_a_4_c_46_bc_90_149_a_8_e_9_d_56_ac_1414072509\n    -- , property_hs_date_exited_2439044\n    -- , property_hs_date_exited_2439453\n    -- , property_hs_date_exited_2_d_5_af_470_6365_480_b_b_3_d_2_2_a_7458_a_30_c_0_d_1081712001\n    -- , property_hs_date_exited_3_a_2_cc_27_c_e_424_433_d_8_ca_5_a_38350_f_5_c_6_ea_1394195149\n    -- , property_hs_date_exited_426389\n    -- , property_hs_date_exited_5068_e_5_ca_fd_2_a_4037_a_36_c_14_f_37224365_b_518395357\n    -- , property_hs_date_exited_638152\n    -- , property_hs_date_exited_8394792\n    -- , property_hs_date_exited_a_67_a_3_dcf_21_ad_4_dd_4_98_a_2_da_039_c_0_a_3_c_2_e_527925615\n    -- , property_hs_date_exited_appointmentscheduled\n    -- , property_hs_date_exited_c_4_a_762_a_9_c_947_49_b_4_b_59_b_7_c_83_d_48890_f_0_2080616206\n    -- , property_hs_date_exited_c_4_c_73_bc_1_288_c_4528_bbfa_f_1_c_58_f_849_a_27_840228759\n    -- , property_hs_date_exited_c_9_fc_7_fea_4_a_57_42_d_6_9_f_7_b_12089_d_8_d_9934_1141043323\n    -- , property_hs_date_exited_ce_02_c_44_d_f_100_421_f_a_77_b_739719_cc_480_b_474304893\n    -- , property_hs_date_exited_contractsent\n    -- , property_hs_date_exited_d_73_e_17_f_8_678_c_4270_ac_11_ed_2669186_d_48_230132295\n    property_hs_date_exited_decisionmakerboughtin,\n    property_hs_date_exited_presentationscheduled,\n    property_hs_deal_stage_probability,\n    property_hs_deal_stage_probability_shadow,\n    property_hs_forecast_probability,\n    property_hs_is_closed,\n    property_hs_is_closed_won,\n    property_hs_lastmodifieddate,\n    property_hs_latest_meeting_activity,\n    property_hs_manual_forecast_category,\n    property_hs_merged_object_ids,\n    property_hs_next_step,\n    property_hs_num_target_accounts,\n    property_hs_projected_amount,\n    property_hs_projected_amount_in_home_currency,\n    property_hs_sales_email_last_replied,\n    -- , property_hs_time_in_1_bd_5379_d_74_f_5_4_aa_7_9_e_2_c_ebe_431778_f_7_f_235311591\n    -- , property_hs_time_in_1_d_6_f_0_c_54_89_db_4955_a_81_f_399_e_1_c_4_a_0_cbd_1988428775\n    -- , property_hs_time_in_2004_c_8_de_921_a_4_c_46_bc_90_149_a_8_e_9_d_56_ac_1414072509\n    -- , property_hs_time_in_2439044\n    -- , property_hs_time_in_2439453\n    -- , property_hs_time_in_2_d_5_af_470_6365_480_b_b_3_d_2_2_a_7458_a_30_c_0_d_1081712001\n    -- , property_hs_time_in_305_f_953_c_0198_41_e_7_8263_226_d_92_c_4_f_5_f_7_961705327\n    -- , property_hs_time_in_3816814\n    -- , property_hs_time_in_3_a_2_cc_27_c_e_424_433_d_8_ca_5_a_38350_f_5_c_6_ea_1394195149\n    -- , property_hs_time_in_3_b_9_f_0_c_7_a_6_eb_0_483_a_8_d_35_6944237166_d_5_1610057148\n    -- , property_hs_time_in_426389\n    -- , property_hs_time_in_5068_e_5_ca_fd_2_a_4037_a_36_c_14_f_37224365_b_518395357\n    -- , property_hs_time_in_638152\n    -- , property_hs_time_in_8394792\n    -- , property_hs_time_in_a_67_a_3_dcf_21_ad_4_dd_4_98_a_2_da_039_c_0_a_3_c_2_e_527925615\n    -- , property_hs_time_in_appointmentscheduled\n    -- , property_hs_time_in_c_146038_c_696_b_4_c_37_8484_d_9_ed_70353453_2118041574\n    -- , property_hs_time_in_c_4_a_762_a_9_c_947_49_b_4_b_59_b_7_c_83_d_48890_f_0_2080616206\n    -- , property_hs_time_in_c_4_c_73_bc_1_288_c_4528_bbfa_f_1_c_58_f_849_a_27_840228759\n    -- , property_hs_time_in_c_9_fc_7_fea_4_a_57_42_d_6_9_f_7_b_12089_d_8_d_9934_1141043323\n    -- , property_hs_time_in_ce_02_c_44_d_f_100_421_f_a_77_b_739719_cc_480_b_474304893\n    -- , property_hs_time_in_ce_6919_e_7_6785_4_f_76_afef_3_edfb_2_e_77_aaa_780981640\n    property_hs_time_in_closedlost,\n    property_hs_time_in_closedwon,\n    property_hs_time_in_contractsent,\n    -- , property_hs_time_in_d_73_e_17_f_8_678_c_4270_ac_11_ed_2669186_d_48_230132295\n    property_hs_time_in_decisionmakerboughtin,\n    property_hs_time_in_presentationscheduled,\n    property_hs_updated_by_user_id,\n    property_hs_user_ids_of_all_owners,\n    property_hubspot_owner_assigneddate,\n    property_hubspot_team_id,\n    property_notes_last_contacted,\n    property_notes_last_updated,\n    property_notes_next_activity_date,\n    property_num_contacted_notes,\n    property_num_notes,\n    property_of_accounts,\n    property_pel_commit,\n    property_population,\n    property_primary_pilot_strategy,\n    property_product,\n    property_proj_annual_txn_fees,\n    property_relationship_level,\n    property_renewal_notice,\n    property_rfi_rfp_requirement,\n    property_roi_calculator,\n    property_saas_fee,\n    property_saas_fee_amt,\n    property_service_fee,\n    property_service_fees,\n    property_status,\n    property_success_fee,\n    property_success_fee_,\n    property_term,\n    property_wow_change,\n    property_hs_line_item_global_term_recurringbillingfrequency,\n    property_hs_line_item_global_term_hs_recurring_billing_start_date,\n    property_implementation_start_date,\n    property_hs_line_item_global_term_hs_recurring_billing_period_enabled,\n    property_memory_blue,\n    property_hs_line_item_global_term_hs_recurring_billing_start_date_enabled,\n    property_hs_line_item_global_term_recurringbillingfrequency_enabled,\n    property_transaction_fees_paid_by\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal`", "relation_name": "`analytics-prod-328313`.`hubspot`.`deal`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.164554Z", "completed_at": "2024-05-13T02:13:24.172123Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.180224Z", "completed_at": "2024-05-13T02:13:24.180228Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.06431198120117188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.deal_company", "compiled": true, "compiled_code": "\n\n\nSELECT\n    company_id,\n    deal_id\n-- , _fivetran_synced\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal_company`", "relation_name": "`analytics-prod-328313`.`hubspot`.`deal_company`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.189700Z", "completed_at": "2024-05-13T02:13:24.196773Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.228749Z", "completed_at": "2024-05-13T02:13:24.228755Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05351710319519043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.deal_contact", "compiled": true, "compiled_code": "\n\n\nSELECT\n    contact_id,\n    deal_id\n-- , _fivetran_synced\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal_contact`", "relation_name": "`analytics-prod-328313`.`hubspot`.`deal_contact`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.196989Z", "completed_at": "2024-05-13T02:13:24.212684Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.233868Z", "completed_at": "2024-05-13T02:13:24.233873Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05147409439086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.deal_pipeline", "compiled": true, "compiled_code": "\n\n\nSELECT\n    pipeline_id,\n    -- , _fivetran_deleted\n    -- , _fivetran_synced\n    active,\n    display_order,\n    label\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal_pipeline`", "relation_name": "`analytics-prod-328313`.`hubspot`.`deal_pipeline`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.199066Z", "completed_at": "2024-05-13T02:13:24.217815Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.234633Z", "completed_at": "2024-05-13T02:13:24.234638Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.051908016204833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.deal_pipeline_stage", "compiled": true, "compiled_code": "\n\nSELECT\n    stage_id,\n    -- , _fivetran_deleted\n    -- , _fivetran_synced\n    active,\n    closed_won,\n    display_order,\n    label,\n    pipeline_id,\n    probability\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal_pipeline_stage`", "relation_name": "`analytics-prod-328313`.`hubspot`.`deal_pipeline_stage`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.201551Z", "completed_at": "2024-05-13T02:13:24.225306Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.235505Z", "completed_at": "2024-05-13T02:13:24.235508Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05145597457885742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.deal_property_history", "compiled": true, "compiled_code": "\n\n\nSELECT\n    -- _fivetran_start\n    deal_id,\n    `name`,\n    -- , _fivetran_active\n    -- , _fivetran_end\n    -- , _fivetran_synced\n    source,\n    source_id,\n    `timestamp`,\n    `value`\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal_property_history`", "relation_name": "`analytics-prod-328313`.`hubspot`.`deal_property_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.205628Z", "completed_at": "2024-05-13T02:13:24.228977Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.236723Z", "completed_at": "2024-05-13T02:13:24.236727Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.04987692832946777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.dispute", "compiled": true, "compiled_code": "\n\n\n\n\n-- Get rows from dispute for account stripe\n    SELECT\n        id\n        , _fivetran_synced\n        , amount\n        , balance_transaction\n        , charge_id\n        , connected_account_id\n        , created\n        , currency\n        , evidence_access_activity_log\n        , evidence_billing_address\n        , evidence_cancellation_policy\n        , evidence_cancellation_policy_disclosure\n        , evidence_cancellation_rebuttal\n        , evidence_customer_communication\n        , evidence_customer_email_address\n        , evidence_customer_name\n        , evidence_customer_purchase_ip\n        , evidence_customer_signature\n        , evidence_details_due_by\n        , evidence_details_has_evidence\n        , evidence_details_past_due\n        , evidence_details_submission_count\n        , evidence_duplicate_charge_documentation\n        , evidence_duplicate_charge_explanation\n        , evidence_duplicate_charge_id\n        , evidence_product_description\n        , evidence_receipt\n        , evidence_refund_policy\n        , evidence_refund_policy_disclosure\n        , evidence_refund_refusal_explanation\n        , evidence_service_date\n        , evidence_service_documentation\n        -- , evidence_shipping_address\n        -- , evidence_shipping_carrier\n        -- , evidence_shipping_date\n        -- , evidence_shipping_documentation\n        -- , evidence_shipping_tracking_number\n        , evidence_uncategorized_file\n        , evidence_uncategorized_text\n        , is_charge_refundable\n        , livemode\n        , metadata\n        , reason\n        , status\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`dispute`\n    \n        UNION ALL\n    \n-- Get rows from dispute for account stripe_private_utilities\n    SELECT\n        id\n        , _fivetran_synced\n        , amount\n        , balance_transaction\n        , charge_id\n        , connected_account_id\n        , created\n        , currency\n        , evidence_access_activity_log\n        , evidence_billing_address\n        , evidence_cancellation_policy\n        , evidence_cancellation_policy_disclosure\n        , evidence_cancellation_rebuttal\n        , evidence_customer_communication\n        , evidence_customer_email_address\n        , evidence_customer_name\n        , evidence_customer_purchase_ip\n        , evidence_customer_signature\n        , evidence_details_due_by\n        , evidence_details_has_evidence\n        , evidence_details_past_due\n        , evidence_details_submission_count\n        , evidence_duplicate_charge_documentation\n        , evidence_duplicate_charge_explanation\n        , evidence_duplicate_charge_id\n        , evidence_product_description\n        , evidence_receipt\n        , evidence_refund_policy\n        , evidence_refund_policy_disclosure\n        , evidence_refund_refusal_explanation\n        , evidence_service_date\n        , evidence_service_documentation\n        -- , evidence_shipping_address\n        -- , evidence_shipping_carrier\n        -- , evidence_shipping_date\n        -- , evidence_shipping_documentation\n        -- , evidence_shipping_tracking_number\n        , evidence_uncategorized_file\n        , evidence_uncategorized_text\n        , is_charge_refundable\n        , livemode\n        , metadata\n        , reason\n        , status\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`dispute`\n    ", "relation_name": "`analytics-prod-328313`.`stripe`.`dispute`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.203900Z", "completed_at": "2024-05-13T02:13:24.229179Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.237151Z", "completed_at": "2024-05-13T02:13:24.237155Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.05287289619445801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.deal_stage", "compiled": true, "compiled_code": "\n\n\nSELECT\n    -- _fivetran_start\n    deal_id,\n    -- , _fivetran_active\n    -- , _fivetran_end\n    -- , _fivetran_synced\n    date_entered,\n    source,\n    source_id,\n    `value`\nFROM\n    `analytics-prod-328313`.`hubspot`.`deal_stage`", "relation_name": "`analytics-prod-328313`.`hubspot`.`deal_stage`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.208601Z", "completed_at": "2024-05-13T02:13:24.229802Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.237920Z", "completed_at": "2024-05-13T02:13:24.237926Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.050282955169677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.dispute_balance_transaction", "compiled": true, "compiled_code": "\n\n\n\n\n\n    -- Get rows for dispute_balance_transaction for account stripe\n    SELECT\n        balance_transaction_id\n        , dispute_id\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`dispute_balance_transaction`\n    \n        UNION ALL\n    \n    -- Get rows for dispute_balance_transaction for account stripe_private_utilities\n    SELECT\n        balance_transaction_id\n        , dispute_id\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`dispute_balance_transaction`\n    ", "relation_name": "`analytics-prod-328313`.`stripe`.`dispute_balance_transaction`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.210932Z", "completed_at": "2024-05-13T02:13:24.230089Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.238165Z", "completed_at": "2024-05-13T02:13:24.238172Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.05022311210632324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.engagement", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id,\n    -- , _fivetran_synced\n    active,\n    activity_type,\n    created_at,\n    last_updated,\n    owner_id,\n    portal_id,\n    `timestamp`,\n    `type`\nFROM\n    `analytics-prod-328313`.`hubspot`.`engagement`", "relation_name": "`analytics-prod-328313`.`hubspot`.`engagement`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.212966Z", "completed_at": "2024-05-13T02:13:24.230546Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.238885Z", "completed_at": "2024-05-13T02:13:24.238888Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.0505681037902832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.engagement_company", "compiled": true, "compiled_code": "\n\n\nSELECT\n    company_id,\n    engagement_id\n-- , _fivetran_synced\nFROM\n    `analytics-prod-328313`.`hubspot`.`engagement_company`", "relation_name": "`analytics-prod-328313`.`hubspot`.`engagement_company`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.214775Z", "completed_at": "2024-05-13T02:13:24.230789Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.239118Z", "completed_at": "2024-05-13T02:13:24.239122Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.05068397521972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.engagement_contact", "compiled": true, "compiled_code": "\n\n\nSELECT\n    contact_id,\n    engagement_id\n-- , _fivetran_synced\nFROM\n    `analytics-prod-328313`.`hubspot`.`engagement_contact`", "relation_name": "`analytics-prod-328313`.`hubspot`.`engagement_contact`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.218106Z", "completed_at": "2024-05-13T02:13:24.231045Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.239352Z", "completed_at": "2024-05-13T02:13:24.239355Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.05080580711364746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.engagement_deal", "compiled": true, "compiled_code": "\n\n\nSELECT\n    deal_id,\n    engagement_id\n-- , _fivetran_synced\nFROM\n    `analytics-prod-328313`.`hubspot`.`engagement_deal`", "relation_name": "`analytics-prod-328313`.`hubspot`.`engagement_deal`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.219971Z", "completed_at": "2024-05-13T02:13:24.231676Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.240052Z", "completed_at": "2024-05-13T02:13:24.240056Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.0509648323059082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.engagement_meeting", "compiled": true, "compiled_code": "\n\n\nSELECT\n    engagement_id,\n    -- , _fivetran_synced\n    body,\n    calendar_event_hash,\n    created_from_link_id,\n    end_time,\n    external_url,\n    i_cal_uid,\n    internal_meeting_notes,\n    `location`,\n    meeting_change_id,\n    meeting_outcome,\n    pre_meeting_prospect_reminders,\n    source,\n    source_id,\n    start_time,\n    title,\n    web_conference_meeting_id,\n    attendee_owner_ids\nFROM\n    `analytics-prod-328313`.`hubspot`.`engagement_meeting`", "relation_name": "`analytics-prod-328313`.`hubspot`.`engagement_meeting`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.221739Z", "completed_at": "2024-05-13T02:13:24.231916Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.240279Z", "completed_at": "2024-05-13T02:13:24.240282Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 0.051081180572509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.epic", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.epic`", "relation_name": "`analytics-prod-328313`.`jira`.`epic`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.223204Z", "completed_at": "2024-05-13T02:13:24.232169Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.240495Z", "completed_at": "2024-05-13T02:13:24.240498Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.051215171813964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.event_attributes", "compiled": true, "compiled_code": "\n\nWITH keys AS (\n    SELECT\n        amplitude.jsonObjectKeys(event_properties) AS keys\n    FROM\n        `analytics-dev-328216.amplitude.event`\n    WHERE\n        event_properties IS NOT NULL\n            -- recalculate latest day's data + previous\n            AND client_event_time\n            >= timestamp_sub(current_timestamp(), INTERVAL 3 DAY)\n)\n\nSELECT DISTINCT k AS attributes\nFROM keys\nCROSS JOIN unnest(keys.keys) AS k\nORDER BY k", "relation_name": "`analytics-prod-328313`.`amplitude`.`event_attributes`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.225676Z", "completed_at": "2024-05-13T02:13:24.233026Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.241086Z", "completed_at": "2024-05-13T02:13:24.241090Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.051117897033691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.field", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.field`", "relation_name": "`analytics-prod-328313`.`jira`.`field`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.227212Z", "completed_at": "2024-05-13T02:13:24.233442Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.241779Z", "completed_at": "2024-05-13T02:13:24.241782Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.05138874053955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.field_option", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.field_option`", "relation_name": "`analytics-prod-328313`.`jira`.`field_option`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.251142Z", "completed_at": "2024-05-13T02:13:24.260923Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.302786Z", "completed_at": "2024-05-13T02:13:24.302792Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06591510772705078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.finance_api_request", "compiled": true, "compiled_code": "\nSELECT\n    id\n    , clientid AS client_id\n    , failuremessage AS failure_message\n    , failuretype AS failure_type\n    , humanreadablereference AS human_readable_reference\n    , jurisdictionid AS jurisdiction_id\n    , paymentattemptid AS payment_attempt_id\n    , payoutattemptid AS payout_attempt_id\n    , planid AS plan_id\n    , refundattemptid AS refund_attempt_id\n    , remitattemptid AS remit_attempt_id\n    , requestedat AS requested_at\n    , requesttype AS request_type\n    , status\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`financeapirequest`\n\nWHERE\n    requesttype <> 'ProviderHealthCheck'\n    \n        -- recalculate latest day's data + previous\n        AND requestedat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 10 DAY)\n\n    ", "relation_name": "`analytics-prod-328313`.`finance`.`finance_api_request`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.261146Z", "completed_at": "2024-05-13T02:13:24.279430Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.307766Z", "completed_at": "2024-05-13T02:13:24.307770Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06274628639221191, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.finance_event", "compiled": true, "compiled_code": "\n\nSELECT\n    id\n    , clientid AS client_id\n    , createdat AS created_at\n    , effectiveat AS effective_at\n    , eventkind AS event_kind\n    , finalizedat AS finalized_at\n    , jurisdictionid AS jurisdiction_id\n    , obligationid AS obligation_id\n    , paymentid AS payment_id\n    , payoutid AS payout_id\n    , planid AS plan_id\n    , refundid AS refund_id\n    , remitid AS remit_id\n    , status\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`event`\n\n\n    -- recalculate latest day's data + previous\n    WHERE effectiveat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 10 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`finance`.`finance_event`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.264295Z", "completed_at": "2024-05-13T02:13:24.284092Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.308718Z", "completed_at": "2024-05-13T02:13:24.308722Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06323409080505371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.finance_plan", "compiled": true, "compiled_code": "\n\nSELECT\n    id\n    , clientid AS client_id\n    , createdat AS created_at\n    , jurisdictionid AS jurisdiction_id\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`plan`\n\n\n    -- recalculate latest day's data + previous\n    WHERE createdat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`finance`.`finance_plan`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.267345Z", "completed_at": "2024-05-13T02:13:24.292131Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.309468Z", "completed_at": "2024-05-13T02:13:24.309472Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06342697143554688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.gcww_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `gcww-pay.staging.complete`\n    WHERE jurisdiction = 'gcww'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(payPlanEligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN pastDueBalance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN pastDueBalance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN pastDueBalance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN pastDueBalance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN pastDueBalance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN pastDueBalance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`gcww_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.271946Z", "completed_at": "2024-05-13T02:13:24.303031Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.310109Z", "completed_at": "2024-05-13T02:13:24.310113Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.05908083915710449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.hrsd_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `hrsd-pay.staging.complete`\n    WHERE jurisdiction = 'hrsd'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        \n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN PAST_DUE_BALANCE > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN PAST_DUE_BALANCE = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN PAST_DUE_BALANCE is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN PAST_DUE_BALANCE > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN PAST_DUE_BALANCE = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN PAST_DUE_BALANCE is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`hrsd_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.274835Z", "completed_at": "2024-05-13T02:13:24.303306Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.310513Z", "completed_at": "2024-05-13T02:13:24.310516Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.059204816818237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.issue", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue`", "relation_name": "`analytics-prod-328313`.`jira`.`issue`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.276519Z", "completed_at": "2024-05-13T02:13:24.303804Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.311363Z", "completed_at": "2024-05-13T02:13:24.311367Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.05961894989013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.issue_board", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue_board`", "relation_name": "`analytics-prod-328313`.`jira`.`issue_board`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.277987Z", "completed_at": "2024-05-13T02:13:24.304139Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.311583Z", "completed_at": "2024-05-13T02:13:24.311586Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.05972576141357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.issue_field_history", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue_field_history`", "relation_name": "`analytics-prod-328313`.`jira`.`issue_field_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.279686Z", "completed_at": "2024-05-13T02:13:24.304379Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.311802Z", "completed_at": "2024-05-13T02:13:24.311805Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.05966377258300781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.issue_link", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue_link`", "relation_name": "`analytics-prod-328313`.`jira`.`issue_link`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.281194Z", "completed_at": "2024-05-13T02:13:24.304680Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.312015Z", "completed_at": "2024-05-13T02:13:24.312018Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.05976986885070801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.issue_multiselect_history", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue_multiselect_history`", "relation_name": "`analytics-prod-328313`.`jira`.`issue_multiselect_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.282640Z", "completed_at": "2024-05-13T02:13:24.305042Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.312693Z", "completed_at": "2024-05-13T02:13:24.312696Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.06014370918273926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.issue_type", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue_type`", "relation_name": "`analytics-prod-328313`.`jira`.`issue_type`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.284343Z", "completed_at": "2024-05-13T02:13:24.305376Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.312923Z", "completed_at": "2024-05-13T02:13:24.312927Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.060088157653808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.issue_watcher", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.issue_watcher`", "relation_name": "`analytics-prod-328313`.`jira`.`issue_watcher`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.285751Z", "completed_at": "2024-05-13T02:13:24.305656Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.313161Z", "completed_at": "2024-05-13T02:13:24.313164Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 0.06020188331604004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.jackson_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `jackson-water-pay.staging.complete`\n    WHERE jurisdiction = 'jackson_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        \n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN pastDueBalance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN pastDueBalance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN pastDueBalance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN pastDueBalance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN pastDueBalance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN pastDueBalance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`jackson_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.288453Z", "completed_at": "2024-05-13T02:13:24.306084Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.313846Z", "completed_at": "2024-05-13T02:13:24.313849Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.06057000160217285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.kustomer_emails_for_customer_communication", "compiled": true, "compiled_code": "-- Ignore long lines for linting in this file\n-- noqa: disable=LT05\n\n\n    WITH\n    adj_template_text AS (\n        SELECT *\n        FROM\n            `analytics-prod-328313.template_service.template_text`\n\n        UNION ALL\n\n        SELECT\n            'veolia_welcome_email_20230603_template_version_id'\n                AS template_version_id,\n            CAST('2023-06-03' AS TIMESTAMP) AS created_at,\n            NULL AS deleted_at,\n            FALSE AS draft_default,\n            'veolia_welcome_email_20230603_reference'\n                AS human_readable_reference,\n            FALSE AS live_default,\n            'EN' AS locale,\n            'veolia_welcome_email_20230603_template_id' AS template_id,\n            NULL AS updated_at,\n            'Dear Loyal Veolia Customer,\\n\\nDon\u2019t wait to check out this opportunity to get your water account in good standing!\\n\\nVeolia is offering interest-free payment plans. Sign up for a flexible plan to pay your past due balance off over time. Click the link to choose a plan:\\n{{{signuplink}}}\\n\\n~ PromisePay for Veolia'\n                AS template_text\n\n        UNION ALL\n\n        SELECT\n            'veolia_welcome_email_20230614_at_risk_template_version_id'\n                AS template_version_id,\n            CAST('2023-06-14' AS TIMESTAMP) AS created_at,\n            NULL AS deleted_at,\n            FALSE AS draft_default,\n            'veolia_welcome_email_20230614_at_risk_reference'\n                AS human_readable_reference,\n            FALSE AS live_default,\n            'EN' AS locale,\n            'veolia_welcome_email_20230614_at_risk_template_id' AS template_id,\n            NULL AS updated_at,\n            'Dear Loyal Veolia Customer,\\n\\nYour Veolia water service is scheduled for disconnection due to lack of payment.\\n\\nPlease take action on your overdue water bills to avoid disconnection. Sign-up for a flexible payment plan today to keep your water on:\\n{{{signuplink}}}\\n\\n~ PromisePay for Veolia'\n                AS template_text\n    ),\n\n\n\n    -- Convert templates into regex we can match\n    cte AS (\n        SELECT\n            REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                        REPLACE(\n                            REPLACE(\n                                REPLACE(\n                                    -- parentheses and +'s need to be escaped\n                                    template_text, ')', '\\\\)'\n                                ),\n                                '(', '\\\\('\n                            ),\n                            '+', '\\\\+'\n                        ),\n\n                        -- convert templates to regex that matches names, URLs, emails, etc. of any length\n                        r'{{{[a-zA-Z\\.-]+}}}', r\"[\u00ed\u00e9a-zA-Z0-9@$'\u2019;._,=?: -\\\\/]+\"\n                    ),\n\n                    -- capture double line-breaks\n                    r'(\\S)\\s{2,}(\\S)', r'\\1\\\\s{2,}\\2'\n                ),\n\n                -- After converting double line-breaks, convert single line-breaks\n                r'(\\S)\\n(\\S)', r'\\1\\\\s{1,}\\2')\n                AS regex_to_check,\n            MAX(created_at) AS max_created_at,\n            template_text\n        FROM\n            adj_template_text\n        GROUP BY\n            1,\n            3\n    ),\n\n    -- Join the regexed templates to the template table  \n    -- This is necessary to remove duplicate versions and get the most recent template_version\n    regexed_template_text AS (\n        SELECT\n            cte.regex_to_check,\n            tt.*\n        FROM\n            cte\n        LEFT JOIN\n            adj_template_text tt\n            ON\n                cte.template_text = tt.template_text\n                AND max_created_at = created_at\n    ),\n\n    -- Pull out only the emails we want from Kustomer\n    -- Sorry about this\n    kustomer_emails AS (\n        SELECT\n            id AS kustomer_message_id,\n            created_at,\n            customer_id,\n            preview,\n            channel,\n            REGEXP_EXTRACT(preview, r'customer=([0-9]+)') AS customer_from_url,\n            REGEXP_EXTRACT(preview, r'external_id=([0-9-]+)')\n                AS external_id_from_url,\n            REGEXP_EXTRACT(preview, r'https://([a-z-]+).promise-pay.com')\n                AS jurisdiction_from_url\n        FROM\n            `analytics-dev-328216.kustomer.message`\n        WHERE\n            1 = 1\n            AND direction = 'out'\n            AND direction_type = 'initial-out'\n            AND auto\n            AND channel = 'email'\n            AND preview NOT LIKE '%appears to have come from court and is inquiring about making a payment.%'\n            AND preview NOT LIKE '%Remit report%'\n            AND NOT (\n                preview LIKE '%Successful payment made%'\n                AND preview LIKE '%See payments dashboard:%'\n            )\n            AND NOT (\n                preview LIKE '%Successful payment made%'\n                AND preview LIKE '%Offender number:%'\n            )\n            AND preview NOT LIKE '%To complete your login to Promise%'\n            AND preview NOT LIKE '%Could not fetch the balance and contacts files for%'\n            AND preview NOT LIKE '%Could not fetch the import file for%'\n            AND preview NOT LIKE '%Could not fetch the contacts file for%'\n            AND preview NOT LIKE '%Could not fetch the balance file for%'\n            AND preview NOT LIKE '%PROMISE PAY DETAIL REPORT%'\n            AND preview NOT LIKE '%Marin County Probation Department%'\n            AND preview NOT LIKE '%has been disputed%'\n            AND preview NOT LIKE '%has been refunded%'\n            AND preview NOT LIKE '%Test Email%'\n            AND preview NOT LIKE '%This is the email%'\n            AND preview NOT LIKE '%Tim B. did this :D%'\n            AND NOT (\n                preview LIKE '%Case ID:%'\n                AND (\n                    preview LIKE '%ARC payment made by%'\n                    OR preview LIKE '%CDL payment made by%'\n                )\n            )\n    ),\n\n    -- Join the table on the template regex to get emails that match our templates\n    joined_table AS (\n        SELECT\n            msg.*,\n            rtt.* EXCEPT (created_at),\n\n            -- this case statement might not be exhaustive\n            -- it only captures examples from the DB,\n            -- not the full list of URLs we use\n            CASE jurisdiction_from_url\n                WHEN 'veolia' THEN 'veoliany_water_pay'\n                WHEN 'veolia-ny' THEN 'veoliany_water_pay'\n                WHEN 'veoliany' THEN 'veoliany_water_pay'\n                WHEN 'louisvillewater' THEN 'louisville_water_pay'\n                WHEN 'buffalo-water' THEN 'buffalowater_pay'\n                WHEN 'alexrenew' THEN 'alexrenew_water_pay'\n                ELSE\n                    CONCAT(jurisdiction_from_url, '_pay')\n            END\n                AS jurisdiction_for_customer,\n            SHA256(TRIM(LOWER(external_id_from_url)))\n                AS external_id_from_url_hashed\n        FROM\n            kustomer_emails msg\n        LEFT JOIN\n            regexed_template_text rtt\n            ON\n                REGEXP_CONTAINS(msg.preview, rtt.regex_to_check)\n    ),\n\n    all_ids AS (\n        SELECT\n            id AS client_id_from_customer,\n            external_id_hashed,\n            jurisdiction\n        FROM\n            analytics-prod-328313.promisepay.customer\n    ),\n\n    -- In some cases we only get an external_id from the email\n    -- Get the client_id from promisepay.customer using a hashed version\n    stg_joined_table AS (\n        SELECT *\n        FROM\n            joined_table\n        LEFT JOIN all_ids cust\n            ON\n                joined_table.jurisdiction_for_customer = cust.jurisdiction\n                AND joined_table.external_id_from_url_hashed\n                = cust.external_id_hashed\n    )\n\n    -- And finally, we get to coalesce this into the format of customer_communication\n    SELECT\n        (ROW_NUMBER() OVER (ORDER BY emails.created_at ASC))\n        + 1000000000000 AS id,\n        COALESCE(CAST(customer_from_url AS INT64), client_id_from_customer)\n            AS customer_id,\n        CAST(NULL AS INT64) AS template_id, -- POSTGRES tables in the app have the wrong type, so we have to adapt here\n        template_version_id,\n        channel,\n        CAST(emails.created_at AS DATETIME) AS created_at,\n        CASE template_version_id\n            WHEN\n                'veolia_welcome_email_20230603_template_version_id'\n                THEN 'veolia_welcome_email_20230603'\n            WHEN\n                'veolia_welcome_email_20230614_at_risk_template_version_id'\n                THEN 'veolia_welcome_email_20230614_at_risk'\n            ELSE template_name\n        END AS template_name,\n        CASE template_version_id\n            WHEN\n                'veolia_welcome_email_20230603_template_version_id'\n                THEN 'welcome'\n            WHEN\n                'veolia_welcome_email_20230614_at_risk_template_version_id'\n                THEN 'welcome'\n            ELSE template_category\n        END AS template_type,\n        CAST(NULL AS STRING) AS payment_id,\n        CAST(NULL AS STRING) AS payment_key,\n        jurisdiction_for_customer AS jurisdiction\n    FROM\n        stg_joined_table emails\n    LEFT JOIN\n        `analytics-prod-328313.template_service.template` templates\n        ON\n            emails.template_id = templates.id\n\n\n\n\n    -- recalculate latest day's data + previous\n    WHERE\n        CAST(emails.created_at AS DATETIME)\n        >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`kustomer`.`kustomer_emails_for_customer_communication`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.292368Z", "completed_at": "2024-05-13T02:13:24.307115Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.314903Z", "completed_at": "2024-05-13T02:13:24.314906Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.061189889907836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.louisville_water_delta_rows", "compiled": true, "compiled_code": "\n\n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (accountType = LAG(accountType) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR accountType IS NULL)\n            AND\n            (cashOnlyIndicator = LAG(cashOnlyIndicator) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR cashOnlyIndicator IS NULL)\n            AND\n            (blockingCode = LAG(blockingCode) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR blockingCode IS NULL)\n            AND\n            (totalBalanceSigned = LAG(totalBalanceSigned) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR totalBalanceSigned IS NULL)\n            AND\n            (currentDueSigned = LAG(currentDueSigned) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR currentDueSigned IS NULL)\n            AND\n            (pastDueSigned = LAG(pastDueSigned) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR pastDueSigned IS NULL)\n            AND\n            (paymentArrangementFlag = LAG(paymentArrangementFlag) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR paymentArrangementFlag IS NULL)\n            AND\n            (billDueDate = LAG(billDueDate) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR billDueDate IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM (SELECT * FROM `louisville-water-pay.staging.complete` WHERE jurisdiction='louisville_water' )-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`louisville_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.300204Z", "completed_at": "2024-05-13T02:13:24.307534Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.315571Z", "completed_at": "2024-05-13T02:13:24.315574Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.06134772300720215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.louisville_water_mr_data", "compiled": true, "compiled_code": "\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `louisville-water-pay.staging.complete` WHERE jurisdiction = 'louisville_water')\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'louisvillewater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`louisville_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.324699Z", "completed_at": "2024-05-13T02:13:24.332725Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.377931Z", "completed_at": "2024-05-13T02:13:24.377942Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06797099113464355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.message", "compiled": true, "compiled_code": "\n\nSELECT\n    id,\n    conversation_id,\n    created_at,\n    created_by,\n    sent_at,\n    customer_id,\n    modified_at,\n    modified_by,\n    app,\n    channel,\n    direction,\n    direction_type,\n    external_id,\n    size,\n    `status`,\n    `subject`,\n    `auto`,\n    preview,\n    updated_at\nFROM\n    `analytics-dev-328216.kustomer.message`\n\n\n\n    -- recalculate latest day's data + previous\n    WHERE sent_at >= timestamp_sub(_dbt_max_partition, INTERVAL 1 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`kustomer`.`message`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.332947Z", "completed_at": "2024-05-13T02:13:24.356043Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.382949Z", "completed_at": "2024-05-13T02:13:24.382953Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06432294845581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newark_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `newark-water-pay.staging.complete`\n    WHERE jurisdiction = 'newark_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        \n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`newark_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.336473Z", "completed_at": "2024-05-13T02:13:24.371247Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.384077Z", "completed_at": "2024-05-13T02:13:24.384080Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06470704078674316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newmexico_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `cal-water-pay.staging.complete`\n    WHERE jurisdiction = 'newmexico_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`newmexico_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.339726Z", "completed_at": "2024-05-13T02:13:24.371566Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.384475Z", "completed_at": "2024-05-13T02:13:24.384478Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0644538402557373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newportnews_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `newportnews-water-pay.staging.complete`\n    WHERE jurisdiction = 'newportnews_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`newportnews_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.342641Z", "completed_at": "2024-05-13T02:13:24.374581Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.384867Z", "completed_at": "2024-05-13T02:13:24.384870Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.062055349349975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.nola_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `nola-water-pay.staging.complete`\n    WHERE jurisdiction = 'nola_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`nola_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.345690Z", "completed_at": "2024-05-13T02:13:24.378168Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.385679Z", "completed_at": "2024-05-13T02:13:24.385682Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.06272292137145996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.note", "compiled": true, "compiled_code": "\n\nSELECT\n    id,\n    created_at,\n    created_by,\n    deleted,\n    deleted_at,\n    deleted_by,\n    modified_at,\n    modified_by,\n    updated_at,\n    customer_id,\n    conversation_id,\n    body\nFROM\n    `analytics-dev-328216.kustomer.note`\n\n\n\n    -- recalculate latest day's data + previous\n    WHERE created_at >= timestamp_sub(_dbt_max_partition, INTERVAL 1 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`kustomer`.`note`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.348421Z", "completed_at": "2024-05-13T02:13:24.378591Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.385894Z", "completed_at": "2024-05-13T02:13:24.385897Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.06238508224487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.obligation", "compiled": true, "compiled_code": "\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `alexrenew-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `baltimore-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `buffalo-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `cal-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `centralarkansas-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `corona-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `gcww-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `hrsd-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `jackson-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `louisville-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `newark-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `newportnews-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `nola-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `richmond-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `sj-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `toledo-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `veoliany-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `wssc-water-pay.staging.obligation`\n    UNION ALL\n\n    SELECT\n        * EXCEPT (jurisdiction)\n        , REPLACE(REPLACE(jurisdiction, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.obligation`\n    \n", "relation_name": "`analytics-prod-328313`.`promisepay`.`obligation`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.352583Z", "completed_at": "2024-05-13T02:13:24.379059Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.386583Z", "completed_at": "2024-05-13T02:13:24.386586Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.06278824806213379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.organization", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.organization`", "relation_name": "`analytics-prod-328313`.`jira`.`organization`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.354081Z", "completed_at": "2024-05-13T02:13:24.379291Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.386810Z", "completed_at": "2024-05-13T02:13:24.386814Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.06291675567626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.other_attributes", "compiled": true, "compiled_code": "\n\nWITH keys AS (\n    SELECT amplitude.jsonObjectKeys(data) AS keys\n    FROM\n        `analytics-dev-328216.amplitude.event`\n    WHERE\n        data IS NOT NULL\n            -- recalculate latest day's data + previous\n            AND client_event_time\n            >= timestamp_sub(current_timestamp(), INTERVAL 3 DAY)\n)\n\nSELECT DISTINCT k AS attributes\nFROM keys\nCROSS JOIN unnest(keys.keys) AS k\nORDER BY k", "relation_name": "`analytics-prod-328313`.`amplitude`.`other_attributes`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.356266Z", "completed_at": "2024-05-13T02:13:24.379621Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.387029Z", "completed_at": "2024-05-13T02:13:24.387032Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.06304597854614258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.owner", "compiled": true, "compiled_code": "\n\nSELECT\n    owner_id,\n    active_user_id,\n    created_at,\n    email,\n    first_name,\n    is_active,\n    last_name,\n    portal_id,\n    `type`,\n    updated_at,\n    user_id_including_inactive\nFROM\n    `analytics-prod-328313`.`hubspot`.`owner`", "relation_name": "`analytics-prod-328313`.`hubspot`.`owner`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.358020Z", "completed_at": "2024-05-13T02:13:24.379909Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.387235Z", "completed_at": "2024-05-13T02:13:24.387238Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.0630178451538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.payment_attempt", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    id\n    , amount\n    , attemptedat AS attempted_at\n    , clientid AS client_id\n    , completedat AS completed_at\n    , declinemessage AS decline_message\n    , finalizedat AS finalized_at\n    , jurisdictionid AS jurisdiction_id\n    , paymentmethodid AS payment_method_id\n    , provider\n    , status\n    \n    , JSON_VALUE(providerdetails, '$.bankAccountDetails.bankName') as provider_details_bankAccountDetails_bankName\n    , JSON_VALUE(providerdetails, '$.bankAccountDetails.last4') as provider_details_bankAccountDetails_last4\n    , JSON_VALUE(providerdetails, '$.cardDetails.brand') as provider_details_cardDetails_brand\n    , JSON_VALUE(providerdetails, '$.cardDetails.expMonth') as provider_details_cardDetails_expMonth\n    , JSON_VALUE(providerdetails, '$.cardDetails.expYear') as provider_details_cardDetails_expYear\n    , JSON_VALUE(providerdetails, '$.cardDetails.last4') as provider_details_cardDetails_last4\n    , JSON_VALUE(providerdetails, '$.dataSource') as provider_details_dataSource\n    , JSON_VALUE(providerdetails, '$.humanReadablePaymentMethod') as provider_details_humanReadablePaymentMethod\n    , JSON_VALUE(providerdetails, '$.paidAt') as provider_details_paidAt\n    , JSON_VALUE(providerdetails, '$.paymentIntentId') as provider_details_paymentIntentId\n    , JSON_VALUE(providerdetails, '$.provider') as provider_details_provider\n    , JSON_VALUE(providerdetails, '$.stripeChargeId') as provider_details_stripeChargeId\n    , JSON_VALUE(providerdetails, '$.stripeDeclineCode') as provider_details_stripeDeclineCode\n    , JSON_VALUE(providerdetails, '$.stripeErrorCode') as provider_details_stripeErrorCode\n\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`paymentattempt`\n\n\n    -- recalculate latest day's data + previous\n    WHERE attemptedat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 10 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`finance`.`payment_attempt`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.362057Z", "completed_at": "2024-05-13T02:13:24.380186Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.387449Z", "completed_at": "2024-05-13T02:13:24.387451Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.06317996978759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.payment_intent", "compiled": true, "compiled_code": "\n\n\n-- Get rows for payment_intent for account stripe\n    SELECT\n        id\n        , customer_id\n        -- , connected_account_id \n        , last_payment_error_charge_id\n        -- , last_payment_error_source_id \u27a4 SOURCE\n        -- , on_behalf_of\n        -- , source_id\n        -- , transfer_data_destination\n        , amount\n        , amount_capturable\n        , amount_received\n        -- , application\n        -- , application_fee_amount\n        , canceled_at\n        , cancellation_reason\n        , capture_method\n        , confirmation_method\n        , created\n        , currency\n        , description\n        , livemode\n        -- , metadata\n        , payment_method_types\n        -- , receipt_email\n        , statement_descriptor\n        , status\n        -- , transfer_group\n        , last_payment_error_code\n        , last_payment_error_decline_code\n        , last_payment_error_doc_url\n        , last_payment_error_message\n        , last_payment_error_param\n        , last_payment_error_source_id\n        , last_payment_error_type\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`payment_intent`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\nUNION ALL\n    -- Get rows for payment_intent for account stripe_private_utilities\n    SELECT\n        id\n        , customer_id\n        -- , connected_account_id \n        , last_payment_error_charge_id\n        -- , last_payment_error_source_id \u27a4 SOURCE\n        -- , on_behalf_of\n        -- , source_id\n        -- , transfer_data_destination\n        , amount\n        , amount_capturable\n        , amount_received\n        -- , application\n        -- , application_fee_amount\n        , canceled_at\n        , cancellation_reason\n        , capture_method\n        , confirmation_method\n        , created\n        , currency\n        , description\n        , livemode\n        -- , metadata\n        , payment_method_types\n        -- , receipt_email\n        , statement_descriptor\n        , status\n        -- , transfer_group\n        , last_payment_error_code\n        , last_payment_error_decline_code\n        , last_payment_error_doc_url\n        , last_payment_error_message\n        , last_payment_error_param\n        , last_payment_error_source_id\n        , last_payment_error_type\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`payment_intent`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n", "relation_name": "`analytics-prod-328313`.`stripe`.`payment_intent`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.365418Z", "completed_at": "2024-05-13T02:13:24.380655Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.388132Z", "completed_at": "2024-05-13T02:13:24.388136Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 0.06379199028015137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.payment_method", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    id\n    , active\n    , clientid AS client_id\n    , createdat AS created_at\n    , jurisdictionid AS jurisdiction_id\n    , provider\n    \n    , JSON_VALUE(providerdetails, '$.dataSource') as provider_details_dataSource\n    , JSON_VALUE(providerdetails, '$.humanReadablePaymentMethod') as provider_details_humanReadablePaymentMethod\n    , JSON_VALUE(providerdetails, '$.provider') as provider_details_provider\n    , JSON_VALUE(providerdetails, '$.stripeBankAccountId') as provider_details_stripeBankAccountId\n    , JSON_VALUE(providerdetails, '$.stripeCustomerId') as provider_details_stripeCustomerId\n    , JSON_VALUE(providerdetails, '$.stripePaymentMethodId') as provider_details_stripePaymentMethodId\n\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`paymentmethod`\n\n\n    -- recalculate latest day's data + previous\n    WHERE createdat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`finance`.`payment_method`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.368368Z", "completed_at": "2024-05-13T02:13:24.381087Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.388828Z", "completed_at": "2024-05-13T02:13:24.388831Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.06405210494995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.payment_plan_event_history", "compiled": true, "compiled_code": "\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.payment_plan_event_history`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.payment_plan_event_history`\n    \n", "relation_name": "`analytics-prod-328313`.`promisepay`.`payment_plan_event_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.371791Z", "completed_at": "2024-05-13T02:13:24.381595Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.389490Z", "completed_at": "2024-05-13T02:13:24.389493Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.06419491767883301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.payment_provider_balance", "compiled": true, "compiled_code": "\n\nSELECT\n    id\n    , accountname AS account_name\n    , createdat AS created_at\n    , jurisdictionid AS jurisdiction_id\n    , paymentprovider\n    , JSON_VALUE(result, '$.object') AS `object`\n    , JSON_VALUE(result, '$.livemode') AS livemode\n    , JSON_VALUE(result, '$.pending[0].amount') AS pending_amount_total\n    , JSON_VALUE(result, '$.pending[0].source_types.card') AS pending_amount_card\n    , JSON_VALUE(result, '$.pending[0].source_types.bank_account') AS pending_amount_bank\n    , JSON_VALUE(result, '$.available[0].amount') AS available_amount_total\n    , JSON_VALUE(result, '$.available[0].source_types.card') AS available_amount_card\n    , JSON_VALUE(result, '$.available[0].source_types.bank_account') AS available_amount_bank\n    , JSON_VALUE(result, '$.instant_available[0].amount') AS instantavailable_amount_total\n    , JSON_VALUE(result, '$.instant_available[0].source_types.card') AS instantavailable_amount_card\n    , JSON_VALUE(result, '$.instant_available[0].source_types.bank_account') AS instantavailable_amount_bank\n    , JSON_VALUE(result, '$.issuing.available[0].amount') AS issuing_amount\n    , JSON_VALUE(result, '$.connect_reserved[0].amount') AS connect_reserved_amount\n    , `error`\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`paymentproviderbalance`\n\n\n    -- recalculate latest day's data + previous\n    WHERE createdat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 10 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`finance`.`payment_provider_balance`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.374868Z", "completed_at": "2024-05-13T02:13:24.382346Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.390078Z", "completed_at": "2024-05-13T02:13:24.390081Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.06427478790283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.payment_record", "compiled": true, "compiled_code": " -- noqa\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.payment_record`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.payment_record`\n -- noqa\n -- noqa", "relation_name": "`analytics-prod-328313`.`promisepay`.`payment_record`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.400517Z", "completed_at": "2024-05-13T02:13:24.408542Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.442735Z", "completed_at": "2024-05-13T02:13:24.442741Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.057318687438964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.permission", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.permission`", "relation_name": "`analytics-prod-328313`.`jira`.`permission`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.408770Z", "completed_at": "2024-05-13T02:13:24.425776Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.447951Z", "completed_at": "2024-05-13T02:13:24.447955Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.054055213928222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.pledge", "compiled": true, "compiled_code": " -- noqa\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.pledge`\nUNION ALL -- noqa\n -- noqa\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.pledge`\n -- noqa\n -- noqa", "relation_name": "`analytics-prod-328313`.`promisepay`.`pledge`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.412738Z", "completed_at": "2024-05-13T02:13:24.438299Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.449098Z", "completed_at": "2024-05-13T02:13:24.449101Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05415987968444824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.priority", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.priority`", "relation_name": "`analytics-prod-328313`.`jira`.`priority`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.414410Z", "completed_at": "2024-05-13T02:13:24.440361Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.449318Z", "completed_at": "2024-05-13T02:13:24.449321Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05408215522766113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.prod_all_dag_runs", "compiled": true, "compiled_code": "SELECT\n    dag_id,\n    dag_run_id,\n    CONCAT(dag_id, \"_\", dag_run_id) AS pk_dag_id_dag_run_id,\n    CAST(data_interval_end AS TIMESTAMP) AS data_interval_end,\n    CAST(data_interval_start AS TIMESTAMP) AS data_interval_start,\n    CAST(end_date AS TIMESTAMP) AS end_date,\n    CAST(execution_date AS TIMESTAMP) AS execution_date,\n    CAST(external_trigger AS BOOLEAN) AS external_trigger,\n    CAST(last_scheduling_decision AS TIMESTAMP) AS last_scheduling_decision,\n    CAST(logical_date AS TIMESTAMP) AS logical_date,\n    CAST(note AS STRING) AS note,\n    CAST(run_type AS STRING) AS run_type,\n    CAST(`start_date` AS TIMESTAMP) AS `start_date`,\n    CAST(`state` AS STRING) AS `state`,\n    CAST(conf AS STRING) AS conf\nFROM\n\n  `analytics-dev-328216.astro_airflow_logs.prod_all_dag_runs`\n  ", "relation_name": "`analytics-prod-328313`.`astro_airflow_logs`.`prod_all_dag_runs`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.416306Z", "completed_at": "2024-05-13T02:13:24.442403Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.450085Z", "completed_at": "2024-05-13T02:13:24.450088Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.05475306510925293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.prod_dag_list", "compiled": true, "compiled_code": "SELECT\n    dag_id,\n    default_view,\n    CAST(`description` AS STRING) AS dag_description,\n    file_token,\n    fileloc,\n    has_import_errors,\n    has_task_concurrency_limits,\n    CAST(is_active AS BOOLEAN) AS is_active,\n    CAST(is_paused AS BOOLEAN) AS is_paused,\n    CAST(is_subdag AS BOOLEAN) AS is_subdag,\n    CAST(last_expired AS TIMESTAMP) AS last_expired,\n    CAST(last_parsed_time AS TIMESTAMP) AS last_parsed_time,\n    CAST(last_pickled AS TIMESTAMP) AS last_pickled,\n    CAST(max_active_runs AS INTEGER) AS max_active_runs,\n    CAST(max_active_tasks AS INTEGER) AS max_active_tasks,\n    CAST(next_dagrun AS TIMESTAMP) AS next_dagrun,\n    CAST(next_dagrun_create_after AS TIMESTAMP) AS next_dagrun_create_after,\n    CAST(next_dagrun_data_interval_end AS TIMESTAMP)\n        AS next_dagrun_data_interval_end,\n    CAST(next_dagrun_data_interval_start AS TIMESTAMP)\n        AS next_dagrun_data_interval_start,\n    pickle_id,\n    root_dag_id,\n    scheduler_lock,\n    timetable_description,\n    tags,\n    schedule_interval,\n    owners\nFROM\n\n  `analytics-dev-328216.astro_airflow_logs.prod_dag_list`\n  ", "relation_name": "`analytics-prod-328313`.`astro_airflow_logs`.`prod_dag_list`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.419780Z", "completed_at": "2024-05-13T02:13:24.443128Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.450734Z", "completed_at": "2024-05-13T02:13:24.450738Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.051698923110961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.project_board", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.project_board`", "relation_name": "`analytics-prod-328313`.`jira`.`project_board`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.418343Z", "completed_at": "2024-05-13T02:13:24.443463Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.450957Z", "completed_at": "2024-05-13T02:13:24.450960Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.05253410339355469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.project", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.project`", "relation_name": "`analytics-prod-328313`.`jira`.`project`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.421503Z", "completed_at": "2024-05-13T02:13:24.443963Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.451681Z", "completed_at": "2024-05-13T02:13:24.451684Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.05234718322753906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.project_category", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.project_category`", "relation_name": "`analytics-prod-328313`.`jira`.`project_category`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.422981Z", "completed_at": "2024-05-13T02:13:24.444258Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.451904Z", "completed_at": "2024-05-13T02:13:24.451907Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.052462100982666016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.project_role", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.project_role`", "relation_name": "`analytics-prod-328313`.`jira`.`project_role`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.424400Z", "completed_at": "2024-05-13T02:13:24.444534Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.452124Z", "completed_at": "2024-05-13T02:13:24.452127Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.052581071853637695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.project_role_actor", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.project_role_actor`", "relation_name": "`analytics-prod-328313`.`jira`.`project_role_actor`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.426004Z", "completed_at": "2024-05-13T02:13:24.444895Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.452344Z", "completed_at": "2024-05-13T02:13:24.452347Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.05269122123718262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.property", "compiled": true, "compiled_code": "\n\n\nSELECT\n    -- _fivetran_id\n    -- , _fivetran_synced\n    calculated,\n    `description`,\n    field_type,\n    group_name,\n    hubspot_defined,\n    hubspot_object,\n    label,\n    `name`,\n    `type`\nFROM\n    `analytics-prod-328313`.`hubspot`.`property`", "relation_name": "`analytics-prod-328313`.`hubspot`.`property`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.427696Z", "completed_at": "2024-05-13T02:13:24.445110Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.452561Z", "completed_at": "2024-05-13T02:13:24.452565Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.05281996726989746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.refund", "compiled": true, "compiled_code": "-- Get rows for refund for account stripe\n    SELECT\n        id\n        , balance_transaction_id\n        -- , connected_account_id\n        , charge_id\n        , failure_balance_transaction_id\n        , payment_intent_id\n        , amount\n        , created\n        , currency\n        , description\n        , failure_reason\n        -- , metadata\n        , reason\n        -- , receipt_number\n        , status\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`refund`-- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\nUNION ALL\n    -- Get rows for refund for account stripe_private_utilities\n    SELECT\n        id\n        , balance_transaction_id\n        -- , connected_account_id\n        , charge_id\n        , failure_balance_transaction_id\n        , payment_intent_id\n        , amount\n        , created\n        , currency\n        , description\n        , failure_reason\n        -- , metadata\n        , reason\n        -- , receipt_number\n        , status\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`refund`-- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n", "relation_name": "`analytics-prod-328313`.`stripe`.`refund`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.432018Z", "completed_at": "2024-05-13T02:13:24.445843Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.453783Z", "completed_at": "2024-05-13T02:13:24.453787Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 0.05326128005981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.refund_attempt", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    id\n    , amount\n    , attemptedat AS attempted_at\n    , clientid AS client_id\n    , failuremessage AS failure_message\n    , jurisdictionid AS jurisdiction_id\n    , paymentattemptid AS payment_attempt_id\n    , paymentmethodid AS payment_method_id\n    , provider\n    , status\n    \n    , JSON_VALUE(providerdetails, '$.effectiveAt') as provider_details_effectiveAt\n    , JSON_VALUE(providerdetails, '$.provider') as provider_details_provider\n    , JSON_VALUE(providerdetails, '$.processor') as provider_details_processor\n    , JSON_VALUE(providerdetails, '$.internalNotes') as provider_details_internalNotes\n    , JSON_VALUE(providerdetails, '$.processorRefundId') as provider_details_processorRefundId\n\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`refundattempt`\n\n\n    -- recalculate latest day's data + previous\n    WHERE attemptedat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`finance`.`refund_attempt`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.434992Z", "completed_at": "2024-05-13T02:13:24.446055Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.454030Z", "completed_at": "2024-05-13T02:13:24.454038Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.05319404602050781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.remit_attempt", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    id\n    , amount\n    , attemptedat AS attempted_at\n    , declinemessage AS decline_message\n    , jurisdictionid AS jurisdiction_id\n    , provider\n    , remittedat AS remitted_at\n    , status\n    \n    , JSON_VALUE(providerdetails, '$.dataSource') as provider_details_dataSource\n    , JSON_VALUE(providerdetails, '$.internalNotes') as provider_details_internalNotes\n    , JSON_VALUE(providerdetails, '$.processor') as provider_details_processor\n    , JSON_VALUE(providerdetails, '$.processorRemitId') as provider_details_processorRemitId\n    , JSON_VALUE(providerdetails, '$.provider') as provider_details_provider\n    , JSON_VALUE(providerdetails, '$.remittedAt') as provider_details_remittedAt\n    , JSON_VALUE(providerdetails, '$.stripeAccountId') as provider_details_stripeAccountId\n    , JSON_VALUE(providerdetails, '$.stripePayoutId') as provider_details_stripePayoutId\n    , JSON_VALUE(providerdetails, '$.stripeTransferId') as provider_details_stripeTransferId\n\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`remitattempt`\n\n\n    -- recalculate latest day's data + previous\n    WHERE attemptedat >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`finance`.`remit_attempt`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.438649Z", "completed_at": "2024-05-13T02:13:24.446345Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.454278Z", "completed_at": "2024-05-13T02:13:24.454282Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.05312490463256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.request", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.request`", "relation_name": "`analytics-prod-328313`.`jira`.`request`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.440666Z", "completed_at": "2024-05-13T02:13:24.447322Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.455340Z", "completed_at": "2024-05-13T02:13:24.455343Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.05361604690551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.request_type", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.request_type`", "relation_name": "`analytics-prod-328313`.`jira`.`request_type`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.465234Z", "completed_at": "2024-05-13T02:13:24.479207Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.515249Z", "completed_at": "2024-05-13T02:13:24.515255Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06416893005371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.richmond_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `richmond-pay.staging.complete`\n    WHERE jurisdiction = 'richmond'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        \n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN PastDueBal > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN PastDueBal = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN PastDueBal is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN PastDueBal > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN PastDueBal = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN PastDueBal is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`richmond_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.474305Z", "completed_at": "2024-05-13T02:13:24.497793Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.519860Z", "completed_at": "2024-05-13T02:13:24.519864Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06132912635803223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.session_facts", "compiled": true, "compiled_code": "\n\nSELECT\n    session_id\n    , device_id\n    , user_id\n    , user_creation_time\n    , CASE\n        WHEN session_id > 0 -- When events are part of an actual session\n            THEN TIMESTAMP_MILLIS(session_id)\n        ELSE client_event_time -- When session_id = -1, event was server-fired, could be async\n    END AS session_start_time\n    , MAX(client_event_time) AS last_event_ts\nFROM `analytics-dev-328216.amplitude.event`\n\n    -- recalculate latest day's data + previous\n    WHERE\n        client_event_time >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 2 DAY)\n\n\ngroup by 1,2,3,4,5", "relation_name": "`analytics-prod-328313`.`amplitude`.`session_facts`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.480248Z", "completed_at": "2024-05-13T02:13:24.507567Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.520849Z", "completed_at": "2024-05-13T02:13:24.520853Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.061319828033447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.single_sided_entry", "compiled": true, "compiled_code": "\n\nSELECT\n    evententryid AS event_entry_id\n    , eventid AS event_id\n    , sourceordestination AS source_or_destination\n    , acctidentifierclientid AS acct_identifier_client_id\n    , acctidentifierjurisdictionid AS acct_identifier_jurisdiction_id\n    , CONCAT(\n        REPLACE(REPLACE(acctidentifierjurisdictionid, \"_pay\", \"\"), \"_\", \"\"),\n        acctidentifierclientid\n    ) AS jurisdiction_x_client_id\n    , REPLACE(REPLACE(acctidentifierjurisdictionid, \"_pay\", \"\"), \"_\", \"\") AS jurisdiction\n    , acctidentifierobligationid AS acct_identifier_obligation_id\n    , acctidentifierpaidat AS acct_identifier_paid_at\n    , acctidentifierpaymentid AS acct_identifier_payment_id\n    , acctidentifierplanid AS acct_identifier_plan_id\n    , acctidentifierprovider AS acct_identifier_provider\n    , acctidentifierproviderpayoutid AS acct_identifier_provider_payout_id\n    , acctidentifierpurposetype AS acct_identifier_purpose_type\n    , acctidentifierremitid AS acct_identifier_remit_id\n    , acctidentifierscheduledfor AS acct_identifier_scheduled_for\n    , acctidentifierscheduledpaymentid AS acct_identifier_scheduled_payment_id\n    , acctkind AS acct_kind\n    , accttype AS acct_type\n    , amount\n    , effectiveat AS effective_at\n    , eventcreatedat AS event_created_at\n    , eventfinalizedat AS event_finalized_at\n    , eventkind AS event_kind\n    , eventstatus AS event_status\n\nFROM\n    \n    \n        \n    \n    `analytics-dev-328216`.`finance_prod_public`.`singlesidedentry`\n\nWHERE\n        eventcreatedat > \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 10 DAY)\n\n        AND effectiveat > \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 10 DAY)\n", "relation_name": "`analytics-prod-328313`.`finance`.`single_sided_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.483242Z", "completed_at": "2024-05-13T02:13:24.507824Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.521259Z", "completed_at": "2024-05-13T02:13:24.521262Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.061630964279174805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.sj_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `sj-water-pay.staging.complete`\n    WHERE jurisdiction = 'sj_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`sj_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.486609Z", "completed_at": "2024-05-13T02:13:24.514528Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.521677Z", "completed_at": "2024-05-13T02:13:24.521681Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.06129312515258789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.sprint", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.sprint`", "relation_name": "`analytics-prod-328313`.`jira`.`sprint`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.490954Z", "completed_at": "2024-05-13T02:13:24.514824Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.521898Z", "completed_at": "2024-05-13T02:13:24.521900Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.05753970146179199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.stg__lw_sandbox_current_account_facts", "compiled": true, "compiled_code": "\n\n-- This materializes the content of this table into a dataset \n-- that is accessible to the louisville-water-pay cloudSQL service account\n\nSELECT * -- noqa\nFROM `analytics-prod-328313.looker_scratch.T4_promise_current_account_facts_lw_only`", "relation_name": "`analytics-prod-328313`.`stg_lw_sandbox`.`stg__lw_sandbox_current_account_facts`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.489507Z", "completed_at": "2024-05-13T02:13:24.515042Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.522311Z", "completed_at": "2024-05-13T02:13:24.522314Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.05859088897705078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.status", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.status`", "relation_name": "`analytics-prod-328313`.`jira`.`status`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.492531Z", "completed_at": "2024-05-13T02:13:24.515525Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.523014Z", "completed_at": "2024-05-13T02:13:24.523018Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.05872178077697754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.stg__lw_sandbox_plans", "compiled": true, "compiled_code": "\n\n-- This materializes the content of this table into a dataset \n-- that is accessible to the louisville-water-pay cloudSQL service account\n\nSELECT *  --noqa\nFROM `analytics-prod-328313.looker_scratch.T4_promise_plans_lw_only`", "relation_name": "`analytics-prod-328313`.`stg_lw_sandbox`.`stg__lw_sandbox_plans`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.494301Z", "completed_at": "2024-05-13T02:13:24.516043Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.523701Z", "completed_at": "2024-05-13T02:13:24.523704Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.05908083915710449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.stg__survey_paths", "compiled": true, "compiled_code": "\n\n\nWITH\n-- join all jurx surveys then extract attributes\nall_surveys AS (\n        SELECT *\n        FROM\n            \n        `alexrenew-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `baltimore-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `buffalo-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `cal-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `centralarkansas-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `corona-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `gcww-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `hrsd-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `jackson-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `louisville-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newark-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newportnews-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `nola-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `richmond-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `sj-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `toledo-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `veoliany-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `wssc-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `florida-lihwap-pay.analytics_promisepay_prod.survey`\n        \n    \n)\n\n-- use js functions to unpack JSONs\nSELECT DISTINCT survey_key AS survey_json_path\nFROM all_surveys,\n    UNNEST([STRUCT(promisepay.jsonNestedExtract(survey_response) AS leaves)]),\n    UNNEST(promisepay.jsonObjectKeys(leaves)) AS survey_key\nWHERE\n    -- there a few cases in Buffalo of duplicate fields [Heap, HEAP; Snap, SNAP; Ssi, SSI]\n    -- causes duplicate col names error\n    -- confirmed on 2024-03-01 all values are NULL or FALSE, so just exclude\n    NOT REGEXP_CONTAINS(survey_key, \"benefits.[A-Z]{3,4}$\")\n    -- don't need app-specific fields\n    AND NOT survey_key LIKE \"%doesGivePermissionToShareInformation\"\n    AND NOT survey_key LIKE \"%BREADCRUMBS%\"\n    AND NOT survey_key LIKE \"%COMPLETE%\"\n    AND NOT survey_key LIKE \"%FormQuestions%\"", "relation_name": "`analytics-prod-328313`.`promisepay`.`stg__survey_paths`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.498022Z", "completed_at": "2024-05-13T02:13:24.516316Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.523927Z", "completed_at": "2024-05-13T02:13:24.523930Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.0590360164642334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.stg__template", "compiled": true, "compiled_code": "SELECT -- noqa\n    *\nFROM\n    EXTERNAL_QUERY(\n        \"promise-pay-api.us.templatesvc-bq-connection\",\n        \"\"\"\n        SELECT\n            CAST(id AS VARCHAR) as id,\n            channel_type,\n            created_at,\n            template_category,\n            template_name,\n            updated_at\n        FROM template.template\n        \"\"\"\n    )", "relation_name": "`analytics-prod-328313`.`template_service`.`stg__template`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.499044Z", "completed_at": "2024-05-13T02:13:24.516575Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.524148Z", "completed_at": "2024-05-13T02:13:24.524150Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.05916881561279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.stg__template_version", "compiled": true, "compiled_code": "SELECT * -- noqa\nFROM\n    EXTERNAL_QUERY(\n        \"promise-pay-api.us.templatesvc-bq-connection\",\n        \"\"\"\n        SELECT\n          CAST(id AS VARCHAR) as id,\n          created_at,\n          deleted_at,\n          draft_default,\n          human_readable_reference,\n          live_default,\n          locale,\n          template_id,\n          template_text,\n          updated_at\n        FROM template.template_version;\"\"\"\n    )", "relation_name": "`analytics-prod-328313`.`template_service`.`stg__template_version`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.500032Z", "completed_at": "2024-05-13T02:13:24.516844Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.524369Z", "completed_at": "2024-05-13T02:13:24.524372Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.05928993225097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.stg__template_version_field", "compiled": true, "compiled_code": "SELECT -- noqa\n    *\nFROM\n    EXTERNAL_QUERY(\n        \"promise-pay-api.us.templatesvc-bq-connection\",\n        \"\"\"\n        SELECT\n            CAST(id AS VARCHAR) AS id,\n            created_at,\n            field_index,\n            field_name,\n            template_version_id,\n            updated_at\n        FROM template.template_version_field;\"\"\"\n    )", "relation_name": "`analytics-prod-328313`.`template_service`.`stg__template_version_field`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.501101Z", "completed_at": "2024-05-13T02:13:24.517339Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.525062Z", "completed_at": "2024-05-13T02:13:24.525065Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 0.05926704406738281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.stripe_customer", "compiled": true, "compiled_code": "-- Get rows for customer for account stripe\n    SELECT\n        id\n        , default_card_id\n        , bank_account_id\n        -- , source_id\n        , account_balance\n        , balance\n        , created\n        , currency\n        , delinquent\n        , description\n        -- , email\n        -- , invoice_prefix\n        -- , invoice_settings_footer\n        -- , invoice_settings_footer_default_payment_method\n        , is_deleted\n        , livemode\n        -- , metadata\n        , \n    SHA256(TRIM(LOWER(name))) as name_hashed\n\n        , \n    SHA256(TRIM(LOWER(phone))) as phone_hashed\n\n        -- , tax_exempt\n        -- , tax_info_tax_id\n        -- , tax_info_type\n        -- , tax_info_verification_status\n        -- , tax_info_verification_verified_name\n        -- , address_line_1\n        -- , address_line_2\n        -- , address_city\n        -- , address_state\n        -- , address_postal_code\n        -- , address_country\n        -- , shipping_address_line_1\n        -- , shipping_address_line_2\n        -- , shipping_address_city\n        -- , shipping_address_state\n        -- , shipping_address_postal_code\n        -- , shipping_address_country\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`customer`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\nUNION ALL\n    -- Get rows for customer for account stripe_private_utilities\n    SELECT\n        id\n        , default_card_id\n        , bank_account_id\n        -- , source_id\n        , account_balance\n        , balance\n        , created\n        , currency\n        , delinquent\n        , description\n        -- , email\n        -- , invoice_prefix\n        -- , invoice_settings_footer\n        -- , invoice_settings_footer_default_payment_method\n        , is_deleted\n        , livemode\n        -- , metadata\n        , \n    SHA256(TRIM(LOWER(name))) as name_hashed\n\n        , \n    SHA256(TRIM(LOWER(phone))) as phone_hashed\n\n        -- , tax_exempt\n        -- , tax_info_tax_id\n        -- , tax_info_type\n        -- , tax_info_verification_status\n        -- , tax_info_verification_verified_name\n        -- , address_line_1\n        -- , address_line_2\n        -- , address_city\n        -- , address_state\n        -- , address_postal_code\n        -- , address_country\n        -- , shipping_address_line_1\n        -- , shipping_address_line_2\n        -- , shipping_address_city\n        -- , shipping_address_state\n        -- , shipping_address_postal_code\n        -- , shipping_address_country\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`customer`\n    \n        -- recalculate latest day's data + previous\n        WHERE created >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n", "relation_name": "`analytics-prod-328313`.`stripe`.`customer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.505197Z", "completed_at": "2024-05-13T02:13:24.517786Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.525747Z", "completed_at": "2024-05-13T02:13:24.525750Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.05949592590332031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.studio_flow_execution_promisepay", "compiled": true, "compiled_code": "\n\nSELECT\n    call_sid,\n    interaction_id,\n    destination_number,\n    CASE\n        WHEN REGEXP_CONTAINS(origin_number, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(origin_number, r'[2-9][0-9]{9}$'))\n    END AS origin_number_hashed,\n    flow_name,\n    flow_id,\n    component_title,\n    step_name,\n    exit,\n    CAST(time_in_step AS FLOAT64) AS time_in_step,\n    `timestamp`,\n    finished_time,\n    step_execution_order,\n    'general' AS instance\nFROM\n    `analytics-dev-328216.talkdesk_api.td_studio_flow_report_data_promisepay`\n\n\n    -- recalculate latest day's data + previous\n    WHERE `timestamp` >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "relation_name": "`analytics-prod-328313`.`talkdesk`.`studio_flow_execution_promisepay`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.510432Z", "completed_at": "2024-05-13T02:13:24.518486Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.526871Z", "completed_at": "2024-05-13T02:13:24.526874Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.05940818786621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.system_properties", "compiled": true, "compiled_code": "\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.system_properties`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.system_properties`\n    \n", "relation_name": "`analytics-prod-328313`.`promisepay`.`system_properties`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.508055Z", "completed_at": "2024-05-13T02:13:24.519420Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.527916Z", "completed_at": "2024-05-13T02:13:24.527920Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.06087493896484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.studio_flow_execution_valihwap", "compiled": true, "compiled_code": "\n\nSELECT\n    call_sid,\n    interaction_id,\n    destination_number,\n    CASE\n        WHEN REGEXP_CONTAINS(origin_number, r'^(?:\\+1)?[2-9][0-9]{9}$')\n            THEN SHA256(REGEXP_EXTRACT(origin_number, r'[2-9][0-9]{9}$'))\n    END AS origin_number_hashed,\n    flow_name,\n    flow_id,\n    component_title,\n    step_name,\n    exit,\n    CAST(time_in_step AS FLOAT64) AS time_in_step,\n    `timestamp`,\n    finished_time,\n    step_execution_order,\n    'valihwap' AS instance\nFROM\n    `virginia-lihwap-pay.analytics_talkdesk_staging.td_studio_flow_report_data_valihwap`\n\n\n    -- recalculate latest day's data + previous\n    WHERE `timestamp` >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "relation_name": "`analytics-prod-328313`.`talkdesk`.`studio_flow_execution_valihwap`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.537957Z", "completed_at": "2024-05-13T02:13:24.549518Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.584891Z", "completed_at": "2024-05-13T02:13:24.584897Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06117892265319824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.toledo_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `toledo-pay.staging.complete`\n    WHERE jurisdiction = 'toledo'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        \n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN compliance_past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN compliance_past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN compliance_past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN compliance_past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN compliance_past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN compliance_past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`toledo_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.546242Z", "completed_at": "2024-05-13T02:13:24.572127Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.589776Z", "completed_at": "2024-05-13T02:13:24.589781Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05966830253601074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.transaction_fee_configs", "compiled": true, "compiled_code": "\n    SELECT *\n    FROM\n        \n        `alexrenew-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `baltimore-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `buffalo-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `cal-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `centralarkansas-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `corona-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `gcww-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `hrsd-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `jackson-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `louisville-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newark-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `newportnews-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `nola-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `richmond-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `sj-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `toledo-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `veoliany-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `wssc-water-pay.staging.transaction_fee_configs`\n    UNION ALL\n\n    SELECT *\n    FROM\n        \n        `florida-lihwap-pay.analytics_promisepay_prod.transaction_fee_configs`\n    \n", "relation_name": "`analytics-prod-328313`.`promisepay`.`transaction_fee_configs`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.577917Z", "completed_at": "2024-05-13T02:13:24.578781Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.590654Z", "completed_at": "2024-05-13T02:13:24.590662Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.05069279670715332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.promise_dwh.jurisdiction_metadata", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.550513Z", "completed_at": "2024-05-13T02:13:24.579067Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.590903Z", "completed_at": "2024-05-13T02:13:24.590909Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05994105339050293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.transaction_fee_detail", "compiled": true, "compiled_code": "-- Get rows for transaction_fee_detail for account stripe\n    SELECT\n        incurred_at\n        , event_type\n        , charge_id\n        , refund_id\n        , dispute_id\n        , request_id\n        -- , destination_id\n        , customer_id\n        , card_brand\n        , card_funding\n        , card_country\n        , card_present\n        , fee_category\n        , fee_name\n        , fee_currency\n        , plan_name\n        , additional_explanation\n        , variable_rate\n        , fixed_per_item_amount\n        , variable_volume_amount\n        , fixed_per_item_count\n        , min_amount\n        , max_amount\n        , subtotal_amount\n        , tax_rate\n        , tax_amount\n        , total_amount\n        , fx_rate\n        , billing_currency\n        , billing_amount\n        , balance_transaction_id\n        , balance_debited_at\n        , attribution_start_date\n        , attribution_end_date\n        , fee_id\n        , network\n        , bin\n        , issuing_bank\n        -- , connected_account_id\n        -- , connected_account_name\n        -- , connected_account_country\n        , 'stripe' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe`.`transaction_fee_detail`\n    \n        -- recalculate latest day's data + previous\n        WHERE incurred_at >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\nUNION ALL\n    -- Get rows for transaction_fee_detail for account stripe_private_utilities\n    SELECT\n        incurred_at\n        , event_type\n        , charge_id\n        , refund_id\n        , dispute_id\n        , request_id\n        -- , destination_id\n        , customer_id\n        , card_brand\n        , card_funding\n        , card_country\n        , card_present\n        , fee_category\n        , fee_name\n        , fee_currency\n        , plan_name\n        , additional_explanation\n        , variable_rate\n        , fixed_per_item_amount\n        , variable_volume_amount\n        , fixed_per_item_count\n        , min_amount\n        , max_amount\n        , subtotal_amount\n        , tax_rate\n        , tax_amount\n        , total_amount\n        , fx_rate\n        , billing_currency\n        , billing_amount\n        , balance_transaction_id\n        , balance_debited_at\n        , attribution_start_date\n        , attribution_end_date\n        , fee_id\n        , network\n        , bin\n        , issuing_bank\n        -- , connected_account_id\n        -- , connected_account_name\n        -- , connected_account_country\n        , 'stripe_private_utilities' AS source_account\n    FROM\n        `analytics-dev-328216`.`stripe_private_utilities`.`transaction_fee_detail`\n    \n        -- recalculate latest day's data + previous\n        WHERE incurred_at >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n", "relation_name": "`analytics-prod-328313`.`stripe`.`transaction_fee_detail`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.554051Z", "completed_at": "2024-05-13T02:13:24.579367Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.591337Z", "completed_at": "2024-05-13T02:13:24.591340Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06007981300354004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.twilio_message", "compiled": true, "compiled_code": "\n\nSELECT\n    id,\n    account_id,\n    created_at,\n    date_sent AS sent_at,\n    `from` AS from_number,\n    SHA256(REGEXP_EXTRACT(`to`, r'[2-9]{1}[0-9]{9}$')) AS to_hashed,\n    direction,\n    error_code,\n    error_message,\n    num_media,\n    num_segments,\n    price,\n    price_unit,\n    `status`,\n    updated_at\nFROM\n    `analytics-dev-328216.twilio_traffic.message`\n\n    -- recalculate latest day's data + previous\n    WHERE created_at >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\nUNION ALL\nSELECT\n    id,\n    account_id,\n    created_at,\n    date_sent AS sent_at,\n    `from` AS from_number,\n    SHA256(REGEXP_EXTRACT(`to`, r'[2-9]{1}[0-9]{9}$')) AS to_hashed,\n    direction,\n    error_code,\n    error_message,\n    num_media,\n    num_segments,\n    price,\n    price_unit,\n    `status`,\n    updated_at\nFROM\n    `analytics-dev-328216.twilio.message`\n\n    -- recalculate latest day's data + previous\n    WHERE created_at >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n", "relation_name": "`analytics-prod-328313`.`prod`.`twilio_message`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.556809Z", "completed_at": "2024-05-13T02:13:24.581272Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.591741Z", "completed_at": "2024-05-13T02:13:24.591744Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.060163021087646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.user", "compiled": true, "compiled_code": "SELECT\n    id,\n    created_at,\n    created_by,\n    deleted,\n    deleted_at,\n    modified_at,\n    modified_by,\n    updated_at,\n    name,\n    display_name,\n    email,\n    mobile,\n    user_type\nFROM\n    `analytics-dev-328216.kustomer.user`", "relation_name": "`analytics-prod-328313`.`kustomer`.`user`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.557833Z", "completed_at": "2024-05-13T02:13:24.581523Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.591962Z", "completed_at": "2024-05-13T02:13:24.591965Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.060266971588134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.user_attributes", "compiled": true, "compiled_code": "\n\nWITH keys AS (\n    SELECT\n        amplitude.jsonObjectKeys(user_properties) AS keys\n    FROM\n        `analytics-dev-328216.amplitude.event`\n    WHERE\n        user_properties IS NOT NULL\n            -- recalculate latest day's data + previous\n            AND client_event_time\n            >= timestamp_sub(current_timestamp(), INTERVAL 3 DAY)\n)\n\nSELECT DISTINCT k AS attributes\nFROM keys\nCROSS JOIN unnest(keys.keys) AS k\nORDER BY k", "relation_name": "`analytics-prod-328313`.`amplitude`.`user_attributes`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.560058Z", "completed_at": "2024-05-13T02:13:24.584640Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.592406Z", "completed_at": "2024-05-13T02:13:24.592409Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.06038022041320801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.user_group", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.user_group`", "relation_name": "`analytics-prod-328313`.`jira`.`user_group`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.561670Z", "completed_at": "2024-05-13T02:13:24.585152Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.592978Z", "completed_at": "2024-05-13T02:13:24.592981Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.057173967361450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.user_jira", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-dev-328216.jira.user`", "relation_name": "`analytics-prod-328313`.`jira`.`user_jira`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.563479Z", "completed_at": "2024-05-13T02:13:24.585519Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.593398Z", "completed_at": "2024-05-13T02:13:24.593401Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.05727791786193848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.user_status_promisepay", "compiled": true, "compiled_code": "\n\nSELECT\n    user_name,\n    user_email,\n    user_id,\n    status_label,\n    status_start_at,\n    status_end_at,\n    status_time,\n    is_user_active,\n    team_id,\n    team_name,\n    ring_groups,\n    \"general\" AS instance\nFROM\n    `analytics-dev-328216.talkdesk_api.td_user_status_report_data_promisepay`\n\n\n    -- recalculate latest day's data + previous\n    WHERE status_end_at >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "relation_name": "`analytics-prod-328313`.`talkdesk`.`user_status_promisepay`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.565988Z", "completed_at": "2024-05-13T02:13:24.585985Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.594303Z", "completed_at": "2024-05-13T02:13:24.594307Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.0576481819152832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.user_status_valihwap", "compiled": true, "compiled_code": "\n\nSELECT\n    user_name,\n    user_email,\n    user_id,\n    status_label,\n    status_start_at,\n    status_end_at,\n    status_time,\n    is_user_active,\n    team_id,\n    team_name,\n    ring_groups,\n    \"valihwap\" AS instance\nFROM\n    `virginia-lihwap-pay.analytics_talkdesk_staging.td_user_status_report_data_valihwap`\n\n\n    -- recalculate latest day's data + previous\n    WHERE status_end_at >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 3 DAY)\n\n\n", "relation_name": "`analytics-prod-328313`.`talkdesk`.`user_status_valihwap`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.569512Z", "completed_at": "2024-05-13T02:13:24.586302Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.594539Z", "completed_at": "2024-05-13T02:13:24.594543Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.05775618553161621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.veoliany_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `veoliany-water-pay.staging.complete`\n    WHERE jurisdiction = 'veoliany_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`veoliany_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.572394Z", "completed_at": "2024-05-13T02:13:24.586973Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.595687Z", "completed_at": "2024-05-13T02:13:24.595691Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.05835604667663574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.washington_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `cal-water-pay.staging.complete`\n    WHERE jurisdiction = 'washington_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`washington_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.575119Z", "completed_at": "2024-05-13T02:13:24.587379Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.596402Z", "completed_at": "2024-05-13T02:13:24.596405Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 0.05853009223937988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.wssc_water_complete_with_eligibility", "compiled": true, "compiled_code": "\n\n\n    \n\n    \n\n\n    \n\n-- Make sure that we have a row for each account for every date (after the account's first appearance)\n-- For any date where we got data but an account was missing, NULL fill that account and assume\n-- it was ineligible for a plan for that day.\n\n    \nWITH jurx_complete AS (\n    SELECT * FROM `wssc-water-pay.staging.complete`\n    WHERE jurisdiction = 'wssc_water'\n),\nall_dates AS (\nSELECT\n    UPLOAD_DATE\nFROM jurx_complete\n-- If this is an incremental run, we only want to add new data\n\tWHERE UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\nGROUP BY 1\n),\nall_accounts AS (\nSELECT \n    account_number_hashed,\n    MIN(UPLOAD_DATE) as first_appearance_date\nFROM jurx_complete\n-- Even for incremental runs, we don't restrict because that would mean that accounts missing from the newest day weren't NULL-filled\nGROUP BY 1\n)\nSELECT\n    ad.UPLOAD_DATE\n    , aa.account_number_hashed\n    , c.* EXCEPT (UPLOAD_DATE, account_number_hashed)\n    , CASE\n        WHEN \n        -- For jurisdictions that send an explicit eligibility field, we check to make sure the account wasn't explicitly denied eligilibity\n        COALESCE(plan_eligible, 'undefined') != 'N' AND\n        -- For jurisdictions that don't send an explicit eligibility field, we just confirm that the account was present in that day's data\n        c.account_number_hashed IS NOT NULL\n        THEN 'Y'\n        ELSE 'N'\n      END as ACCT_ELIGIBLE\n    -- It's useful to know whether the client was present in the file so we can find the last day we got data for them\n    , c.account_number_hashed IS NOT NULL AS present_in_file\n      -- We need to find clients who have been past due in all of the last 7 data uploads from the jurisdiction.\n      -- This means that there should be more than zero days with past_due > 0 AND (zero days where past_due = 0 OR past_due is NULL).\n    , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 7 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 7 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_7_days_past_due\n      , CASE\n        -- The count of days with past_due > 0 should be positive\n        WHEN COUNT(CASE WHEN past_due_balance > 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) > 0\n        -- AND there should be no days in the previous 15 rows with past_due = 0\n        AND\n        COUNT(CASE WHEN past_due_balance = 0 THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        -- AND there should be no days in the previous 15 rows with past_due IS NULL (because some jurisdictions don't bother sending)\n        -- data for clients with past_due = 0. Because of the date-filling in this query, these would appear as past_due IS NULL.\n        AND \n        COUNT(CASE WHEN past_due_balance is NULL THEN ad.UPLOAD_DATE ELSE NULL END) OVER \n        (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 15 PRECEDING AND CURRENT ROW) = 0\n        THEN True\n        ELSE False\n      END as gte_15_days_past_due\n      , SUM(IF(c.account_number_hashed IS NULL, 1, 0)) OVER \n            (PARTITION BY aa.account_number_hashed ORDER BY ad.UPLOAD_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) = 3\n        as account_missing_for_3_consecutive_days\nFROM\n    all_accounts aa\n    LEFT JOIN all_dates ad ON ad.UPLOAD_DATE >= aa.first_appearance_date\n    LEFT JOIN jurx_complete c \n        ON aa.account_number_hashed = c.account_number_hashed \n        AND ad.UPLOAD_DATE = c.UPLOAD_DATE\n-- If this is an incremental run, we only want to add new data\n\tWHERE ad.UPLOAD_DATE >= DATE_SUB(max_partition, INTERVAL 8 DAY)\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`wssc_water_complete_with_eligibility`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.579607Z", "completed_at": "2024-05-13T02:13:24.588062Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.597542Z", "completed_at": "2024-05-13T02:13:24.597546Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.05816006660461426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.utility_deltas_one_current_at_a_time", "compiled": true, "compiled_code": "-- Utility deltas are supposed to track changes.\n-- There should never be more than one \"current\" row per account number (in a jurisdiction).\n\nSELECT\n    account_history.account_number_hashed  AS account_history_account_number_hashed,\n    account_history.jurisdiction  AS account_history_jurisdiction,\n    COUNT(*) AS count_of_account_number_hashed\nFROM `analytics-prod-328313.utility_data.account_history`\n     AS account_history\nWHERE (account_history.is_current ) \nGROUP BY\n    1,\n    2\nHAVING COUNT(*) > 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.581763Z", "completed_at": "2024-05-13T02:13:24.589199Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.599045Z", "completed_at": "2024-05-13T02:13:24.599049Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.05866718292236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.alexrenew_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (dueDate = LAG(dueDate) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR dueDate IS NULL)\n            AND\n            (currentBalance = LAG(currentBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR currentBalance IS NULL)\n            AND\n            (pastDueBalance = LAG(pastDueBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR pastDueBalance IS NULL)\n            AND\n            (billDate = LAG(billDate) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR billDate IS NULL)\n            AND\n            (accountType = LAG(accountType) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR accountType IS NULL)\n            AND\n            (cashOnly = LAG(cashOnly) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR cashOnly IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (nonOwnerContactPermission = LAG(nonOwnerContactPermission) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR nonOwnerContactPermission IS NULL)\n            AND\n            (amountInPromisePlan = LAG(amountInPromisePlan) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR amountInPromisePlan IS NULL)\n            AND\n            (currentlyInSeverance = LAG(currentlyInSeverance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR currentlyInSeverance IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`alexrenew_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`alexrenew_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.608395Z", "completed_at": "2024-05-13T02:13:24.619221Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.673753Z", "completed_at": "2024-05-13T02:13:24.673759Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07968378067016602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.alexrenew_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`alexrenew_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'alexrenewwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`alexrenew_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.619565Z", "completed_at": "2024-05-13T02:13:24.658721Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.678508Z", "completed_at": "2024-05-13T02:13:24.678513Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.07752799987792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.stripe_equal_rowcounts_balance_transaction_id.f643eaaf02", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe.balance_transaction`\n\n  UNION ALL \n  SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.balance_transaction`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`balance_transaction`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.626413Z", "completed_at": "2024-05-13T02:13:24.663421Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.679181Z", "completed_at": "2024-05-13T02:13:24.679185Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.07770204544067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.baltimore_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (balance = LAG(balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR balance IS NULL)\n            AND\n            (balance_forward = LAG(balance_forward) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR balance_forward IS NULL)\n            AND\n            (last_bill_due_date = LAG(last_bill_due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR last_bill_due_date IS NULL)\n            AND\n            (actual_balance = LAG(actual_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR actual_balance IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (last_bill_amount = LAG(last_bill_amount) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR last_bill_amount IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (disconnect_risk = LAG(disconnect_risk) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR disconnect_risk IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`baltimore_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`baltimore_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.630659Z", "completed_at": "2024-05-13T02:13:24.666116Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.679414Z", "completed_at": "2024-05-13T02:13:24.679418Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0778350830078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.baltimore_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`baltimore_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'baltimore' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`baltimore_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.632934Z", "completed_at": "2024-05-13T02:13:24.666568Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.679849Z", "completed_at": "2024-05-13T02:13:24.679853Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0780637264251709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.buffalo_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`buffalo_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`buffalo_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.636133Z", "completed_at": "2024-05-13T02:13:24.670195Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.680257Z", "completed_at": "2024-05-13T02:13:24.680260Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.0782930850982666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.buffalo_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`buffalo_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'buffalowater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`buffalo_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.637986Z", "completed_at": "2024-05-13T02:13:24.670548Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.680485Z", "completed_at": "2024-05-13T02:13:24.680488Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.07836627960205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_buffalo_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.9113f63092", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`buffalo_water_complete_with_eligibility`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.644371Z", "completed_at": "2024-05-13T02:13:24.673180Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.680921Z", "completed_at": "2024-05-13T02:13:24.680924Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.07852315902709961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.cal_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`cal_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`cal_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.647458Z", "completed_at": "2024-05-13T02:13:24.673490Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.681134Z", "completed_at": "2024-05-13T02:13:24.681138Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.07373595237731934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.cal_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`cal_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'calwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`cal_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.650141Z", "completed_at": "2024-05-13T02:13:24.674012Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.681818Z", "completed_at": "2024-05-13T02:13:24.681821Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.07400989532470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.stripe_equal_rowcounts_charge_id.8c2bb41bf3", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe.charge`\n\n  UNION ALL \n  SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.charge`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`charge`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.653493Z", "completed_at": "2024-05-13T02:13:24.674602Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.682598Z", "completed_at": "2024-05-13T02:13:24.682602Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.0740201473236084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.centralarkansas_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (write_off_status = LAG(write_off_status) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR write_off_status IS NULL)\n            AND\n            (active_status = LAG(active_status) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR active_status IS NULL)\n            AND\n            (enrolled = LAG(enrolled) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR enrolled IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (broken = LAG(broken) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR broken IS NULL)\n            AND\n            (active_status = LAG(active_status) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR active_status IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`centralarkansas_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`centralarkansas_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.656658Z", "completed_at": "2024-05-13T02:13:24.674867Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.682830Z", "completed_at": "2024-05-13T02:13:24.682833Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.0740818977355957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.centralarkansas_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`centralarkansas_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'centralarkansaswater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`centralarkansas_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.659069Z", "completed_at": "2024-05-13T02:13:24.675572Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.684019Z", "completed_at": "2024-05-13T02:13:24.684023Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.07420802116394043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.corona_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (active_pp = LAG(active_pp) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR active_pp IS NULL)\n            AND\n            (Severance_Flag = LAG(Severance_Flag) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR Severance_Flag IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (Disconnect_Flag = LAG(Disconnect_Flag) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR Disconnect_Flag IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`corona_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`corona_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.663778Z", "completed_at": "2024-05-13T02:13:24.676069Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.684838Z", "completed_at": "2024-05-13T02:13:24.684843Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 0.07441902160644531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.corona_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`corona_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'corona' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`corona_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.667011Z", "completed_at": "2024-05-13T02:13:24.676757Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.686112Z", "completed_at": "2024-05-13T02:13:24.686115Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.07448506355285645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_complete_with_eligibility_account_number_hashed__account_status__UPLOAD_DATE.e81242254a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, account_status, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`corona_complete_with_eligibility`\n    group by account_number_hashed, account_status, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.670969Z", "completed_at": "2024-05-13T02:13:24.677381Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.687321Z", "completed_at": "2024-05-13T02:13:24.687325Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.0744321346282959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.customer_materialized", "compiled": true, "compiled_code": "\n\nSELECT * FROM `analytics-prod-328313`.`promisepay`.`customer`", "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_materialized`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.717586Z", "completed_at": "2024-05-13T02:13:24.782945Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.864969Z", "completed_at": "2024-05-13T02:13:24.864975Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.17502498626708984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.stripe_equal_rowcounts_dispute_id.ba9a56c1cd", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe.dispute`\n\n  UNION ALL \n  SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.dispute`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`dispute`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.721227Z", "completed_at": "2024-05-13T02:13:24.792226Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.866078Z", "completed_at": "2024-05-13T02:13:24.866082Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.17537903785705566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.stripe_equal_rowcounts_dispute_balance_transaction_balance_transaction_id.a4e94bee3e", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['balance_transaction_id']\n  FROM\n      `analytics-dev-328216.stripe.dispute_balance_transaction`\n\n  UNION ALL \n  SELECT\n      ['balance_transaction_id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.dispute_balance_transaction`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`dispute_balance_transaction`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.723958Z", "completed_at": "2024-05-13T02:13:24.792516Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.866362Z", "completed_at": "2024-05-13T02:13:24.866366Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1754779815673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_event_attributes_attributes.21b06fb34c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        attributes\n    from `analytics-prod-328313`.`amplitude`.`event_attributes`\n    group by attributes\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.726851Z", "completed_at": "2024-05-13T02:13:24.816303Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.866828Z", "completed_at": "2024-05-13T02:13:24.866832Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.17560291290283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_finance_event__source_finance_event_.3acf90b47b", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`finance_event`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`event`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.734695Z", "completed_at": "2024-05-13T02:13:24.821849Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.867067Z", "completed_at": "2024-05-13T02:13:24.867071Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.17543506622314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_finance_plan__source_finance_plan_.c31f4e9b27", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`finance_plan`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`plan`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.737693Z", "completed_at": "2024-05-13T02:13:24.822227Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.867298Z", "completed_at": "2024-05-13T02:13:24.867301Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.17554521560668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.gcww_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (dueDate = LAG(dueDate) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR dueDate IS NULL)\n            AND\n            (currentBalance = LAG(currentBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR currentBalance IS NULL)\n            AND\n            (pastDueBalance = LAG(pastDueBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR pastDueBalance IS NULL)\n            AND\n            (billDate = LAG(billDate) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR billDate IS NULL)\n            AND\n            (accountType = LAG(accountType) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR accountType IS NULL)\n            AND\n            (cashOnly = LAG(cashOnly) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR cashOnly IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (nonOwnerContactPermission = LAG(nonOwnerContactPermission) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR nonOwnerContactPermission IS NULL)\n            AND\n            (amountInPromisePlan = LAG(amountInPromisePlan) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR amountInPromisePlan IS NULL)\n            AND\n            (currentlyInSeverance = LAG(currentlyInSeverance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR currentlyInSeverance IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`gcww_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`gcww_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.740960Z", "completed_at": "2024-05-13T02:13:24.825266Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.867904Z", "completed_at": "2024-05-13T02:13:24.867908Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.1759021282196045, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.gcww_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`gcww_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'gcww' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`gcww_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.742842Z", "completed_at": "2024-05-13T02:13:24.825552Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.868124Z", "completed_at": "2024-05-13T02:13:24.868127Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.17600226402282715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.hrsd_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (TOTAL_BALANCE = LAG(TOTAL_BALANCE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR TOTAL_BALANCE IS NULL)\n            AND\n            (DUE_DATE = LAG(DUE_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR DUE_DATE IS NULL)\n            AND\n            (ACCT_TYPE = LAG(ACCT_TYPE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_TYPE IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (PAST_DUE_BALANCE = LAG(PAST_DUE_BALANCE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR PAST_DUE_BALANCE IS NULL)\n            AND\n            (RELIEF_AMT = LAG(RELIEF_AMT) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR RELIEF_AMT IS NULL)\n            AND\n            (CUST_TYPE = LAG(CUST_TYPE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR CUST_TYPE IS NULL)\n            AND\n            (ACTIVE_PP = LAG(ACTIVE_PP) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACTIVE_PP IS NULL)\n            AND\n            (IN_SEVERANCE = LAG(IN_SEVERANCE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR IN_SEVERANCE IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`hrsd_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`hrsd_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.745872Z", "completed_at": "2024-05-13T02:13:24.826101Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.868904Z", "completed_at": "2024-05-13T02:13:24.868907Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.16356492042541504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.hrsd_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`hrsd_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'hrsd' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`hrsd_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.783309Z", "completed_at": "2024-05-13T02:13:24.826457Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.869130Z", "completed_at": "2024-05-13T02:13:24.869134Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.1608717441558838, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.37162f93b7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`hrsd_complete_with_eligibility`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.786345Z", "completed_at": "2024-05-13T02:13:24.826812Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.869362Z", "completed_at": "2024-05-13T02:13:24.869365Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.16097688674926758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.jackson_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (totalBalance = LAG(totalBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR totalBalance IS NULL)\n            AND\n            (reliefBalance = LAG(reliefBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR reliefBalance IS NULL)\n            AND\n            (pastDueBalance = LAG(pastDueBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR pastDueBalance IS NULL)\n            AND\n            (sanitationBalance = LAG(sanitationBalance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR sanitationBalance IS NULL)\n            AND\n            (accountClass = LAG(accountClass) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR accountClass IS NULL)\n            AND\n            (accountType = LAG(accountType) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR accountType IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`jackson_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`jackson_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.790024Z", "completed_at": "2024-05-13T02:13:24.827487Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.870567Z", "completed_at": "2024-05-13T02:13:24.870570Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.16114306449890137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.jackson_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`jackson_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'jacksonwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`jackson_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.810802Z", "completed_at": "2024-05-13T02:13:24.863954Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.872196Z", "completed_at": "2024-05-13T02:13:24.872199Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.16077089309692383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.louisville_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`louisville_water_delta_rows`),\nc AS (SELECT * FROM `louisville-water-pay.staging.complete` WHERE jurisdiction='louisville_water')\n\n\n    \n    \n\nSELECT \n  'louisvillewater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(billDueDate AS DATE)  AS due_date\n        , CAST(totalBalanceSigned - pastDueSigned AS INT64)  AS outstanding_new_bill\n        , CAST(currentDueSigned AS INT64)  AS current_balance\n        , CAST(pastDueSigned AS INT64)  AS past_due_balance\n        , CAST(totalBalanceSigned AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(CAST(NULL as DATE) AS DATE)  AS bill_date\n        , CAST(accountType AS STRING)  AS account_type\n        , CAST(cashOnlyIndicator AS BOOLEAN)  AS cash_only\n        , CAST(NULL AS STRING) AS pay_plan_eligible\n        , CAST(paymentArrangementFlag AS BOOLEAN)  AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(NULL AS BOOLEAN) AS gte_7_days_past_due\n        , CAST(NULL AS BOOLEAN) AS gte_15_days_past_due\n        , CAST(NULL AS BOOLEAN) AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`louisville_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.822523Z", "completed_at": "2024-05-13T02:13:24.864282Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.872422Z", "completed_at": "2024-05-13T02:13:24.872426Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.160506010055542, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_louisville_water_delta_rows_account_number_hashed__UPLOAD_DATE.24631b77ff", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`louisville_water_delta_rows`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.899416Z", "completed_at": "2024-05-13T02:13:24.929950Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.943844Z", "completed_at": "2024-05-13T02:13:24.943850Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06886506080627441, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newark_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (disconnect_risk = LAG(disconnect_risk) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR disconnect_risk IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (sixty_days = LAG(sixty_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR sixty_days IS NULL)\n            AND\n            (current_balance = LAG(current_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR current_balance IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`newark_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`newark_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.904000Z", "completed_at": "2024-05-13T02:13:24.933361Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.944474Z", "completed_at": "2024-05-13T02:13:24.944478Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.06875801086425781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newark_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newark_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'newarkwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`newark_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.906068Z", "completed_at": "2024-05-13T02:13:24.933631Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.944693Z", "completed_at": "2024-05-13T02:13:24.944697Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06874895095825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_newark_water_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.bacd5a53ba", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`newark_water_complete_with_eligibility`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.908715Z", "completed_at": "2024-05-13T02:13:24.933942Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.945100Z", "completed_at": "2024-05-13T02:13:24.945104Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06874489784240723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newmexico_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (district = LAG(district) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR district IS NULL)\n            AND\n            (consolidated_district = LAG(consolidated_district) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR consolidated_district IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`newmexico_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`newmexico_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.911489Z", "completed_at": "2024-05-13T02:13:24.937366Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.945321Z", "completed_at": "2024-05-13T02:13:24.945324Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.06883096694946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newmexico_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newmexico_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'newmexicowater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`newmexico_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.937609Z", "completed_at": "2024-05-13T02:13:24.939366Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.945535Z", "completed_at": "2024-05-13T02:13:24.945538Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.05161786079406738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.promise_dwh.airflow_prod_all_dag_runs_snapshot", "compiled": true, "compiled_code": "\n\n    \n\nSELECT * FROM `analytics-prod-328313`.`astro_airflow_logs`.`prod_all_dag_runs`\n", "relation_name": "`analytics-prod-328313`.`snapshots`.`airflow_prod_all_dag_runs_snapshot`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.913315Z", "completed_at": "2024-05-13T02:13:24.939613Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.945748Z", "completed_at": "2024-05-13T02:13:24.945751Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.06939005851745605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newportnews_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (plan_eligible = LAG(plan_eligible) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR plan_eligible IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (disconnect_risk = LAG(disconnect_risk) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR disconnect_risk IS NULL)\n            AND\n            (is_disconnected = LAG(is_disconnected) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR is_disconnected IS NULL)\n            AND\n            (has_installment_plan = LAG(has_installment_plan) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR has_installment_plan IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`newportnews_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`newportnews_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.916507Z", "completed_at": "2024-05-13T02:13:24.940012Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.946152Z", "completed_at": "2024-05-13T02:13:24.946155Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.06045198440551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newportnews_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newportnews_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'newportnewswater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`newportnews_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.919676Z", "completed_at": "2024-05-13T02:13:24.940256Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.946370Z", "completed_at": "2024-05-13T02:13:24.946373Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.06038308143615723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.nola_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (disconnect_risk = LAG(disconnect_risk) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR disconnect_risk IS NULL)\n            AND\n            (is_disconnected = LAG(is_disconnected) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR is_disconnected IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`nola_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`nola_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.922525Z", "completed_at": "2024-05-13T02:13:24.940534Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.946595Z", "completed_at": "2024-05-13T02:13:24.946598Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.05783390998840332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.nola_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`nola_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'nolawater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`nola_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.924438Z", "completed_at": "2024-05-13T02:13:24.941025Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.947352Z", "completed_at": "2024-05-13T02:13:24.947355Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.05764484405517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_other_attributes_attributes.1a01332839", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        attributes\n    from `analytics-prod-328313`.`amplitude`.`other_attributes`\n    group by attributes\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.926918Z", "completed_at": "2024-05-13T02:13:24.941295Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.947588Z", "completed_at": "2024-05-13T02:13:24.947591Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.0574491024017334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_payment_attempt__source_finance_payment_attempt_.b87f20362a", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`payment_attempt`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`paymentattempt`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.930319Z", "completed_at": "2024-05-13T02:13:24.941962Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.948758Z", "completed_at": "2024-05-13T02:13:24.948761Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.05735492706298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_payment_method__source_finance_payment_method_.168378dafe", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`payment_method`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`paymentmethod`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.934241Z", "completed_at": "2024-05-13T02:13:24.943006Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:24.950836Z", "completed_at": "2024-05-13T02:13:24.950839Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.05774116516113281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_payment_provider_balance__source_finance_payment_provider_balance_.060ca96bc1", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`payment_provider_balance`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`paymentproviderbalance`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.964499Z", "completed_at": "2024-05-13T02:13:24.966371Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.003510Z", "completed_at": "2024-05-13T02:13:25.003515Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05107593536376953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.promise_dwh.airflow_prod_dag_list_snapshot", "compiled": true, "compiled_code": "\n\n    \n\nSELECT * FROM `analytics-prod-328313`.`astro_airflow_logs`.`prod_dag_list`\n", "relation_name": "`analytics-prod-328313`.`snapshots`.`airflow_prod_dag_list_snapshot`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.967005Z", "completed_at": "2024-05-13T02:13:24.999975Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.043372Z", "completed_at": "2024-05-13T02:13:25.043378Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.08981800079345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.stripe_equal_rowcounts_refund_id.80e210a2c4", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe.refund`\n\n  UNION ALL \n  SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.refund`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`refund`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.969219Z", "completed_at": "2024-05-13T02:13:25.000309Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.043627Z", "completed_at": "2024-05-13T02:13:25.043631Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08992934226989746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_refund_attempt__source_finance_refund_attempt_.3db86495e1", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`refund_attempt`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`refundattempt`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.976251Z", "completed_at": "2024-05-13T02:13:25.000708Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.044119Z", "completed_at": "2024-05-13T02:13:25.044123Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.08979916572570801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.richmond_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (AcctType = LAG(AcctType) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR AcctType IS NULL)\n            AND\n            (Balance = LAG(Balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR Balance IS NULL)\n            AND\n            (PastDueBal = LAG(PastDueBal) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR PastDueBal IS NULL)\n            AND\n            (DueDate = LAG(DueDate) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR DueDate IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (PromisePlanBal = LAG(PromisePlanBal) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR PromisePlanBal IS NULL)\n            AND\n            (DisconnectRisk = LAG(DisconnectRisk) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR DisconnectRisk IS NULL)\n            AND\n            (lihwap_amount_applied_cents = LAG(lihwap_amount_applied_cents) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR lihwap_amount_applied_cents IS NULL)\n            AND\n            (PaymentArrangement = LAG(PaymentArrangement) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR PaymentArrangement IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`richmond_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`richmond_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.973407Z", "completed_at": "2024-05-13T02:13:25.000941Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.044535Z", "completed_at": "2024-05-13T02:13:25.044539Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.09062790870666504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_remit_attempt__source_finance_remit_attempt_.0446ca9a51", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`remit_attempt`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`remitattempt`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.979239Z", "completed_at": "2024-05-13T02:13:25.002917Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.045387Z", "completed_at": "2024-05-13T02:13:25.045392Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.09038209915161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.richmond_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`richmond_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'richmond' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`richmond_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.981054Z", "completed_at": "2024-05-13T02:13:25.003146Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.045639Z", "completed_at": "2024-05-13T02:13:25.045643Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.09048604965209961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.device_user_map", "compiled": true, "compiled_code": "\n\nWITH\n-- We intentionally want to exclude certain devices from this query\n-- that are associated with many user_ids \ndevices_to_include AS (\n    SELECT\n        device_id,\n        COUNT(DISTINCT user_id) AS count_distinct_user_ids\n    FROM\n        `analytics-prod-328313`.`amplitude`.`session_facts`\n    WHERE\n    -- We don't take into account events where the user had not been identified\n        user_id IS NOT NULL\n        -- We exclude user_ids that look like email addresses, since these all \n        -- belong either to Promise staff or customer staff\n        AND user_id NOT LIKE '%@%'\n        -- We exclude server-side events, which have a session_id of -1, since \n        -- these have constantly changing device_ids\n        AND session_id != -1\n    GROUP BY\n        1\n    -- There is a small number of devices that aren't excluded by the above \n    -- predicate that still have many user_ids associated with them. We exclude\n    -- those with this HAVING clause\n    HAVING\n        COUNT(DISTINCT user_id) <= 3\n)\n\nSELECT\n    -- For each device above\n    device_id,\n    -- we find the the non-null user_id most recently associated with this\n    -- device\n    ARRAY_AGG(\n        user_id IGNORE NULLS\n        ORDER BY session_start_time DESC, last_event_ts DESC LIMIT 1\n    )[SAFE_OFFSET(0)] AS last_user_id,\n    -- as well as the user_creation_time of this user_id\n    ARRAY_AGG(\n        user_creation_time IGNORE NULLS\n        ORDER BY session_start_time DESC, last_event_ts DESC LIMIT 1\n    )[SAFE_OFFSET(0)] AS last_user_creation_time\nFROM\n    `analytics-prod-328313`.`amplitude`.`session_facts` ew\nINNER JOIN\n    devices_to_include dti\n    USING (device_id)\nWHERE\n    user_id IS NOT NULL\n    AND user_id NOT LIKE '%@%'\n    AND session_id != -1\nGROUP BY 1", "relation_name": "`analytics-prod-328313`.`amplitude`.`device_user_map`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.983083Z", "completed_at": "2024-05-13T02:13:25.003936Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.046267Z", "completed_at": "2024-05-13T02:13:25.046271Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.09094595909118652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.sse_ids", "compiled": true, "compiled_code": "\n\nSELECT\n    event_id,\n    acct_identifier_jurisdiction_id AS jurisdiction_id,\n    jurisdiction AS jurisdiction_clean,\n    MIN(acct_identifier_client_id) AS acct_identifier_client_id,\n    MIN(acct_identifier_provider) AS acct_identifier_provider,\n    MIN(acct_identifier_payment_id) AS acct_identifier_payment_id,\n    MIN(acct_identifier_obligation_id) AS acct_identifier_obligation_id,\n    CONCAT(jurisdiction, MIN(acct_identifier_client_id)) AS jurisdiction_x_client_id\nFROM `analytics-prod-328313`.`finance`.`single_sided_entry`\nGROUP BY 1, 2, 3", "relation_name": "`analytics-prod-328313`.`finance`.`sse_ids`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.989286Z", "completed_at": "2024-05-13T02:13:25.005141Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.046507Z", "completed_at": "2024-05-13T02:13:25.046510Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.09019804000854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.sj_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`sj_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`sj_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.984710Z", "completed_at": "2024-05-13T02:13:25.005356Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.046721Z", "completed_at": "2024-05-13T02:13:25.046724Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.0914621353149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.upcoming_payments", "compiled": true, "compiled_code": "WITH\nscheduled_payment_ids AS (\n    SELECT\n        REPLACE(acct_identifier_jurisdiction_id, \"_\", \"\") AS jurisdiction,\n        acct_identifier_client_id AS client_id,\n        acct_identifier_scheduled_payment_id AS scheduled_payment_id,\n        COALESCE(acct_identifier_scheduled_for) AS scheduled_for_date,\n\n        SUM(amount) AS amount,\n        SUM(\n            CASE\n                WHEN event_kind = \"PaymentSucceeded\" THEN 1\n                ELSE 0\n            END\n        ) AS num_payment_succeeded,\n        SUM(\n            CASE\n                WHEN event_kind = \"PaymentRefunded\" THEN 1\n                ELSE 0\n            END\n        ) AS num_payment_refunded,\n        SUM(\n            CASE\n                WHEN event_kind = \"ScheduledPaymentsCanceled\" THEN 1\n                ELSE 0\n            END\n        ) AS num_payment_canceled,\n        SUM(\n            CASE\n                WHEN event_kind = \"PaymentsScheduled\" THEN 1\n                ELSE 0\n            END\n        ) AS num_payment_scheduled\n    FROM\n        `analytics-prod-328313`.`finance`.`single_sided_entry`\n    WHERE\n        1 = 1\n        AND acct_kind = \"ScheduledPayment\"\n        AND event_status = \"Recorded\"\n        AND acct_identifier_purpose_type = \"Obligation\"\n    GROUP BY 1, 2, 3, 4\n)\n\nSELECT\n    CONCAT(jurisdiction, client_id) AS jurisdiction_x_client_id,\n    *\nFROM\n    scheduled_payment_ids\nWHERE\n    1 = 1\n    AND num_payment_canceled = 0\n    AND num_payment_succeeded = 0", "relation_name": "`analytics-prod-328313`.`finance`.`upcoming_payments`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.992067Z", "completed_at": "2024-05-13T02:13:25.005578Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.046932Z", "completed_at": "2024-05-13T02:13:25.046935Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.0903768539428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.sj_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`sj_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'sjwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`sj_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.986282Z", "completed_at": "2024-05-13T02:13:25.006286Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.048165Z", "completed_at": "2024-05-13T02:13:25.048169Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.09243083000183105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_equal_rowcount_single_sided_entry__source_finance_ledger_.f2dc4f1eea", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `analytics-prod-328313`.`finance`.`single_sided_entry`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `analytics-dev-328216`.`finance_prod_public`.`singlesidedentry`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.001249Z", "completed_at": "2024-05-13T02:13:25.007349Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.050230Z", "completed_at": "2024-05-13T02:13:25.050234Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.0908207893371582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.template", "compiled": true, "compiled_code": "SELECT *\nFROM\n    `analytics-prod-328313`.`template_service`.`stg__template`", "relation_name": "`analytics-prod-328313`.`template_service`.`template`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.058396Z", "completed_at": "2024-05-13T02:13:25.071941Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.102744Z", "completed_at": "2024-05-13T02:13:25.102750Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.055383920669555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.template_text", "compiled": true, "compiled_code": "WITH template_field_values AS (\n    SELECT\n        template_version_id,\n        ARRAY_AGG(field_name ORDER BY field_index) AS field_array\n    FROM `analytics-prod-328313`.`template_service`.`stg__template_version_field`\n    GROUP BY 1\n)\n\nSELECT\n    id AS template_version_id,\n    created_at,\n    deleted_at,\n    draft_default,\n    human_readable_reference,\n    live_default,\n    locale,\n    template_id,\n    updated_at,\n    template_service.insert_fields(template_text, field_array) AS template_text\nFROM\n    `analytics-prod-328313`.`template_service`.`stg__template_version` tv\nLEFT JOIN template_field_values ON template_version_id = tv.id", "relation_name": "`analytics-prod-328313`.`template_service`.`template_text`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.074641Z", "completed_at": "2024-05-13T02:13:25.076406Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.103868Z", "completed_at": "2024-05-13T02:13:25.103872Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.04961204528808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.promise_dwh.transaction_fee_configs_snapshot", "compiled": true, "compiled_code": "\n\n    \n\nselect * FROM `analytics-prod-328313`.`promisepay`.`transaction_fee_configs`\n", "relation_name": "`analytics-prod-328313`.`snapshots`.`transaction_fee_configs_snapshot`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.076784Z", "completed_at": "2024-05-13T02:13:25.078625Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.104106Z", "completed_at": "2024-05-13T02:13:25.104110Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.04974102973937988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.promise_dwh.jurisdiction_metadata_historical", "compiled": true, "compiled_code": " -- noqa\n\n\nSELECT *\n\nFROM `analytics-prod-328313`.`promisepay`.`jurisdiction_metadata`\n", "relation_name": "`analytics-prod-328313`.`promisepay`.`jurisdiction_metadata_historical`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.064470Z", "completed_at": "2024-05-13T02:13:25.097187Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.106311Z", "completed_at": "2024-05-13T02:13:25.106315Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.053964853286743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.stripe_equal_rowcounts_stripe_customer_id.ec8a9cf45a", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe.customer`\n\n  UNION ALL \n  SELECT\n      ['id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.customer`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`customer`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.066847Z", "completed_at": "2024-05-13T02:13:25.097535Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.106534Z", "completed_at": "2024-05-13T02:13:25.106537Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05404210090637207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.toledo_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (relief_balance = LAG(relief_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR relief_balance IS NULL)\n            AND\n            (relief_granted = LAG(relief_granted) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR relief_granted IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (compliance_total_balance = LAG(compliance_total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR compliance_total_balance IS NULL)\n            AND\n            (compliance_past_due_balance = LAG(compliance_past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR compliance_past_due_balance IS NULL)\n            AND\n            (no_owner_permission = LAG(no_owner_permission) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR no_owner_permission IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`toledo_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`toledo_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.072181Z", "completed_at": "2024-05-13T02:13:25.098309Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.107875Z", "completed_at": "2024-05-13T02:13:25.107878Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05426287651062012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_complete_with_eligibility_account_number_hashed__UPLOAD_DATE.2a17cb52b3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`toledo_complete_with_eligibility`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.070047Z", "completed_at": "2024-05-13T02:13:25.098557Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.108103Z", "completed_at": "2024-05-13T02:13:25.108107Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.055106163024902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.toledo_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`toledo_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'toledo' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`toledo_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.079108Z", "completed_at": "2024-05-13T02:13:25.101942Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.108330Z", "completed_at": "2024-05-13T02:13:25.108333Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.051786184310913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.not_null_jurisdiction_metadata_jurisdiction.e47f81d0c0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect jurisdiction\nfrom `analytics-prod-328313`.`promisepay`.`jurisdiction_metadata`\nwhere jurisdiction is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.085240Z", "completed_at": "2024-05-13T02:13:25.102188Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.108545Z", "completed_at": "2024-05-13T02:13:25.108548Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.05186820030212402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.unique_jurisdiction_metadata_jurisdiction.089ca698ab", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select jurisdiction as unique_field\n  from `analytics-prod-328313`.`promisepay`.`jurisdiction_metadata`\n  where jurisdiction is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.088712Z", "completed_at": "2024-05-13T02:13:25.102469Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.108940Z", "completed_at": "2024-05-13T02:13:25.108943Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.0522000789642334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.stripe_equal_rowcounts_transaction_fee_detail_request_id.b9b2b21aad", "compiled": true, "compiled_code": "\n\n/*\nWe have two stripe sources in analytics-dev. \n\nThis test ensures that the combined table of these two\nthat we have in prod has the same rowcount as the count of \nthe two table in dev\n*/\n\n\n\nWITH unioned_tables AS (SELECT\n      ['request_id']\n  FROM\n      `analytics-dev-328216.stripe.transaction_fee_detail`\n\n  UNION ALL \n  SELECT\n      ['request_id']\n  FROM\n      `analytics-dev-328216.stripe_private_utilities.transaction_fee_detail`\n\n  \n),\ncompare_table as (\n  select * from `analytics-prod-328313`.`stripe`.`transaction_fee_detail`\n),\na AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_a\n  FROM compare_table\n  GROUP BY id_stripetest_equal_row_count\n),\nb AS (\n  SELECT \n    1 as id_stripetest_equal_row_count,\n    count(*) as count_b\n  FROM unioned_tables\n  GROUP BY id_stripetest_equal_row_count\n\n),\nfinal AS (\nSELECT\n  a.id_stripetest_equal_row_count as id_stripetest_equal_row_count_a,\n  b.id_stripetest_equal_row_count as id_stripetest_equal_row_count_b,\n  count_a,\n  count_b,\n  abs(count_a - count_b) as diff_count\nFROM a\nFULL JOIN b\n  ON a.id_stripetest_equal_row_count = b.id_stripetest_equal_row_count\nWHERE \n  count_a - count_b <> 0\n)\nSELECT \n  *\nFROM final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.091202Z", "completed_at": "2024-05-13T02:13:25.103002Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.109405Z", "completed_at": "2024-05-13T02:13:25.109408Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.05265998840332031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.twilio_error_monitoring_twilio_message_30034__3.882b292e9e", "compiled": true, "compiled_code": "\nWITH errors AS (\n  SELECT\n    from_number,\n    count(1)\n  FROM `analytics-prod-328313`.`prod`.`twilio_message`\n  WHERE\n    DATE(TIMESTAMP_TRUNC(created_at, DAY)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY)\n    AND error_code = '30034'\n  GROUP BY \n    1\n)\nSELECT\n  *\nFROM\n  errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.094256Z", "completed_at": "2024-05-13T02:13:25.103640Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.110550Z", "completed_at": "2024-05-13T02:13:25.110553Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.05291104316711426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_user_attributes_attributes.079d587c1d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        attributes\n    from `analytics-prod-328313`.`amplitude`.`user_attributes`\n    group by attributes\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.098803Z", "completed_at": "2024-05-13T02:13:25.105161Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.113079Z", "completed_at": "2024-05-13T02:13:25.113082Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.053974151611328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.veoliany_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (disconnect_risk = LAG(disconnect_risk) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR disconnect_risk IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`veoliany_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`veoliany_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.121598Z", "completed_at": "2024-05-13T02:13:25.137292Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.160479Z", "completed_at": "2024-05-13T02:13:25.160486Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04957914352416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.veoliany_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`veoliany_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'veolianywater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`veoliany_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.125165Z", "completed_at": "2024-05-13T02:13:25.145358Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.162267Z", "completed_at": "2024-05-13T02:13:25.162270Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.04993295669555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.washington_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (promise_plan_balance = LAG(promise_plan_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR promise_plan_balance IS NULL)\n            AND\n            (district = LAG(district) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR district IS NULL)\n            AND\n            (consolidated_district = LAG(consolidated_district) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR consolidated_district IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`washington_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`washington_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.128011Z", "completed_at": "2024-05-13T02:13:25.147997Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.162667Z", "completed_at": "2024-05-13T02:13:25.162670Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.05028200149536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.washington_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`washington_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'washingtonwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`washington_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.134232Z", "completed_at": "2024-05-13T02:13:25.155877Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.164231Z", "completed_at": "2024-05-13T02:13:25.164234Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.048998117446899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.wssc_water_mr_data", "compiled": true, "compiled_code": "\n\n\n\n-- Putting the source tables up top here to encapsulate the per-jurisdiction logic in one place\nWITH c AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`wssc_water_complete_with_eligibility`)\n\n-- Since everything from here on is identical across jurisdictions, we encapsulate it in a macro\n\nSELECT \n  'wsscwater' as jurisdiction\n  , account_number_hashed\n  , MAX(UPLOAD_DATE) as last_data_date\nFROM \n    c\nWHERE\n    present_in_file\nGROUP BY 1, 2\n\n    \n", "relation_name": "`analytics-prod-328313`.`utility_data`.`wssc_water_mr_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.131375Z", "completed_at": "2024-05-13T02:13:25.156109Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.164447Z", "completed_at": "2024-05-13T02:13:25.164451Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.04983019828796387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.wssc_water_delta_rows", "compiled": true, "compiled_code": "\n\n        \n\n\n    \n\n\n    \n\nwith change_rows AS (\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\n    , CASE\n        WHEN\n        -- We check each value against its previous value. We ignore rows where the value goes to NULL.\n        (\n            (total_balance = LAG(total_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR total_balance IS NULL)\n            AND\n            (due_date = LAG(due_date) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR due_date IS NULL)\n            AND\n            (ACCT_ELIGIBLE = LAG(ACCT_ELIGIBLE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR ACCT_ELIGIBLE IS NULL)\n            AND\n            (acct_type = LAG(acct_type) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR acct_type IS NULL)\n            AND\n            (past_due_balance = LAG(past_due_balance) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR past_due_balance IS NULL)\n            AND\n            (has_service = LAG(has_service) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR has_service IS NULL)\n            AND\n            (gte_7_days_past_due = LAG(gte_7_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_7_days_past_due IS NULL)\n            AND\n            (gte_15_days_past_due = LAG(gte_15_days_past_due) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR gte_15_days_past_due IS NULL)\n            AND\n            (account_missing_for_3_consecutive_days = LAG(account_missing_for_3_consecutive_days) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) OR account_missing_for_3_consecutive_days IS NULL)\n            )\n        -- If building incrementally, we have to make sure not to treat the first row in the incremental window as a delta\n        -- simply because the row above it is blank and thus \"different\".-- This checks to see if the row above is completely blank and excludes that first row in the window.\n        OR LAG(UPLOAD_DATE) OVER(PARTITION BY account_number_hashed ORDER BY UPLOAD_DATE) IS NULL\n        THEN 0\n        ELSE 1\n    END as change\nFROM `analytics-prod-328313`.`utility_data`.`wssc_water_complete_with_eligibility`-- Don't look at rows added before the last run (with 5 day buffer (configurable))\n\tWHERE UPLOAD_DATE > DATE_SUB(max_partition, INTERVAL 5 DAY))\nSELECT\n    account_number_hashed\n    , UPLOAD_DATE\nFROM\n    change_rows\nWHERE\n    change = 1\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`wssc_water_delta_rows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.137824Z", "completed_at": "2024-05-13T02:13:25.156468Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.164669Z", "completed_at": "2024-05-13T02:13:25.164672Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04896998405456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.alexrenew_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`alexrenew_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`alexrenew_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'alexrenewwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(dueDate AS DATE)  AS due_date\n        , CAST(100*(currentBalance - pastDueBalance) AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(100*pastDueBalance AS INT64)  AS past_due_balance\n        , CAST(100*currentBalance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(billDate AS DATE)  AS bill_date\n        , CAST(accountType AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN amountInPromisePlan > 0 THEN 'Y' WHEN amountInPromisePlan = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(100*amountInPromisePlan AS INT64)  AS promise_plan_balance\n        , CAST(currentlyInSeverance AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`alexrenew_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.140446Z", "completed_at": "2024-05-13T02:13:25.156746Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.165058Z", "completed_at": "2024-05-13T02:13:25.165061Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.04930305480957031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_alexrenew_water_delta_rows_account_number_hashed__UPLOAD_DATE.c4e89b4db7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`alexrenew_water_delta_rows`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.142889Z", "completed_at": "2024-05-13T02:13:25.157187Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.165737Z", "completed_at": "2024-05-13T02:13:25.165740Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.04968714714050293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.baltimore_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`baltimore_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`baltimore_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'baltimore' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(last_bill_due_date AS DATE)  AS due_date\n        , CAST(last_bill_amount - balance_forward AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(SAFE_CAST(promise_plan_balance AS INT64) AS INT64)  AS promise_plan_balance\n        , CAST(disconnect_risk AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`baltimore_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.145634Z", "completed_at": "2024-05-13T02:13:25.160158Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.166437Z", "completed_at": "2024-05-13T02:13:25.166441Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.050067901611328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.buffalo_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`buffalo_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`buffalo_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'buffalowater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(IF(promise_plan_balance > 0, 'Y', 'N') AS STRING)  AS active_promise_pay_plan\n        , CAST(promise_plan_balance AS INT64)  AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`buffalo_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.148472Z", "completed_at": "2024-05-13T02:13:25.160752Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.166918Z", "completed_at": "2024-05-13T02:13:25.166921Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.05037283897399902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.cal_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`cal_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`cal_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'calwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(total_balance - past_due_balance AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(promise_plan_balance AS INT64)  AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`cal_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.150829Z", "completed_at": "2024-05-13T02:13:25.161016Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.167322Z", "completed_at": "2024-05-13T02:13:25.167325Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.04832100868225098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.centralarkansas_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`centralarkansas_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`centralarkansas_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'centralarkansaswater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(broken AS STRING)  AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`centralarkansas_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.153430Z", "completed_at": "2024-05-13T02:13:25.161843Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.168880Z", "completed_at": "2024-05-13T02:13:25.168883Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.04877901077270508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.corona_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`corona_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`corona_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'corona' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(active_pp AS STRING)  AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(Severance_Flag AS STRING)  AS in_severance\n        , CAST(Disconnect_Flag AS STRING)  AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`corona_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.157645Z", "completed_at": "2024-05-13T02:13:25.163810Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.171859Z", "completed_at": "2024-05-13T02:13:25.171862Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 0.04523491859436035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_delta_rows_account_number_hashed__UPLOAD_DATE.75107ab10e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`corona_delta_rows`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.178951Z", "completed_at": "2024-05-13T02:13:25.194400Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.231603Z", "completed_at": "2024-05-13T02:13:25.231610Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06361126899719238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.gcww_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`gcww_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`gcww_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'gcww' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(dueDate AS DATE)  AS due_date\n        , CAST(100*(currentBalance - pastDueBalance) AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(100*pastDueBalance AS INT64)  AS past_due_balance\n        , CAST(100*currentBalance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(billDate AS DATE)  AS bill_date\n        , CAST(accountType AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN amountInPromisePlan > 0 THEN 'Y' WHEN amountInPromisePlan = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(100*amountInPromisePlan AS INT64)  AS promise_plan_balance\n        , CAST(currentlyInSeverance AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`gcww_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.188014Z", "completed_at": "2024-05-13T02:13:25.214821Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.233432Z", "completed_at": "2024-05-13T02:13:25.233436Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.06286311149597168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.hrsd_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`hrsd_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`hrsd_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'hrsd' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(DUE_DATE AS DATE)  AS due_date\n        , CAST(TOTAL_BALANCE - PAST_DUE_BALANCE AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(PAST_DUE_BALANCE AS INT64)  AS past_due_balance\n        , CAST(TOTAL_BALANCE AS INT64)  AS total_balance\n        , CAST(RELIEF_AMT AS INT64)  AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(ACCT_TYPE AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(CUST_TYPE AS STRING)  AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(ACTIVE_PP AS STRING)  AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(IN_SEVERANCE AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`hrsd_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.184997Z", "completed_at": "2024-05-13T02:13:25.215039Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.233845Z", "completed_at": "2024-05-13T02:13:25.233849Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.06419491767883301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_gcww_delta_rows_account_number_hashed__UPLOAD_DATE.dede6fe02b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`gcww_delta_rows`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.191800Z", "completed_at": "2024-05-13T02:13:25.219276Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.235768Z", "completed_at": "2024-05-13T02:13:25.235772Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09733796119689941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_delta_rows_account_number_hashed__UPLOAD_DATE.26dfdfd4fb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`hrsd_delta_rows`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.194641Z", "completed_at": "2024-05-13T02:13:25.222137Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.236198Z", "completed_at": "2024-05-13T02:13:25.236201Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.09838581085205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.jackson_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`jackson_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`jackson_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'jacksonwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(NULL AS DATE) AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(pastDueBalance AS INT64)  AS past_due_balance\n        , CAST(totalBalance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(reliefBalance AS INT64)  AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(sanitationBalance AS INT64)  AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(NULL AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(IF(accountType = 'S', TRUE, FALSE) AS BOOLEAN)  AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`jackson_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.197025Z", "completed_at": "2024-05-13T02:13:25.223097Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.236418Z", "completed_at": "2024-05-13T02:13:25.236422Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.09867405891418457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.louisville_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`louisville_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'louisvillewater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`louisville_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.204886Z", "completed_at": "2024-05-13T02:13:25.223340Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.236647Z", "completed_at": "2024-05-13T02:13:25.236650Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.0988309383392334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_louisville_water_deltas_v2_account_number_hashed__valid_starting.c4c12c8f23", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`louisville_water_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.207615Z", "completed_at": "2024-05-13T02:13:25.224126Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.237046Z", "completed_at": "2024-05-13T02:13:25.237049Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.09900617599487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newark_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newark_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newark_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'newarkwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(NULL AS DATE) AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(COALESCE(past_due_balance, sixty_days) AS INT64)  AS past_due_balance\n        , CAST(COALESCE(total_balance, current_balance) AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST( CASE WHEN acct_type = 'Residential'\n                            THEN 'R'\n                            WHEN acct_type = 'Commercial'\n                            THEN 'C'\n                            -- Other WHENs for old Newark data version\n                            WHEN TRIM(property_description) IN ('2 1/2 FAMILY', 'CONDOMINIUM', 'DUPLEX', 'FIVE FAMILY', \n                            'FOUR FAMILY', 'MULTI FAMILY', 'ONE FAMILY', 'SIX FAMILY', 'THREE FAMILY', 'TOWN-HOUSE', 'TWO FAMILY')\n                            THEN 'R'\n                            WHEN property_description in ('INDUSTRIAL', 'WARE HOUSE')\n                            THEN 'I'\n                            ELSE 'I'\n                        END AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST( CASE WHEN acct_type = 'Residential' OR (\n                              TRIM(property_description) IN ('2 1/2 FAMILY', 'CONDOMINIUM', 'DUPLEX', 'FIVE FAMILY', \n                                                    'FOUR FAMILY', 'MULTI FAMILY', 'ONE FAMILY', 'SIX FAMILY', 'THREE FAMILY', 'TOWN-HOUSE', 'TWO FAMILY')\n                                                    AND cycle IN (1, 4, 6, 9, 12, 15))\n                              THEN ACCT_ELIGIBLE\n                              ELSE 'N'\n                            END AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(disconnect_risk AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`newark_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.212379Z", "completed_at": "2024-05-13T02:13:25.224633Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.237733Z", "completed_at": "2024-05-13T02:13:25.237736Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.09504103660583496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newportnews_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newportnews_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newportnews_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'newportnewswater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(CASE acct_type WHEN 'COMM' THEN 'C' WHEN 'INST' THEN 'C' WHEN 'RESI' THEN 'R' WHEN 'INDU' THEN 'I' ELSE acct_type END AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(CASE WHEN has_installment_plan = 'Y' THEN TRUE ELSE FALSE END AS BOOLEAN)  AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(promise_plan_balance AS INT64)  AS promise_plan_balance\n        , CAST(disconnect_risk AS STRING)  AS in_severance\n        , CAST(is_disconnected AS STRING)  AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`newportnews_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.209996Z", "completed_at": "2024-05-13T02:13:25.225095Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.238449Z", "completed_at": "2024-05-13T02:13:25.238452Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.10023283958435059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newmexico_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newmexico_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`newmexico_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'newmexicowater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(total_balance - past_due_balance AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(promise_plan_balance AS INT64)  AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`newmexico_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.215465Z", "completed_at": "2024-05-13T02:13:25.232083Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.274588Z", "completed_at": "2024-05-13T02:13:25.274593Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.09637093544006348, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.nola_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`nola_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`nola_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'nolawater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(IF(due_date != 'Jan  1 1900 12:00AM', DATE(PARSE_DATETIME('%b %d %Y  %H:%M%p',  due_date)), NULL) AS DATE)  AS due_date\n        , CAST((total_balance - past_due_balance) AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN promise_plan_balance > 0 THEN 'Y' WHEN promise_plan_balance = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(promise_plan_balance AS INT64)  AS promise_plan_balance\n        , CAST(disconnect_risk AS STRING)  AS in_severance\n        , CAST(is_disconnected AS STRING)  AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`nola_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.219510Z", "completed_at": "2024-05-13T02:13:25.232960Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.276698Z", "completed_at": "2024-05-13T02:13:25.276702Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.09699773788452148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.richmond_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`richmond_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`richmond_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'richmond' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(PARSE_DATE('%Y%m%d', DueDate) AS DATE)  AS due_date\n        , CAST(SAFE_CAST(100 * Balance - 100 * PastDueBal AS INT64) AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(SAFE_CAST(100 * PastDueBal AS INT64) AS INT64)  AS past_due_balance\n        , CAST(SAFE_CAST(100 * Balance AS INT64) AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(LEFT(AcctType, 1) AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(CASE WHEN PaymentArrangement = 'Y' THEN TRUE ELSE FALSE END AS BOOLEAN)  AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN PromisePlanBal > 0 THEN 'Y' WHEN PromisePlanBal = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(SAFE_CAST(100 * PromisePlanBal AS INT64) AS INT64)  AS promise_plan_balance\n        , CAST(DisconnectRisk AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(lihwap_amount_applied_cents AS INT64)  AS lihwap_amount_applied_cents\n        , CAST(lihwap_amount_applied_date AS DATE)  AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`richmond_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.287049Z", "completed_at": "2024-05-13T02:13:25.305203Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.362008Z", "completed_at": "2024-05-13T02:13:25.362016Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.08572006225585938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_device_user_map_device_id__last_user_id.5e3156e4f6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        device_id, last_user_id\n    from `analytics-prod-328313`.`amplitude`.`device_user_map`\n    group by device_id, last_user_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.292556Z", "completed_at": "2024-05-13T02:13:25.317935Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.363159Z", "completed_at": "2024-05-13T02:13:25.363163Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.08412981033325195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.sj_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`sj_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`sj_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'sjwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(total_balance - past_due_balance AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`sj_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.295150Z", "completed_at": "2024-05-13T02:13:25.318286Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.363407Z", "completed_at": "2024-05-13T02:13:25.363411Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.08396220207214355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.stg__scheduled_payments_lookback", "compiled": true, "compiled_code": "\n\n/*\n\nThis table stages a look at every scheduled payment and determines how much of it was outstanding as of\neach day starting the SECOND day after it was due up through yesterday.\n\nFor a scheduled payment that is paid as scheduled, the outstanding amount will be $0 for every day\nchecked.\n\nThis uses a generous definition of past due (a full day elapses after the day the payment was scheduled for).\n*/\n\nWITH\ndate_spine AS (SELECT\n    *\nFROM\n    UNNEST(GENERATE_DATE_ARRAY('2020-10-01', '2025-12-31', INTERVAL 1 DAY)) as day_start),\n\nlookback AS (\n    SELECT\n        sse_ids.acct_identifier_client_id AS client_id,\n        sse_ids.acct_identifier_obligation_id AS obligation_id,\n        finance.jurisdiction,\n        finance.acct_identifier_scheduled_payment_id AS scheduled_payment_id,\n        finance.acct_identifier_scheduled_for,\n        date_spine.day_start AS as_of_date,\n        DATE_ADD(DATE(finance.acct_identifier_scheduled_for), INTERVAL 2 DAY) AS target_date,\n        SUM(finance.amount) AS total_amount_cents\n    FROM\n        `analytics-prod-328313`.`finance`.`single_sided_entry` AS finance\n    LEFT JOIN `analytics-prod-328313`.`finance`.`sse_ids` AS sse_ids ON finance.event_id = sse_ids.event_id\n    LEFT JOIN date_spine AS date_spine\n        ON\n            DATE_TRUNC(finance.acct_identifier_scheduled_for, DAY) <= DATE_TRUNC(CURRENT_TIMESTAMP(), DAY)\n            AND finance.effective_at <= (TIMESTAMP(date_spine.day_start))\n    LEFT JOIN\n        `analytics-prod-328313`.`promisepay`.`customer` AS customer\n        ON\n            sse_ids.jurisdiction_x_client_id\n            = customer.jurisdiction_x_id\n    WHERE\n        1 = 1\n        -- Pretty generous definition of past due -- not past due until 2nd day after payment was scheduled\n        AND DATE(finance.acct_identifier_scheduled_for) <= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND DATE(date_spine.day_start) >= DATE_ADD(DATE(finance.acct_identifier_scheduled_for), INTERVAL 2 DAY)\n        -- Include pending payments so that if someone paid via ACH but it hasn't cleared, \n        -- we don't treat that as past due.\n        AND finance.event_status IN ('Pending', 'Recorded')\n        -- AND DATE(date_spine.day_start) = DATE('2024-05-01')\n        AND NOT is_test_account\n    GROUP BY\n        ALL\n)\n\nSELECT\n    *,\n    LAG(total_amount_cents)\n        OVER\n        (\n            PARTITION BY client_id, jurisdiction, scheduled_payment_id\n            ORDER BY as_of_date\n        ) AS previous_total_amount_cents\nFROM lookback", "relation_name": "`analytics-prod-328313`.`finance`.`stg__scheduled_payments_lookback`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.298229Z", "completed_at": "2024-05-13T02:13:25.321732Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.364223Z", "completed_at": "2024-05-13T02:13:25.364227Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08440589904785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.upcoming_payments_client_level", "compiled": true, "compiled_code": "SELECT\n    jurisdiction,\n    client_id,\n    jurisdiction_x_client_id,\n    COUNT(*) AS num_scheduled_payments,\n    AVG(amount) AS avg_scheduled_amount\nFROM\n    `analytics-prod-328313`.`finance`.`upcoming_payments`\nGROUP BY ALL", "relation_name": "`analytics-prod-328313`.`finance`.`upcoming_payments_client_level`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.300057Z", "completed_at": "2024-05-13T02:13:25.322281Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.365202Z", "completed_at": "2024-05-13T02:13:25.365206Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.08476972579956055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.toledo_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`toledo_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`toledo_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'toledo' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(total_balance - past_due_balance AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(relief_granted AS INT64)  AS relief_amount\n        , CAST(relief_balance AS INT64)  AS relief_balance\n        , CAST(compliance_total_balance AS INT64)  AS compliance_total_balance\n        , CAST(compliance_past_due_balance AS INT64)  AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(CAST(CASE WHEN acct_type = 'R' THEN ACCT_ELIGIBLE ELSE 'N' END AS STRING) AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(no_owner_permission AS STRING)  AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`toledo_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.302650Z", "completed_at": "2024-05-13T02:13:25.322552Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.365436Z", "completed_at": "2024-05-13T02:13:25.365439Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08485198020935059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_delta_rows_account_number_hashed__UPLOAD_DATE.b4d51c14ef", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, UPLOAD_DATE\n    from `analytics-prod-328313`.`utility_data`.`toledo_delta_rows`\n    group by account_number_hashed, UPLOAD_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.305452Z", "completed_at": "2024-05-13T02:13:25.325407Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.365664Z", "completed_at": "2024-05-13T02:13:25.365668Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.08494782447814941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.veoliany_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`veoliany_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`veoliany_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'veolianywater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(PARSE_DATE('@%B %d, %Y', due_date) AS DATE)  AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(disconnect_risk AS STRING)  AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`veoliany_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.309125Z", "completed_at": "2024-05-13T02:13:25.360984Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.367208Z", "completed_at": "2024-05-13T02:13:25.367212Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.08552193641662598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.washington_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`washington_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`washington_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'washingtonwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(total_balance - past_due_balance AS INT64)  AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(CASE WHEN SAFE_CAST(promise_plan_balance AS INT64) > 0 THEN 'Y' WHEN SAFE_CAST(promise_plan_balance AS INT64) = 0 THEN 'N' ELSE NULL END AS STRING)  AS active_promise_pay_plan\n        , CAST(promise_plan_balance AS INT64)  AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(NULL AS STRING) AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`washington_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.315635Z", "completed_at": "2024-05-13T02:13:25.361219Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.367443Z", "completed_at": "2024-05-13T02:13:25.367447Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.08471083641052246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.wssc_water_deltas_v2", "compiled": true, "compiled_code": "\n\n\nWITH dr AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`wssc_water_delta_rows`),\nc AS (SELECT * FROM `analytics-prod-328313`.`utility_data`.`wssc_water_complete_with_eligibility`)\n\n\n    \n    \n        \n\nSELECT \n  'wsscwater' as jurisdiction\n        , CAST(account_number_hashed AS STRING)  AS account_number_hashed\n        , CAST(due_date AS DATE)  AS due_date\n        , CAST(NULL AS INT64) AS outstanding_new_bill\n        , CAST(NULL AS INT64) AS current_balance\n        , CAST(past_due_balance AS INT64)  AS past_due_balance\n        , CAST(total_balance AS INT64)  AS total_balance\n        , CAST(NULL AS INT64) AS relief_amount\n        , CAST(NULL AS INT64) AS relief_balance\n        , CAST(NULL AS INT64) AS compliance_total_balance\n        , CAST(NULL AS INT64) AS compliance_past_due_balance\n        , CAST(NULL AS INT64) AS sanitation_balance\n        , CAST(NULL AS DATE) AS bill_date\n        , CAST(acct_type AS STRING)  AS account_type\n        , CAST(NULL AS BOOLEAN) AS cash_only\n        , CAST(ACCT_ELIGIBLE AS STRING)  AS pay_plan_eligible\n        , CAST(NULL AS BOOLEAN) AS payment_arrangement\n        , CAST(NULL AS BOOLEAN) AS stranded\n        , CAST(NULL AS STRING) AS no_owner_permission\n        , CAST(NULL AS STRING) AS customer_type\n        , CAST(NULL AS STRING) AS subregion\n        , CAST(NULL AS STRING) AS active_promise_pay_plan\n        , CAST(NULL AS INT64) AS promise_plan_balance\n        , CAST(NULL AS STRING) AS in_severance\n        , CAST(IF(has_service='N', 'Y', 'N') AS STRING)  AS disconnected\n        , CAST(NULL AS STRING) AS broken\n        , CAST(NULL AS INT64) AS lihwap_amount_applied_cents\n        , CAST(NULL AS DATE) AS lihwap_amount_applied_date\n        , CAST(gte_7_days_past_due AS BOOLEAN)  AS gte_7_days_past_due\n        , CAST(gte_15_days_past_due AS BOOLEAN)  AS gte_15_days_past_due\n        , CAST(account_missing_for_3_consecutive_days AS BOOLEAN)  AS account_missing_for_3_consecutive_days\n    , dr.UPLOAD_DATE as valid_starting\nFROM \n    c\n    JOIN dr USING(account_number_hashed, UPLOAD_DATE)\n\n\n", "relation_name": "`analytics-prod-328313`.`utility_data`.`wssc_water_deltas_v2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.318531Z", "completed_at": "2024-05-13T02:13:25.361778Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.368128Z", "completed_at": "2024-05-13T02:13:25.368132Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.08103418350219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.alexrenew_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`alexrenew_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'alexrenewwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`alexrenew_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.322808Z", "completed_at": "2024-05-13T02:13:25.363635Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.370510Z", "completed_at": "2024-05-13T02:13:25.370513Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.08237123489379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_alexrenew_water_deltas_v2_account_number_hashed__valid_starting.95def3c3fe", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`alexrenew_water_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.379071Z", "completed_at": "2024-05-13T02:13:25.404355Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.419601Z", "completed_at": "2024-05-13T02:13:25.419607Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04986381530761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.baltimore", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`baltimore_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'baltimore'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,--\n        -- if Baltimore, get payment_arrangement from list\n        bpp.client_id is NOT NULL as payment_arrangement,\n    \n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae--\n    -- if baltimore, join to list clients with pre-existing plans\n    LEFT JOIN `analytics-prod-328313.exclusions.baltimore_preexisting_plans` bpp\n        ON ae.client_id = bpp.client_id\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`baltimore`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.386650Z", "completed_at": "2024-05-13T02:13:25.407464Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.420682Z", "completed_at": "2024-05-13T02:13:25.420686Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.04972696304321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_buffalo_water_deltas_v2_account_number_hashed__valid_starting.5d5102ea8e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`buffalo_water_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.383402Z", "completed_at": "2024-05-13T02:13:25.411036Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.421332Z", "completed_at": "2024-05-13T02:13:25.421336Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.05101585388183594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.buffalo_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`buffalo_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'buffalowater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`buffalo_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.390079Z", "completed_at": "2024-05-13T02:13:25.413863Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.421581Z", "completed_at": "2024-05-13T02:13:25.421585Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04974794387817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.cal_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`cal_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'calwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`cal_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.395193Z", "completed_at": "2024-05-13T02:13:25.414416Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.422518Z", "completed_at": "2024-05-13T02:13:25.422521Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.049893856048583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.centralarkansas_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`centralarkansas_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'centralarkansaswater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`centralarkansas_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.398528Z", "completed_at": "2024-05-13T02:13:25.414653Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.422938Z", "completed_at": "2024-05-13T02:13:25.422941Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05024981498718262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_centralarkansas_water_deltas_v2_account_number_hashed__valid_starting.cabe0bedd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`centralarkansas_water_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.401065Z", "completed_at": "2024-05-13T02:13:25.418117Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.423160Z", "completed_at": "2024-05-13T02:13:25.423164Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.05037331581115723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.corona", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`corona_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'corona'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`corona`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.404947Z", "completed_at": "2024-05-13T02:13:25.418625Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.423853Z", "completed_at": "2024-05-13T02:13:25.423857Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.05005002021789551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_corona_deltas_v2_account_number_hashed__valid_starting.f2a965239d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`corona_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.407704Z", "completed_at": "2024-05-13T02:13:25.419343Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.425172Z", "completed_at": "2024-05-13T02:13:25.425175Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.050753116607666016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.gcww", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`gcww_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'gcww'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`gcww`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.411325Z", "completed_at": "2024-05-13T02:13:25.420019Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.426108Z", "completed_at": "2024-05-13T02:13:25.426111Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.05129098892211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_gcww_deltas_v2_account_number_hashed__valid_starting.6a9eaa84b0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`gcww_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.414925Z", "completed_at": "2024-05-13T02:13:25.421110Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.428000Z", "completed_at": "2024-05-13T02:13:25.428003Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.042315006256103516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.hrsd", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`hrsd_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'hrsd'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`hrsd`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.435755Z", "completed_at": "2024-05-13T02:13:25.460339Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.476229Z", "completed_at": "2024-05-13T02:13:25.476235Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04955792427062988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_hrsd_deltas_v2_account_number_hashed__valid_starting.846bb7ea04", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`hrsd_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.439602Z", "completed_at": "2024-05-13T02:13:25.464216Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.477106Z", "completed_at": "2024-05-13T02:13:25.477110Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.04918074607849121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.jackson_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`jackson_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'jacksonwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`jackson_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.443399Z", "completed_at": "2024-05-13T02:13:25.467846Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.477898Z", "completed_at": "2024-05-13T02:13:25.477901Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.049160003662109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newark_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`newark_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'newarkwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`newark_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.447707Z", "completed_at": "2024-05-13T02:13:25.470596Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.478289Z", "completed_at": "2024-05-13T02:13:25.478292Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0494840145111084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_newark_water_deltas_v2_account_number_hashed__valid_starting.621e3a3a44", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`newark_water_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.450300Z", "completed_at": "2024-05-13T02:13:25.471114Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.479042Z", "completed_at": "2024-05-13T02:13:25.479046Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.049421072006225586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newportnews_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`newportnews_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'newportnewswater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`newportnews_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.453737Z", "completed_at": "2024-05-13T02:13:25.474685Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.479492Z", "completed_at": "2024-05-13T02:13:25.479495Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04947996139526367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.newmexico_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`newmexico_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'newmexicowater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`newmexico_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.457013Z", "completed_at": "2024-05-13T02:13:25.475112Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.480186Z", "completed_at": "2024-05-13T02:13:25.480190Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.04981088638305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.nola_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`nola_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'nolawater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`nola_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.460617Z", "completed_at": "2024-05-13T02:13:25.475365Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.480596Z", "completed_at": "2024-05-13T02:13:25.480599Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.049958229064941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.richmond", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`richmond_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'richmond'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`richmond`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.464493Z", "completed_at": "2024-05-13T02:13:25.475778Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.481262Z", "completed_at": "2024-05-13T02:13:25.481266Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.04973578453063965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.sj_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`sj_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'sjwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`sj_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.468141Z", "completed_at": "2024-05-13T02:13:25.476709Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.482670Z", "completed_at": "2024-05-13T02:13:25.482673Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 0.0475461483001709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.stg__sse_with_past_due_events", "compiled": true, "compiled_code": "\n\n/*\n\nThis view is a clone of the core ledger: single sided entry. Except, instead of being a\ntrue ledger, this version adds \"phantom\" events of kind \"WentPastDue\" and \"ClearedPastDue\".\nThis breaks the ledger-ness because it means that things no longer balance to $0, but it's useful\nfor driving Client Historical State.\n\n*/\n\n-- First we filter the NDT from stg__scheduled_payments_lookback\n-- We only keep rows where the total amount is different than the amount\n-- the previous day (or the previous day was NULL because it was the first day we\n-- checked).\n\nWITH past_due_events AS (\n    SELECT\n        client_id,\n        obligation_id,\n        jurisdiction AS jurisdiction_id,\n        scheduled_payment_id,\n        acct_identifier_scheduled_for AS scheduled_for_raw,\n        TIMESTAMP(as_of_date) AS as_of_date,\n        total_amount_cents - COALESCE(previous_total_amount_cents, 0) AS change_from_previous\n    FROM `analytics-prod-328313`.`finance`.`stg__scheduled_payments_lookback`\n    WHERE\n        total_amount_cents <> COALESCE(previous_total_amount_cents, 0)\n),\n\n-- This is a tiny helper CTE that lets us determine the first event_id on each date\n-- We could just make up an event_id for these phantom events, but this lets us use one\n-- that's _roughly_ right. event_id already isn't unique, so at least this lets us roughly\n-- maintain sequence.\nmin_event_id_per_date AS (\n    SELECT\n        DATE(effective_at) AS effective_date,\n        MIN(id) AS first_event_id\n    FROM\n        `analytics-prod-328313`.`finance`.`finance_event`\n    GROUP BY 1\n)\n\n-- We SELECT * from single_sided_entry (but explicitly specify columns just for safety)\nSELECT\n    event_entry_id,\n    -- Shift event_id left by 5 places to create space for our phantom event_ids\n    event_id * 100000 AS event_id,\n    source_or_destination,\n    acct_identifier_client_id,\n    acct_identifier_jurisdiction_id,\n    acct_identifier_obligation_id,\n    acct_identifier_paid_at,\n    acct_identifier_payment_id,\n    acct_identifier_plan_id,\n    acct_identifier_provider,\n    acct_identifier_provider_payout_id,\n    acct_identifier_purpose_type,\n    acct_identifier_remit_id,\n    acct_identifier_scheduled_for,\n    acct_identifier_scheduled_payment_id,\n    acct_kind,\n    acct_type,\n    amount,\n    effective_at,\n    event_created_at,\n    event_finalized_at,\n    event_kind,\n    event_status\nFROM\n    `analytics-prod-328313`.`finance`.`single_sided_entry`\n-- Then we UNION ALL in the new phantom events\nUNION ALL\nSELECT\n    NULL AS event_entry_id, -- Not used\n    -- Get the first event_id of the day from the min_event_id_per_date CTE\n    -- Left shift it 5 places\n    -- Add an integer based on the scheduled_payment_id (which will be unique per as_of_date)\n    first_event_id * 100000\n    + ROW_NUMBER() OVER (PARTITION BY as_of_date ORDER BY scheduled_payment_id) AS event_id,\n    CAST(NULL AS STRING) AS source_or_destination, -- Not used\n    client_id AS acct_identifier_client_id,\n    jurisdiction_id AS acct_identifier_jurisdiction_id,\n    obligation_id AS acct_identifier_obligation_id,\n    CAST(NULL AS TIMESTAMP) AS acct_identifier_paid_at,\n    NULL AS acct_identifier_payment_id,\n    NULL AS acct_identifier_plan_id,\n    CAST(NULL AS STRING) AS acct_identifier_provider,\n    NULL AS acct_identifier_provider_payout_id,\n    CAST(NULL AS STRING) AS acct_identifier_purpose_type,\n    NULL AS acct_identifier_remit_id,\n    scheduled_for_raw AS acct_identifier_scheduled_for,\n    scheduled_payment_id AS acct_identifier_scheduled_payment_id,\n    'ScheduledPaymentPast' AS acct_kind, -- This is a new account_kind we're inventing\n    CAST(NULL AS STRING) AS acct_type,\n    -- This will be positive when a payment goes past due,\n    -- and negative when that past due is cleared either by being cancelled or paid.\n    change_from_previous AS amount,\n    -- We only calculate past dueness once per day, at midnight UTC.\n    as_of_date AS effective_at,\n    CAST(NULL AS TIMESTAMP) AS event_created_at,\n    CAST(NULL AS TIMESTAMP) AS event_finalized_at,\n    -- We determine event_kind depending on whether the change from previous is positive/negative\n    IF(change_from_previous > 0, 'WentPastDue', 'ClearedPastDue') AS event_kind,\n    'Recorded' AS event_status\nFROM\n    past_due_events\nLEFT JOIN min_event_id_per_date ON effective_date = DATE(as_of_date)", "relation_name": "`analytics-prod-328313`.`finance`.`stg__sse_with_past_due_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.471427Z", "completed_at": "2024-05-13T02:13:25.477503Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.484055Z", "completed_at": "2024-05-13T02:13:25.484058Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.044281959533691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.toledo", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`toledo_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'toledo'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`toledo`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.489754Z", "completed_at": "2024-05-13T02:13:25.515604Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.520728Z", "completed_at": "2024-05-13T02:13:25.520734Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03668093681335449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_toledo_deltas_v2_account_number_hashed__valid_starting.3fdfe6d6dd", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`toledo_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.492851Z", "completed_at": "2024-05-13T02:13:25.517085Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.521087Z", "completed_at": "2024-05-13T02:13:25.521091Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 0.03609871864318848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.veoliany_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`veoliany_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'veolianywater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`veoliany_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.497557Z", "completed_at": "2024-05-13T02:13:25.518689Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.521742Z", "completed_at": "2024-05-13T02:13:25.521746Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.03623318672180176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.dbt_utils_unique_combination_of_columns_veoliany_water_deltas_v2_account_number_hashed__valid_starting.2080771d32", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_number_hashed, valid_starting\n    from `analytics-prod-328313`.`utility_data`.`veoliany_water_deltas_v2`\n    group by account_number_hashed, valid_starting\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.500096Z", "completed_at": "2024-05-13T02:13:25.519832Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.523122Z", "completed_at": "2024-05-13T02:13:25.523125Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.036441802978515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.washington_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`washington_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'washingtonwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`washington_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.503465Z", "completed_at": "2024-05-13T02:13:25.520130Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:25.523399Z", "completed_at": "2024-05-13T02:13:25.523402Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.03630685806274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.wssc_water", "compiled": true, "compiled_code": "\n\n    WITH jurisdiction AS (\n    SELECT *\n    FROM `analytics-prod-328313`.`utility_data`.`wssc_water_deltas_v2`\n),\n-- Next get the PromisePay data\npromise_data AS (\n    SELECT \n        chs.client_id,\n        (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        ) AS jurisdiction,\n        TO_BASE64(c.external_id_hashed) AS account_number_hashed,\n\n        -- This is a bit hacky, but because sometimes series of PP events happen in quick succession, they all end up with\n        -- identical timestamps. It's not critical that we maintain the order (indicated by event_id), since the data is\n        -- eventually consistent. However, maintaining the correct order makes it much simpler to read a log of events.\n        -- So for events that share timestamps to the millisecond, I'm adding milliseconds based on the row_number\n        -- within that shared timestamp. This makes it so that sorting by valid_starting will maintain the proper ordering.\n        -- We subtract 1 so that events don't show up one millisecond late\n        TIMESTAMP_ADD(\n            chs.effective_time,\n            INTERVAL (ROW_NUMBER() OVER (\n                PARTITION BY chs.jurisdiction_id,\n                chs.client_id,\n                TIMESTAMP_TRUNC(chs.effective_time, MILLISECOND)\n                ORDER BY chs.pk1_event_id\n            ))-1 MILLISECOND\n        ) AS valid_starting,\n        \"PromisePay\" as source, \n        chs.*\n        EXCEPT (\n            client_id,\n            jurisdiction_id,\n            effective_time,\n            client_paid_fee,\n            municipal_fee,\n            jurisdiction_paid_fee,\n            obligation_amount,\n            past_due_scheduled_payment_amount,\n            scheduled_payment_amount,\n            obligation_assigned_total,\n            scheduled_client_paid_fee,\n            scheduled_municipal_fee\n        )\n    FROM analytics-prod-328313.looker_scratch.T4_promise_client_historical_state chs \n        -- We need this for the account_number_hashed\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c ON REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = (\n            REPLACE(\n                REPLACE(chs.jurisdiction_id, '_pay', ''),\n                '_',\n                ''\n            )\n        )\n        AND c.id = chs.client_id\n    WHERE REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = 'wsscwater'\n),\n-- Now we combine the utility data with the PromisePay data using OJOF. I'm sorry. https://community.looker.com/lookml-5/outer-join-on-false-or-how-i-learned-to-stop-fanning-out-and-love-the-null-4786\nall_events AS (\n    SELECT -- For the few fields that exist in both datasets, we coalesce them to avoid duplicated columns\n        COALESCE(c.id, pd.client_id) as client_id,\n        COALESCE(aj.jurisdiction, pd.jurisdiction) as jurisdiction,\n        COALESCE(aj.account_number_hashed, pd.account_number_hashed) AS account_number_hashed, -- Utility data is always date-stamped, but PP data is more precise\n        COALESCE(TIMESTAMP(aj.valid_starting), pd.valid_starting) as valid_starting,\n        COALESCE(pd.source, \"Utility\") as data_source,\n        aj.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed\n        ), -- We NULL-fill the columns that are only present in PP data\n        pd.*\n        EXCEPT (\n            valid_starting,\n            jurisdiction,\n            account_number_hashed,\n            client_id\n        )\n    FROM jurisdiction aj -- We JOIN customer, which lets us map external IDs to internal IDs\n        LEFT JOIN `analytics-prod-328313`.`promisepay`.`customer` c \n            ON TO_BASE64(c.external_id_hashed) = aj.account_number_hashed\n            AND REPLACE(REPLACE(c.jurisdiction, '_pay', ''), '_', '') = aj.jurisdiction -- Hold on to your butts\n        FULL OUTER JOIN promise_data pd ON FALSE\n) -- Once we have the full log of interleaved utility and PP events, we need to fill the NULLs for the values that\n-- only one type provides. LAST_VALUE with IGNORE NULLS does this, getting the most recent value of the field\n-- for that user that wasn't NULL.\nSELECT ae.client_id,\n    jurisdiction,\n    account_number_hashed,\n    -- list of fields to convert from utility files\n    -- note that for most utilities `payment_arrangement` is\n    -- processed in the same way as these fields, except in Baltimore,\n    -- so `payment_arragement` is handled in and if else statement below\n        LAST_VALUE(due_date IGNORE NULLS) OVER (client_window) as due_date,\n        LAST_VALUE(outstanding_new_bill IGNORE NULLS) OVER (client_window) as outstanding_new_bill,\n        LAST_VALUE(current_balance IGNORE NULLS) OVER (client_window) as current_balance,\n        LAST_VALUE(past_due_balance IGNORE NULLS) OVER (client_window) as past_due_balance,\n        LAST_VALUE(total_balance IGNORE NULLS) OVER (client_window) as total_balance,\n        LAST_VALUE(relief_amount IGNORE NULLS) OVER (client_window) as relief_amount,\n        LAST_VALUE(relief_balance IGNORE NULLS) OVER (client_window) as relief_balance,\n        LAST_VALUE(compliance_total_balance IGNORE NULLS) OVER (client_window) as compliance_total_balance,\n        LAST_VALUE(compliance_past_due_balance IGNORE NULLS) OVER (client_window) as compliance_past_due_balance,\n        LAST_VALUE(sanitation_balance IGNORE NULLS) OVER (client_window) as sanitation_balance,\n        LAST_VALUE(bill_date IGNORE NULLS) OVER (client_window) as bill_date,\n        LAST_VALUE(account_type IGNORE NULLS) OVER (client_window) as account_type,\n        LAST_VALUE(stranded IGNORE NULLS) OVER (client_window) as stranded,\n        LAST_VALUE(cash_only IGNORE NULLS) OVER (client_window) as cash_only,\n        LAST_VALUE(subregion IGNORE NULLS) OVER (client_window) as subregion,\n        LAST_VALUE(pay_plan_eligible IGNORE NULLS) OVER (client_window) as pay_plan_eligible,\n        LAST_VALUE(no_owner_permission IGNORE NULLS) OVER (client_window) as no_owner_permission,\n        LAST_VALUE(customer_type IGNORE NULLS) OVER (client_window) as customer_type,\n        LAST_VALUE(active_promise_pay_plan IGNORE NULLS) OVER (client_window) as active_promise_pay_plan,\n        LAST_VALUE(promise_plan_balance IGNORE NULLS) OVER (client_window) as promise_plan_balance,\n        LAST_VALUE(in_severance IGNORE NULLS) OVER (client_window) as in_severance,\n        LAST_VALUE(disconnected IGNORE NULLS) OVER (client_window) as disconnected,\n        LAST_VALUE(broken IGNORE NULLS) OVER (client_window) as broken,\n        LAST_VALUE(gte_7_days_past_due IGNORE NULLS) OVER (client_window) as gte_7_days_past_due,\n        LAST_VALUE(gte_15_days_past_due IGNORE NULLS) OVER (client_window) as gte_15_days_past_due,\n        LAST_VALUE(account_missing_for_3_consecutive_days IGNORE NULLS) OVER (client_window) as account_missing_for_3_consecutive_days,\n        LAST_VALUE(client_paid_fees_to_date IGNORE NULLS) OVER (client_window) as client_paid_fees_to_date,\n        LAST_VALUE(municipal_fees_to_date IGNORE NULLS) OVER (client_window) as municipal_fees_to_date,\n        LAST_VALUE(jurisdiction_paid_fees_to_date IGNORE NULLS) OVER (client_window) as jurisdiction_paid_fees_to_date,\n        LAST_VALUE(obligation_paid_to_date IGNORE NULLS) OVER (client_window) as obligation_paid_to_date,\n        LAST_VALUE(amount_scheduled_to_be_paid IGNORE NULLS) OVER (client_window) as amount_scheduled_to_be_paid,\n        LAST_VALUE(past_due_scheduled_amount IGNORE NULLS) OVER (client_window) as past_due_scheduled_amount,\n        LAST_VALUE(obligation_uncovered IGNORE NULLS) OVER (client_window) as obligation_uncovered,\n        LAST_VALUE(client_fees_scheduled IGNORE NULLS) OVER (client_window) as client_fees_scheduled,\n        LAST_VALUE(municipal_fees_scheduled IGNORE NULLS) OVER (client_window) as municipal_fees_scheduled,\n        LAST_VALUE(payments_currently_pending IGNORE NULLS) OVER (client_window) as payments_currently_pending,\n        LAST_VALUE(lihwap_amount_applied_cents IGNORE NULLS) OVER (client_window) as lihwap_amount_applied_cents,\n        LAST_VALUE(payment_arrangement IGNORE NULLS) OVER (client_window) as payment_arrangement,\n    pk1_event_id,\n    event_kind,\n    data_source,\n    valid_starting,\n    COALESCE(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ),\n        '2999-01-01 00:00:00'\n    ) as valid_ending,\n    IF(\n        LEAD(valid_starting) OVER (\n            PARTITION BY jurisdiction,\n            ae.client_id\n            ORDER BY valid_starting\n        ) is null,\n        TRUE,\n        FALSE\n    ) as is_current\nFROM all_events ae\n\n-- This defines the client_window used above\nWINDOW client_window AS (\n    PARTITION BY jurisdiction,\n    ae.client_id\n    ORDER BY valid_starting ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\n", "relation_name": "`analytics-prod-328313`.`utilities`.`wssc_water`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.792927Z", "completed_at": "2024-05-13T02:13:26.521099Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:26.522125Z", "completed_at": "2024-05-13T02:13:26.522138Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 1.8076817989349365, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.customer_communication_combined", "compiled": true, "compiled_code": "-- noqa: disable=all\n-- disable linting from here\n\nWITH customer_communication_combined AS ( \n    \n\n        (\n            select\n                cast('`analytics-prod-328313`.`adhoc_tables`.`buffalo_data_enrichment_comms`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`template_id` as INT64) as `template_id` ,\n                    cast(`template_version_id` as STRING) as `template_version_id` ,\n                    cast(`channel` as STRING) as `channel` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`template_name` as STRING) as `template_name` ,\n                    cast(`template_type` as STRING) as `template_type` ,\n                    cast(`payment_id` as STRING) as `payment_id` ,\n                    cast(`payment_key` as STRING) as `payment_key` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(null as STRING) as `utm_content` \n\n            from `analytics-prod-328313`.`adhoc_tables`.`buffalo_data_enrichment_comms`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`kustomer`.`kustomer_emails_for_customer_communication`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`template_id` as INT64) as `template_id` ,\n                    cast(`template_version_id` as STRING) as `template_version_id` ,\n                    cast(`channel` as STRING) as `channel` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`template_name` as STRING) as `template_name` ,\n                    cast(`template_type` as STRING) as `template_type` ,\n                    cast(`payment_id` as STRING) as `payment_id` ,\n                    cast(`payment_key` as STRING) as `payment_key` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(null as STRING) as `utm_content` \n\n            from `analytics-prod-328313`.`kustomer`.`kustomer_emails_for_customer_communication`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`promisepay`.`customer_communication`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`template_id` as INT64) as `template_id` ,\n                    cast(`template_version_id` as STRING) as `template_version_id` ,\n                    cast(`channel` as STRING) as `channel` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`template_name` as STRING) as `template_name` ,\n                    cast(`template_type` as STRING) as `template_type` ,\n                    cast(`payment_id` as STRING) as `payment_id` ,\n                    cast(`payment_key` as STRING) as `payment_key` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`utm_content` as STRING) as `utm_content` \n\n            from `analytics-prod-328313`.`promisepay`.`customer_communication`\n\n            \n        )\n\n        \n),\n-- noqa: enable=all\n-- re-enable linting from here\n\ncte AS (\n    SELECT\n        id,\n        customer_id,\n        template_id,\n        template_version_id,\n        channel,\n        created_at,\n        CASE\n            -- Capture other/custom links and convert to link/utm_content\n            WHEN \n                template_type = 'other' AND template_name = 'custom' AND utm_content IS NOT NULL\n                THEN utm_content\n            WHEN\n                template_type = 'welcome' AND template_name = 'custom'\n                THEN 'login_link'\n            WHEN\n                template_type = 'other'\n                AND template_name = 'final_disconnection_not_in_plan'\n                THEN template_name\n            WHEN\n                template_type = 'other'\n                AND template_name = 'custom'\n                AND jurisdiction = 'florida_lihwap_pay'\n                AND DATE_TRUNC(\n                    created_at, DAY\n                ) BETWEEN '2023-07-14' AND '2023-07-17'\n                THEN 'relief_opt_out_fllihwap'\n            ELSE template_name\n        END AS template_name,\n        CASE\n            -- Capture other/custom links and convert to link/utm_content\n            WHEN \n                template_type = 'other' AND template_name = 'custom' AND utm_content IS NOT NULL\n                THEN 'ops_link'\n            WHEN\n                template_type = 'welcome' AND template_name = 'custom'\n                THEN 'other'\n            WHEN\n                template_type = 'other'\n                AND template_name = 'final_disconnection_not_in_plan'\n                THEN 'welcome'\n            WHEN\n                template_type = 'other'\n                AND template_name = 'custom'\n                AND jurisdiction = 'florida_lihwap_pay'\n                AND DATE_TRUNC(\n                    created_at, DAY\n                ) BETWEEN '2023-07-14' AND '2023-07-17'\n                THEN 'other'\n            ELSE template_type\n        END AS template_type,\n        payment_id,\n        payment_key,\n        jurisdiction\n    FROM\n        customer_communication_combined\n)\n\nSELECT\n    * EXCEPT (jurisdiction),\n    REPLACE(jurisdiction, '_', '') AS jurisdiction,\n    CONCAT(REPLACE(jurisdiction, '_', ''), customer_id)\n        AS jurisdiction_x_client_id\nFROM cte", "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_communication_combined`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:26.526147Z", "completed_at": "2024-05-13T02:13:26.531345Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:26.532113Z", "completed_at": "2024-05-13T02:13:26.532120Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.008035898208618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.client_comms_recipient", "compiled": true, "compiled_code": "\nSELECT\n    customer_id AS client_id,\n    REPLACE(jurisdiction, \"_\", \"\") AS jurisdiction,\n    CONCAT(REPLACE(jurisdiction, \"_\", \"\"), customer_id)\n        AS jurisdiction_x_client_id,\n    SAFE_CAST(created_at AS TIMESTAMP) AS created_time,\n    template_type,\n    template_name,\n    template_version_id\nFROM\n    `analytics-prod-328313`.`promisepay`.`customer_communication_combined`", "relation_name": "`analytics-prod-328313`.`promisepay`.`client_comms_recipient`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.697827Z", "completed_at": "2024-05-13T02:13:26.841204Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:26.842801Z", "completed_at": "2024-05-13T02:13:26.842812Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.156458854675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.customer_config_wide", "compiled": true, "compiled_code": "\n-- get attributes that are extracted from customer_config_attributes jsons\n\n\nWITH\nall_configs AS (\n        SELECT *\n        FROM\n            \n        `alexrenew-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `baltimore-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `buffalo-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `cal-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `centralarkansas-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `corona-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `gcww-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `hrsd-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `jackson-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `louisville-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newark-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newportnews-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `nola-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `richmond-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `sj-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `toledo-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `veoliany-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `wssc-water-pay.staging.customer_config_values`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `florida-lihwap-pay.analytics_promisepay_prod.customer_config_values`\n        \n    \n)\n\nSELECT\n    jurisdiction -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.allowMultipleRollIns') as allowMultipleRollIns -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.rollInSupport') as rollInSupport -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.maxDaysToAvoidCancelation') as maxDaysToAvoidCancelation -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.allowVenmoPayments') as allowVenmoPayments -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.firstPaymentConfig.minDownPaymentAmountCents') as firstPaymentConfig_minDownPaymentAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.type') as type -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.maxInstallmentAmountCents') as maxInstallmentAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.allowsReenrollment') as allowsReenrollment -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.minTransactionAmountCents') as minTransactionAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions') as planLengthOptions -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.firstPaymentConfig.required') as firstPaymentConfig_required -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.minPlanBalanceAmountCents') as minPlanBalanceAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.conditionalPlanLengthOptions') as conditionalPlanLengthOptions -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig') as paymentPlanConfig -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.firstPaymentConfig.fractionOf') as firstPaymentConfig_fractionOf -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.firstPaymentConfig.type') as firstPaymentConfig_type -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.minPlanPaymentAmountCents') as minPlanPaymentAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.minInstallmentAmountCents') as minInstallmentAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.maxPlanBalanceAmountCents') as maxPlanBalanceAmountCents -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.isPlanShorteningEnabled') as isPlanShorteningEnabled -- noqa -- noqa\n       , JSON_QUERY(config_values, '$.paymentPlanConfig.firstPaymentConfig.fraction') as firstPaymentConfig_fraction -- noqa -- noqa\n    , IF(\n        REGEXP_EXTRACT(JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions'), '^\\\\[([0-9]+)') != \"1\",\n        SAFE_CAST(REGEXP_EXTRACT(JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions'), '^\\\\[([0-9]+)') as INT64),\n        SAFE_CAST(REGEXP_EXTRACT(JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions'), '^\\\\[[0-9]{1},([0-9]+)') as INT64)\n        ) as min_plan_length\n    , SAFE_CAST(REGEXP_EXTRACT(JSON_QUERY(config_values, '$.paymentPlanConfig.planLengthOptions'), '([0-9]+)\\\\]$') as INT64)  as max_plan_length\nFROM\n    all_configs", "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_config_wide`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:24.994048Z", "completed_at": "2024-05-13T02:13:28.819384Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:28.820331Z", "completed_at": "2024-05-13T02:13:28.820343Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 3.858515977859497, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.stg__survey_long", "compiled": true, "compiled_code": "-- Ignore long lines for linting in this file\n-- noqa: disable=LT05\n\n\n-- get attributes that are extracted from survey_attributes jsons\n\n\nWITH all_surveys AS (\n        SELECT *\n        FROM\n            \n        `alexrenew-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `baltimore-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `buffalo-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `cal-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `centralarkansas-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `corona-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `gcww-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `hrsd-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `jackson-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `louisville-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newark-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `newportnews-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `nola-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `richmond-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `sj-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `toledo-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `veoliany-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `wssc-water-pay.staging.survey`\n        UNION ALL\n    \n        SELECT *\n        FROM\n            \n        `florida-lihwap-pay.analytics_promisepay_prod.survey`\n        \n    \n)\n\n, survey_wide_stg AS (\n    SELECT\n        id AS survey_response_id\n        , created_at\n        , customer_id AS client_id\n        , REPLACE(jurisdiction, \"_\", \"\") AS jurisdiction -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.residentOfAddress\") as step_1_qualifyingGroups_residentOfAddress -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.accountHolder\") as step_1_qualifyingGroups_accountHolder -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.accountHolderInHousehold\") as step_1_qualifyingGroups_accountHolderInHousehold -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.homeowner\") as step_1_qualifyingGroups_homeowner -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.sixtyFiveOrOlder\") as step_1_qualifyingGroups_sixtyFiveOrOlder -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.numPeopleInHousehold\") as step_2_numPeopleInHousehold -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.benefits.Heap\") as step_2_benefits_Heap -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.benefits.Snap\") as step_2_benefits_Snap -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.benefits.TemporaryOrPublicAssistance\") as step_2_benefits_TemporaryOrPublicAssistance -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.benefits.Ssi\") as step_2_benefits_Ssi -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.benefits.NONE_OF_THE_ABOVE_OPTION\") as step_2_benefits_NONE_OF_THE_ABOVE_OPTION -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.federalPovertyLineRange\") as step_3_federalPovertyLineRange -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.pastDueBalance\") as pastDueBalance -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.totalBalance\") as totalBalance -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.waterBalance\") as waterBalance -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.waterPastDueBalance\") as waterPastDueBalance -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.benefits.No one in my household is in any of the programs above\") as step_2_benefits_No_one_in_my_household_is_in_any_of_the_programs_above -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.NONE_OF_THE_ABOVE_OPTION\") as step_1_qualifyingGroups_NONE_OF_THE_ABOVE_OPTION -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.None of these statements apply to me\") as step_1_qualifyingGroups_None_of_these_statements_apply_to_me -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.Liheap\") as step_1_benefits_Liheap -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.SnapEbt\") as step_1_benefits_SnapEbt -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.Tanf\") as step_1_benefits_Tanf -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.Ssi\") as step_1_benefits_Ssi -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.VeteranBenefits\") as step_1_benefits_VeteranBenefits -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.householdMonthlyIncome\") as step_1_householdMonthlyIncome -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.VeteransBenefits\") as step_1_benefits_VeteransBenefits -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.NONE_OF_THE_ABOVE_OPTION\") as step_1_benefits_NONE_OF_THE_ABOVE_OPTION -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.No one in my household is in any of the programs above\") as step_1_benefits_No_one_in_my_household_is_in_any_of_the_programs_above -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.benefits.Nadie en mi hogar est\u00e1 en ninguno de los programas anteriores\") as step_1_benefits_Nadie_en_mi_hogar_esta_en_ninguno_de_los_programas_anteriores -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.numPeopleInHousehold\") as step_1_numPeopleInHousehold -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.disabled\") as step_1_qualifyingGroups_disabled -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.veteran\") as step_1_qualifyingGroups_veteran -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.federalPovertyLineRange\") as step_2_federalPovertyLineRange -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.cityResident\") as step_1_qualifyingGroups_cityResident -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.oneMeter\") as step_1_qualifyingGroups_oneMeter -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.qualifyingGroups.ownerAgreement\") as step_1_qualifyingGroups_ownerAgreement -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.homeowner\") as step_1_homeowner -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_1.accountHolder\") as step_1_accountHolder -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.Ohep\") as step_3_benefits_Ohep -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.Tca\") as step_3_benefits_Tca -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.Tdap\") as step_3_benefits_Tdap -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.Snap\") as step_3_benefits_Snap -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.Ssi\") as step_3_benefits_Ssi -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.Erap\") as step_3_benefits_Erap -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.NONE_OF_THE_ABOVE_OPTION\") as step_3_benefits_NONE_OF_THE_ABOVE_OPTION -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.householdMonthlyIncome\") as step_3_householdMonthlyIncome -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.numPeopleInHousehold\") as step_3_numPeopleInHousehold -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_4.paperlessBilling\") as step_4_paperlessBilling -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.hasLeaseWithWaterResponsibility\") as step_2_hasLeaseWithWaterResponsibility -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_2.hasLeaseWithMonthlyAmountOrInvoice\") as step_2_hasLeaseWithMonthlyAmountOrInvoice -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.socialMedia\") as step_5_whereDidYouHearAboutUs_socialMedia -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.dpwSite\") as step_5_whereDidYouHearAboutUs_dpwSite -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.sms\") as step_5_whereDidYouHearAboutUs_sms -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.friend\") as step_5_whereDidYouHearAboutUs_friend -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.community\") as step_5_whereDidYouHearAboutUs_community -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.billInsert\") as step_5_whereDidYouHearAboutUs_billInsert -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.dpwCallCenter\") as step_5_whereDidYouHearAboutUs_dpwCallCenter -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_5.whereDidYouHearAboutUs.NONE_OF_THE_ABOVE_OPTION\") as step_5_whereDidYouHearAboutUs_NONE_OF_THE_ABOVE_OPTION -- noqa -- noqa\n          , JSON_VALUE(survey_response, \"$.attestation.step_3.benefits.No one in my household is in any of the programs above\") as step_3_benefits_No_one_in_my_household_is_in_any_of_the_programs_above -- noqa -- noqa\n    FROM\n        all_surveys\n)\n\nSELECT DISTINCT\n    *\n    -- consolidate but also clarify json_paths that are versions of \"none of the above\"\n    , CASE\n        WHEN\n            question_full_path LIKE \"%benefits%\"\n            AND\n            (\n                LOWER(question_full_path) LIKE \"%none%\"\n                OR LOWER(question_full_path) LIKE \"%no_one%\"\n                OR LOWER(question_full_path) LIKE \"%nadie%\"\n            )\n            THEN \"benefits_none\"\n        WHEN\n            question_full_path LIKE \"%HearAboutUs%\"\n            AND\n            (\n                LOWER(question_full_path) LIKE \"%none%\"\n            )\n            THEN \"hearabout_none\"\n        WHEN\n            question_full_path LIKE \"%HearAboutUs%\"\n            THEN CONCAT(\"hearabout_\", REGEXP_EXTRACT(question_full_path, \"([A-Za-z]+)$\"))\n        WHEN\n            question_full_path LIKE \"%qualifying%\"\n            AND\n            (LOWER(question_full_path) LIKE \"%none%\")\n            THEN \"groups_none\"\n        ELSE REGEXP_EXTRACT(question_full_path, \"([A-Za-z]+)$\")\n    END AS question\nFROM\n    survey_wide_stg\nUNPIVOT -- noqa\n    (response for question_full_path IN (\n        step_1_qualifyingGroups_residentOfAddress , \n        step_1_qualifyingGroups_accountHolder , \n        step_1_qualifyingGroups_accountHolderInHousehold , \n        step_1_qualifyingGroups_homeowner , \n        step_1_qualifyingGroups_sixtyFiveOrOlder , \n        step_2_numPeopleInHousehold , \n        step_2_benefits_Heap , \n        step_2_benefits_Snap , \n        step_2_benefits_TemporaryOrPublicAssistance , \n        step_2_benefits_Ssi , \n        step_2_benefits_NONE_OF_THE_ABOVE_OPTION , \n        step_3_federalPovertyLineRange , \n        pastDueBalance , \n        totalBalance , \n        waterBalance , \n        waterPastDueBalance , \n        step_2_benefits_No_one_in_my_household_is_in_any_of_the_programs_above , \n        step_1_qualifyingGroups_NONE_OF_THE_ABOVE_OPTION , \n        step_1_qualifyingGroups_None_of_these_statements_apply_to_me , \n        step_1_benefits_Liheap , \n        step_1_benefits_SnapEbt , \n        step_1_benefits_Tanf , \n        step_1_benefits_Ssi , \n        step_1_benefits_VeteranBenefits , \n        step_1_householdMonthlyIncome , \n        step_1_benefits_VeteransBenefits , \n        step_1_benefits_NONE_OF_THE_ABOVE_OPTION , \n        step_1_benefits_No_one_in_my_household_is_in_any_of_the_programs_above , \n        step_1_benefits_Nadie_en_mi_hogar_esta_en_ninguno_de_los_programas_anteriores , \n        step_1_numPeopleInHousehold , \n        step_1_qualifyingGroups_disabled , \n        step_1_qualifyingGroups_veteran , \n        step_2_federalPovertyLineRange , \n        step_1_qualifyingGroups_cityResident , \n        step_1_qualifyingGroups_oneMeter , \n        step_1_qualifyingGroups_ownerAgreement , \n        step_1_homeowner , \n        step_1_accountHolder , \n        step_3_benefits_Ohep , \n        step_3_benefits_Tca , \n        step_3_benefits_Tdap , \n        step_3_benefits_Snap , \n        step_3_benefits_Ssi , \n        step_3_benefits_Erap , \n        step_3_benefits_NONE_OF_THE_ABOVE_OPTION , \n        step_3_householdMonthlyIncome , \n        step_3_numPeopleInHousehold , \n        step_4_paperlessBilling , \n        step_2_hasLeaseWithWaterResponsibility , \n        step_2_hasLeaseWithMonthlyAmountOrInvoice , \n        step_5_whereDidYouHearAboutUs_socialMedia , \n        step_5_whereDidYouHearAboutUs_dpwSite , \n        step_5_whereDidYouHearAboutUs_sms , \n        step_5_whereDidYouHearAboutUs_friend , \n        step_5_whereDidYouHearAboutUs_community , \n        step_5_whereDidYouHearAboutUs_billInsert , \n        step_5_whereDidYouHearAboutUs_dpwCallCenter , \n        step_5_whereDidYouHearAboutUs_NONE_OF_THE_ABOVE_OPTION , \n        step_3_benefits_No_one_in_my_household_is_in_any_of_the_programs_above \n    ))", "relation_name": "`analytics-prod-328313`.`promisepay`.`stg__survey_long`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:26.846732Z", "completed_at": "2024-05-13T02:13:28.957879Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:28.958545Z", "completed_at": "2024-05-13T02:13:28.958551Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 2.113793134689331, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.customer_config_long", "compiled": true, "compiled_code": "\n\n-- get attributes that are extracted from customer_config_attributes jsons\n\n\nSELECT\n    *,\n    CONCAT(jurisdiction, \"_\", rule) AS rule_id\nFROM\n    `analytics-prod-328313`.`promisepay`.`customer_config_wide`\nUNPIVOT -- noqa\n    (value for rule IN (\n        allowMultipleRollIns , \n        rollInSupport , \n        maxDaysToAvoidCancelation , \n        allowVenmoPayments , \n        firstPaymentConfig_minDownPaymentAmountCents , \n        type , \n        maxInstallmentAmountCents , \n        allowsReenrollment , \n        minTransactionAmountCents , \n        planLengthOptions , \n        firstPaymentConfig_required , \n        minPlanBalanceAmountCents , \n        conditionalPlanLengthOptions , \n        paymentPlanConfig , \n        firstPaymentConfig_fractionOf , \n        firstPaymentConfig_type , \n        minPlanPaymentAmountCents , \n        minInstallmentAmountCents , \n        maxPlanBalanceAmountCents , \n        isPlanShorteningEnabled , \n        firstPaymentConfig_fraction \n    ))", "relation_name": "`analytics-prod-328313`.`promisepay`.`customer_config_long`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:28.961591Z", "completed_at": "2024-05-13T02:13:28.964636Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:28.965343Z", "completed_at": "2024-05-13T02:13:28.965350Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.005257129669189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.promise_dwh.customer_config_snapshot", "compiled": true, "compiled_code": "\n\n    \n\n\nselect * FROM `analytics-prod-328313`.`promisepay`.`customer_config_long`\n", "relation_name": "`analytics-prod-328313`.`snapshots`.`customer_config_snapshot`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.225381Z", "completed_at": "2024-05-13T02:13:29.970769Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:29.971703Z", "completed_at": "2024-05-13T02:13:29.971714Z"}], "thread_id": "Thread-16 (worker)", "execution_time": 4.781467914581299, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.events_wide", "compiled": true, "compiled_code": "-- Ignore long lines for linting in this file\n-- noqa: disable=LT05\n\n\n\n\n\n\n\n\n\n\n\n-- Amplitude reports event sequences across a user's lifetime. In order to calculate an event's sequence in a session, we need to know the min() for the session\nWITH sequencing AS (\n    SELECT\n        -- Since session_id is not unique, we concat it with the user_id to make it more unique. We use last_user_id from the device_user_map when it exists, \n        -- but fall back to user_id when it doesn't. If the user has no user_id (because they're unidentified) we fall all the way back to device_id\n        CONCAT(CAST(session_id AS STRING), '|', COALESCE(last_user_id, user_id, device_id)) AS amplitude_session_id\n        , MIN(id) AS session_event_seq_start\n    FROM `analytics-dev-328216.amplitude.event`\n    LEFT JOIN `analytics-prod-328313`.`amplitude`.`device_user_map` AS device_user_map USING (device_id)\n    \n        -- recalculate latest day's data + previous\n        WHERE client_event_time >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 2 DAY)\n\n    \n    GROUP BY 1\n)\n\nSELECT\n    CONCAT(CAST(session_id AS STRING), '|', COALESCE(last_user_id, user_id, device_id)) AS amplitude_session_id\n    , CASE\n        WHEN session_id > 0 -- When events are part of an actual session\n            THEN TIMESTAMP_MILLIS(session_id)\n        ELSE client_event_time -- When session_id = -1, event was server-fired, could be async\n    END AS session_start_time\n    -- We use last_user_id from the device_user_map when it exists, but fall back to user_id when it doesn't.\n    , COALESCE(last_user_id, user_id) AS user_id\n    , device_id\n    , device_brand\n    , device_carrier\n    , device_family\n    , device_manufacturer\n    , device_model\n    , device_type\n    , os_name\n    , os_version\n    , platform\n    , app\n    , `language`\n    , project_name\n    -- Because user_creation_time is tied to user_id, we rely on last_user_creation_time from device_user_map when it exists\n    , COALESCE(last_user_creation_time, user_creation_time) AS user_creation_time\n    -- Jurisidiction is stored as an event_property, but is actually a user_property so we explicitly pull it out here\n    , JSON_VALUE(event_properties, '$.jurisdiction') AS jurisdiction\n    , MIN(city) AS city\n    , MIN(dma) AS dma\n    , MIN(region) AS region\n    , MIN(country) AS country\n    -- We flatten all the user_attributes into their own columns here and wrap them in MIN() so that any attributes that were set during the session are applied to the whole session\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.referrer')) AS referrer -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.utm_content')) AS utm_content -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_referring_domain')) AS initial_referring_domain -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_utm_campaign')) AS initial_utm_campaign -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_utm_content')) AS initial_utm_content -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.referring_domain')) AS referring_domain -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_utm_medium')) AS initial_utm_medium -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.utm_source')) AS utm_source -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_utm_source')) AS initial_utm_source -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.is_admin')) AS is_admin -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.id')) AS id -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_referrer')) AS initial_referrer -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.utm_campaign')) AS utm_campaign -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.utm_medium')) AS utm_medium -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.account_type')) AS account_type -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.utm_term')) AS utm_term -- noqa\n     -- noqa\n        , MIN(JSON_VALUE(user_properties, '$.initial_utm_term')) AS initial_utm_term -- noqa\n     -- noqa\n    -- This creates an array of structs for each event that happens within the session. This nested format takes advantage of BigQuery performance optimizations\n    , ARRAY_AGG(\n        STRUCT(\n            client_event_time\n            , amplitude_id\n            , event_type\n            , id AS lifetime_event_sequence\n            , 1 + id - session_event_seq_start AS session_event_sequence\n            -- We flatten all the event_attributes into their own columns here, except \"jurisdiction\", which is explicitly included at the session level above\n                , JSON_VALUE(event_properties, '$.on_behalf_of_user_id') AS `on_behalf_of_user_id`\n                , JSON_VALUE(event_properties, '$.text') AS `text`\n                , JSON_VALUE(event_properties, '$.is_client_initiated') AS `is_client_initiated`\n                , JSON_VALUE(event_properties, '$.machineIp') AS `machineIp`\n                , JSON_VALUE(event_properties, '$.questionnaire_step') AS `questionnaire_step`\n                , JSON_VALUE(event_properties, '$.utm_medium') AS `utm_medium`\n                , JSON_VALUE(event_properties, '$.splitVersionNumber') AS `splitVersionNumber`\n                , JSON_VALUE(event_properties, '$.time') AS `time`\n                , JSON_VALUE(event_properties, '$.is_at_risk') AS `is_at_risk`\n                , JSON_VALUE(event_properties, '$.is_eligible_for_extension') AS `is_eligible_for_extension`\n                , JSON_VALUE(event_properties, '$.treatment') AS `treatment`\n                , JSON_VALUE(event_properties, '$.day') AS `day`\n                , JSON_VALUE(event_properties, '$.questionnaire_id') AS `questionnaire_id`\n                , JSON_VALUE(event_properties, '$.is_past_due') AS `is_past_due`\n                , JSON_VALUE(event_properties, '$.min_installments') AS `min_installments`\n                , JSON_VALUE(event_properties, '$.keyType') AS `keyType`\n                , JSON_VALUE(event_properties, '$.status') AS `status`\n                , JSON_VALUE(event_properties, '$.utm_content') AS `utm_content`\n                , JSON_VALUE(event_properties, '$.days') AS `days`\n                , JSON_VALUE(event_properties, '$.label') AS `label`\n                , JSON_VALUE(event_properties, '$.split') AS `split`\n                , JSON_VALUE(event_properties, '$.environmentName') AS `environmentName`\n                , JSON_VALUE(event_properties, '$.num_plan_options') AS `num_plan_options`\n                , JSON_VALUE(event_properties, '$.hour') AS `hour`\n                , JSON_VALUE(event_properties, '$.option_idx') AS `option_idx`\n                , JSON_VALUE(event_properties, '$.is_new_enrollment') AS `is_new_enrollment`\n                , JSON_VALUE(event_properties, '$.is_water_off') AS `is_water_off`\n                , JSON_VALUE(event_properties, '$.is_in_collections') AS `is_in_collections`\n                , JSON_VALUE(event_properties, '$.context') AS `context`\n                , JSON_VALUE(event_properties, '$.has_error') AS `has_error`\n                , JSON_VALUE(event_properties, '$.sdk') AS `sdk`\n                , JSON_VALUE(event_properties, '$.max_installments') AS `max_installments`\n                , JSON_VALUE(event_properties, '$.source') AS `source`\n                , JSON_VALUE(event_properties, '$.plan_type') AS `plan_type`\n                , JSON_VALUE(event_properties, '$.amount_cents') AS `amount_cents`\n                , JSON_VALUE(event_properties, '$.sdkVersion') AS `sdkVersion`\n                , JSON_VALUE(event_properties, '$.obligation_amount_cents') AS `obligation_amount_cents`\n                , JSON_VALUE(event_properties, '$.num_payments') AS `num_payments`\n                , JSON_VALUE(event_properties, '$.id') AS `id`\n                , JSON_VALUE(event_properties, '$.payment_method') AS `payment_method`\n                , JSON_VALUE(event_properties, '$.environmentId') AS `environmentId`\n                , JSON_VALUE(event_properties, '$.min_installment_amount_cents') AS `min_installment_amount_cents`\n                , JSON_VALUE(event_properties, '$.machineName') AS `machineName`\n                , JSON_VALUE(event_properties, '$.type') AS `type`\n                , JSON_VALUE(event_properties, '$.max_installment_amount_cents') AS `max_installment_amount_cents`\n                , JSON_VALUE(event_properties, '$.relief_amount_cents') AS `relief_amount_cents`\n                , JSON_VALUE(event_properties, '$.lihwap_application_status') AS `lihwap_application_status`\n                , JSON_VALUE(event_properties, '$.lihwap_application_ref') AS `lihwap_application_ref`\n                , JSON_VALUE(event_properties, '$.lihwap_exit_application_reason') AS `lihwap_exit_application_reason`\n                , JSON_VALUE(event_properties, '$.bucketingKey') AS `bucketingKey`\n                , JSON_VALUE(event_properties, '$.altMobileLogin') AS `altMobileLogin`\n            -- We flatten all the other_attributes into their own columns here.\n                , JSON_VALUE(data, '$.group_ids') AS `group_ids`\n                , JSON_VALUE(data, '$.user_properties_updated') AS `user_properties_updated`\n                , JSON_VALUE(data, '$.group_first_event') AS `group_first_event`\n                , JSON_VALUE(data, '$.path') AS `path`\n                , JSON_VALUE(data, '$.first_event') AS `first_event`\n        )\n    ) AS events\nFROM\n    `analytics-dev-328216.amplitude.event`\nLEFT JOIN `analytics-prod-328313`.`amplitude`.`device_user_map` AS device_user_map USING (device_id)\nLEFT JOIN sequencing s ON s.amplitude_session_id = CONCAT(CAST(session_id AS STRING), '|', COALESCE(last_user_id, user_id))\n\n    -- recalculate latest day's data + previous\n    WHERE client_event_time >= \n    TIMESTAMP_SUB(TIMESTAMP_TRUNC(_dbt_max_partition, DAY), INTERVAL 2 DAY)\n\n\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18", "relation_name": "`analytics-prod-328313`.`amplitude`.`events_wide`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.311517Z", "completed_at": "2024-05-13T02:13:31.636348Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:31.637446Z", "completed_at": "2024-05-13T02:13:31.637465Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 6.352358818054199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.mr_client_data", "compiled": true, "compiled_code": "\n\n\n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`alexrenew_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`alexrenew_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`baltimore_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`baltimore_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`buffalo_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`buffalo_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`cal_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`cal_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`centralarkansas_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`centralarkansas_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`corona_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`corona_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`gcww_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`gcww_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`hrsd_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`hrsd_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`jackson_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`jackson_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`louisville_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`louisville_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`newark_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`newark_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`newmexico_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`newmexico_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`newportnews_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`newportnews_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`nola_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`nola_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`richmond_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`richmond_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`sj_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`sj_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`toledo_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`toledo_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`veoliany_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`veoliany_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`washington_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`washington_water_mr_data`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utility_data`.`wssc_water_mr_data`' as string) as _dbt_source_relation,\n\n                \n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`last_data_date` as DATE) as `last_data_date` \n\n            from `analytics-prod-328313`.`utility_data`.`wssc_water_mr_data`\n\n            \n        )\n\n        ", "relation_name": "`analytics-prod-328313`.`utility_data`.`mr_client_data`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:25.526204Z", "completed_at": "2024-05-13T02:13:31.845203Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:31.845780Z", "completed_at": "2024-05-13T02:13:31.845785Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 6.320682048797607, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.account_history_combined", "compiled": true, "compiled_code": "-- noqa: disable=all\n-- disable linting from here\n\n-- noqa: enable=all\n-- re-enable linting from here\nWITH unioned_utilities AS (\n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`alexrenew_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`alexrenew_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`baltimore`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`baltimore`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`buffalo_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`buffalo_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`cal_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`cal_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`centralarkansas_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`centralarkansas_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`corona`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`corona`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`gcww`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`gcww`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`hrsd`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`hrsd`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`jackson_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`jackson_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`louisville_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`louisville_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`newark_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`newark_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`newmexico_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`newmexico_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`newportnews_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`newportnews_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`nola_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`nola_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`richmond`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`richmond`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`sj_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`sj_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`toledo`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`toledo`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`veoliany_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`veoliany_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`washington_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`washington_water`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`analytics-prod-328313`.`utilities`.`wssc_water`' as string) as _dbt_source_relation,\n\n                \n                    cast(`client_id` as INT64) as `client_id` ,\n                    cast(`jurisdiction` as STRING) as `jurisdiction` ,\n                    cast(`account_number_hashed` as STRING) as `account_number_hashed` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`outstanding_new_bill` as INT64) as `outstanding_new_bill` ,\n                    cast(`current_balance` as INT64) as `current_balance` ,\n                    cast(`past_due_balance` as INT64) as `past_due_balance` ,\n                    cast(`total_balance` as INT64) as `total_balance` ,\n                    cast(`relief_amount` as INT64) as `relief_amount` ,\n                    cast(`relief_balance` as INT64) as `relief_balance` ,\n                    cast(`compliance_total_balance` as INT64) as `compliance_total_balance` ,\n                    cast(`compliance_past_due_balance` as INT64) as `compliance_past_due_balance` ,\n                    cast(`sanitation_balance` as INT64) as `sanitation_balance` ,\n                    cast(`bill_date` as DATE) as `bill_date` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`stranded` as BOOLEAN) as `stranded` ,\n                    cast(`cash_only` as BOOLEAN) as `cash_only` ,\n                    cast(`subregion` as STRING) as `subregion` ,\n                    cast(`pay_plan_eligible` as STRING) as `pay_plan_eligible` ,\n                    cast(`no_owner_permission` as STRING) as `no_owner_permission` ,\n                    cast(`customer_type` as STRING) as `customer_type` ,\n                    cast(`active_promise_pay_plan` as STRING) as `active_promise_pay_plan` ,\n                    cast(`promise_plan_balance` as INT64) as `promise_plan_balance` ,\n                    cast(`in_severance` as STRING) as `in_severance` ,\n                    cast(`disconnected` as STRING) as `disconnected` ,\n                    cast(`broken` as STRING) as `broken` ,\n                    cast(`gte_7_days_past_due` as BOOLEAN) as `gte_7_days_past_due` ,\n                    cast(`gte_15_days_past_due` as BOOLEAN) as `gte_15_days_past_due` ,\n                    cast(`account_missing_for_3_consecutive_days` as BOOLEAN) as `account_missing_for_3_consecutive_days` ,\n                    cast(`client_paid_fees_to_date` as FLOAT64) as `client_paid_fees_to_date` ,\n                    cast(`municipal_fees_to_date` as FLOAT64) as `municipal_fees_to_date` ,\n                    cast(`jurisdiction_paid_fees_to_date` as FLOAT64) as `jurisdiction_paid_fees_to_date` ,\n                    cast(`obligation_paid_to_date` as FLOAT64) as `obligation_paid_to_date` ,\n                    cast(`amount_scheduled_to_be_paid` as FLOAT64) as `amount_scheduled_to_be_paid` ,\n                    cast(`past_due_scheduled_amount` as FLOAT64) as `past_due_scheduled_amount` ,\n                    cast(`obligation_uncovered` as FLOAT64) as `obligation_uncovered` ,\n                    cast(`client_fees_scheduled` as FLOAT64) as `client_fees_scheduled` ,\n                    cast(`municipal_fees_scheduled` as FLOAT64) as `municipal_fees_scheduled` ,\n                    cast(`payments_currently_pending` as INT64) as `payments_currently_pending` ,\n                    cast(`lihwap_amount_applied_cents` as INT64) as `lihwap_amount_applied_cents` ,\n                    cast(`payment_arrangement` as BOOLEAN) as `payment_arrangement` ,\n                    cast(`pk1_event_id` as INT64) as `pk1_event_id` ,\n                    cast(`event_kind` as STRING) as `event_kind` ,\n                    cast(`data_source` as STRING) as `data_source` ,\n                    cast(`valid_starting` as TIMESTAMP) as `valid_starting` ,\n                    cast(`valid_ending` as TIMESTAMP) as `valid_ending` ,\n                    cast(`is_current` as BOOLEAN) as `is_current` \n\n            from `analytics-prod-328313`.`utilities`.`wssc_water`\n\n            \n        )\n\n        )\nSELECT \n   *,\n   CONCAT(jurisdiction, client_id) AS jurisdiction_x_client_id,\n   total_balance - LAG(total_balance) OVER (PARTITION BY client_id, jurisdiction ORDER BY valid_starting) AS delta_total_balance_dbt\nFROM unioned_utilities", "relation_name": "`analytics-prod-328313`.`utilities`.`account_history_combined`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:31.849506Z", "completed_at": "2024-05-13T02:13:31.860743Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:31.861298Z", "completed_at": "2024-05-13T02:13:31.861303Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.01445913314819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.account_history_combined_current", "compiled": true, "compiled_code": "\nSELECT * FROM `analytics-prod-328313`.`utilities`.`account_history_combined`\nWHERE is_current", "relation_name": "`analytics-prod-328313`.`utilities`.`account_history_combined_current`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:31.852088Z", "completed_at": "2024-05-13T02:13:31.861553Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:31.863074Z", "completed_at": "2024-05-13T02:13:31.863078Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.01572704315185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.lw_gte_7_days_past_due", "compiled": true, "compiled_code": "\n\nSELECT\n    account_number_hashed,\n    MAX(valid_ending) AS last_day_zero_past_due\nFROM `analytics-prod-328313`.`utilities`.`account_history_combined`\nWHERE\n    (past_due_balance = 0 OR past_due_balance IS NULL)\n    AND jurisdiction = 'louisvillewater'\nGROUP BY 1", "relation_name": "`analytics-prod-328313`.`utilities`.`lw_gte_7_days_past_due`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:31.854115Z", "completed_at": "2024-05-13T02:13:31.862357Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:31.863318Z", "completed_at": "2024-05-13T02:13:31.863321Z"}], "thread_id": "Thread-14 (worker)", "execution_time": 0.01581287384033203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.promise_dwh.accepted_values_account_history_combined_account_type__R__I__C__M.2ffae00bec", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        account_type as value_field,\n        count(*) as n_records\n\n    from `analytics-prod-328313`.`utilities`.`account_history_combined`\n    group by account_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'R','I','C','M'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-13T02:13:28.829359Z", "completed_at": "2024-05-13T02:13:32.157436Z"}, {"name": "execute", "started_at": "2024-05-13T02:13:32.158096Z", "completed_at": "2024-05-13T02:13:32.158103Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.330338954925537, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.promise_dwh.survey_wide", "compiled": true, "compiled_code": "\nSELECT\n    survey_response_id\n    , created_at\n    , client_id\n    , jurisdiction,\n    -- there is only one response per client per created_at\n    -- 'max' is getting max string from empty strings + response string\n    \n  \n    max(\n      \n      case\n      when question = 'pastDueBalance'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `pastDueBalance`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'totalBalance'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `totalBalance`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'numPeopleInHousehold'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `numPeopleInHousehold`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Ssi'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Ssi`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'householdMonthlyIncome'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `householdMonthlyIncome`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'waterBalance'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `waterBalance`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'waterPastDueBalance'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `waterPastDueBalance`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'sixtyFiveOrOlder'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `sixtyFiveOrOlder`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'federalPovertyLineRange'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `federalPovertyLineRange`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'disabled'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `disabled`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'veteran'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `veteran`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'accountHolder'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `accountHolder`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'homeowner'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `homeowner`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Snap'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Snap`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'benefits_none'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `benefits_none`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Ohep'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Ohep`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Tca'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Tca`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Tdap'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Tdap`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Erap'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Erap`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'paperlessBilling'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `paperlessBilling`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Liheap'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Liheap`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'SnapEbt'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `SnapEbt`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Tanf'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Tanf`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'VeteransBenefits'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `VeteransBenefits`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'VeteranBenefits'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `VeteranBenefits`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'residentOfAddress'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `residentOfAddress`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'TemporaryOrPublicAssistance'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `TemporaryOrPublicAssistance`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'accountHolderInHousehold'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `accountHolderInHousehold`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'Heap'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `Heap`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hasLeaseWithWaterResponsibility'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hasLeaseWithWaterResponsibility`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hasLeaseWithMonthlyAmountOrInvoice'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hasLeaseWithMonthlyAmountOrInvoice`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_socialMedia'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_socialMedia`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_dpwSite'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_dpwSite`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_sms'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_sms`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_friend'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_friend`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_community'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_community`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_billInsert'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_billInsert`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_dpwCallCenter'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_dpwCallCenter`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'hearabout_none'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `hearabout_none`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'cityResident'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `cityResident`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'groups_none'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `groups_none`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'oneMeter'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `oneMeter`\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when question = 'ownerAgreement'\n        then response\n      else \"\"\n      end\n    )\n    \n      \n            as `ownerAgreement`\n      \n    \n    \n  \n\nFROM `analytics-prod-328313`.`promisepay`.`stg__survey_long`\nGROUP BY 1, 2, 3, 4", "relation_name": "`analytics-prod-328313`.`promisepay`.`survey_wide`"}], "elapsed_time": 9.815541982650757, "args": {"log_level": "info", "log_format_file": "debug", "exclude": [], "introspect": true, "select": [], "partial_parse_file_diff": true, "partial_parse": true, "write_json": true, "printer_width": 80, "static_parser": true, "empty_catalog": false, "profiles_dir": "/Users/maxf/.dbt", "use_colors_file": true, "send_anonymous_usage_stats": true, "populate_cache": true, "enable_legacy_logger": false, "log_path": "/Users/maxf/projects/dbtPromise/logs", "version_check": true, "macro_debugging": false, "project_dir": "/Users/maxf/projects/dbtPromise", "strict_mode": false, "quiet": false, "indirect_selection": "eager", "compile": true, "warn_error_options": {"include": [], "exclude": []}, "vars": {}, "print": true, "log_level_file": "debug", "show_resource_report": false, "log_format": "default", "invocation_command": "dbt docs generate -t prod", "cache_selected_only": false, "target": "prod", "defer": false, "static": false, "require_explicit_package_overrides_for_builtin_materializations": false, "use_colors": true, "which": "generate", "favor_state": false, "log_file_max_bytes": 10485760}}